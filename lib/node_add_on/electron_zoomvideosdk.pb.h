// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: electron_zoomvideosdk.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_electron_5fzoomvideosdk_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_electron_5fzoomvideosdk_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4022000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4022003 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_electron_5fzoomvideosdk_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_electron_5fzoomvideosdk_2eproto {
  static const ::uint32_t offsets[];
};
namespace com {
namespace electron {
namespace zoomvideo {
namespace sdk {
namespace proto {
class AddVirtualBackgroundItemParams;
struct AddVirtualBackgroundItemParamsDefaultTypeInternal;
extern AddVirtualBackgroundItemParamsDefaultTypeInternal _AddVirtualBackgroundItemParams_default_instance_;
class CallbackBody;
struct CallbackBodyDefaultTypeInternal;
extern CallbackBodyDefaultTypeInternal _CallbackBody_default_instance_;
class CallbackBody_liveTranscriptionMsgInfoParams;
struct CallbackBody_liveTranscriptionMsgInfoParamsDefaultTypeInternal;
extern CallbackBody_liveTranscriptionMsgInfoParamsDefaultTypeInternal _CallbackBody_liveTranscriptionMsgInfoParams_default_instance_;
class CallbackBody_onAudioDeviceStatusChangedParams;
struct CallbackBody_onAudioDeviceStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onAudioDeviceStatusChangedParamsDefaultTypeInternal _CallbackBody_onAudioDeviceStatusChangedParams_default_instance_;
class CallbackBody_onBindIncomingLiveStreamResponseParams;
struct CallbackBody_onBindIncomingLiveStreamResponseParamsDefaultTypeInternal;
extern CallbackBody_onBindIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onBindIncomingLiveStreamResponseParams_default_instance_;
class CallbackBody_onCalloutJoinSuccessParams;
struct CallbackBody_onCalloutJoinSuccessParamsDefaultTypeInternal;
extern CallbackBody_onCalloutJoinSuccessParamsDefaultTypeInternal _CallbackBody_onCalloutJoinSuccessParams_default_instance_;
class CallbackBody_onCameraControlRequestReceivedParams;
struct CallbackBody_onCameraControlRequestReceivedParamsDefaultTypeInternal;
extern CallbackBody_onCameraControlRequestReceivedParamsDefaultTypeInternal _CallbackBody_onCameraControlRequestReceivedParams_default_instance_;
class CallbackBody_onCameraControlRequestResultParams;
struct CallbackBody_onCameraControlRequestResultParamsDefaultTypeInternal;
extern CallbackBody_onCameraControlRequestResultParamsDefaultTypeInternal _CallbackBody_onCameraControlRequestResultParams_default_instance_;
class CallbackBody_onChatMsgDeleteNotificationParams;
struct CallbackBody_onChatMsgDeleteNotificationParamsDefaultTypeInternal;
extern CallbackBody_onChatMsgDeleteNotificationParamsDefaultTypeInternal _CallbackBody_onChatMsgDeleteNotificationParams_default_instance_;
class CallbackBody_onChatNewMessageNotifyParams;
struct CallbackBody_onChatNewMessageNotifyParamsDefaultTypeInternal;
extern CallbackBody_onChatNewMessageNotifyParamsDefaultTypeInternal _CallbackBody_onChatNewMessageNotifyParams_default_instance_;
class CallbackBody_onCloudRecordingStatusParams;
struct CallbackBody_onCloudRecordingStatusParamsDefaultTypeInternal;
extern CallbackBody_onCloudRecordingStatusParamsDefaultTypeInternal _CallbackBody_onCloudRecordingStatusParams_default_instance_;
class CallbackBody_onCommandChannelConnectResultParams;
struct CallbackBody_onCommandChannelConnectResultParamsDefaultTypeInternal;
extern CallbackBody_onCommandChannelConnectResultParamsDefaultTypeInternal _CallbackBody_onCommandChannelConnectResultParams_default_instance_;
class CallbackBody_onCommandReceivedParams;
struct CallbackBody_onCommandReceivedParamsDefaultTypeInternal;
extern CallbackBody_onCommandReceivedParamsDefaultTypeInternal _CallbackBody_onCommandReceivedParams_default_instance_;
class CallbackBody_onErrorParams;
struct CallbackBody_onErrorParamsDefaultTypeInternal;
extern CallbackBody_onErrorParamsDefaultTypeInternal _CallbackBody_onErrorParams_default_instance_;
class CallbackBody_onFailedToStartShareParams;
struct CallbackBody_onFailedToStartShareParamsDefaultTypeInternal;
extern CallbackBody_onFailedToStartShareParamsDefaultTypeInternal _CallbackBody_onFailedToStartShareParams_default_instance_;
class CallbackBody_onHostAskUnmuteParams;
struct CallbackBody_onHostAskUnmuteParamsDefaultTypeInternal;
extern CallbackBody_onHostAskUnmuteParamsDefaultTypeInternal _CallbackBody_onHostAskUnmuteParams_default_instance_;
class CallbackBody_onIncomingLiveStreamStatusResponseParams;
struct CallbackBody_onIncomingLiveStreamStatusResponseParamsDefaultTypeInternal;
extern CallbackBody_onIncomingLiveStreamStatusResponseParamsDefaultTypeInternal _CallbackBody_onIncomingLiveStreamStatusResponseParams_default_instance_;
class CallbackBody_onInviteByPhoneStatusParams;
struct CallbackBody_onInviteByPhoneStatusParamsDefaultTypeInternal;
extern CallbackBody_onInviteByPhoneStatusParamsDefaultTypeInternal _CallbackBody_onInviteByPhoneStatusParams_default_instance_;
class CallbackBody_onLiveStreamStatusChangedParams;
struct CallbackBody_onLiveStreamStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onLiveStreamStatusChangedParamsDefaultTypeInternal _CallbackBody_onLiveStreamStatusChangedParams_default_instance_;
class CallbackBody_onLiveTranscriptionMsgErrorParams;
struct CallbackBody_onLiveTranscriptionMsgErrorParamsDefaultTypeInternal;
extern CallbackBody_onLiveTranscriptionMsgErrorParamsDefaultTypeInternal _CallbackBody_onLiveTranscriptionMsgErrorParams_default_instance_;
class CallbackBody_onLiveTranscriptionStatusParams;
struct CallbackBody_onLiveTranscriptionStatusParamsDefaultTypeInternal;
extern CallbackBody_onLiveTranscriptionStatusParamsDefaultTypeInternal _CallbackBody_onLiveTranscriptionStatusParams_default_instance_;
class CallbackBody_onMicSpeakerVolumeChangedParams;
struct CallbackBody_onMicSpeakerVolumeChangedParamsDefaultTypeInternal;
extern CallbackBody_onMicSpeakerVolumeChangedParamsDefaultTypeInternal _CallbackBody_onMicSpeakerVolumeChangedParams_default_instance_;
class CallbackBody_onMultiCameraStreamStatusChangedParams;
struct CallbackBody_onMultiCameraStreamStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onMultiCameraStreamStatusChangedParamsDefaultTypeInternal _CallbackBody_onMultiCameraStreamStatusChangedParams_default_instance_;
class CallbackBody_onPropertyChangeParams;
struct CallbackBody_onPropertyChangeParamsDefaultTypeInternal;
extern CallbackBody_onPropertyChangeParamsDefaultTypeInternal _CallbackBody_onPropertyChangeParams_default_instance_;
class CallbackBody_onRawDataStatusChangedParams;
struct CallbackBody_onRawDataStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onRawDataStatusChangedParamsDefaultTypeInternal _CallbackBody_onRawDataStatusChangedParams_default_instance_;
class CallbackBody_onRemoteControlRequestReceivedParams;
struct CallbackBody_onRemoteControlRequestReceivedParamsDefaultTypeInternal;
extern CallbackBody_onRemoteControlRequestReceivedParamsDefaultTypeInternal _CallbackBody_onRemoteControlRequestReceivedParams_default_instance_;
class CallbackBody_onRemoteControlServiceInstallResultParams;
struct CallbackBody_onRemoteControlServiceInstallResultParamsDefaultTypeInternal;
extern CallbackBody_onRemoteControlServiceInstallResultParamsDefaultTypeInternal _CallbackBody_onRemoteControlServiceInstallResultParams_default_instance_;
class CallbackBody_onRemoteControlStatusParams;
struct CallbackBody_onRemoteControlStatusParamsDefaultTypeInternal;
extern CallbackBody_onRemoteControlStatusParamsDefaultTypeInternal _CallbackBody_onRemoteControlStatusParams_default_instance_;
class CallbackBody_onSelectedAudioDeviceChangedParams;
struct CallbackBody_onSelectedAudioDeviceChangedParamsDefaultTypeInternal;
extern CallbackBody_onSelectedAudioDeviceChangedParamsDefaultTypeInternal _CallbackBody_onSelectedAudioDeviceChangedParams_default_instance_;
class CallbackBody_onSessionLeaveParams;
struct CallbackBody_onSessionLeaveParamsDefaultTypeInternal;
extern CallbackBody_onSessionLeaveParamsDefaultTypeInternal _CallbackBody_onSessionLeaveParams_default_instance_;
class CallbackBody_onShareCursorDataReceivedParams;
struct CallbackBody_onShareCursorDataReceivedParamsDefaultTypeInternal;
extern CallbackBody_onShareCursorDataReceivedParamsDefaultTypeInternal _CallbackBody_onShareCursorDataReceivedParams_default_instance_;
class CallbackBody_onSpotlightVideoChangedParams;
struct CallbackBody_onSpotlightVideoChangedParamsDefaultTypeInternal;
extern CallbackBody_onSpotlightVideoChangedParamsDefaultTypeInternal _CallbackBody_onSpotlightVideoChangedParams_default_instance_;
class CallbackBody_onStartIncomingLiveStreamResponseParams;
struct CallbackBody_onStartIncomingLiveStreamResponseParamsDefaultTypeInternal;
extern CallbackBody_onStartIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onStartIncomingLiveStreamResponseParams_default_instance_;
class CallbackBody_onStopIncomingLiveStreamResponseParams;
struct CallbackBody_onStopIncomingLiveStreamResponseParamsDefaultTypeInternal;
extern CallbackBody_onStopIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onStopIncomingLiveStreamResponseParams_default_instance_;
class CallbackBody_onTestMicStatusChangedParams;
struct CallbackBody_onTestMicStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onTestMicStatusChangedParamsDefaultTypeInternal _CallbackBody_onTestMicStatusChangedParams_default_instance_;
class CallbackBody_onUnbindIncomingLiveStreamResponseParams;
struct CallbackBody_onUnbindIncomingLiveStreamResponseParamsDefaultTypeInternal;
extern CallbackBody_onUnbindIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onUnbindIncomingLiveStreamResponseParams_default_instance_;
class CallbackBody_onUserActiveAudioChangedParams;
struct CallbackBody_onUserActiveAudioChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserActiveAudioChangedParamsDefaultTypeInternal _CallbackBody_onUserActiveAudioChangedParams_default_instance_;
class CallbackBody_onUserAudioStatusChangedParams;
struct CallbackBody_onUserAudioStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserAudioStatusChangedParamsDefaultTypeInternal _CallbackBody_onUserAudioStatusChangedParams_default_instance_;
class CallbackBody_onUserHostChangedParams;
struct CallbackBody_onUserHostChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserHostChangedParamsDefaultTypeInternal _CallbackBody_onUserHostChangedParams_default_instance_;
class CallbackBody_onUserJoinParams;
struct CallbackBody_onUserJoinParamsDefaultTypeInternal;
extern CallbackBody_onUserJoinParamsDefaultTypeInternal _CallbackBody_onUserJoinParams_default_instance_;
class CallbackBody_onUserLeaveParams;
struct CallbackBody_onUserLeaveParamsDefaultTypeInternal;
extern CallbackBody_onUserLeaveParamsDefaultTypeInternal _CallbackBody_onUserLeaveParams_default_instance_;
class CallbackBody_onUserManagerChangedParams;
struct CallbackBody_onUserManagerChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserManagerChangedParamsDefaultTypeInternal _CallbackBody_onUserManagerChangedParams_default_instance_;
class CallbackBody_onUserNameChangedParams;
struct CallbackBody_onUserNameChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserNameChangedParamsDefaultTypeInternal _CallbackBody_onUserNameChangedParams_default_instance_;
class CallbackBody_onUserShareStatusChangedParams;
struct CallbackBody_onUserShareStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserShareStatusChangedParamsDefaultTypeInternal _CallbackBody_onUserShareStatusChangedParams_default_instance_;
class CallbackBody_onUserVideoStatusChangedParams;
struct CallbackBody_onUserVideoStatusChangedParamsDefaultTypeInternal;
extern CallbackBody_onUserVideoStatusChangedParamsDefaultTypeInternal _CallbackBody_onUserVideoStatusChangedParams_default_instance_;
class CallbackBody_onVideoSourceInitializeParams;
struct CallbackBody_onVideoSourceInitializeParamsDefaultTypeInternal;
extern CallbackBody_onVideoSourceInitializeParamsDefaultTypeInternal _CallbackBody_onVideoSourceInitializeParams_default_instance_;
class CameraInfos;
struct CameraInfosDefaultTypeInternal;
extern CameraInfosDefaultTypeInternal _CameraInfos_default_instance_;
class CanChatMessageBeDeletedParams;
struct CanChatMessageBeDeletedParamsDefaultTypeInternal;
extern CanChatMessageBeDeletedParamsDefaultTypeInternal _CanChatMessageBeDeletedParams_default_instance_;
class ChangeNameParams;
struct ChangeNameParamsDefaultTypeInternal;
extern ChangeNameParamsDefaultTypeInternal _ChangeNameParams_default_instance_;
class CreateRenderParams;
struct CreateRenderParamsDefaultTypeInternal;
extern CreateRenderParamsDefaultTypeInternal _CreateRenderParams_default_instance_;
class CreateVideoSDKObjParam;
struct CreateVideoSDKObjParamDefaultTypeInternal;
extern CreateVideoSDKObjParamDefaultTypeInternal _CreateVideoSDKObjParam_default_instance_;
class DeleteChatMessageParams;
struct DeleteChatMessageParamsDefaultTypeInternal;
extern DeleteChatMessageParamsDefaultTypeInternal _DeleteChatMessageParams_default_instance_;
class DestroyRendererParams;
struct DestroyRendererParamsDefaultTypeInternal;
extern DestroyRendererParamsDefaultTypeInternal _DestroyRendererParams_default_instance_;
class DisableMultiStreamVideoParams;
struct DisableMultiStreamVideoParamsDefaultTypeInternal;
extern DisableMultiStreamVideoParamsDefaultTypeInternal _DisableMultiStreamVideoParams_default_instance_;
class EnableAdminRemoteControlParams;
struct EnableAdminRemoteControlParamsDefaultTypeInternal;
extern EnableAdminRemoteControlParamsDefaultTypeInternal _EnableAdminRemoteControlParams_default_instance_;
class EnableEchoCancellationParams;
struct EnableEchoCancellationParamsDefaultTypeInternal;
extern EnableEchoCancellationParamsDefaultTypeInternal _EnableEchoCancellationParams_default_instance_;
class EnableGreenBorderParams;
struct EnableGreenBorderParamsDefaultTypeInternal;
extern EnableGreenBorderParamsDefaultTypeInternal _EnableGreenBorderParams_default_instance_;
class EnableHighFidelityMusicModeParams;
struct EnableHighFidelityMusicModeParamsDefaultTypeInternal;
extern EnableHighFidelityMusicModeParamsDefaultTypeInternal _EnableHighFidelityMusicModeParams_default_instance_;
class EnableMicOriginalInputParams;
struct EnableMicOriginalInputParamsDefaultTypeInternal;
extern EnableMicOriginalInputParamsDefaultTypeInternal _EnableMicOriginalInputParams_default_instance_;
class EnableMultiStreamVideoParams;
struct EnableMultiStreamVideoParamsDefaultTypeInternal;
extern EnableMultiStreamVideoParamsDefaultTypeInternal _EnableMultiStreamVideoParams_default_instance_;
class EnableOptimizeForSharedVideoParams;
struct EnableOptimizeForSharedVideoParamsDefaultTypeInternal;
extern EnableOptimizeForSharedVideoParamsDefaultTypeInternal _EnableOptimizeForSharedVideoParams_default_instance_;
class EnableShareDeviceAudioParams;
struct EnableShareDeviceAudioParamsDefaultTypeInternal;
extern EnableShareDeviceAudioParamsDefaultTypeInternal _EnableShareDeviceAudioParams_default_instance_;
class EnableStereoAudioParams;
struct EnableStereoAudioParamsDefaultTypeInternal;
extern EnableStereoAudioParamsDefaultTypeInternal _EnableStereoAudioParams_default_instance_;
class GetCameraList;
struct GetCameraListDefaultTypeInternal;
extern GetCameraListDefaultTypeInternal _GetCameraList_default_instance_;
class GetMicList;
struct GetMicListDefaultTypeInternal;
extern GetMicListDefaultTypeInternal _GetMicList_default_instance_;
class GetMultiCameraStreamList;
struct GetMultiCameraStreamListDefaultTypeInternal;
extern GetMultiCameraStreamListDefaultTypeInternal _GetMultiCameraStreamList_default_instance_;
class GetMyInfoParams;
struct GetMyInfoParamsDefaultTypeInternal;
extern GetMyInfoParamsDefaultTypeInternal _GetMyInfoParams_default_instance_;
class GetPhoneSupportCountryList;
struct GetPhoneSupportCountryListDefaultTypeInternal;
extern GetPhoneSupportCountryListDefaultTypeInternal _GetPhoneSupportCountryList_default_instance_;
class GetRawDataTypeParams;
struct GetRawDataTypeParamsDefaultTypeInternal;
extern GetRawDataTypeParamsDefaultTypeInternal _GetRawDataTypeParams_default_instance_;
class GetRemoteUsersParams;
struct GetRemoteUsersParamsDefaultTypeInternal;
extern GetRemoteUsersParamsDefaultTypeInternal _GetRemoteUsersParams_default_instance_;
class GetResolutionParams;
struct GetResolutionParamsDefaultTypeInternal;
extern GetResolutionParamsDefaultTypeInternal _GetResolutionParams_default_instance_;
class GetSpeakerList;
struct GetSpeakerListDefaultTypeInternal;
extern GetSpeakerListDefaultTypeInternal _GetSpeakerList_default_instance_;
class GetVirtualBackgroundItemInfoParams;
struct GetVirtualBackgroundItemInfoParamsDefaultTypeInternal;
extern GetVirtualBackgroundItemInfoParamsDefaultTypeInternal _GetVirtualBackgroundItemInfoParams_default_instance_;
class GiveUpControlRemoteCameraParams;
struct GiveUpControlRemoteCameraParamsDefaultTypeInternal;
extern GiveUpControlRemoteCameraParamsDefaultTypeInternal _GiveUpControlRemoteCameraParams_default_instance_;
class IncomingLiveStreamParams;
struct IncomingLiveStreamParamsDefaultTypeInternal;
extern IncomingLiveStreamParamsDefaultTypeInternal _IncomingLiveStreamParams_default_instance_;
class IncomingLiveStreamStatus;
struct IncomingLiveStreamStatusDefaultTypeInternal;
extern IncomingLiveStreamStatusDefaultTypeInternal _IncomingLiveStreamStatus_default_instance_;
class IncomingLiveStreamStatusList;
struct IncomingLiveStreamStatusListDefaultTypeInternal;
extern IncomingLiveStreamStatusListDefaultTypeInternal _IncomingLiveStreamStatusList_default_instance_;
class InviteByPhoneParams;
struct InviteByPhoneParamsDefaultTypeInternal;
extern InviteByPhoneParamsDefaultTypeInternal _InviteByPhoneParams_default_instance_;
class InvitePhoneUserParams;
struct InvitePhoneUserParamsDefaultTypeInternal;
extern InvitePhoneUserParamsDefaultTypeInternal _InvitePhoneUserParams_default_instance_;
class LTTLanguage;
struct LTTLanguageDefaultTypeInternal;
extern LTTLanguageDefaultTypeInternal _LTTLanguage_default_instance_;
class LTTLanguagesList;
struct LTTLanguagesListDefaultTypeInternal;
extern LTTLanguagesListDefaultTypeInternal _LTTLanguagesList_default_instance_;
class LeaveSessionParams;
struct LeaveSessionParamsDefaultTypeInternal;
extern LeaveSessionParamsDefaultTypeInternal _LeaveSessionParams_default_instance_;
class LocalCameraCtrlTurnDownParams;
struct LocalCameraCtrlTurnDownParamsDefaultTypeInternal;
extern LocalCameraCtrlTurnDownParamsDefaultTypeInternal _LocalCameraCtrlTurnDownParams_default_instance_;
class LocalCameraCtrlTurnLeftParams;
struct LocalCameraCtrlTurnLeftParamsDefaultTypeInternal;
extern LocalCameraCtrlTurnLeftParamsDefaultTypeInternal _LocalCameraCtrlTurnLeftParams_default_instance_;
class LocalCameraCtrlTurnRightParams;
struct LocalCameraCtrlTurnRightParamsDefaultTypeInternal;
extern LocalCameraCtrlTurnRightParamsDefaultTypeInternal _LocalCameraCtrlTurnRightParams_default_instance_;
class LocalCameraCtrlTurnUpParams;
struct LocalCameraCtrlTurnUpParamsDefaultTypeInternal;
extern LocalCameraCtrlTurnUpParamsDefaultTypeInternal _LocalCameraCtrlTurnUpParams_default_instance_;
class LocalCameraCtrlZoomInParams;
struct LocalCameraCtrlZoomInParamsDefaultTypeInternal;
extern LocalCameraCtrlZoomInParamsDefaultTypeInternal _LocalCameraCtrlZoomInParams_default_instance_;
class LocalCameraCtrlZoomOutParams;
struct LocalCameraCtrlZoomOutParamsDefaultTypeInternal;
extern LocalCameraCtrlZoomOutParamsDefaultTypeInternal _LocalCameraCtrlZoomOutParams_default_instance_;
class LockShareParams;
struct LockShareParamsDefaultTypeInternal;
extern LockShareParamsDefaultTypeInternal _LockShareParams_default_instance_;
class MakeHostParams;
struct MakeHostParamsDefaultTypeInternal;
extern MakeHostParamsDefaultTypeInternal _MakeHostParams_default_instance_;
class MakeManagerParams;
struct MakeManagerParamsDefaultTypeInternal;
extern MakeManagerParamsDefaultTypeInternal _MakeManagerParams_default_instance_;
class MicInfos;
struct MicInfosDefaultTypeInternal;
extern MicInfosDefaultTypeInternal _MicInfos_default_instance_;
class MultiCameraStreamInfos;
struct MultiCameraStreamInfosDefaultTypeInternal;
extern MultiCameraStreamInfosDefaultTypeInternal _MultiCameraStreamInfos_default_instance_;
class MultiCameraStreamList;
struct MultiCameraStreamListDefaultTypeInternal;
extern MultiCameraStreamListDefaultTypeInternal _MultiCameraStreamList_default_instance_;
class MuteAudioParams;
struct MuteAudioParamsDefaultTypeInternal;
extern MuteAudioParamsDefaultTypeInternal _MuteAudioParams_default_instance_;
class PhoneSupportCountryInfos;
struct PhoneSupportCountryInfosDefaultTypeInternal;
extern PhoneSupportCountryInfosDefaultTypeInternal _PhoneSupportCountryInfos_default_instance_;
class RemoteCameraCtrlTurnDownParams;
struct RemoteCameraCtrlTurnDownParamsDefaultTypeInternal;
extern RemoteCameraCtrlTurnDownParamsDefaultTypeInternal _RemoteCameraCtrlTurnDownParams_default_instance_;
class RemoteCameraCtrlTurnLeftParams;
struct RemoteCameraCtrlTurnLeftParamsDefaultTypeInternal;
extern RemoteCameraCtrlTurnLeftParamsDefaultTypeInternal _RemoteCameraCtrlTurnLeftParams_default_instance_;
class RemoteCameraCtrlTurnRightParams;
struct RemoteCameraCtrlTurnRightParamsDefaultTypeInternal;
extern RemoteCameraCtrlTurnRightParamsDefaultTypeInternal _RemoteCameraCtrlTurnRightParams_default_instance_;
class RemoteCameraCtrlTurnUpParams;
struct RemoteCameraCtrlTurnUpParamsDefaultTypeInternal;
extern RemoteCameraCtrlTurnUpParamsDefaultTypeInternal _RemoteCameraCtrlTurnUpParams_default_instance_;
class RemoteCameraCtrlZoomInParams;
struct RemoteCameraCtrlZoomInParamsDefaultTypeInternal;
extern RemoteCameraCtrlZoomInParamsDefaultTypeInternal _RemoteCameraCtrlZoomInParams_default_instance_;
class RemoteCameraCtrlZoomOutParams;
struct RemoteCameraCtrlZoomOutParamsDefaultTypeInternal;
extern RemoteCameraCtrlZoomOutParamsDefaultTypeInternal _RemoteCameraCtrlZoomOutParams_default_instance_;
class RemoveUserParams;
struct RemoveUserParamsDefaultTypeInternal;
extern RemoveUserParamsDefaultTypeInternal _RemoveUserParams_default_instance_;
class RemoveVirtualBackgroundItemParams;
struct RemoveVirtualBackgroundItemParamsDefaultTypeInternal;
extern RemoveVirtualBackgroundItemParamsDefaultTypeInternal _RemoveVirtualBackgroundItemParams_default_instance_;
class RequestControlRemoteCameraParams;
struct RequestControlRemoteCameraParamsDefaultTypeInternal;
extern RequestControlRemoteCameraParamsDefaultTypeInternal _RequestControlRemoteCameraParams_default_instance_;
class RevokeManagerParams;
struct RevokeManagerParamsDefaultTypeInternal;
extern RevokeManagerParamsDefaultTypeInternal _RevokeManagerParams_default_instance_;
class RotateMyVideoParams;
struct RotateMyVideoParamsDefaultTypeInternal;
extern RotateMyVideoParamsDefaultTypeInternal _RotateMyVideoParams_default_instance_;
class SDKVideoCapability;
struct SDKVideoCapabilityDefaultTypeInternal;
extern SDKVideoCapabilityDefaultTypeInternal _SDKVideoCapability_default_instance_;
class SDKVideoCapabilityList;
struct SDKVideoCapabilityListDefaultTypeInternal;
extern SDKVideoCapabilityListDefaultTypeInternal _SDKVideoCapabilityList_default_instance_;
class SelectCameraParams;
struct SelectCameraParamsDefaultTypeInternal;
extern SelectCameraParamsDefaultTypeInternal _SelectCameraParams_default_instance_;
class SelectMicParams;
struct SelectMicParamsDefaultTypeInternal;
extern SelectMicParamsDefaultTypeInternal _SelectMicParams_default_instance_;
class SelectSpeakerParams;
struct SelectSpeakerParamsDefaultTypeInternal;
extern SelectSpeakerParamsDefaultTypeInternal _SelectSpeakerParams_default_instance_;
class SendChatToAllParams;
struct SendChatToAllParamsDefaultTypeInternal;
extern SendChatToAllParamsDefaultTypeInternal _SendChatToAllParams_default_instance_;
class SendChatToUserParams;
struct SendChatToUserParamsDefaultTypeInternal;
extern SendChatToUserParamsDefaultTypeInternal _SendChatToUserParams_default_instance_;
class SendCommandParams;
struct SendCommandParamsDefaultTypeInternal;
extern SendCommandParamsDefaultTypeInternal _SendCommandParams_default_instance_;
class SessionPasswordParams;
struct SessionPasswordParamsDefaultTypeInternal;
extern SessionPasswordParamsDefaultTypeInternal _SessionPasswordParams_default_instance_;
class SetEchoCancellationLevelParams;
struct SetEchoCancellationLevelParamsDefaultTypeInternal;
extern SetEchoCancellationLevelParamsDefaultTypeInternal _SetEchoCancellationLevelParams_default_instance_;
class SetRawDataResolutionParams;
struct SetRawDataResolutionParamsDefaultTypeInternal;
extern SetRawDataResolutionParamsDefaultTypeInternal _SetRawDataResolutionParams_default_instance_;
class SetScreenCaptureModeParams;
struct SetScreenCaptureModeParamsDefaultTypeInternal;
extern SetScreenCaptureModeParamsDefaultTypeInternal _SetScreenCaptureModeParams_default_instance_;
class SetSpeakerParams;
struct SetSpeakerParamsDefaultTypeInternal;
extern SetSpeakerParamsDefaultTypeInternal _SetSpeakerParams_default_instance_;
class SetSpokenLanguageParams;
struct SetSpokenLanguageParamsDefaultTypeInternal;
extern SetSpokenLanguageParamsDefaultTypeInternal _SetSpokenLanguageParams_default_instance_;
class SetSuppressBackgroundNoiseLevelParams;
struct SetSuppressBackgroundNoiseLevelParamsDefaultTypeInternal;
extern SetSuppressBackgroundNoiseLevelParamsDefaultTypeInternal _SetSuppressBackgroundNoiseLevelParams_default_instance_;
class SetTimerIntervalParams;
struct SetTimerIntervalParamsDefaultTypeInternal;
extern SetTimerIntervalParamsDefaultTypeInternal _SetTimerIntervalParams_default_instance_;
class SetTranslationLanguageParams;
struct SetTranslationLanguageParamsDefaultTypeInternal;
extern SetTranslationLanguageParamsDefaultTypeInternal _SetTranslationLanguageParams_default_instance_;
class SetVideoQualityPreferenceParams;
struct SetVideoQualityPreferenceParamsDefaultTypeInternal;
extern SetVideoQualityPreferenceParamsDefaultTypeInternal _SetVideoQualityPreferenceParams_default_instance_;
class SetVirtualBackgroundItemParams;
struct SetVirtualBackgroundItemParamsDefaultTypeInternal;
extern SetVirtualBackgroundItemParamsDefaultTypeInternal _SetVirtualBackgroundItemParams_default_instance_;
class ShareAction;
struct ShareActionDefaultTypeInternal;
extern ShareActionDefaultTypeInternal _ShareAction_default_instance_;
class ShareActionList;
struct ShareActionListDefaultTypeInternal;
extern ShareActionListDefaultTypeInternal _ShareActionList_default_instance_;
class SpeakerInfos;
struct SpeakerInfosDefaultTypeInternal;
extern SpeakerInfosDefaultTypeInternal _SpeakerInfos_default_instance_;
class SpotLightVideoParams;
struct SpotLightVideoParamsDefaultTypeInternal;
extern SpotLightVideoParamsDefaultTypeInternal _SpotLightVideoParams_default_instance_;
class StartLiveStreamParams;
struct StartLiveStreamParamsDefaultTypeInternal;
extern StartLiveStreamParamsDefaultTypeInternal _StartLiveStreamParams_default_instance_;
class StartMicTestRecordingParams;
struct StartMicTestRecordingParamsDefaultTypeInternal;
extern StartMicTestRecordingParamsDefaultTypeInternal _StartMicTestRecordingParams_default_instance_;
class StartShare2ndCameraParams;
struct StartShare2ndCameraParamsDefaultTypeInternal;
extern StartShare2ndCameraParamsDefaultTypeInternal _StartShare2ndCameraParams_default_instance_;
class StartShareScreenParams;
struct StartShareScreenParamsDefaultTypeInternal;
extern StartShareScreenParamsDefaultTypeInternal _StartShareScreenParams_default_instance_;
class StartShareViewParams;
struct StartShareViewParamsDefaultTypeInternal;
extern StartShareViewParamsDefaultTypeInternal _StartShareViewParams_default_instance_;
class StartSpeakerTestParams;
struct StartSpeakerTestParamsDefaultTypeInternal;
extern StartSpeakerTestParamsDefaultTypeInternal _StartSpeakerTestParams_default_instance_;
class StartVideoPreviewParams;
struct StartVideoPreviewParamsDefaultTypeInternal;
extern StartVideoPreviewParamsDefaultTypeInternal _StartVideoPreviewParams_default_instance_;
class StopVideoPreviewParams;
struct StopVideoPreviewParamsDefaultTypeInternal;
extern StopVideoPreviewParamsDefaultTypeInternal _StopVideoPreviewParams_default_instance_;
class SubscribeMultiCameraStreamParams;
struct SubscribeMultiCameraStreamParamsDefaultTypeInternal;
extern SubscribeMultiCameraStreamParamsDefaultTypeInternal _SubscribeMultiCameraStreamParams_default_instance_;
class SubscribeParams;
struct SubscribeParamsDefaultTypeInternal;
extern SubscribeParamsDefaultTypeInternal _SubscribeParams_default_instance_;
class UnMuteAudioParams;
struct UnMuteAudioParamsDefaultTypeInternal;
extern UnMuteAudioParamsDefaultTypeInternal _UnMuteAudioParams_default_instance_;
class UnSpotLightVideoParams;
struct UnSpotLightVideoParamsDefaultTypeInternal;
extern UnSpotLightVideoParamsDefaultTypeInternal _UnSpotLightVideoParams_default_instance_;
class UnSubscribeMultiCameraStreamParams;
struct UnSubscribeMultiCameraStreamParamsDefaultTypeInternal;
extern UnSubscribeMultiCameraStreamParamsDefaultTypeInternal _UnSubscribeMultiCameraStreamParams_default_instance_;
class UnSubscribeParams;
struct UnSubscribeParamsDefaultTypeInternal;
extern UnSubscribeParamsDefaultTypeInternal _UnSubscribeParams_default_instance_;
class UserList;
struct UserListDefaultTypeInternal;
extern UserListDefaultTypeInternal _UserList_default_instance_;
class VBItemHandleList;
struct VBItemHandleListDefaultTypeInternal;
extern VBItemHandleListDefaultTypeInternal _VBItemHandleList_default_instance_;
class VBItemInfo;
struct VBItemInfoDefaultTypeInternal;
extern VBItemInfoDefaultTypeInternal _VBItemInfo_default_instance_;
class VideoSDKInitParams;
struct VideoSDKInitParamsDefaultTypeInternal;
extern VideoSDKInitParamsDefaultTypeInternal _VideoSDKInitParams_default_instance_;
class VideoSDKSessionASVStatisticInfo;
struct VideoSDKSessionASVStatisticInfoDefaultTypeInternal;
extern VideoSDKSessionASVStatisticInfoDefaultTypeInternal _VideoSDKSessionASVStatisticInfo_default_instance_;
class VideoSDKSessionASVStatisticInfoList;
struct VideoSDKSessionASVStatisticInfoListDefaultTypeInternal;
extern VideoSDKSessionASVStatisticInfoListDefaultTypeInternal _VideoSDKSessionASVStatisticInfoList_default_instance_;
class VideoSDKSessionAudioStatisticInfo;
struct VideoSDKSessionAudioStatisticInfoDefaultTypeInternal;
extern VideoSDKSessionAudioStatisticInfoDefaultTypeInternal _VideoSDKSessionAudioStatisticInfo_default_instance_;
class VideoSDKSessionAudioStatisticInfoList;
struct VideoSDKSessionAudioStatisticInfoListDefaultTypeInternal;
extern VideoSDKSessionAudioStatisticInfoListDefaultTypeInternal _VideoSDKSessionAudioStatisticInfoList_default_instance_;
class VideoSDKSessionContext;
struct VideoSDKSessionContextDefaultTypeInternal;
extern VideoSDKSessionContextDefaultTypeInternal _VideoSDKSessionContext_default_instance_;
class VideoSDKUser;
struct VideoSDKUserDefaultTypeInternal;
extern VideoSDKUserDefaultTypeInternal _VideoSDKUser_default_instance_;
class ZoomVideoSDKShareCursorData;
struct ZoomVideoSDKShareCursorDataDefaultTypeInternal;
extern ZoomVideoSDKShareCursorDataDefaultTypeInternal _ZoomVideoSDKShareCursorData_default_instance_;
}  // namespace proto
}  // namespace sdk
}  // namespace zoomvideo
}  // namespace electron
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template <>
::com::electron::zoomvideo::sdk::proto::AddVirtualBackgroundItemParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::AddVirtualBackgroundItemParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CameraInfos* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CameraInfos>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CanChatMessageBeDeletedParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CanChatMessageBeDeletedParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::ChangeNameParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ChangeNameParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CreateRenderParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CreateRenderParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::CreateVideoSDKObjParam* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CreateVideoSDKObjParam>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::DeleteChatMessageParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::DeleteChatMessageParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::DestroyRendererParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::DestroyRendererParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::DisableMultiStreamVideoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::DisableMultiStreamVideoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableAdminRemoteControlParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableAdminRemoteControlParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableEchoCancellationParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableEchoCancellationParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableGreenBorderParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableGreenBorderParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableHighFidelityMusicModeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableHighFidelityMusicModeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableMicOriginalInputParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableMicOriginalInputParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableMultiStreamVideoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableMultiStreamVideoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableOptimizeForSharedVideoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableOptimizeForSharedVideoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableShareDeviceAudioParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableShareDeviceAudioParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::EnableStereoAudioParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::EnableStereoAudioParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetCameraList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetCameraList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetMicList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetMicList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetMultiCameraStreamList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetMultiCameraStreamList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetMyInfoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetMyInfoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetPhoneSupportCountryList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetPhoneSupportCountryList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetRawDataTypeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetRawDataTypeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetRemoteUsersParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetRemoteUsersParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetResolutionParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetResolutionParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetSpeakerList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetSpeakerList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GetVirtualBackgroundItemInfoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GetVirtualBackgroundItemInfoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::GiveUpControlRemoteCameraParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::GiveUpControlRemoteCameraParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::InviteByPhoneParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::InviteByPhoneParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::InvitePhoneUserParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::InvitePhoneUserParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LTTLanguage* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LTTLanguage>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LTTLanguagesList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LTTLanguagesList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LeaveSessionParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LeaveSessionParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnDownParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnDownParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnLeftParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnLeftParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnRightParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnRightParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnUpParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnUpParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomInParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomInParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomOutParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomOutParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::LockShareParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LockShareParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::MakeHostParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::MakeHostParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::MakeManagerParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::MakeManagerParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::MicInfos* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::MicInfos>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::MultiCameraStreamList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::MultiCameraStreamList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::MuteAudioParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::MuteAudioParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnDownParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnDownParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnLeftParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnLeftParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnRightParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnRightParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnUpParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnUpParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomInParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomInParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomOutParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomOutParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoveUserParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoveUserParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RemoveVirtualBackgroundItemParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RemoveVirtualBackgroundItemParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RequestControlRemoteCameraParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RequestControlRemoteCameraParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RevokeManagerParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RevokeManagerParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::RotateMyVideoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::RotateMyVideoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SDKVideoCapability>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SelectCameraParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SelectCameraParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SelectMicParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SelectMicParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SelectSpeakerParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SelectSpeakerParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SendChatToAllParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SendChatToAllParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SendChatToUserParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SendChatToUserParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SendCommandParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SendCommandParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SessionPasswordParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SessionPasswordParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetEchoCancellationLevelParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetEchoCancellationLevelParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetRawDataResolutionParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetRawDataResolutionParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetScreenCaptureModeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetScreenCaptureModeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetSpeakerParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetSpeakerParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetSpokenLanguageParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetSpokenLanguageParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetSuppressBackgroundNoiseLevelParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetSuppressBackgroundNoiseLevelParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetTimerIntervalParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetTimerIntervalParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetTranslationLanguageParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetTranslationLanguageParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetVideoQualityPreferenceParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetVideoQualityPreferenceParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SetVirtualBackgroundItemParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SetVirtualBackgroundItemParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::ShareAction* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ShareAction>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::ShareActionList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ShareActionList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SpeakerInfos* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SpeakerInfos>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SpotLightVideoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SpotLightVideoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartLiveStreamParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartLiveStreamParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartMicTestRecordingParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartMicTestRecordingParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartShare2ndCameraParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartShare2ndCameraParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartShareScreenParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartShareScreenParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartShareViewParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartShareViewParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartSpeakerTestParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartSpeakerTestParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StartVideoPreviewParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StartVideoPreviewParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::StopVideoPreviewParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::StopVideoPreviewParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SubscribeMultiCameraStreamParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SubscribeMultiCameraStreamParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::SubscribeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SubscribeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::UnMuteAudioParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UnMuteAudioParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::UnSpotLightVideoParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UnSpotLightVideoParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::UnSubscribeMultiCameraStreamParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UnSubscribeMultiCameraStreamParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::UnSubscribeParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UnSubscribeParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::UserList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VBItemHandleList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VBItemHandleList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VBItemInfo* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VBItemInfo>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKInitParams* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKInitParams>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfoList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfoList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfoList* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfoList>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKSessionContext* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKSessionContext>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::VideoSDKUser* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(Arena*);
template <>
::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* Arena::CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace com {
namespace electron {
namespace zoomvideo {
namespace sdk {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class VideoSDKUser final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKUser) */ {
 public:
  inline VideoSDKUser() : VideoSDKUser(nullptr) {}
  ~VideoSDKUser() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKUser(const VideoSDKUser& from);
  VideoSDKUser(VideoSDKUser&& from) noexcept
    : VideoSDKUser() {
    *this = ::std::move(from);
  }

  inline VideoSDKUser& operator=(const VideoSDKUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKUser& operator=(VideoSDKUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKUser* internal_default_instance() {
    return reinterpret_cast<const VideoSDKUser*>(
               &_VideoSDKUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VideoSDKUser& a, VideoSDKUser& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKUser* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKUser* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKUser>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKUser& from);
  void MergeFrom(const VideoSDKUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKUser* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKUser";
  }
  protected:
  explicit VideoSDKUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomIdentityFieldNumber = 2,
    kUsernameFieldNumber = 3,
    kUseridFieldNumber = 20,
    kUserReferenceFieldNumber = 21,
    kZnShareActionListFieldNumber = 9,
    kPUserFieldNumber = 1,
    kAudioTypeFieldNumber = 6,
    kIsHasVideoDeviceFieldNumber = 4,
    kIsVideoOnFieldNumber = 5,
    kIsAudioMutedFieldNumber = 7,
    kIsAudioTalkingFieldNumber = 8,
    kVideoStatisticInfoWidthFieldNumber = 12,
    kVideoStatisticInfoHeightFieldNumber = 13,
    kVideoStatisticInfoFpsFieldNumber = 14,
    kVideoStatisticInfoBpfFieldNumber = 15,
    kShareStatisticInfoWidthFieldNumber = 16,
    kIsHostFieldNumber = 10,
    kIsManagerFieldNumber = 11,
    kIsVideoSpotLightedFieldNumber = 22,
    kIsIncomingLiveStreamUserFieldNumber = 23,
    kShareStatisticInfoHeightFieldNumber = 17,
    kShareStatisticInfoFpsFieldNumber = 18,
    kShareStatisticInfoBpfFieldNumber = 19,
  };
  // optional string custom_identity = 2;
  bool has_custom_identity() const;
  void clear_custom_identity() ;
  const std::string& custom_identity() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_custom_identity(Arg_&& arg, Args_... args);
  std::string* mutable_custom_identity();
  PROTOBUF_NODISCARD std::string* release_custom_identity();
  void set_allocated_custom_identity(std::string* ptr);

  private:
  const std::string& _internal_custom_identity() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_custom_identity(
      const std::string& value);
  std::string* _internal_mutable_custom_identity();

  public:
  // optional string username = 3;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional string userid = 20;
  bool has_userid() const;
  void clear_userid() ;
  const std::string& userid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userid(Arg_&& arg, Args_... args);
  std::string* mutable_userid();
  PROTOBUF_NODISCARD std::string* release_userid();
  void set_allocated_userid(std::string* ptr);

  private:
  const std::string& _internal_userid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userid(
      const std::string& value);
  std::string* _internal_mutable_userid();

  public:
  // optional string userReference = 21;
  bool has_userreference() const;
  void clear_userreference() ;
  const std::string& userreference() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_userreference(Arg_&& arg, Args_... args);
  std::string* mutable_userreference();
  PROTOBUF_NODISCARD std::string* release_userreference();
  void set_allocated_userreference(std::string* ptr);

  private:
  const std::string& _internal_userreference() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_userreference(
      const std::string& value);
  std::string* _internal_mutable_userreference();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.ShareActionList zn_shareActionList = 9;
  bool has_zn_shareactionlist() const;
  void clear_zn_shareactionlist() ;
  const ::com::electron::zoomvideo::sdk::proto::ShareActionList& zn_shareactionlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::ShareActionList* release_zn_shareactionlist();
  ::com::electron::zoomvideo::sdk::proto::ShareActionList* mutable_zn_shareactionlist();
  void set_allocated_zn_shareactionlist(::com::electron::zoomvideo::sdk::proto::ShareActionList* zn_shareactionlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::ShareActionList& _internal_zn_shareactionlist() const;
  ::com::electron::zoomvideo::sdk::proto::ShareActionList* _internal_mutable_zn_shareactionlist();
  public:
  void unsafe_arena_set_allocated_zn_shareactionlist(
      ::com::electron::zoomvideo::sdk::proto::ShareActionList* zn_shareactionlist);
  ::com::electron::zoomvideo::sdk::proto::ShareActionList* unsafe_arena_release_zn_shareactionlist();
  // optional int64 p_user = 1;
  bool has_p_user() const;
  void clear_p_user() ;
  ::int64_t p_user() const;
  void set_p_user(::int64_t value);

  private:
  ::int64_t _internal_p_user() const;
  void _internal_set_p_user(::int64_t value);

  public:
  // optional int32 audioType = 6;
  bool has_audiotype() const;
  void clear_audiotype() ;
  ::int32_t audiotype() const;
  void set_audiotype(::int32_t value);

  private:
  ::int32_t _internal_audiotype() const;
  void _internal_set_audiotype(::int32_t value);

  public:
  // optional bool isHasVideoDevice = 4;
  bool has_ishasvideodevice() const;
  void clear_ishasvideodevice() ;
  bool ishasvideodevice() const;
  void set_ishasvideodevice(bool value);

  private:
  bool _internal_ishasvideodevice() const;
  void _internal_set_ishasvideodevice(bool value);

  public:
  // optional bool isVideoOn = 5;
  bool has_isvideoon() const;
  void clear_isvideoon() ;
  bool isvideoon() const;
  void set_isvideoon(bool value);

  private:
  bool _internal_isvideoon() const;
  void _internal_set_isvideoon(bool value);

  public:
  // optional bool isAudioMuted = 7;
  bool has_isaudiomuted() const;
  void clear_isaudiomuted() ;
  bool isaudiomuted() const;
  void set_isaudiomuted(bool value);

  private:
  bool _internal_isaudiomuted() const;
  void _internal_set_isaudiomuted(bool value);

  public:
  // optional bool isAudioTalking = 8;
  bool has_isaudiotalking() const;
  void clear_isaudiotalking() ;
  bool isaudiotalking() const;
  void set_isaudiotalking(bool value);

  private:
  bool _internal_isaudiotalking() const;
  void _internal_set_isaudiotalking(bool value);

  public:
  // optional int32 VideoStatisticInfo_width = 12;
  bool has_videostatisticinfo_width() const;
  void clear_videostatisticinfo_width() ;
  ::int32_t videostatisticinfo_width() const;
  void set_videostatisticinfo_width(::int32_t value);

  private:
  ::int32_t _internal_videostatisticinfo_width() const;
  void _internal_set_videostatisticinfo_width(::int32_t value);

  public:
  // optional int32 VideoStatisticInfo_height = 13;
  bool has_videostatisticinfo_height() const;
  void clear_videostatisticinfo_height() ;
  ::int32_t videostatisticinfo_height() const;
  void set_videostatisticinfo_height(::int32_t value);

  private:
  ::int32_t _internal_videostatisticinfo_height() const;
  void _internal_set_videostatisticinfo_height(::int32_t value);

  public:
  // optional int32 VideoStatisticInfo_fps = 14;
  bool has_videostatisticinfo_fps() const;
  void clear_videostatisticinfo_fps() ;
  ::int32_t videostatisticinfo_fps() const;
  void set_videostatisticinfo_fps(::int32_t value);

  private:
  ::int32_t _internal_videostatisticinfo_fps() const;
  void _internal_set_videostatisticinfo_fps(::int32_t value);

  public:
  // optional int32 VideoStatisticInfo_bpf = 15;
  bool has_videostatisticinfo_bpf() const;
  void clear_videostatisticinfo_bpf() ;
  ::int32_t videostatisticinfo_bpf() const;
  void set_videostatisticinfo_bpf(::int32_t value);

  private:
  ::int32_t _internal_videostatisticinfo_bpf() const;
  void _internal_set_videostatisticinfo_bpf(::int32_t value);

  public:
  // optional int32 ShareStatisticInfo_width = 16;
  bool has_sharestatisticinfo_width() const;
  void clear_sharestatisticinfo_width() ;
  ::int32_t sharestatisticinfo_width() const;
  void set_sharestatisticinfo_width(::int32_t value);

  private:
  ::int32_t _internal_sharestatisticinfo_width() const;
  void _internal_set_sharestatisticinfo_width(::int32_t value);

  public:
  // optional bool isHost = 10;
  bool has_ishost() const;
  void clear_ishost() ;
  bool ishost() const;
  void set_ishost(bool value);

  private:
  bool _internal_ishost() const;
  void _internal_set_ishost(bool value);

  public:
  // optional bool isManager = 11;
  bool has_ismanager() const;
  void clear_ismanager() ;
  bool ismanager() const;
  void set_ismanager(bool value);

  private:
  bool _internal_ismanager() const;
  void _internal_set_ismanager(bool value);

  public:
  // optional bool isVideoSpotLighted = 22;
  bool has_isvideospotlighted() const;
  void clear_isvideospotlighted() ;
  bool isvideospotlighted() const;
  void set_isvideospotlighted(bool value);

  private:
  bool _internal_isvideospotlighted() const;
  void _internal_set_isvideospotlighted(bool value);

  public:
  // optional bool isIncomingLiveStreamUser = 23;
  bool has_isincominglivestreamuser() const;
  void clear_isincominglivestreamuser() ;
  bool isincominglivestreamuser() const;
  void set_isincominglivestreamuser(bool value);

  private:
  bool _internal_isincominglivestreamuser() const;
  void _internal_set_isincominglivestreamuser(bool value);

  public:
  // optional int32 ShareStatisticInfo_height = 17;
  bool has_sharestatisticinfo_height() const;
  void clear_sharestatisticinfo_height() ;
  ::int32_t sharestatisticinfo_height() const;
  void set_sharestatisticinfo_height(::int32_t value);

  private:
  ::int32_t _internal_sharestatisticinfo_height() const;
  void _internal_set_sharestatisticinfo_height(::int32_t value);

  public:
  // optional int32 ShareStatisticInfo_fps = 18;
  bool has_sharestatisticinfo_fps() const;
  void clear_sharestatisticinfo_fps() ;
  ::int32_t sharestatisticinfo_fps() const;
  void set_sharestatisticinfo_fps(::int32_t value);

  private:
  ::int32_t _internal_sharestatisticinfo_fps() const;
  void _internal_set_sharestatisticinfo_fps(::int32_t value);

  public:
  // optional int32 ShareStatisticInfo_bpf = 19;
  bool has_sharestatisticinfo_bpf() const;
  void clear_sharestatisticinfo_bpf() ;
  ::int32_t sharestatisticinfo_bpf() const;
  void set_sharestatisticinfo_bpf(::int32_t value);

  private:
  ::int32_t _internal_sharestatisticinfo_bpf() const;
  void _internal_set_sharestatisticinfo_bpf(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr custom_identity_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr userreference_;
    ::com::electron::zoomvideo::sdk::proto::ShareActionList* zn_shareactionlist_;
    ::int64_t p_user_;
    ::int32_t audiotype_;
    bool ishasvideodevice_;
    bool isvideoon_;
    bool isaudiomuted_;
    bool isaudiotalking_;
    ::int32_t videostatisticinfo_width_;
    ::int32_t videostatisticinfo_height_;
    ::int32_t videostatisticinfo_fps_;
    ::int32_t videostatisticinfo_bpf_;
    ::int32_t sharestatisticinfo_width_;
    bool ishost_;
    bool ismanager_;
    bool isvideospotlighted_;
    bool isincominglivestreamuser_;
    ::int32_t sharestatisticinfo_height_;
    ::int32_t sharestatisticinfo_fps_;
    ::int32_t sharestatisticinfo_bpf_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class UserList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.UserList) */ {
 public:
  inline UserList() : UserList(nullptr) {}
  ~UserList() override;
  explicit PROTOBUF_CONSTEXPR UserList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserList(const UserList& from);
  UserList(UserList&& from) noexcept
    : UserList() {
    *this = ::std::move(from);
  }

  inline UserList& operator=(const UserList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserList& operator=(UserList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UserList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserList* internal_default_instance() {
    return reinterpret_cast<const UserList*>(
               &_UserList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UserList& a, UserList& b) {
    a.Swap(&b);
  }
  inline void Swap(UserList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UserList& from);
  void MergeFrom(const UserList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UserList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.UserList";
  }
  protected:
  explicit UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;

  public:
  void clear_user() ;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser >*
      mutable_user();
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user(int index) const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_add_user();
  public:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(int index) const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser >&
      user() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.UserList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser > user_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class ShareAction final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.ShareAction) */ {
 public:
  inline ShareAction() : ShareAction(nullptr) {}
  ~ShareAction() override;
  explicit PROTOBUF_CONSTEXPR ShareAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareAction(const ShareAction& from);
  ShareAction(ShareAction&& from) noexcept
    : ShareAction() {
    *this = ::std::move(from);
  }

  inline ShareAction& operator=(const ShareAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareAction& operator=(ShareAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShareAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareAction* internal_default_instance() {
    return reinterpret_cast<const ShareAction*>(
               &_ShareAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShareAction& a, ShareAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareAction* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareAction>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShareAction& from);
  void MergeFrom(const ShareAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShareAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.ShareAction";
  }
  protected:
  explicit ShareAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareSourceIdFieldNumber = 1,
    kShareStatusFieldNumber = 2,
    kSubscribeFailReasonFieldNumber = 3,
    kIsAnnotationPrivilegeEnabledFieldNumber = 4,
    kShareTypeFieldNumber = 5,
  };
  // optional int32 shareSourceId = 1;
  bool has_sharesourceid() const;
  void clear_sharesourceid() ;
  ::int32_t sharesourceid() const;
  void set_sharesourceid(::int32_t value);

  private:
  ::int32_t _internal_sharesourceid() const;
  void _internal_set_sharesourceid(::int32_t value);

  public:
  // optional int32 shareStatus = 2;
  bool has_sharestatus() const;
  void clear_sharestatus() ;
  ::int32_t sharestatus() const;
  void set_sharestatus(::int32_t value);

  private:
  ::int32_t _internal_sharestatus() const;
  void _internal_set_sharestatus(::int32_t value);

  public:
  // optional int32 subscribeFailReason = 3;
  bool has_subscribefailreason() const;
  void clear_subscribefailreason() ;
  ::int32_t subscribefailreason() const;
  void set_subscribefailreason(::int32_t value);

  private:
  ::int32_t _internal_subscribefailreason() const;
  void _internal_set_subscribefailreason(::int32_t value);

  public:
  // optional bool isAnnotationPrivilegeEnabled = 4;
  bool has_isannotationprivilegeenabled() const;
  void clear_isannotationprivilegeenabled() ;
  bool isannotationprivilegeenabled() const;
  void set_isannotationprivilegeenabled(bool value);

  private:
  bool _internal_isannotationprivilegeenabled() const;
  void _internal_set_isannotationprivilegeenabled(bool value);

  public:
  // optional int32 shareType = 5;
  bool has_sharetype() const;
  void clear_sharetype() ;
  ::int32_t sharetype() const;
  void set_sharetype(::int32_t value);

  private:
  ::int32_t _internal_sharetype() const;
  void _internal_set_sharetype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.ShareAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t sharesourceid_;
    ::int32_t sharestatus_;
    ::int32_t subscribefailreason_;
    bool isannotationprivilegeenabled_;
    ::int32_t sharetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class ShareActionList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.ShareActionList) */ {
 public:
  inline ShareActionList() : ShareActionList(nullptr) {}
  ~ShareActionList() override;
  explicit PROTOBUF_CONSTEXPR ShareActionList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShareActionList(const ShareActionList& from);
  ShareActionList(ShareActionList&& from) noexcept
    : ShareActionList() {
    *this = ::std::move(from);
  }

  inline ShareActionList& operator=(const ShareActionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShareActionList& operator=(ShareActionList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ShareActionList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShareActionList* internal_default_instance() {
    return reinterpret_cast<const ShareActionList*>(
               &_ShareActionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShareActionList& a, ShareActionList& b) {
    a.Swap(&b);
  }
  inline void Swap(ShareActionList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShareActionList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ShareActionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ShareActionList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ShareActionList& from);
  void MergeFrom(const ShareActionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ShareActionList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.ShareActionList";
  }
  protected:
  explicit ShareActionList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShareActionFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 1;
  int shareaction_size() const;
  private:
  int _internal_shareaction_size() const;

  public:
  void clear_shareaction() ;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* mutable_shareaction(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::ShareAction >*
      mutable_shareaction();
  private:
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& _internal_shareaction(int index) const;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _internal_add_shareaction();
  public:
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction(int index) const;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* add_shareaction();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::ShareAction >&
      shareaction() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.ShareActionList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::ShareAction > shareaction_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VideoSDKSessionAudioStatisticInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo) */ {
 public:
  inline VideoSDKSessionAudioStatisticInfo() : VideoSDKSessionAudioStatisticInfo(nullptr) {}
  ~VideoSDKSessionAudioStatisticInfo() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKSessionAudioStatisticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKSessionAudioStatisticInfo(const VideoSDKSessionAudioStatisticInfo& from);
  VideoSDKSessionAudioStatisticInfo(VideoSDKSessionAudioStatisticInfo&& from) noexcept
    : VideoSDKSessionAudioStatisticInfo() {
    *this = ::std::move(from);
  }

  inline VideoSDKSessionAudioStatisticInfo& operator=(const VideoSDKSessionAudioStatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKSessionAudioStatisticInfo& operator=(VideoSDKSessionAudioStatisticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKSessionAudioStatisticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKSessionAudioStatisticInfo* internal_default_instance() {
    return reinterpret_cast<const VideoSDKSessionAudioStatisticInfo*>(
               &_VideoSDKSessionAudioStatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VideoSDKSessionAudioStatisticInfo& a, VideoSDKSessionAudioStatisticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKSessionAudioStatisticInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKSessionAudioStatisticInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKSessionAudioStatisticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKSessionAudioStatisticInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKSessionAudioStatisticInfo& from);
  void MergeFrom(const VideoSDKSessionAudioStatisticInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKSessionAudioStatisticInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo";
  }
  protected:
  explicit VideoSDKSessionAudioStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyFieldNumber = 1,
    kLatencyFieldNumber = 2,
    kJitterFieldNumber = 3,
    kPacketLossAvgFieldNumber = 4,
    kPacketLossMaxFieldNumber = 5,
  };
  // optional int64 frequency = 1;
  bool has_frequency() const;
  void clear_frequency() ;
  ::int64_t frequency() const;
  void set_frequency(::int64_t value);

  private:
  ::int64_t _internal_frequency() const;
  void _internal_set_frequency(::int64_t value);

  public:
  // optional int64 latency = 2;
  bool has_latency() const;
  void clear_latency() ;
  ::int64_t latency() const;
  void set_latency(::int64_t value);

  private:
  ::int64_t _internal_latency() const;
  void _internal_set_latency(::int64_t value);

  public:
  // optional int64 Jitter = 3;
  bool has_jitter() const;
  void clear_jitter() ;
  ::int64_t jitter() const;
  void set_jitter(::int64_t value);

  private:
  ::int64_t _internal_jitter() const;
  void _internal_set_jitter(::int64_t value);

  public:
  // optional float packetLossAvg = 4;
  bool has_packetlossavg() const;
  void clear_packetlossavg() ;
  float packetlossavg() const;
  void set_packetlossavg(float value);

  private:
  float _internal_packetlossavg() const;
  void _internal_set_packetlossavg(float value);

  public:
  // optional float packetLossMax = 5;
  bool has_packetlossmax() const;
  void clear_packetlossmax() ;
  float packetlossmax() const;
  void set_packetlossmax(float value);

  private:
  float _internal_packetlossmax() const;
  void _internal_set_packetlossmax(float value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t frequency_;
    ::int64_t latency_;
    ::int64_t jitter_;
    float packetlossavg_;
    float packetlossmax_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VideoSDKSessionAudioStatisticInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList) */ {
 public:
  inline VideoSDKSessionAudioStatisticInfoList() : VideoSDKSessionAudioStatisticInfoList(nullptr) {}
  ~VideoSDKSessionAudioStatisticInfoList() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKSessionAudioStatisticInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKSessionAudioStatisticInfoList(const VideoSDKSessionAudioStatisticInfoList& from);
  VideoSDKSessionAudioStatisticInfoList(VideoSDKSessionAudioStatisticInfoList&& from) noexcept
    : VideoSDKSessionAudioStatisticInfoList() {
    *this = ::std::move(from);
  }

  inline VideoSDKSessionAudioStatisticInfoList& operator=(const VideoSDKSessionAudioStatisticInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKSessionAudioStatisticInfoList& operator=(VideoSDKSessionAudioStatisticInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKSessionAudioStatisticInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKSessionAudioStatisticInfoList* internal_default_instance() {
    return reinterpret_cast<const VideoSDKSessionAudioStatisticInfoList*>(
               &_VideoSDKSessionAudioStatisticInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(VideoSDKSessionAudioStatisticInfoList& a, VideoSDKSessionAudioStatisticInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKSessionAudioStatisticInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKSessionAudioStatisticInfoList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKSessionAudioStatisticInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKSessionAudioStatisticInfoList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKSessionAudioStatisticInfoList& from);
  void MergeFrom(const VideoSDKSessionAudioStatisticInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKSessionAudioStatisticInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList";
  }
  protected:
  explicit VideoSDKSessionAudioStatisticInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAudioStatisticInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo audioStatisticInfo = 1;
  int audiostatisticinfo_size() const;
  private:
  int _internal_audiostatisticinfo_size() const;

  public:
  void clear_audiostatisticinfo() ;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* mutable_audiostatisticinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo >*
      mutable_audiostatisticinfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo& _internal_audiostatisticinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* _internal_add_audiostatisticinfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo& audiostatisticinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* add_audiostatisticinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo >&
      audiostatisticinfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo > audiostatisticinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VideoSDKSessionASVStatisticInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo) */ {
 public:
  inline VideoSDKSessionASVStatisticInfo() : VideoSDKSessionASVStatisticInfo(nullptr) {}
  ~VideoSDKSessionASVStatisticInfo() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKSessionASVStatisticInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKSessionASVStatisticInfo(const VideoSDKSessionASVStatisticInfo& from);
  VideoSDKSessionASVStatisticInfo(VideoSDKSessionASVStatisticInfo&& from) noexcept
    : VideoSDKSessionASVStatisticInfo() {
    *this = ::std::move(from);
  }

  inline VideoSDKSessionASVStatisticInfo& operator=(const VideoSDKSessionASVStatisticInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKSessionASVStatisticInfo& operator=(VideoSDKSessionASVStatisticInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKSessionASVStatisticInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKSessionASVStatisticInfo* internal_default_instance() {
    return reinterpret_cast<const VideoSDKSessionASVStatisticInfo*>(
               &_VideoSDKSessionASVStatisticInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(VideoSDKSessionASVStatisticInfo& a, VideoSDKSessionASVStatisticInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKSessionASVStatisticInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKSessionASVStatisticInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKSessionASVStatisticInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKSessionASVStatisticInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKSessionASVStatisticInfo& from);
  void MergeFrom(const VideoSDKSessionASVStatisticInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKSessionASVStatisticInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo";
  }
  protected:
  explicit VideoSDKSessionASVStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameWidthFieldNumber = 1,
    kFrameHeightFieldNumber = 2,
    kFpsFieldNumber = 3,
    kLatencyFieldNumber = 4,
    kJitterFieldNumber = 5,
    kPacketLossAvgFieldNumber = 6,
    kPacketLossMaxFieldNumber = 7,
  };
  // optional int64 frame_width = 1;
  bool has_frame_width() const;
  void clear_frame_width() ;
  ::int64_t frame_width() const;
  void set_frame_width(::int64_t value);

  private:
  ::int64_t _internal_frame_width() const;
  void _internal_set_frame_width(::int64_t value);

  public:
  // optional int64 frame_height = 2;
  bool has_frame_height() const;
  void clear_frame_height() ;
  ::int64_t frame_height() const;
  void set_frame_height(::int64_t value);

  private:
  ::int64_t _internal_frame_height() const;
  void _internal_set_frame_height(::int64_t value);

  public:
  // optional int64 fps = 3;
  bool has_fps() const;
  void clear_fps() ;
  ::int64_t fps() const;
  void set_fps(::int64_t value);

  private:
  ::int64_t _internal_fps() const;
  void _internal_set_fps(::int64_t value);

  public:
  // optional int64 latency = 4;
  bool has_latency() const;
  void clear_latency() ;
  ::int64_t latency() const;
  void set_latency(::int64_t value);

  private:
  ::int64_t _internal_latency() const;
  void _internal_set_latency(::int64_t value);

  public:
  // optional int64 Jitter = 5;
  bool has_jitter() const;
  void clear_jitter() ;
  ::int64_t jitter() const;
  void set_jitter(::int64_t value);

  private:
  ::int64_t _internal_jitter() const;
  void _internal_set_jitter(::int64_t value);

  public:
  // optional float packetLossAvg = 6;
  bool has_packetlossavg() const;
  void clear_packetlossavg() ;
  float packetlossavg() const;
  void set_packetlossavg(float value);

  private:
  float _internal_packetlossavg() const;
  void _internal_set_packetlossavg(float value);

  public:
  // optional float packetLossMax = 7;
  bool has_packetlossmax() const;
  void clear_packetlossmax() ;
  float packetlossmax() const;
  void set_packetlossmax(float value);

  private:
  float _internal_packetlossmax() const;
  void _internal_set_packetlossmax(float value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t frame_width_;
    ::int64_t frame_height_;
    ::int64_t fps_;
    ::int64_t latency_;
    ::int64_t jitter_;
    float packetlossavg_;
    float packetlossmax_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VideoSDKSessionASVStatisticInfoList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList) */ {
 public:
  inline VideoSDKSessionASVStatisticInfoList() : VideoSDKSessionASVStatisticInfoList(nullptr) {}
  ~VideoSDKSessionASVStatisticInfoList() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKSessionASVStatisticInfoList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKSessionASVStatisticInfoList(const VideoSDKSessionASVStatisticInfoList& from);
  VideoSDKSessionASVStatisticInfoList(VideoSDKSessionASVStatisticInfoList&& from) noexcept
    : VideoSDKSessionASVStatisticInfoList() {
    *this = ::std::move(from);
  }

  inline VideoSDKSessionASVStatisticInfoList& operator=(const VideoSDKSessionASVStatisticInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKSessionASVStatisticInfoList& operator=(VideoSDKSessionASVStatisticInfoList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKSessionASVStatisticInfoList& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKSessionASVStatisticInfoList* internal_default_instance() {
    return reinterpret_cast<const VideoSDKSessionASVStatisticInfoList*>(
               &_VideoSDKSessionASVStatisticInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(VideoSDKSessionASVStatisticInfoList& a, VideoSDKSessionASVStatisticInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKSessionASVStatisticInfoList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKSessionASVStatisticInfoList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKSessionASVStatisticInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKSessionASVStatisticInfoList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKSessionASVStatisticInfoList& from);
  void MergeFrom(const VideoSDKSessionASVStatisticInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKSessionASVStatisticInfoList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList";
  }
  protected:
  explicit VideoSDKSessionASVStatisticInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kASVStatisticInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo ASVStatisticInfo = 1;
  int asvstatisticinfo_size() const;
  private:
  int _internal_asvstatisticinfo_size() const;

  public:
  void clear_asvstatisticinfo() ;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* mutable_asvstatisticinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo >*
      mutable_asvstatisticinfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo& _internal_asvstatisticinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* _internal_add_asvstatisticinfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo& asvstatisticinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* add_asvstatisticinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo >&
      asvstatisticinfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo > asvstatisticinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SDKVideoCapability final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SDKVideoCapability) */ {
 public:
  inline SDKVideoCapability() : SDKVideoCapability(nullptr) {}
  ~SDKVideoCapability() override;
  explicit PROTOBUF_CONSTEXPR SDKVideoCapability(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKVideoCapability(const SDKVideoCapability& from);
  SDKVideoCapability(SDKVideoCapability&& from) noexcept
    : SDKVideoCapability() {
    *this = ::std::move(from);
  }

  inline SDKVideoCapability& operator=(const SDKVideoCapability& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKVideoCapability& operator=(SDKVideoCapability&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SDKVideoCapability& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKVideoCapability* internal_default_instance() {
    return reinterpret_cast<const SDKVideoCapability*>(
               &_SDKVideoCapability_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SDKVideoCapability& a, SDKVideoCapability& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKVideoCapability* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKVideoCapability* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKVideoCapability* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKVideoCapability>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SDKVideoCapability& from);
  void MergeFrom(const SDKVideoCapability& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SDKVideoCapability* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SDKVideoCapability";
  }
  protected:
  explicit SDKVideoCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsEffectiveFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
    kFrameFieldNumber = 4,
  };
  // optional bool isEffective = 1;
  bool has_iseffective() const;
  void clear_iseffective() ;
  bool iseffective() const;
  void set_iseffective(bool value);

  private:
  bool _internal_iseffective() const;
  void _internal_set_iseffective(bool value);

  public:
  // optional int32 width = 2;
  bool has_width() const;
  void clear_width() ;
  ::int32_t width() const;
  void set_width(::int32_t value);

  private:
  ::int32_t _internal_width() const;
  void _internal_set_width(::int32_t value);

  public:
  // optional int32 height = 3;
  bool has_height() const;
  void clear_height() ;
  ::int32_t height() const;
  void set_height(::int32_t value);

  private:
  ::int32_t _internal_height() const;
  void _internal_set_height(::int32_t value);

  public:
  // optional int32 frame = 4;
  bool has_frame() const;
  void clear_frame() ;
  ::int32_t frame() const;
  void set_frame(::int32_t value);

  private:
  ::int32_t _internal_frame() const;
  void _internal_set_frame(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool iseffective_;
    ::int32_t width_;
    ::int32_t height_;
    ::int32_t frame_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SDKVideoCapabilityList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList) */ {
 public:
  inline SDKVideoCapabilityList() : SDKVideoCapabilityList(nullptr) {}
  ~SDKVideoCapabilityList() override;
  explicit PROTOBUF_CONSTEXPR SDKVideoCapabilityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SDKVideoCapabilityList(const SDKVideoCapabilityList& from);
  SDKVideoCapabilityList(SDKVideoCapabilityList&& from) noexcept
    : SDKVideoCapabilityList() {
    *this = ::std::move(from);
  }

  inline SDKVideoCapabilityList& operator=(const SDKVideoCapabilityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SDKVideoCapabilityList& operator=(SDKVideoCapabilityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SDKVideoCapabilityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SDKVideoCapabilityList* internal_default_instance() {
    return reinterpret_cast<const SDKVideoCapabilityList*>(
               &_SDKVideoCapabilityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SDKVideoCapabilityList& a, SDKVideoCapabilityList& b) {
    a.Swap(&b);
  }
  inline void Swap(SDKVideoCapabilityList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SDKVideoCapabilityList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SDKVideoCapabilityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SDKVideoCapabilityList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SDKVideoCapabilityList& from);
  void MergeFrom(const SDKVideoCapabilityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SDKVideoCapabilityList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList";
  }
  protected:
  explicit SDKVideoCapabilityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoCapabilityFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
  int videocapability_size() const;
  private:
  int _internal_videocapability_size() const;

  public:
  void clear_videocapability() ;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* mutable_videocapability(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability >*
      mutable_videocapability();
  private:
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& _internal_videocapability(int index) const;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* _internal_add_videocapability();
  public:
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& videocapability(int index) const;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* add_videocapability();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability >&
      videocapability() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability > videocapability_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LTTLanguage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LTTLanguage) */ {
 public:
  inline LTTLanguage() : LTTLanguage(nullptr) {}
  ~LTTLanguage() override;
  explicit PROTOBUF_CONSTEXPR LTTLanguage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LTTLanguage(const LTTLanguage& from);
  LTTLanguage(LTTLanguage&& from) noexcept
    : LTTLanguage() {
    *this = ::std::move(from);
  }

  inline LTTLanguage& operator=(const LTTLanguage& from) {
    CopyFrom(from);
    return *this;
  }
  inline LTTLanguage& operator=(LTTLanguage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LTTLanguage& default_instance() {
    return *internal_default_instance();
  }
  static inline const LTTLanguage* internal_default_instance() {
    return reinterpret_cast<const LTTLanguage*>(
               &_LTTLanguage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(LTTLanguage& a, LTTLanguage& b) {
    a.Swap(&b);
  }
  inline void Swap(LTTLanguage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LTTLanguage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LTTLanguage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LTTLanguage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LTTLanguage& from);
  void MergeFrom(const LTTLanguage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LTTLanguage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LTTLanguage";
  }
  protected:
  explicit LTTLanguage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLttLanguageNameFieldNumber = 2,
    kLttLanguageIDFieldNumber = 1,
  };
  // optional string lttLanguageName = 2;
  bool has_lttlanguagename() const;
  void clear_lttlanguagename() ;
  const std::string& lttlanguagename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_lttlanguagename(Arg_&& arg, Args_... args);
  std::string* mutable_lttlanguagename();
  PROTOBUF_NODISCARD std::string* release_lttlanguagename();
  void set_allocated_lttlanguagename(std::string* ptr);

  private:
  const std::string& _internal_lttlanguagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lttlanguagename(
      const std::string& value);
  std::string* _internal_mutable_lttlanguagename();

  public:
  // optional int32 lttLanguageID = 1;
  bool has_lttlanguageid() const;
  void clear_lttlanguageid() ;
  ::int32_t lttlanguageid() const;
  void set_lttlanguageid(::int32_t value);

  private:
  ::int32_t _internal_lttlanguageid() const;
  void _internal_set_lttlanguageid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LTTLanguage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lttlanguagename_;
    ::int32_t lttlanguageid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class ZoomVideoSDKShareCursorData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData) */ {
 public:
  inline ZoomVideoSDKShareCursorData() : ZoomVideoSDKShareCursorData(nullptr) {}
  ~ZoomVideoSDKShareCursorData() override;
  explicit PROTOBUF_CONSTEXPR ZoomVideoSDKShareCursorData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ZoomVideoSDKShareCursorData(const ZoomVideoSDKShareCursorData& from);
  ZoomVideoSDKShareCursorData(ZoomVideoSDKShareCursorData&& from) noexcept
    : ZoomVideoSDKShareCursorData() {
    *this = ::std::move(from);
  }

  inline ZoomVideoSDKShareCursorData& operator=(const ZoomVideoSDKShareCursorData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZoomVideoSDKShareCursorData& operator=(ZoomVideoSDKShareCursorData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ZoomVideoSDKShareCursorData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ZoomVideoSDKShareCursorData* internal_default_instance() {
    return reinterpret_cast<const ZoomVideoSDKShareCursorData*>(
               &_ZoomVideoSDKShareCursorData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ZoomVideoSDKShareCursorData& a, ZoomVideoSDKShareCursorData& b) {
    a.Swap(&b);
  }
  inline void Swap(ZoomVideoSDKShareCursorData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZoomVideoSDKShareCursorData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ZoomVideoSDKShareCursorData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ZoomVideoSDKShareCursorData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ZoomVideoSDKShareCursorData& from);
  void MergeFrom(const ZoomVideoSDKShareCursorData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZoomVideoSDKShareCursorData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData";
  }
  protected:
  explicit ZoomVideoSDKShareCursorData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
  };
  // optional uint32 source_id = 1;
  bool has_source_id() const;
  void clear_source_id() ;
  ::uint32_t source_id() const;
  void set_source_id(::uint32_t value);

  private:
  ::uint32_t _internal_source_id() const;
  void _internal_set_source_id(::uint32_t value);

  public:
  // optional int32 x = 2;
  bool has_x() const;
  void clear_x() ;
  ::int32_t x() const;
  void set_x(::int32_t value);

  private:
  ::int32_t _internal_x() const;
  void _internal_set_x(::int32_t value);

  public:
  // optional int32 y = 3;
  bool has_y() const;
  void clear_y() ;
  ::int32_t y() const;
  void set_y(::int32_t value);

  private:
  ::int32_t _internal_y() const;
  void _internal_set_y(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t source_id_;
    ::int32_t x_;
    ::int32_t y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class IncomingLiveStreamStatus final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus) */ {
 public:
  inline IncomingLiveStreamStatus() : IncomingLiveStreamStatus(nullptr) {}
  ~IncomingLiveStreamStatus() override;
  explicit PROTOBUF_CONSTEXPR IncomingLiveStreamStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncomingLiveStreamStatus(const IncomingLiveStreamStatus& from);
  IncomingLiveStreamStatus(IncomingLiveStreamStatus&& from) noexcept
    : IncomingLiveStreamStatus() {
    *this = ::std::move(from);
  }

  inline IncomingLiveStreamStatus& operator=(const IncomingLiveStreamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingLiveStreamStatus& operator=(IncomingLiveStreamStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncomingLiveStreamStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncomingLiveStreamStatus* internal_default_instance() {
    return reinterpret_cast<const IncomingLiveStreamStatus*>(
               &_IncomingLiveStreamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(IncomingLiveStreamStatus& a, IncomingLiveStreamStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingLiveStreamStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingLiveStreamStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncomingLiveStreamStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncomingLiveStreamStatus>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IncomingLiveStreamStatus& from);
  void MergeFrom(const IncomingLiveStreamStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingLiveStreamStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus";
  }
  protected:
  explicit IncomingLiveStreamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStreamKeyIDFieldNumber = 1,
    kIsRTMPConnectedFieldNumber = 2,
    kIsStreamPushedFieldNumber = 3,
  };
  // optional string strStreamKeyID = 1;
  bool has_strstreamkeyid() const;
  void clear_strstreamkeyid() ;
  const std::string& strstreamkeyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strstreamkeyid(Arg_&& arg, Args_... args);
  std::string* mutable_strstreamkeyid();
  PROTOBUF_NODISCARD std::string* release_strstreamkeyid();
  void set_allocated_strstreamkeyid(std::string* ptr);

  private:
  const std::string& _internal_strstreamkeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstreamkeyid(
      const std::string& value);
  std::string* _internal_mutable_strstreamkeyid();

  public:
  // optional bool isRTMPConnected = 2;
  bool has_isrtmpconnected() const;
  void clear_isrtmpconnected() ;
  bool isrtmpconnected() const;
  void set_isrtmpconnected(bool value);

  private:
  bool _internal_isrtmpconnected() const;
  void _internal_set_isrtmpconnected(bool value);

  public:
  // optional bool isStreamPushed = 3;
  bool has_isstreampushed() const;
  void clear_isstreampushed() ;
  bool isstreampushed() const;
  void set_isstreampushed(bool value);

  private:
  bool _internal_isstreampushed() const;
  void _internal_set_isstreampushed(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstreamkeyid_;
    bool isrtmpconnected_;
    bool isstreampushed_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class IncomingLiveStreamStatusList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList) */ {
 public:
  inline IncomingLiveStreamStatusList() : IncomingLiveStreamStatusList(nullptr) {}
  ~IncomingLiveStreamStatusList() override;
  explicit PROTOBUF_CONSTEXPR IncomingLiveStreamStatusList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncomingLiveStreamStatusList(const IncomingLiveStreamStatusList& from);
  IncomingLiveStreamStatusList(IncomingLiveStreamStatusList&& from) noexcept
    : IncomingLiveStreamStatusList() {
    *this = ::std::move(from);
  }

  inline IncomingLiveStreamStatusList& operator=(const IncomingLiveStreamStatusList& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingLiveStreamStatusList& operator=(IncomingLiveStreamStatusList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncomingLiveStreamStatusList& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncomingLiveStreamStatusList* internal_default_instance() {
    return reinterpret_cast<const IncomingLiveStreamStatusList*>(
               &_IncomingLiveStreamStatusList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(IncomingLiveStreamStatusList& a, IncomingLiveStreamStatusList& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingLiveStreamStatusList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingLiveStreamStatusList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncomingLiveStreamStatusList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncomingLiveStreamStatusList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IncomingLiveStreamStatusList& from);
  void MergeFrom(const IncomingLiveStreamStatusList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingLiveStreamStatusList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList";
  }
  protected:
  explicit IncomingLiveStreamStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus status = 1;
  int status_size() const;
  private:
  int _internal_status_size() const;

  public:
  void clear_status() ;
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* mutable_status(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus >*
      mutable_status();
  private:
  const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus& _internal_status(int index) const;
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* _internal_add_status();
  public:
  const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus& status(int index) const;
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* add_status();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus >&
      status() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus > status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onErrorParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams) */ {
 public:
  inline CallbackBody_onErrorParams() : CallbackBody_onErrorParams(nullptr) {}
  ~CallbackBody_onErrorParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onErrorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onErrorParams(const CallbackBody_onErrorParams& from);
  CallbackBody_onErrorParams(CallbackBody_onErrorParams&& from) noexcept
    : CallbackBody_onErrorParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onErrorParams& operator=(const CallbackBody_onErrorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onErrorParams& operator=(CallbackBody_onErrorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onErrorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onErrorParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onErrorParams*>(
               &_CallbackBody_onErrorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(CallbackBody_onErrorParams& a, CallbackBody_onErrorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onErrorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onErrorParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onErrorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onErrorParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onErrorParams& from);
  void MergeFrom(const CallbackBody_onErrorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onErrorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams";
  }
  protected:
  explicit CallbackBody_onErrorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrorCodeFieldNumber = 1,
    kDetailErrorCodeFieldNumber = 2,
  };
  // optional int32 errorCode = 1;
  bool has_errorcode() const;
  void clear_errorcode() ;
  ::int32_t errorcode() const;
  void set_errorcode(::int32_t value);

  private:
  ::int32_t _internal_errorcode() const;
  void _internal_set_errorcode(::int32_t value);

  public:
  // optional int32 detailErrorCode = 2;
  bool has_detailerrorcode() const;
  void clear_detailerrorcode() ;
  ::int32_t detailerrorcode() const;
  void set_detailerrorcode(::int32_t value);

  private:
  ::int32_t _internal_detailerrorcode() const;
  void _internal_set_detailerrorcode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t errorcode_;
    ::int32_t detailerrorcode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserJoinParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams) */ {
 public:
  inline CallbackBody_onUserJoinParams() : CallbackBody_onUserJoinParams(nullptr) {}
  ~CallbackBody_onUserJoinParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserJoinParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserJoinParams(const CallbackBody_onUserJoinParams& from);
  CallbackBody_onUserJoinParams(CallbackBody_onUserJoinParams&& from) noexcept
    : CallbackBody_onUserJoinParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserJoinParams& operator=(const CallbackBody_onUserJoinParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserJoinParams& operator=(CallbackBody_onUserJoinParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserJoinParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserJoinParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserJoinParams*>(
               &_CallbackBody_onUserJoinParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(CallbackBody_onUserJoinParams& a, CallbackBody_onUserJoinParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserJoinParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserJoinParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserJoinParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserJoinParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserJoinParams& from);
  void MergeFrom(const CallbackBody_onUserJoinParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserJoinParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams";
  }
  protected:
  explicit CallbackBody_onUserJoinParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  bool has_zn_userlist() const;
  void clear_zn_userlist() ;
  const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::UserList* release_zn_userlist();
  ::com::electron::zoomvideo::sdk::proto::UserList* mutable_zn_userlist();
  void set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::UserList& _internal_zn_userlist() const;
  ::com::electron::zoomvideo::sdk::proto::UserList* _internal_mutable_zn_userlist();
  public:
  void unsafe_arena_set_allocated_zn_userlist(
      ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  ::com::electron::zoomvideo::sdk::proto::UserList* unsafe_arena_release_zn_userlist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserLeaveParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams) */ {
 public:
  inline CallbackBody_onUserLeaveParams() : CallbackBody_onUserLeaveParams(nullptr) {}
  ~CallbackBody_onUserLeaveParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserLeaveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserLeaveParams(const CallbackBody_onUserLeaveParams& from);
  CallbackBody_onUserLeaveParams(CallbackBody_onUserLeaveParams&& from) noexcept
    : CallbackBody_onUserLeaveParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserLeaveParams& operator=(const CallbackBody_onUserLeaveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserLeaveParams& operator=(CallbackBody_onUserLeaveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserLeaveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserLeaveParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserLeaveParams*>(
               &_CallbackBody_onUserLeaveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(CallbackBody_onUserLeaveParams& a, CallbackBody_onUserLeaveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserLeaveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserLeaveParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserLeaveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserLeaveParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserLeaveParams& from);
  void MergeFrom(const CallbackBody_onUserLeaveParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserLeaveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams";
  }
  protected:
  explicit CallbackBody_onUserLeaveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  bool has_zn_userlist() const;
  void clear_zn_userlist() ;
  const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::UserList* release_zn_userlist();
  ::com::electron::zoomvideo::sdk::proto::UserList* mutable_zn_userlist();
  void set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::UserList& _internal_zn_userlist() const;
  ::com::electron::zoomvideo::sdk::proto::UserList* _internal_mutable_zn_userlist();
  public:
  void unsafe_arena_set_allocated_zn_userlist(
      ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  ::com::electron::zoomvideo::sdk::proto::UserList* unsafe_arena_release_zn_userlist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserVideoStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams) */ {
 public:
  inline CallbackBody_onUserVideoStatusChangedParams() : CallbackBody_onUserVideoStatusChangedParams(nullptr) {}
  ~CallbackBody_onUserVideoStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserVideoStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserVideoStatusChangedParams(const CallbackBody_onUserVideoStatusChangedParams& from);
  CallbackBody_onUserVideoStatusChangedParams(CallbackBody_onUserVideoStatusChangedParams&& from) noexcept
    : CallbackBody_onUserVideoStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserVideoStatusChangedParams& operator=(const CallbackBody_onUserVideoStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserVideoStatusChangedParams& operator=(CallbackBody_onUserVideoStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserVideoStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserVideoStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserVideoStatusChangedParams*>(
               &_CallbackBody_onUserVideoStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(CallbackBody_onUserVideoStatusChangedParams& a, CallbackBody_onUserVideoStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserVideoStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserVideoStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserVideoStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserVideoStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserVideoStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onUserVideoStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserVideoStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onUserVideoStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  bool has_zn_userlist() const;
  void clear_zn_userlist() ;
  const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::UserList* release_zn_userlist();
  ::com::electron::zoomvideo::sdk::proto::UserList* mutable_zn_userlist();
  void set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::UserList& _internal_zn_userlist() const;
  ::com::electron::zoomvideo::sdk::proto::UserList* _internal_mutable_zn_userlist();
  public:
  void unsafe_arena_set_allocated_zn_userlist(
      ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  ::com::electron::zoomvideo::sdk::proto::UserList* unsafe_arena_release_zn_userlist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserAudioStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams) */ {
 public:
  inline CallbackBody_onUserAudioStatusChangedParams() : CallbackBody_onUserAudioStatusChangedParams(nullptr) {}
  ~CallbackBody_onUserAudioStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserAudioStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserAudioStatusChangedParams(const CallbackBody_onUserAudioStatusChangedParams& from);
  CallbackBody_onUserAudioStatusChangedParams(CallbackBody_onUserAudioStatusChangedParams&& from) noexcept
    : CallbackBody_onUserAudioStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserAudioStatusChangedParams& operator=(const CallbackBody_onUserAudioStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserAudioStatusChangedParams& operator=(CallbackBody_onUserAudioStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserAudioStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserAudioStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserAudioStatusChangedParams*>(
               &_CallbackBody_onUserAudioStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(CallbackBody_onUserAudioStatusChangedParams& a, CallbackBody_onUserAudioStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserAudioStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserAudioStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserAudioStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserAudioStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserAudioStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onUserAudioStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserAudioStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onUserAudioStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  bool has_zn_userlist() const;
  void clear_zn_userlist() ;
  const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::UserList* release_zn_userlist();
  ::com::electron::zoomvideo::sdk::proto::UserList* mutable_zn_userlist();
  void set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::UserList& _internal_zn_userlist() const;
  ::com::electron::zoomvideo::sdk::proto::UserList* _internal_mutable_zn_userlist();
  public:
  void unsafe_arena_set_allocated_zn_userlist(
      ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  ::com::electron::zoomvideo::sdk::proto::UserList* unsafe_arena_release_zn_userlist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserShareStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams) */ {
 public:
  inline CallbackBody_onUserShareStatusChangedParams() : CallbackBody_onUserShareStatusChangedParams(nullptr) {}
  ~CallbackBody_onUserShareStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserShareStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserShareStatusChangedParams(const CallbackBody_onUserShareStatusChangedParams& from);
  CallbackBody_onUserShareStatusChangedParams(CallbackBody_onUserShareStatusChangedParams&& from) noexcept
    : CallbackBody_onUserShareStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserShareStatusChangedParams& operator=(const CallbackBody_onUserShareStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserShareStatusChangedParams& operator=(CallbackBody_onUserShareStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserShareStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserShareStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserShareStatusChangedParams*>(
               &_CallbackBody_onUserShareStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(CallbackBody_onUserShareStatusChangedParams& a, CallbackBody_onUserShareStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserShareStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserShareStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserShareStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserShareStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserShareStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onUserShareStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserShareStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onUserShareStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
    kShareActionFieldNumber = 2,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
  bool has_shareaction() const;
  void clear_shareaction() ;
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::ShareAction* release_shareaction();
  ::com::electron::zoomvideo::sdk::proto::ShareAction* mutable_shareaction();
  void set_allocated_shareaction(::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction);
  private:
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& _internal_shareaction() const;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _internal_mutable_shareaction();
  public:
  void unsafe_arena_set_allocated_shareaction(
      ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction);
  ::com::electron::zoomvideo::sdk::proto::ShareAction* unsafe_arena_release_shareaction();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onFailedToStartShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams) */ {
 public:
  inline CallbackBody_onFailedToStartShareParams() : CallbackBody_onFailedToStartShareParams(nullptr) {}
  ~CallbackBody_onFailedToStartShareParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onFailedToStartShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onFailedToStartShareParams(const CallbackBody_onFailedToStartShareParams& from);
  CallbackBody_onFailedToStartShareParams(CallbackBody_onFailedToStartShareParams&& from) noexcept
    : CallbackBody_onFailedToStartShareParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onFailedToStartShareParams& operator=(const CallbackBody_onFailedToStartShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onFailedToStartShareParams& operator=(CallbackBody_onFailedToStartShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onFailedToStartShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onFailedToStartShareParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onFailedToStartShareParams*>(
               &_CallbackBody_onFailedToStartShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CallbackBody_onFailedToStartShareParams& a, CallbackBody_onFailedToStartShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onFailedToStartShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onFailedToStartShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onFailedToStartShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onFailedToStartShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onFailedToStartShareParams& from);
  void MergeFrom(const CallbackBody_onFailedToStartShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onFailedToStartShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams";
  }
  protected:
  explicit CallbackBody_onFailedToStartShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onLiveStreamStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams) */ {
 public:
  inline CallbackBody_onLiveStreamStatusChangedParams() : CallbackBody_onLiveStreamStatusChangedParams(nullptr) {}
  ~CallbackBody_onLiveStreamStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onLiveStreamStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onLiveStreamStatusChangedParams(const CallbackBody_onLiveStreamStatusChangedParams& from);
  CallbackBody_onLiveStreamStatusChangedParams(CallbackBody_onLiveStreamStatusChangedParams&& from) noexcept
    : CallbackBody_onLiveStreamStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onLiveStreamStatusChangedParams& operator=(const CallbackBody_onLiveStreamStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onLiveStreamStatusChangedParams& operator=(CallbackBody_onLiveStreamStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onLiveStreamStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onLiveStreamStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onLiveStreamStatusChangedParams*>(
               &_CallbackBody_onLiveStreamStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CallbackBody_onLiveStreamStatusChangedParams& a, CallbackBody_onLiveStreamStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onLiveStreamStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onLiveStreamStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onLiveStreamStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onLiveStreamStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onLiveStreamStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onLiveStreamStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onLiveStreamStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onLiveStreamStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional int32 status = 1;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserHostChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams) */ {
 public:
  inline CallbackBody_onUserHostChangedParams() : CallbackBody_onUserHostChangedParams(nullptr) {}
  ~CallbackBody_onUserHostChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserHostChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserHostChangedParams(const CallbackBody_onUserHostChangedParams& from);
  CallbackBody_onUserHostChangedParams(CallbackBody_onUserHostChangedParams&& from) noexcept
    : CallbackBody_onUserHostChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserHostChangedParams& operator=(const CallbackBody_onUserHostChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserHostChangedParams& operator=(CallbackBody_onUserHostChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserHostChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserHostChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserHostChangedParams*>(
               &_CallbackBody_onUserHostChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CallbackBody_onUserHostChangedParams& a, CallbackBody_onUserHostChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserHostChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserHostChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserHostChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserHostChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserHostChangedParams& from);
  void MergeFrom(const CallbackBody_onUserHostChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserHostChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams";
  }
  protected:
  explicit CallbackBody_onUserHostChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserNameChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams) */ {
 public:
  inline CallbackBody_onUserNameChangedParams() : CallbackBody_onUserNameChangedParams(nullptr) {}
  ~CallbackBody_onUserNameChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserNameChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserNameChangedParams(const CallbackBody_onUserNameChangedParams& from);
  CallbackBody_onUserNameChangedParams(CallbackBody_onUserNameChangedParams&& from) noexcept
    : CallbackBody_onUserNameChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserNameChangedParams& operator=(const CallbackBody_onUserNameChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserNameChangedParams& operator=(CallbackBody_onUserNameChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserNameChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserNameChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserNameChangedParams*>(
               &_CallbackBody_onUserNameChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CallbackBody_onUserNameChangedParams& a, CallbackBody_onUserNameChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserNameChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserNameChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserNameChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserNameChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserNameChangedParams& from);
  void MergeFrom(const CallbackBody_onUserNameChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserNameChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams";
  }
  protected:
  explicit CallbackBody_onUserNameChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserManagerChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams) */ {
 public:
  inline CallbackBody_onUserManagerChangedParams() : CallbackBody_onUserManagerChangedParams(nullptr) {}
  ~CallbackBody_onUserManagerChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserManagerChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserManagerChangedParams(const CallbackBody_onUserManagerChangedParams& from);
  CallbackBody_onUserManagerChangedParams(CallbackBody_onUserManagerChangedParams&& from) noexcept
    : CallbackBody_onUserManagerChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserManagerChangedParams& operator=(const CallbackBody_onUserManagerChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserManagerChangedParams& operator=(CallbackBody_onUserManagerChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserManagerChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserManagerChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserManagerChangedParams*>(
               &_CallbackBody_onUserManagerChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(CallbackBody_onUserManagerChangedParams& a, CallbackBody_onUserManagerChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserManagerChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserManagerChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserManagerChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserManagerChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserManagerChangedParams& from);
  void MergeFrom(const CallbackBody_onUserManagerChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserManagerChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams";
  }
  protected:
  explicit CallbackBody_onUserManagerChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUserActiveAudioChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams) */ {
 public:
  inline CallbackBody_onUserActiveAudioChangedParams() : CallbackBody_onUserActiveAudioChangedParams(nullptr) {}
  ~CallbackBody_onUserActiveAudioChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUserActiveAudioChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUserActiveAudioChangedParams(const CallbackBody_onUserActiveAudioChangedParams& from);
  CallbackBody_onUserActiveAudioChangedParams(CallbackBody_onUserActiveAudioChangedParams&& from) noexcept
    : CallbackBody_onUserActiveAudioChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUserActiveAudioChangedParams& operator=(const CallbackBody_onUserActiveAudioChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUserActiveAudioChangedParams& operator=(CallbackBody_onUserActiveAudioChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUserActiveAudioChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUserActiveAudioChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUserActiveAudioChangedParams*>(
               &_CallbackBody_onUserActiveAudioChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(CallbackBody_onUserActiveAudioChangedParams& a, CallbackBody_onUserActiveAudioChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUserActiveAudioChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUserActiveAudioChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUserActiveAudioChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUserActiveAudioChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUserActiveAudioChangedParams& from);
  void MergeFrom(const CallbackBody_onUserActiveAudioChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUserActiveAudioChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams";
  }
  protected:
  explicit CallbackBody_onUserActiveAudioChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  bool has_zn_userlist() const;
  void clear_zn_userlist() ;
  const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::UserList* release_zn_userlist();
  ::com::electron::zoomvideo::sdk::proto::UserList* mutable_zn_userlist();
  void set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::UserList& _internal_zn_userlist() const;
  ::com::electron::zoomvideo::sdk::proto::UserList* _internal_mutable_zn_userlist();
  public:
  void unsafe_arena_set_allocated_zn_userlist(
      ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  ::com::electron::zoomvideo::sdk::proto::UserList* unsafe_arena_release_zn_userlist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onChatNewMessageNotifyParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams) */ {
 public:
  inline CallbackBody_onChatNewMessageNotifyParams() : CallbackBody_onChatNewMessageNotifyParams(nullptr) {}
  ~CallbackBody_onChatNewMessageNotifyParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onChatNewMessageNotifyParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onChatNewMessageNotifyParams(const CallbackBody_onChatNewMessageNotifyParams& from);
  CallbackBody_onChatNewMessageNotifyParams(CallbackBody_onChatNewMessageNotifyParams&& from) noexcept
    : CallbackBody_onChatNewMessageNotifyParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onChatNewMessageNotifyParams& operator=(const CallbackBody_onChatNewMessageNotifyParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onChatNewMessageNotifyParams& operator=(CallbackBody_onChatNewMessageNotifyParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onChatNewMessageNotifyParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onChatNewMessageNotifyParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onChatNewMessageNotifyParams*>(
               &_CallbackBody_onChatNewMessageNotifyParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(CallbackBody_onChatNewMessageNotifyParams& a, CallbackBody_onChatNewMessageNotifyParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onChatNewMessageNotifyParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onChatNewMessageNotifyParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onChatNewMessageNotifyParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onChatNewMessageNotifyParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onChatNewMessageNotifyParams& from);
  void MergeFrom(const CallbackBody_onChatNewMessageNotifyParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onChatNewMessageNotifyParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams";
  }
  protected:
  explicit CallbackBody_onChatNewMessageNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderNameFieldNumber = 2,
    kReceiverNameFieldNumber = 4,
    kMessageContentFieldNumber = 5,
    kMessageIDFieldNumber = 9,
    kPSenderFieldNumber = 1,
    kPReceiverFieldNumber = 3,
    kTimeStampFieldNumber = 6,
    kIsChatToAllFieldNumber = 7,
    kIsSelfSendFieldNumber = 8,
  };
  // optional string senderName = 2;
  bool has_sendername() const;
  void clear_sendername() ;
  const std::string& sendername() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sendername(Arg_&& arg, Args_... args);
  std::string* mutable_sendername();
  PROTOBUF_NODISCARD std::string* release_sendername();
  void set_allocated_sendername(std::string* ptr);

  private:
  const std::string& _internal_sendername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sendername(
      const std::string& value);
  std::string* _internal_mutable_sendername();

  public:
  // optional string receiverName = 4;
  bool has_receivername() const;
  void clear_receivername() ;
  const std::string& receivername() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_receivername(Arg_&& arg, Args_... args);
  std::string* mutable_receivername();
  PROTOBUF_NODISCARD std::string* release_receivername();
  void set_allocated_receivername(std::string* ptr);

  private:
  const std::string& _internal_receivername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_receivername(
      const std::string& value);
  std::string* _internal_mutable_receivername();

  public:
  // optional string messageContent = 5;
  bool has_messagecontent() const;
  void clear_messagecontent() ;
  const std::string& messagecontent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messagecontent(Arg_&& arg, Args_... args);
  std::string* mutable_messagecontent();
  PROTOBUF_NODISCARD std::string* release_messagecontent();
  void set_allocated_messagecontent(std::string* ptr);

  private:
  const std::string& _internal_messagecontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messagecontent(
      const std::string& value);
  std::string* _internal_mutable_messagecontent();

  public:
  // optional string messageID = 9;
  bool has_messageid() const;
  void clear_messageid() ;
  const std::string& messageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* ptr);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // optional int64 pSender = 1;
  bool has_psender() const;
  void clear_psender() ;
  ::int64_t psender() const;
  void set_psender(::int64_t value);

  private:
  ::int64_t _internal_psender() const;
  void _internal_set_psender(::int64_t value);

  public:
  // optional int64 pReceiver = 3;
  bool has_preceiver() const;
  void clear_preceiver() ;
  ::int64_t preceiver() const;
  void set_preceiver(::int64_t value);

  private:
  ::int64_t _internal_preceiver() const;
  void _internal_set_preceiver(::int64_t value);

  public:
  // optional int64 timeStamp = 6;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional bool isChatToAll = 7;
  bool has_ischattoall() const;
  void clear_ischattoall() ;
  bool ischattoall() const;
  void set_ischattoall(bool value);

  private:
  bool _internal_ischattoall() const;
  void _internal_set_ischattoall(bool value);

  public:
  // optional bool isSelfSend = 8;
  bool has_isselfsend() const;
  void clear_isselfsend() ;
  bool isselfsend() const;
  void set_isselfsend(bool value);

  private:
  bool _internal_isselfsend() const;
  void _internal_set_isselfsend(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sendername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr receivername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagecontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
    ::int64_t psender_;
    ::int64_t preceiver_;
    ::int64_t timestamp_;
    bool ischattoall_;
    bool isselfsend_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onChatMsgDeleteNotificationParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams) */ {
 public:
  inline CallbackBody_onChatMsgDeleteNotificationParams() : CallbackBody_onChatMsgDeleteNotificationParams(nullptr) {}
  ~CallbackBody_onChatMsgDeleteNotificationParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onChatMsgDeleteNotificationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onChatMsgDeleteNotificationParams(const CallbackBody_onChatMsgDeleteNotificationParams& from);
  CallbackBody_onChatMsgDeleteNotificationParams(CallbackBody_onChatMsgDeleteNotificationParams&& from) noexcept
    : CallbackBody_onChatMsgDeleteNotificationParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onChatMsgDeleteNotificationParams& operator=(const CallbackBody_onChatMsgDeleteNotificationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onChatMsgDeleteNotificationParams& operator=(CallbackBody_onChatMsgDeleteNotificationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onChatMsgDeleteNotificationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onChatMsgDeleteNotificationParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onChatMsgDeleteNotificationParams*>(
               &_CallbackBody_onChatMsgDeleteNotificationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(CallbackBody_onChatMsgDeleteNotificationParams& a, CallbackBody_onChatMsgDeleteNotificationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onChatMsgDeleteNotificationParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onChatMsgDeleteNotificationParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onChatMsgDeleteNotificationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onChatMsgDeleteNotificationParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onChatMsgDeleteNotificationParams& from);
  void MergeFrom(const CallbackBody_onChatMsgDeleteNotificationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onChatMsgDeleteNotificationParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams";
  }
  protected:
  explicit CallbackBody_onChatMsgDeleteNotificationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDFieldNumber = 1,
    kDeleteByFieldNumber = 2,
  };
  // optional string messageID = 1;
  bool has_messageid() const;
  void clear_messageid() ;
  const std::string& messageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* ptr);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // optional int32 deleteBy = 2;
  bool has_deleteby() const;
  void clear_deleteby() ;
  ::int32_t deleteby() const;
  void set_deleteby(::int32_t value);

  private:
  ::int32_t _internal_deleteby() const;
  void _internal_set_deleteby(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
    ::int32_t deleteby_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onVideoSourceInitializeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams) */ {
 public:
  inline CallbackBody_onVideoSourceInitializeParams() : CallbackBody_onVideoSourceInitializeParams(nullptr) {}
  ~CallbackBody_onVideoSourceInitializeParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onVideoSourceInitializeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onVideoSourceInitializeParams(const CallbackBody_onVideoSourceInitializeParams& from);
  CallbackBody_onVideoSourceInitializeParams(CallbackBody_onVideoSourceInitializeParams&& from) noexcept
    : CallbackBody_onVideoSourceInitializeParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onVideoSourceInitializeParams& operator=(const CallbackBody_onVideoSourceInitializeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onVideoSourceInitializeParams& operator=(CallbackBody_onVideoSourceInitializeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onVideoSourceInitializeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onVideoSourceInitializeParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onVideoSourceInitializeParams*>(
               &_CallbackBody_onVideoSourceInitializeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(CallbackBody_onVideoSourceInitializeParams& a, CallbackBody_onVideoSourceInitializeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onVideoSourceInitializeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onVideoSourceInitializeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onVideoSourceInitializeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onVideoSourceInitializeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onVideoSourceInitializeParams& from);
  void MergeFrom(const CallbackBody_onVideoSourceInitializeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onVideoSourceInitializeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams";
  }
  protected:
  explicit CallbackBody_onVideoSourceInitializeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoCapabilityListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList VideoCapabilityList = 1;
  bool has_videocapabilitylist() const;
  void clear_videocapabilitylist() ;
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList& videocapabilitylist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* release_videocapabilitylist();
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* mutable_videocapabilitylist();
  void set_allocated_videocapabilitylist(::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* videocapabilitylist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList& _internal_videocapabilitylist() const;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* _internal_mutable_videocapabilitylist();
  public:
  void unsafe_arena_set_allocated_videocapabilitylist(
      ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* videocapabilitylist);
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* unsafe_arena_release_videocapabilitylist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* videocapabilitylist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onPropertyChangeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams) */ {
 public:
  inline CallbackBody_onPropertyChangeParams() : CallbackBody_onPropertyChangeParams(nullptr) {}
  ~CallbackBody_onPropertyChangeParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onPropertyChangeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onPropertyChangeParams(const CallbackBody_onPropertyChangeParams& from);
  CallbackBody_onPropertyChangeParams(CallbackBody_onPropertyChangeParams&& from) noexcept
    : CallbackBody_onPropertyChangeParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onPropertyChangeParams& operator=(const CallbackBody_onPropertyChangeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onPropertyChangeParams& operator=(CallbackBody_onPropertyChangeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onPropertyChangeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onPropertyChangeParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onPropertyChangeParams*>(
               &_CallbackBody_onPropertyChangeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(CallbackBody_onPropertyChangeParams& a, CallbackBody_onPropertyChangeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onPropertyChangeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onPropertyChangeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onPropertyChangeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onPropertyChangeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onPropertyChangeParams& from);
  void MergeFrom(const CallbackBody_onPropertyChangeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onPropertyChangeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams";
  }
  protected:
  explicit CallbackBody_onPropertyChangeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVideoCapabilityFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
  bool has_videocapability() const;
  void clear_videocapability() ;
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& videocapability() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* release_videocapability();
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* mutable_videocapability();
  void set_allocated_videocapability(::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* videocapability);
  private:
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& _internal_videocapability() const;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* _internal_mutable_videocapability();
  public:
  void unsafe_arena_set_allocated_videocapability(
      ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* videocapability);
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* unsafe_arena_release_videocapability();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* videocapability_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onRawDataStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams) */ {
 public:
  inline CallbackBody_onRawDataStatusChangedParams() : CallbackBody_onRawDataStatusChangedParams(nullptr) {}
  ~CallbackBody_onRawDataStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onRawDataStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onRawDataStatusChangedParams(const CallbackBody_onRawDataStatusChangedParams& from);
  CallbackBody_onRawDataStatusChangedParams(CallbackBody_onRawDataStatusChangedParams&& from) noexcept
    : CallbackBody_onRawDataStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onRawDataStatusChangedParams& operator=(const CallbackBody_onRawDataStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onRawDataStatusChangedParams& operator=(CallbackBody_onRawDataStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onRawDataStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onRawDataStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onRawDataStatusChangedParams*>(
               &_CallbackBody_onRawDataStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(CallbackBody_onRawDataStatusChangedParams& a, CallbackBody_onRawDataStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onRawDataStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onRawDataStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onRawDataStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onRawDataStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onRawDataStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onRawDataStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onRawDataStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onRawDataStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecvHandleFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional int64 recv_handle = 1;
  bool has_recv_handle() const;
  void clear_recv_handle() ;
  ::int64_t recv_handle() const;
  void set_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_recv_handle() const;
  void _internal_set_recv_handle(::int64_t value);

  public:
  // optional int32 status = 2;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t recv_handle_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onCommandReceivedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams) */ {
 public:
  inline CallbackBody_onCommandReceivedParams() : CallbackBody_onCommandReceivedParams(nullptr) {}
  ~CallbackBody_onCommandReceivedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onCommandReceivedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onCommandReceivedParams(const CallbackBody_onCommandReceivedParams& from);
  CallbackBody_onCommandReceivedParams(CallbackBody_onCommandReceivedParams&& from) noexcept
    : CallbackBody_onCommandReceivedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onCommandReceivedParams& operator=(const CallbackBody_onCommandReceivedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onCommandReceivedParams& operator=(CallbackBody_onCommandReceivedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onCommandReceivedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onCommandReceivedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onCommandReceivedParams*>(
               &_CallbackBody_onCommandReceivedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(CallbackBody_onCommandReceivedParams& a, CallbackBody_onCommandReceivedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onCommandReceivedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onCommandReceivedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onCommandReceivedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onCommandReceivedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onCommandReceivedParams& from);
  void MergeFrom(const CallbackBody_onCommandReceivedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onCommandReceivedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams";
  }
  protected:
  explicit CallbackBody_onCommandReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrCmdFieldNumber = 2,
    kPSenderFieldNumber = 1,
  };
  // optional string strCmd = 2;
  bool has_strcmd() const;
  void clear_strcmd() ;
  const std::string& strcmd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strcmd(Arg_&& arg, Args_... args);
  std::string* mutable_strcmd();
  PROTOBUF_NODISCARD std::string* release_strcmd();
  void set_allocated_strcmd(std::string* ptr);

  private:
  const std::string& _internal_strcmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcmd(
      const std::string& value);
  std::string* _internal_mutable_strcmd();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pSender = 1;
  bool has_psender() const;
  void clear_psender() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& psender() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_psender();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_psender();
  void set_allocated_psender(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* psender);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_psender() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_psender();
  public:
  void unsafe_arena_set_allocated_psender(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* psender);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_psender();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcmd_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* psender_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onCommandChannelConnectResultParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams) */ {
 public:
  inline CallbackBody_onCommandChannelConnectResultParams() : CallbackBody_onCommandChannelConnectResultParams(nullptr) {}
  ~CallbackBody_onCommandChannelConnectResultParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onCommandChannelConnectResultParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onCommandChannelConnectResultParams(const CallbackBody_onCommandChannelConnectResultParams& from);
  CallbackBody_onCommandChannelConnectResultParams(CallbackBody_onCommandChannelConnectResultParams&& from) noexcept
    : CallbackBody_onCommandChannelConnectResultParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onCommandChannelConnectResultParams& operator=(const CallbackBody_onCommandChannelConnectResultParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onCommandChannelConnectResultParams& operator=(CallbackBody_onCommandChannelConnectResultParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onCommandChannelConnectResultParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onCommandChannelConnectResultParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onCommandChannelConnectResultParams*>(
               &_CallbackBody_onCommandChannelConnectResultParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(CallbackBody_onCommandChannelConnectResultParams& a, CallbackBody_onCommandChannelConnectResultParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onCommandChannelConnectResultParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onCommandChannelConnectResultParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onCommandChannelConnectResultParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onCommandChannelConnectResultParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onCommandChannelConnectResultParams& from);
  void MergeFrom(const CallbackBody_onCommandChannelConnectResultParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onCommandChannelConnectResultParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams";
  }
  protected:
  explicit CallbackBody_onCommandChannelConnectResultParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsSuccessFieldNumber = 1,
  };
  // optional bool isSuccess = 1;
  bool has_issuccess() const;
  void clear_issuccess() ;
  bool issuccess() const;
  void set_issuccess(bool value);

  private:
  bool _internal_issuccess() const;
  void _internal_set_issuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool issuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onInviteByPhoneStatusParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams) */ {
 public:
  inline CallbackBody_onInviteByPhoneStatusParams() : CallbackBody_onInviteByPhoneStatusParams(nullptr) {}
  ~CallbackBody_onInviteByPhoneStatusParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onInviteByPhoneStatusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onInviteByPhoneStatusParams(const CallbackBody_onInviteByPhoneStatusParams& from);
  CallbackBody_onInviteByPhoneStatusParams(CallbackBody_onInviteByPhoneStatusParams&& from) noexcept
    : CallbackBody_onInviteByPhoneStatusParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onInviteByPhoneStatusParams& operator=(const CallbackBody_onInviteByPhoneStatusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onInviteByPhoneStatusParams& operator=(CallbackBody_onInviteByPhoneStatusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onInviteByPhoneStatusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onInviteByPhoneStatusParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onInviteByPhoneStatusParams*>(
               &_CallbackBody_onInviteByPhoneStatusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CallbackBody_onInviteByPhoneStatusParams& a, CallbackBody_onInviteByPhoneStatusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onInviteByPhoneStatusParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onInviteByPhoneStatusParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onInviteByPhoneStatusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onInviteByPhoneStatusParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onInviteByPhoneStatusParams& from);
  void MergeFrom(const CallbackBody_onInviteByPhoneStatusParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onInviteByPhoneStatusParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams";
  }
  protected:
  explicit CallbackBody_onInviteByPhoneStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kReasonFieldNumber = 2,
  };
  // optional int32 status = 1;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // optional int32 reason = 2;
  bool has_reason() const;
  void clear_reason() ;
  ::int32_t reason() const;
  void set_reason(::int32_t value);

  private:
  ::int32_t _internal_reason() const;
  void _internal_set_reason(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t status_;
    ::int32_t reason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onCloudRecordingStatusParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams) */ {
 public:
  inline CallbackBody_onCloudRecordingStatusParams() : CallbackBody_onCloudRecordingStatusParams(nullptr) {}
  ~CallbackBody_onCloudRecordingStatusParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onCloudRecordingStatusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onCloudRecordingStatusParams(const CallbackBody_onCloudRecordingStatusParams& from);
  CallbackBody_onCloudRecordingStatusParams(CallbackBody_onCloudRecordingStatusParams&& from) noexcept
    : CallbackBody_onCloudRecordingStatusParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onCloudRecordingStatusParams& operator=(const CallbackBody_onCloudRecordingStatusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onCloudRecordingStatusParams& operator=(CallbackBody_onCloudRecordingStatusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onCloudRecordingStatusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onCloudRecordingStatusParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onCloudRecordingStatusParams*>(
               &_CallbackBody_onCloudRecordingStatusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CallbackBody_onCloudRecordingStatusParams& a, CallbackBody_onCloudRecordingStatusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onCloudRecordingStatusParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onCloudRecordingStatusParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onCloudRecordingStatusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onCloudRecordingStatusParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onCloudRecordingStatusParams& from);
  void MergeFrom(const CallbackBody_onCloudRecordingStatusParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onCloudRecordingStatusParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams";
  }
  protected:
  explicit CallbackBody_onCloudRecordingStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional int32 status = 1;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onCameraControlRequestResultParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams) */ {
 public:
  inline CallbackBody_onCameraControlRequestResultParams() : CallbackBody_onCameraControlRequestResultParams(nullptr) {}
  ~CallbackBody_onCameraControlRequestResultParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onCameraControlRequestResultParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onCameraControlRequestResultParams(const CallbackBody_onCameraControlRequestResultParams& from);
  CallbackBody_onCameraControlRequestResultParams(CallbackBody_onCameraControlRequestResultParams&& from) noexcept
    : CallbackBody_onCameraControlRequestResultParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onCameraControlRequestResultParams& operator=(const CallbackBody_onCameraControlRequestResultParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onCameraControlRequestResultParams& operator=(CallbackBody_onCameraControlRequestResultParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onCameraControlRequestResultParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onCameraControlRequestResultParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onCameraControlRequestResultParams*>(
               &_CallbackBody_onCameraControlRequestResultParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(CallbackBody_onCameraControlRequestResultParams& a, CallbackBody_onCameraControlRequestResultParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onCameraControlRequestResultParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onCameraControlRequestResultParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onCameraControlRequestResultParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onCameraControlRequestResultParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onCameraControlRequestResultParams& from);
  void MergeFrom(const CallbackBody_onCameraControlRequestResultParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onCameraControlRequestResultParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams";
  }
  protected:
  explicit CallbackBody_onCameraControlRequestResultParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPUserFieldNumber = 1,
    kIsApprovedFieldNumber = 2,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  bool has_puser() const;
  void clear_puser() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_puser();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_puser();
  void set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_puser() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_puser();
  public:
  void unsafe_arena_set_allocated_puser(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_puser();
  // optional bool isApproved = 2;
  bool has_isapproved() const;
  void clear_isapproved() ;
  bool isapproved() const;
  void set_isapproved(bool value);

  private:
  bool _internal_isapproved() const;
  void _internal_set_isapproved(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser_;
    bool isapproved_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onCameraControlRequestReceivedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams) */ {
 public:
  inline CallbackBody_onCameraControlRequestReceivedParams() : CallbackBody_onCameraControlRequestReceivedParams(nullptr) {}
  ~CallbackBody_onCameraControlRequestReceivedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onCameraControlRequestReceivedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onCameraControlRequestReceivedParams(const CallbackBody_onCameraControlRequestReceivedParams& from);
  CallbackBody_onCameraControlRequestReceivedParams(CallbackBody_onCameraControlRequestReceivedParams&& from) noexcept
    : CallbackBody_onCameraControlRequestReceivedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onCameraControlRequestReceivedParams& operator=(const CallbackBody_onCameraControlRequestReceivedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onCameraControlRequestReceivedParams& operator=(CallbackBody_onCameraControlRequestReceivedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onCameraControlRequestReceivedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onCameraControlRequestReceivedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onCameraControlRequestReceivedParams*>(
               &_CallbackBody_onCameraControlRequestReceivedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(CallbackBody_onCameraControlRequestReceivedParams& a, CallbackBody_onCameraControlRequestReceivedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onCameraControlRequestReceivedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onCameraControlRequestReceivedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onCameraControlRequestReceivedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onCameraControlRequestReceivedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onCameraControlRequestReceivedParams& from);
  void MergeFrom(const CallbackBody_onCameraControlRequestReceivedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onCameraControlRequestReceivedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams";
  }
  protected:
  explicit CallbackBody_onCameraControlRequestReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPUserFieldNumber = 1,
    kRequestTypeFieldNumber = 2,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  bool has_puser() const;
  void clear_puser() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_puser();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_puser();
  void set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_puser() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_puser();
  public:
  void unsafe_arena_set_allocated_puser(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_puser();
  // optional int32 requestType = 2;
  bool has_requesttype() const;
  void clear_requesttype() ;
  ::int32_t requesttype() const;
  void set_requesttype(::int32_t value);

  private:
  ::int32_t _internal_requesttype() const;
  void _internal_set_requesttype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser_;
    ::int32_t requesttype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onRemoteControlStatusParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams) */ {
 public:
  inline CallbackBody_onRemoteControlStatusParams() : CallbackBody_onRemoteControlStatusParams(nullptr) {}
  ~CallbackBody_onRemoteControlStatusParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlStatusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onRemoteControlStatusParams(const CallbackBody_onRemoteControlStatusParams& from);
  CallbackBody_onRemoteControlStatusParams(CallbackBody_onRemoteControlStatusParams&& from) noexcept
    : CallbackBody_onRemoteControlStatusParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onRemoteControlStatusParams& operator=(const CallbackBody_onRemoteControlStatusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onRemoteControlStatusParams& operator=(CallbackBody_onRemoteControlStatusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onRemoteControlStatusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onRemoteControlStatusParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onRemoteControlStatusParams*>(
               &_CallbackBody_onRemoteControlStatusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(CallbackBody_onRemoteControlStatusParams& a, CallbackBody_onRemoteControlStatusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onRemoteControlStatusParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onRemoteControlStatusParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onRemoteControlStatusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onRemoteControlStatusParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onRemoteControlStatusParams& from);
  void MergeFrom(const CallbackBody_onRemoteControlStatusParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onRemoteControlStatusParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams";
  }
  protected:
  explicit CallbackBody_onRemoteControlStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPUserFieldNumber = 1,
    kShareActionFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  bool has_puser() const;
  void clear_puser() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_puser();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_puser();
  void set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_puser() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_puser();
  public:
  void unsafe_arena_set_allocated_puser(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_puser();
  // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
  bool has_shareaction() const;
  void clear_shareaction() ;
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::ShareAction* release_shareaction();
  ::com::electron::zoomvideo::sdk::proto::ShareAction* mutable_shareaction();
  void set_allocated_shareaction(::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction);
  private:
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& _internal_shareaction() const;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _internal_mutable_shareaction();
  public:
  void unsafe_arena_set_allocated_shareaction(
      ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction);
  ::com::electron::zoomvideo::sdk::proto::ShareAction* unsafe_arena_release_shareaction();
  // optional int32 status = 3;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser_;
    ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onRemoteControlRequestReceivedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams) */ {
 public:
  inline CallbackBody_onRemoteControlRequestReceivedParams() : CallbackBody_onRemoteControlRequestReceivedParams(nullptr) {}
  ~CallbackBody_onRemoteControlRequestReceivedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlRequestReceivedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onRemoteControlRequestReceivedParams(const CallbackBody_onRemoteControlRequestReceivedParams& from);
  CallbackBody_onRemoteControlRequestReceivedParams(CallbackBody_onRemoteControlRequestReceivedParams&& from) noexcept
    : CallbackBody_onRemoteControlRequestReceivedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onRemoteControlRequestReceivedParams& operator=(const CallbackBody_onRemoteControlRequestReceivedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onRemoteControlRequestReceivedParams& operator=(CallbackBody_onRemoteControlRequestReceivedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onRemoteControlRequestReceivedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onRemoteControlRequestReceivedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onRemoteControlRequestReceivedParams*>(
               &_CallbackBody_onRemoteControlRequestReceivedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(CallbackBody_onRemoteControlRequestReceivedParams& a, CallbackBody_onRemoteControlRequestReceivedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onRemoteControlRequestReceivedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onRemoteControlRequestReceivedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onRemoteControlRequestReceivedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onRemoteControlRequestReceivedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onRemoteControlRequestReceivedParams& from);
  void MergeFrom(const CallbackBody_onRemoteControlRequestReceivedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onRemoteControlRequestReceivedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams";
  }
  protected:
  explicit CallbackBody_onRemoteControlRequestReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPUserFieldNumber = 1,
    kShareActionFieldNumber = 2,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  bool has_puser() const;
  void clear_puser() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_puser();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_puser();
  void set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_puser() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_puser();
  public:
  void unsafe_arena_set_allocated_puser(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_puser();
  // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
  bool has_shareaction() const;
  void clear_shareaction() ;
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::ShareAction* release_shareaction();
  ::com::electron::zoomvideo::sdk::proto::ShareAction* mutable_shareaction();
  void set_allocated_shareaction(::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction);
  private:
  const ::com::electron::zoomvideo::sdk::proto::ShareAction& _internal_shareaction() const;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _internal_mutable_shareaction();
  public:
  void unsafe_arena_set_allocated_shareaction(
      ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction);
  ::com::electron::zoomvideo::sdk::proto::ShareAction* unsafe_arena_release_shareaction();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser_;
    ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onRemoteControlServiceInstallResultParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams) */ {
 public:
  inline CallbackBody_onRemoteControlServiceInstallResultParams() : CallbackBody_onRemoteControlServiceInstallResultParams(nullptr) {}
  ~CallbackBody_onRemoteControlServiceInstallResultParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlServiceInstallResultParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onRemoteControlServiceInstallResultParams(const CallbackBody_onRemoteControlServiceInstallResultParams& from);
  CallbackBody_onRemoteControlServiceInstallResultParams(CallbackBody_onRemoteControlServiceInstallResultParams&& from) noexcept
    : CallbackBody_onRemoteControlServiceInstallResultParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onRemoteControlServiceInstallResultParams& operator=(const CallbackBody_onRemoteControlServiceInstallResultParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onRemoteControlServiceInstallResultParams& operator=(CallbackBody_onRemoteControlServiceInstallResultParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onRemoteControlServiceInstallResultParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onRemoteControlServiceInstallResultParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onRemoteControlServiceInstallResultParams*>(
               &_CallbackBody_onRemoteControlServiceInstallResultParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(CallbackBody_onRemoteControlServiceInstallResultParams& a, CallbackBody_onRemoteControlServiceInstallResultParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onRemoteControlServiceInstallResultParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onRemoteControlServiceInstallResultParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onRemoteControlServiceInstallResultParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onRemoteControlServiceInstallResultParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onRemoteControlServiceInstallResultParams& from);
  void MergeFrom(const CallbackBody_onRemoteControlServiceInstallResultParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onRemoteControlServiceInstallResultParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams";
  }
  protected:
  explicit CallbackBody_onRemoteControlServiceInstallResultParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBSuccessFieldNumber = 1,
  };
  // optional bool bSuccess = 1;
  bool has_bsuccess() const;
  void clear_bsuccess() ;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool bsuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onHostAskUnmuteParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams) */ {
 public:
  inline CallbackBody_onHostAskUnmuteParams() : CallbackBody_onHostAskUnmuteParams(nullptr) {}
  ~CallbackBody_onHostAskUnmuteParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onHostAskUnmuteParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onHostAskUnmuteParams(const CallbackBody_onHostAskUnmuteParams& from);
  CallbackBody_onHostAskUnmuteParams(CallbackBody_onHostAskUnmuteParams&& from) noexcept
    : CallbackBody_onHostAskUnmuteParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onHostAskUnmuteParams& operator=(const CallbackBody_onHostAskUnmuteParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onHostAskUnmuteParams& operator=(CallbackBody_onHostAskUnmuteParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onHostAskUnmuteParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onHostAskUnmuteParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onHostAskUnmuteParams*>(
               &_CallbackBody_onHostAskUnmuteParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CallbackBody_onHostAskUnmuteParams& a, CallbackBody_onHostAskUnmuteParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onHostAskUnmuteParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onHostAskUnmuteParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onHostAskUnmuteParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onHostAskUnmuteParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onHostAskUnmuteParams& from);
  void MergeFrom(const CallbackBody_onHostAskUnmuteParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onHostAskUnmuteParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams";
  }
  protected:
  explicit CallbackBody_onHostAskUnmuteParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onMultiCameraStreamStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams) */ {
 public:
  inline CallbackBody_onMultiCameraStreamStatusChangedParams() : CallbackBody_onMultiCameraStreamStatusChangedParams(nullptr) {}
  ~CallbackBody_onMultiCameraStreamStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onMultiCameraStreamStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onMultiCameraStreamStatusChangedParams(const CallbackBody_onMultiCameraStreamStatusChangedParams& from);
  CallbackBody_onMultiCameraStreamStatusChangedParams(CallbackBody_onMultiCameraStreamStatusChangedParams&& from) noexcept
    : CallbackBody_onMultiCameraStreamStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onMultiCameraStreamStatusChangedParams& operator=(const CallbackBody_onMultiCameraStreamStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onMultiCameraStreamStatusChangedParams& operator=(CallbackBody_onMultiCameraStreamStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onMultiCameraStreamStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onMultiCameraStreamStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onMultiCameraStreamStatusChangedParams*>(
               &_CallbackBody_onMultiCameraStreamStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(CallbackBody_onMultiCameraStreamStatusChangedParams& a, CallbackBody_onMultiCameraStreamStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onMultiCameraStreamStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onMultiCameraStreamStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onMultiCameraStreamStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onMultiCameraStreamStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onMultiCameraStreamStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onMultiCameraStreamStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onMultiCameraStreamStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onMultiCameraStreamStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kCameraStreamIDFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional int64 cameraStreamID = 3;
  bool has_camerastreamid() const;
  void clear_camerastreamid() ;
  ::int64_t camerastreamid() const;
  void set_camerastreamid(::int64_t value);

  private:
  ::int64_t _internal_camerastreamid() const;
  void _internal_set_camerastreamid(::int64_t value);

  public:
  // optional int32 status = 1;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::int64_t camerastreamid_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onMicSpeakerVolumeChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams) */ {
 public:
  inline CallbackBody_onMicSpeakerVolumeChangedParams() : CallbackBody_onMicSpeakerVolumeChangedParams(nullptr) {}
  ~CallbackBody_onMicSpeakerVolumeChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onMicSpeakerVolumeChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onMicSpeakerVolumeChangedParams(const CallbackBody_onMicSpeakerVolumeChangedParams& from);
  CallbackBody_onMicSpeakerVolumeChangedParams(CallbackBody_onMicSpeakerVolumeChangedParams&& from) noexcept
    : CallbackBody_onMicSpeakerVolumeChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onMicSpeakerVolumeChangedParams& operator=(const CallbackBody_onMicSpeakerVolumeChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onMicSpeakerVolumeChangedParams& operator=(CallbackBody_onMicSpeakerVolumeChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onMicSpeakerVolumeChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onMicSpeakerVolumeChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onMicSpeakerVolumeChangedParams*>(
               &_CallbackBody_onMicSpeakerVolumeChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(CallbackBody_onMicSpeakerVolumeChangedParams& a, CallbackBody_onMicSpeakerVolumeChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onMicSpeakerVolumeChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onMicSpeakerVolumeChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onMicSpeakerVolumeChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onMicSpeakerVolumeChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onMicSpeakerVolumeChangedParams& from);
  void MergeFrom(const CallbackBody_onMicSpeakerVolumeChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onMicSpeakerVolumeChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams";
  }
  protected:
  explicit CallbackBody_onMicSpeakerVolumeChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMicVolumeFieldNumber = 1,
    kSpeakerVolumeFieldNumber = 2,
  };
  // optional uint32 MicVolume = 1;
  bool has_micvolume() const;
  void clear_micvolume() ;
  ::uint32_t micvolume() const;
  void set_micvolume(::uint32_t value);

  private:
  ::uint32_t _internal_micvolume() const;
  void _internal_set_micvolume(::uint32_t value);

  public:
  // optional uint32 SpeakerVolume = 2;
  bool has_speakervolume() const;
  void clear_speakervolume() ;
  ::uint32_t speakervolume() const;
  void set_speakervolume(::uint32_t value);

  private:
  ::uint32_t _internal_speakervolume() const;
  void _internal_set_speakervolume(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t micvolume_;
    ::uint32_t speakervolume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onAudioDeviceStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams) */ {
 public:
  inline CallbackBody_onAudioDeviceStatusChangedParams() : CallbackBody_onAudioDeviceStatusChangedParams(nullptr) {}
  ~CallbackBody_onAudioDeviceStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onAudioDeviceStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onAudioDeviceStatusChangedParams(const CallbackBody_onAudioDeviceStatusChangedParams& from);
  CallbackBody_onAudioDeviceStatusChangedParams(CallbackBody_onAudioDeviceStatusChangedParams&& from) noexcept
    : CallbackBody_onAudioDeviceStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onAudioDeviceStatusChangedParams& operator=(const CallbackBody_onAudioDeviceStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onAudioDeviceStatusChangedParams& operator=(CallbackBody_onAudioDeviceStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onAudioDeviceStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onAudioDeviceStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onAudioDeviceStatusChangedParams*>(
               &_CallbackBody_onAudioDeviceStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(CallbackBody_onAudioDeviceStatusChangedParams& a, CallbackBody_onAudioDeviceStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onAudioDeviceStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onAudioDeviceStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onAudioDeviceStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onAudioDeviceStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onAudioDeviceStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onAudioDeviceStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onAudioDeviceStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onAudioDeviceStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // optional int32 type = 1;
  bool has_type() const;
  void clear_type() ;
  ::int32_t type() const;
  void set_type(::int32_t value);

  private:
  ::int32_t _internal_type() const;
  void _internal_set_type(::int32_t value);

  public:
  // optional int32 status = 2;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t type_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onTestMicStatusChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams) */ {
 public:
  inline CallbackBody_onTestMicStatusChangedParams() : CallbackBody_onTestMicStatusChangedParams(nullptr) {}
  ~CallbackBody_onTestMicStatusChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onTestMicStatusChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onTestMicStatusChangedParams(const CallbackBody_onTestMicStatusChangedParams& from);
  CallbackBody_onTestMicStatusChangedParams(CallbackBody_onTestMicStatusChangedParams&& from) noexcept
    : CallbackBody_onTestMicStatusChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onTestMicStatusChangedParams& operator=(const CallbackBody_onTestMicStatusChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onTestMicStatusChangedParams& operator=(CallbackBody_onTestMicStatusChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onTestMicStatusChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onTestMicStatusChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onTestMicStatusChangedParams*>(
               &_CallbackBody_onTestMicStatusChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(CallbackBody_onTestMicStatusChangedParams& a, CallbackBody_onTestMicStatusChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onTestMicStatusChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onTestMicStatusChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onTestMicStatusChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onTestMicStatusChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onTestMicStatusChangedParams& from);
  void MergeFrom(const CallbackBody_onTestMicStatusChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onTestMicStatusChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams";
  }
  protected:
  explicit CallbackBody_onTestMicStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional int32 status = 1;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onSelectedAudioDeviceChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams) */ {
 public:
  inline CallbackBody_onSelectedAudioDeviceChangedParams() : CallbackBody_onSelectedAudioDeviceChangedParams(nullptr) {}
  ~CallbackBody_onSelectedAudioDeviceChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onSelectedAudioDeviceChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onSelectedAudioDeviceChangedParams(const CallbackBody_onSelectedAudioDeviceChangedParams& from);
  CallbackBody_onSelectedAudioDeviceChangedParams(CallbackBody_onSelectedAudioDeviceChangedParams&& from) noexcept
    : CallbackBody_onSelectedAudioDeviceChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onSelectedAudioDeviceChangedParams& operator=(const CallbackBody_onSelectedAudioDeviceChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onSelectedAudioDeviceChangedParams& operator=(CallbackBody_onSelectedAudioDeviceChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onSelectedAudioDeviceChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onSelectedAudioDeviceChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onSelectedAudioDeviceChangedParams*>(
               &_CallbackBody_onSelectedAudioDeviceChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(CallbackBody_onSelectedAudioDeviceChangedParams& a, CallbackBody_onSelectedAudioDeviceChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onSelectedAudioDeviceChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onSelectedAudioDeviceChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onSelectedAudioDeviceChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onSelectedAudioDeviceChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onSelectedAudioDeviceChangedParams& from);
  void MergeFrom(const CallbackBody_onSelectedAudioDeviceChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onSelectedAudioDeviceChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams";
  }
  protected:
  explicit CallbackBody_onSelectedAudioDeviceChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onLiveTranscriptionStatusParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams) */ {
 public:
  inline CallbackBody_onLiveTranscriptionStatusParams() : CallbackBody_onLiveTranscriptionStatusParams(nullptr) {}
  ~CallbackBody_onLiveTranscriptionStatusParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onLiveTranscriptionStatusParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onLiveTranscriptionStatusParams(const CallbackBody_onLiveTranscriptionStatusParams& from);
  CallbackBody_onLiveTranscriptionStatusParams(CallbackBody_onLiveTranscriptionStatusParams&& from) noexcept
    : CallbackBody_onLiveTranscriptionStatusParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onLiveTranscriptionStatusParams& operator=(const CallbackBody_onLiveTranscriptionStatusParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onLiveTranscriptionStatusParams& operator=(CallbackBody_onLiveTranscriptionStatusParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onLiveTranscriptionStatusParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onLiveTranscriptionStatusParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onLiveTranscriptionStatusParams*>(
               &_CallbackBody_onLiveTranscriptionStatusParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CallbackBody_onLiveTranscriptionStatusParams& a, CallbackBody_onLiveTranscriptionStatusParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onLiveTranscriptionStatusParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onLiveTranscriptionStatusParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onLiveTranscriptionStatusParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onLiveTranscriptionStatusParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onLiveTranscriptionStatusParams& from);
  void MergeFrom(const CallbackBody_onLiveTranscriptionStatusParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onLiveTranscriptionStatusParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams";
  }
  protected:
  explicit CallbackBody_onLiveTranscriptionStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // optional int32 status = 1;
  bool has_status() const;
  void clear_status() ;
  ::int32_t status() const;
  void set_status(::int32_t value);

  private:
  ::int32_t _internal_status() const;
  void _internal_set_status(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t status_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onLiveTranscriptionMsgErrorParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams) */ {
 public:
  inline CallbackBody_onLiveTranscriptionMsgErrorParams() : CallbackBody_onLiveTranscriptionMsgErrorParams(nullptr) {}
  ~CallbackBody_onLiveTranscriptionMsgErrorParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onLiveTranscriptionMsgErrorParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onLiveTranscriptionMsgErrorParams(const CallbackBody_onLiveTranscriptionMsgErrorParams& from);
  CallbackBody_onLiveTranscriptionMsgErrorParams(CallbackBody_onLiveTranscriptionMsgErrorParams&& from) noexcept
    : CallbackBody_onLiveTranscriptionMsgErrorParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onLiveTranscriptionMsgErrorParams& operator=(const CallbackBody_onLiveTranscriptionMsgErrorParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onLiveTranscriptionMsgErrorParams& operator=(CallbackBody_onLiveTranscriptionMsgErrorParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onLiveTranscriptionMsgErrorParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onLiveTranscriptionMsgErrorParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onLiveTranscriptionMsgErrorParams*>(
               &_CallbackBody_onLiveTranscriptionMsgErrorParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CallbackBody_onLiveTranscriptionMsgErrorParams& a, CallbackBody_onLiveTranscriptionMsgErrorParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onLiveTranscriptionMsgErrorParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onLiveTranscriptionMsgErrorParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onLiveTranscriptionMsgErrorParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onLiveTranscriptionMsgErrorParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onLiveTranscriptionMsgErrorParams& from);
  void MergeFrom(const CallbackBody_onLiveTranscriptionMsgErrorParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onLiveTranscriptionMsgErrorParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams";
  }
  protected:
  explicit CallbackBody_onLiveTranscriptionMsgErrorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpokenLanguageFieldNumber = 1,
    kTranscriptLanguageFieldNumber = 2,
  };
  // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage spokenLanguage = 1;
  bool has_spokenlanguage() const;
  void clear_spokenlanguage() ;
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& spokenlanguage() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::LTTLanguage* release_spokenlanguage();
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* mutable_spokenlanguage();
  void set_allocated_spokenlanguage(::com::electron::zoomvideo::sdk::proto::LTTLanguage* spokenlanguage);
  private:
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& _internal_spokenlanguage() const;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* _internal_mutable_spokenlanguage();
  public:
  void unsafe_arena_set_allocated_spokenlanguage(
      ::com::electron::zoomvideo::sdk::proto::LTTLanguage* spokenlanguage);
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* unsafe_arena_release_spokenlanguage();
  // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage transcriptLanguage = 2;
  bool has_transcriptlanguage() const;
  void clear_transcriptlanguage() ;
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& transcriptlanguage() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::LTTLanguage* release_transcriptlanguage();
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* mutable_transcriptlanguage();
  void set_allocated_transcriptlanguage(::com::electron::zoomvideo::sdk::proto::LTTLanguage* transcriptlanguage);
  private:
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& _internal_transcriptlanguage() const;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* _internal_mutable_transcriptlanguage();
  public:
  void unsafe_arena_set_allocated_transcriptlanguage(
      ::com::electron::zoomvideo::sdk::proto::LTTLanguage* transcriptlanguage);
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* unsafe_arena_release_transcriptlanguage();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::LTTLanguage* spokenlanguage_;
    ::com::electron::zoomvideo::sdk::proto::LTTLanguage* transcriptlanguage_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_liveTranscriptionMsgInfoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams) */ {
 public:
  inline CallbackBody_liveTranscriptionMsgInfoParams() : CallbackBody_liveTranscriptionMsgInfoParams(nullptr) {}
  ~CallbackBody_liveTranscriptionMsgInfoParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_liveTranscriptionMsgInfoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_liveTranscriptionMsgInfoParams(const CallbackBody_liveTranscriptionMsgInfoParams& from);
  CallbackBody_liveTranscriptionMsgInfoParams(CallbackBody_liveTranscriptionMsgInfoParams&& from) noexcept
    : CallbackBody_liveTranscriptionMsgInfoParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_liveTranscriptionMsgInfoParams& operator=(const CallbackBody_liveTranscriptionMsgInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_liveTranscriptionMsgInfoParams& operator=(CallbackBody_liveTranscriptionMsgInfoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_liveTranscriptionMsgInfoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_liveTranscriptionMsgInfoParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_liveTranscriptionMsgInfoParams*>(
               &_CallbackBody_liveTranscriptionMsgInfoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(CallbackBody_liveTranscriptionMsgInfoParams& a, CallbackBody_liveTranscriptionMsgInfoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_liveTranscriptionMsgInfoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_liveTranscriptionMsgInfoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_liveTranscriptionMsgInfoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_liveTranscriptionMsgInfoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_liveTranscriptionMsgInfoParams& from);
  void MergeFrom(const CallbackBody_liveTranscriptionMsgInfoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_liveTranscriptionMsgInfoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams";
  }
  protected:
  explicit CallbackBody_liveTranscriptionMsgInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDFieldNumber = 2,
    kMessageContentFieldNumber = 3,
    kSpeakerNameFieldNumber = 4,
    kSpeakerIDFieldNumber = 5,
    kTimeStampFieldNumber = 1,
    kMessageTypeFieldNumber = 6,
  };
  // optional string messageID = 2;
  bool has_messageid() const;
  void clear_messageid() ;
  const std::string& messageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* ptr);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // optional string messageContent = 3;
  bool has_messagecontent() const;
  void clear_messagecontent() ;
  const std::string& messagecontent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messagecontent(Arg_&& arg, Args_... args);
  std::string* mutable_messagecontent();
  PROTOBUF_NODISCARD std::string* release_messagecontent();
  void set_allocated_messagecontent(std::string* ptr);

  private:
  const std::string& _internal_messagecontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messagecontent(
      const std::string& value);
  std::string* _internal_mutable_messagecontent();

  public:
  // optional string speakerName = 4;
  bool has_speakername() const;
  void clear_speakername() ;
  const std::string& speakername() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_speakername(Arg_&& arg, Args_... args);
  std::string* mutable_speakername();
  PROTOBUF_NODISCARD std::string* release_speakername();
  void set_allocated_speakername(std::string* ptr);

  private:
  const std::string& _internal_speakername() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speakername(
      const std::string& value);
  std::string* _internal_mutable_speakername();

  public:
  // optional string speakerID = 5;
  bool has_speakerid() const;
  void clear_speakerid() ;
  const std::string& speakerid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_speakerid(Arg_&& arg, Args_... args);
  std::string* mutable_speakerid();
  PROTOBUF_NODISCARD std::string* release_speakerid();
  void set_allocated_speakerid(std::string* ptr);

  private:
  const std::string& _internal_speakerid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speakerid(
      const std::string& value);
  std::string* _internal_mutable_speakerid();

  public:
  // optional int64 timeStamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  ::int64_t timestamp() const;
  void set_timestamp(::int64_t value);

  private:
  ::int64_t _internal_timestamp() const;
  void _internal_set_timestamp(::int64_t value);

  public:
  // optional int32 messageType = 6;
  bool has_messagetype() const;
  void clear_messagetype() ;
  ::int32_t messagetype() const;
  void set_messagetype(::int32_t value);

  private:
  ::int32_t _internal_messagetype() const;
  void _internal_set_messagetype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messagecontent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speakername_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speakerid_;
    ::int64_t timestamp_;
    ::int32_t messagetype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onCalloutJoinSuccessParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams) */ {
 public:
  inline CallbackBody_onCalloutJoinSuccessParams() : CallbackBody_onCalloutJoinSuccessParams(nullptr) {}
  ~CallbackBody_onCalloutJoinSuccessParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onCalloutJoinSuccessParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onCalloutJoinSuccessParams(const CallbackBody_onCalloutJoinSuccessParams& from);
  CallbackBody_onCalloutJoinSuccessParams(CallbackBody_onCalloutJoinSuccessParams&& from) noexcept
    : CallbackBody_onCalloutJoinSuccessParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onCalloutJoinSuccessParams& operator=(const CallbackBody_onCalloutJoinSuccessParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onCalloutJoinSuccessParams& operator=(CallbackBody_onCalloutJoinSuccessParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onCalloutJoinSuccessParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onCalloutJoinSuccessParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onCalloutJoinSuccessParams*>(
               &_CallbackBody_onCalloutJoinSuccessParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(CallbackBody_onCalloutJoinSuccessParams& a, CallbackBody_onCalloutJoinSuccessParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onCalloutJoinSuccessParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onCalloutJoinSuccessParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onCalloutJoinSuccessParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onCalloutJoinSuccessParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onCalloutJoinSuccessParams& from);
  void MergeFrom(const CallbackBody_onCalloutJoinSuccessParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onCalloutJoinSuccessParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams";
  }
  protected:
  explicit CallbackBody_onCalloutJoinSuccessParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneNumberFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // optional string phoneNumber = 2;
  bool has_phonenumber() const;
  void clear_phonenumber() ;
  const std::string& phonenumber() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenumber(Arg_&& arg, Args_... args);
  std::string* mutable_phonenumber();
  PROTOBUF_NODISCARD std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* ptr);

  private:
  const std::string& _internal_phonenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenumber(
      const std::string& value);
  std::string* _internal_mutable_phonenumber();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenumber_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onSessionLeaveParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams) */ {
 public:
  inline CallbackBody_onSessionLeaveParams() : CallbackBody_onSessionLeaveParams(nullptr) {}
  ~CallbackBody_onSessionLeaveParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onSessionLeaveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onSessionLeaveParams(const CallbackBody_onSessionLeaveParams& from);
  CallbackBody_onSessionLeaveParams(CallbackBody_onSessionLeaveParams&& from) noexcept
    : CallbackBody_onSessionLeaveParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onSessionLeaveParams& operator=(const CallbackBody_onSessionLeaveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onSessionLeaveParams& operator=(CallbackBody_onSessionLeaveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onSessionLeaveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onSessionLeaveParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onSessionLeaveParams*>(
               &_CallbackBody_onSessionLeaveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(CallbackBody_onSessionLeaveParams& a, CallbackBody_onSessionLeaveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onSessionLeaveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onSessionLeaveParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onSessionLeaveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onSessionLeaveParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onSessionLeaveParams& from);
  void MergeFrom(const CallbackBody_onSessionLeaveParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onSessionLeaveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams";
  }
  protected:
  explicit CallbackBody_onSessionLeaveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEReasonFieldNumber = 1,
  };
  // optional int32 eReason = 1;
  bool has_ereason() const;
  void clear_ereason() ;
  ::int32_t ereason() const;
  void set_ereason(::int32_t value);

  private:
  ::int32_t _internal_ereason() const;
  void _internal_set_ereason(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t ereason_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onShareCursorDataReceivedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams) */ {
 public:
  inline CallbackBody_onShareCursorDataReceivedParams() : CallbackBody_onShareCursorDataReceivedParams(nullptr) {}
  ~CallbackBody_onShareCursorDataReceivedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onShareCursorDataReceivedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onShareCursorDataReceivedParams(const CallbackBody_onShareCursorDataReceivedParams& from);
  CallbackBody_onShareCursorDataReceivedParams(CallbackBody_onShareCursorDataReceivedParams&& from) noexcept
    : CallbackBody_onShareCursorDataReceivedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onShareCursorDataReceivedParams& operator=(const CallbackBody_onShareCursorDataReceivedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onShareCursorDataReceivedParams& operator=(CallbackBody_onShareCursorDataReceivedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onShareCursorDataReceivedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onShareCursorDataReceivedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onShareCursorDataReceivedParams*>(
               &_CallbackBody_onShareCursorDataReceivedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(CallbackBody_onShareCursorDataReceivedParams& a, CallbackBody_onShareCursorDataReceivedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onShareCursorDataReceivedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onShareCursorDataReceivedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onShareCursorDataReceivedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onShareCursorDataReceivedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onShareCursorDataReceivedParams& from);
  void MergeFrom(const CallbackBody_onShareCursorDataReceivedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onShareCursorDataReceivedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams";
  }
  protected:
  explicit CallbackBody_onShareCursorDataReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData info = 1;
  bool has_info() const;
  void clear_info() ;
  const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData& info() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* release_info();
  ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* mutable_info();
  void set_allocated_info(::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* info);
  private:
  const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData& _internal_info() const;
  ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* info);
  ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* unsafe_arena_release_info();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* info_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onSpotlightVideoChangedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams) */ {
 public:
  inline CallbackBody_onSpotlightVideoChangedParams() : CallbackBody_onSpotlightVideoChangedParams(nullptr) {}
  ~CallbackBody_onSpotlightVideoChangedParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onSpotlightVideoChangedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onSpotlightVideoChangedParams(const CallbackBody_onSpotlightVideoChangedParams& from);
  CallbackBody_onSpotlightVideoChangedParams(CallbackBody_onSpotlightVideoChangedParams&& from) noexcept
    : CallbackBody_onSpotlightVideoChangedParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onSpotlightVideoChangedParams& operator=(const CallbackBody_onSpotlightVideoChangedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onSpotlightVideoChangedParams& operator=(CallbackBody_onSpotlightVideoChangedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onSpotlightVideoChangedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onSpotlightVideoChangedParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onSpotlightVideoChangedParams*>(
               &_CallbackBody_onSpotlightVideoChangedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(CallbackBody_onSpotlightVideoChangedParams& a, CallbackBody_onSpotlightVideoChangedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onSpotlightVideoChangedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onSpotlightVideoChangedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onSpotlightVideoChangedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onSpotlightVideoChangedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onSpotlightVideoChangedParams& from);
  void MergeFrom(const CallbackBody_onSpotlightVideoChangedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onSpotlightVideoChangedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams";
  }
  protected:
  explicit CallbackBody_onSpotlightVideoChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserListFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  bool has_zn_userlist() const;
  void clear_zn_userlist() ;
  const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::UserList* release_zn_userlist();
  ::com::electron::zoomvideo::sdk::proto::UserList* mutable_zn_userlist();
  void set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::UserList& _internal_zn_userlist() const;
  ::com::electron::zoomvideo::sdk::proto::UserList* _internal_mutable_zn_userlist();
  public:
  void unsafe_arena_set_allocated_zn_userlist(
      ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist);
  ::com::electron::zoomvideo::sdk::proto::UserList* unsafe_arena_release_zn_userlist();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onBindIncomingLiveStreamResponseParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams) */ {
 public:
  inline CallbackBody_onBindIncomingLiveStreamResponseParams() : CallbackBody_onBindIncomingLiveStreamResponseParams(nullptr) {}
  ~CallbackBody_onBindIncomingLiveStreamResponseParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onBindIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onBindIncomingLiveStreamResponseParams(const CallbackBody_onBindIncomingLiveStreamResponseParams& from);
  CallbackBody_onBindIncomingLiveStreamResponseParams(CallbackBody_onBindIncomingLiveStreamResponseParams&& from) noexcept
    : CallbackBody_onBindIncomingLiveStreamResponseParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onBindIncomingLiveStreamResponseParams& operator=(const CallbackBody_onBindIncomingLiveStreamResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onBindIncomingLiveStreamResponseParams& operator=(CallbackBody_onBindIncomingLiveStreamResponseParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onBindIncomingLiveStreamResponseParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onBindIncomingLiveStreamResponseParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onBindIncomingLiveStreamResponseParams*>(
               &_CallbackBody_onBindIncomingLiveStreamResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(CallbackBody_onBindIncomingLiveStreamResponseParams& a, CallbackBody_onBindIncomingLiveStreamResponseParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onBindIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onBindIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onBindIncomingLiveStreamResponseParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onBindIncomingLiveStreamResponseParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onBindIncomingLiveStreamResponseParams& from);
  void MergeFrom(const CallbackBody_onBindIncomingLiveStreamResponseParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onBindIncomingLiveStreamResponseParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams";
  }
  protected:
  explicit CallbackBody_onBindIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStreamKeyIDFieldNumber = 2,
    kBSuccessFieldNumber = 1,
  };
  // optional string strStreamKeyID = 2;
  bool has_strstreamkeyid() const;
  void clear_strstreamkeyid() ;
  const std::string& strstreamkeyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strstreamkeyid(Arg_&& arg, Args_... args);
  std::string* mutable_strstreamkeyid();
  PROTOBUF_NODISCARD std::string* release_strstreamkeyid();
  void set_allocated_strstreamkeyid(std::string* ptr);

  private:
  const std::string& _internal_strstreamkeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstreamkeyid(
      const std::string& value);
  std::string* _internal_mutable_strstreamkeyid();

  public:
  // optional bool bSuccess = 1;
  bool has_bsuccess() const;
  void clear_bsuccess() ;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstreamkeyid_;
    bool bsuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onUnbindIncomingLiveStreamResponseParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams) */ {
 public:
  inline CallbackBody_onUnbindIncomingLiveStreamResponseParams() : CallbackBody_onUnbindIncomingLiveStreamResponseParams(nullptr) {}
  ~CallbackBody_onUnbindIncomingLiveStreamResponseParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onUnbindIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onUnbindIncomingLiveStreamResponseParams(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from);
  CallbackBody_onUnbindIncomingLiveStreamResponseParams(CallbackBody_onUnbindIncomingLiveStreamResponseParams&& from) noexcept
    : CallbackBody_onUnbindIncomingLiveStreamResponseParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onUnbindIncomingLiveStreamResponseParams& operator=(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onUnbindIncomingLiveStreamResponseParams& operator=(CallbackBody_onUnbindIncomingLiveStreamResponseParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onUnbindIncomingLiveStreamResponseParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onUnbindIncomingLiveStreamResponseParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onUnbindIncomingLiveStreamResponseParams*>(
               &_CallbackBody_onUnbindIncomingLiveStreamResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(CallbackBody_onUnbindIncomingLiveStreamResponseParams& a, CallbackBody_onUnbindIncomingLiveStreamResponseParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onUnbindIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onUnbindIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onUnbindIncomingLiveStreamResponseParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onUnbindIncomingLiveStreamResponseParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from);
  void MergeFrom(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onUnbindIncomingLiveStreamResponseParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams";
  }
  protected:
  explicit CallbackBody_onUnbindIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStreamKeyIDFieldNumber = 2,
    kBSuccessFieldNumber = 1,
  };
  // optional string strStreamKeyID = 2;
  bool has_strstreamkeyid() const;
  void clear_strstreamkeyid() ;
  const std::string& strstreamkeyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strstreamkeyid(Arg_&& arg, Args_... args);
  std::string* mutable_strstreamkeyid();
  PROTOBUF_NODISCARD std::string* release_strstreamkeyid();
  void set_allocated_strstreamkeyid(std::string* ptr);

  private:
  const std::string& _internal_strstreamkeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstreamkeyid(
      const std::string& value);
  std::string* _internal_mutable_strstreamkeyid();

  public:
  // optional bool bSuccess = 1;
  bool has_bsuccess() const;
  void clear_bsuccess() ;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstreamkeyid_;
    bool bsuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onIncomingLiveStreamStatusResponseParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams) */ {
 public:
  inline CallbackBody_onIncomingLiveStreamStatusResponseParams() : CallbackBody_onIncomingLiveStreamStatusResponseParams(nullptr) {}
  ~CallbackBody_onIncomingLiveStreamStatusResponseParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onIncomingLiveStreamStatusResponseParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onIncomingLiveStreamStatusResponseParams(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from);
  CallbackBody_onIncomingLiveStreamStatusResponseParams(CallbackBody_onIncomingLiveStreamStatusResponseParams&& from) noexcept
    : CallbackBody_onIncomingLiveStreamStatusResponseParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onIncomingLiveStreamStatusResponseParams& operator=(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onIncomingLiveStreamStatusResponseParams& operator=(CallbackBody_onIncomingLiveStreamStatusResponseParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onIncomingLiveStreamStatusResponseParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onIncomingLiveStreamStatusResponseParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onIncomingLiveStreamStatusResponseParams*>(
               &_CallbackBody_onIncomingLiveStreamStatusResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(CallbackBody_onIncomingLiveStreamStatusResponseParams& a, CallbackBody_onIncomingLiveStreamStatusResponseParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onIncomingLiveStreamStatusResponseParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onIncomingLiveStreamStatusResponseParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onIncomingLiveStreamStatusResponseParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onIncomingLiveStreamStatusResponseParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from);
  void MergeFrom(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onIncomingLiveStreamStatusResponseParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams";
  }
  protected:
  explicit CallbackBody_onIncomingLiveStreamStatusResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPStreamsStatusListFieldNumber = 2,
    kBSuccessFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList pStreamsStatusList = 2;
  bool has_pstreamsstatuslist() const;
  void clear_pstreamsstatuslist() ;
  const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList& pstreamsstatuslist() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* release_pstreamsstatuslist();
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* mutable_pstreamsstatuslist();
  void set_allocated_pstreamsstatuslist(::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* pstreamsstatuslist);
  private:
  const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList& _internal_pstreamsstatuslist() const;
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* _internal_mutable_pstreamsstatuslist();
  public:
  void unsafe_arena_set_allocated_pstreamsstatuslist(
      ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* pstreamsstatuslist);
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* unsafe_arena_release_pstreamsstatuslist();
  // optional bool bSuccess = 1;
  bool has_bsuccess() const;
  void clear_bsuccess() ;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* pstreamsstatuslist_;
    bool bsuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onStartIncomingLiveStreamResponseParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams) */ {
 public:
  inline CallbackBody_onStartIncomingLiveStreamResponseParams() : CallbackBody_onStartIncomingLiveStreamResponseParams(nullptr) {}
  ~CallbackBody_onStartIncomingLiveStreamResponseParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onStartIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onStartIncomingLiveStreamResponseParams(const CallbackBody_onStartIncomingLiveStreamResponseParams& from);
  CallbackBody_onStartIncomingLiveStreamResponseParams(CallbackBody_onStartIncomingLiveStreamResponseParams&& from) noexcept
    : CallbackBody_onStartIncomingLiveStreamResponseParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onStartIncomingLiveStreamResponseParams& operator=(const CallbackBody_onStartIncomingLiveStreamResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onStartIncomingLiveStreamResponseParams& operator=(CallbackBody_onStartIncomingLiveStreamResponseParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onStartIncomingLiveStreamResponseParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onStartIncomingLiveStreamResponseParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onStartIncomingLiveStreamResponseParams*>(
               &_CallbackBody_onStartIncomingLiveStreamResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(CallbackBody_onStartIncomingLiveStreamResponseParams& a, CallbackBody_onStartIncomingLiveStreamResponseParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onStartIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onStartIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onStartIncomingLiveStreamResponseParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onStartIncomingLiveStreamResponseParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onStartIncomingLiveStreamResponseParams& from);
  void MergeFrom(const CallbackBody_onStartIncomingLiveStreamResponseParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onStartIncomingLiveStreamResponseParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams";
  }
  protected:
  explicit CallbackBody_onStartIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStreamKeyIDFieldNumber = 2,
    kBSuccessFieldNumber = 1,
  };
  // optional string strStreamKeyID = 2;
  bool has_strstreamkeyid() const;
  void clear_strstreamkeyid() ;
  const std::string& strstreamkeyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strstreamkeyid(Arg_&& arg, Args_... args);
  std::string* mutable_strstreamkeyid();
  PROTOBUF_NODISCARD std::string* release_strstreamkeyid();
  void set_allocated_strstreamkeyid(std::string* ptr);

  private:
  const std::string& _internal_strstreamkeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstreamkeyid(
      const std::string& value);
  std::string* _internal_mutable_strstreamkeyid();

  public:
  // optional bool bSuccess = 1;
  bool has_bsuccess() const;
  void clear_bsuccess() ;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstreamkeyid_;
    bool bsuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody_onStopIncomingLiveStreamResponseParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams) */ {
 public:
  inline CallbackBody_onStopIncomingLiveStreamResponseParams() : CallbackBody_onStopIncomingLiveStreamResponseParams(nullptr) {}
  ~CallbackBody_onStopIncomingLiveStreamResponseParams() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody_onStopIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody_onStopIncomingLiveStreamResponseParams(const CallbackBody_onStopIncomingLiveStreamResponseParams& from);
  CallbackBody_onStopIncomingLiveStreamResponseParams(CallbackBody_onStopIncomingLiveStreamResponseParams&& from) noexcept
    : CallbackBody_onStopIncomingLiveStreamResponseParams() {
    *this = ::std::move(from);
  }

  inline CallbackBody_onStopIncomingLiveStreamResponseParams& operator=(const CallbackBody_onStopIncomingLiveStreamResponseParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody_onStopIncomingLiveStreamResponseParams& operator=(CallbackBody_onStopIncomingLiveStreamResponseParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody_onStopIncomingLiveStreamResponseParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody_onStopIncomingLiveStreamResponseParams* internal_default_instance() {
    return reinterpret_cast<const CallbackBody_onStopIncomingLiveStreamResponseParams*>(
               &_CallbackBody_onStopIncomingLiveStreamResponseParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(CallbackBody_onStopIncomingLiveStreamResponseParams& a, CallbackBody_onStopIncomingLiveStreamResponseParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody_onStopIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody_onStopIncomingLiveStreamResponseParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody_onStopIncomingLiveStreamResponseParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody_onStopIncomingLiveStreamResponseParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody_onStopIncomingLiveStreamResponseParams& from);
  void MergeFrom(const CallbackBody_onStopIncomingLiveStreamResponseParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody_onStopIncomingLiveStreamResponseParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams";
  }
  protected:
  explicit CallbackBody_onStopIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStreamKeyIDFieldNumber = 2,
    kBSuccessFieldNumber = 1,
  };
  // optional string strStreamKeyID = 2;
  bool has_strstreamkeyid() const;
  void clear_strstreamkeyid() ;
  const std::string& strstreamkeyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strstreamkeyid(Arg_&& arg, Args_... args);
  std::string* mutable_strstreamkeyid();
  PROTOBUF_NODISCARD std::string* release_strstreamkeyid();
  void set_allocated_strstreamkeyid(std::string* ptr);

  private:
  const std::string& _internal_strstreamkeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstreamkeyid(
      const std::string& value);
  std::string* _internal_mutable_strstreamkeyid();

  public:
  // optional bool bSuccess = 1;
  bool has_bsuccess() const;
  void clear_bsuccess() ;
  bool bsuccess() const;
  void set_bsuccess(bool value);

  private:
  bool _internal_bsuccess() const;
  void _internal_set_bsuccess(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstreamkeyid_;
    bool bsuccess_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CallbackBody final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CallbackBody) */ {
 public:
  inline CallbackBody() : CallbackBody(nullptr) {}
  ~CallbackBody() override;
  explicit PROTOBUF_CONSTEXPR CallbackBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CallbackBody(const CallbackBody& from);
  CallbackBody(CallbackBody&& from) noexcept
    : CallbackBody() {
    *this = ::std::move(from);
  }

  inline CallbackBody& operator=(const CallbackBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline CallbackBody& operator=(CallbackBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CallbackBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const CallbackBody* internal_default_instance() {
    return reinterpret_cast<const CallbackBody*>(
               &_CallbackBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(CallbackBody& a, CallbackBody& b) {
    a.Swap(&b);
  }
  inline void Swap(CallbackBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CallbackBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CallbackBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CallbackBody>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CallbackBody& from);
  void MergeFrom(const CallbackBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CallbackBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CallbackBody";
  }
  protected:
  explicit CallbackBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CallbackBody_onErrorParams onErrorParams;
  typedef CallbackBody_onUserJoinParams onUserJoinParams;
  typedef CallbackBody_onUserLeaveParams onUserLeaveParams;
  typedef CallbackBody_onUserVideoStatusChangedParams onUserVideoStatusChangedParams;
  typedef CallbackBody_onUserAudioStatusChangedParams onUserAudioStatusChangedParams;
  typedef CallbackBody_onUserShareStatusChangedParams onUserShareStatusChangedParams;
  typedef CallbackBody_onFailedToStartShareParams onFailedToStartShareParams;
  typedef CallbackBody_onLiveStreamStatusChangedParams onLiveStreamStatusChangedParams;
  typedef CallbackBody_onUserHostChangedParams onUserHostChangedParams;
  typedef CallbackBody_onUserNameChangedParams onUserNameChangedParams;
  typedef CallbackBody_onUserManagerChangedParams onUserManagerChangedParams;
  typedef CallbackBody_onUserActiveAudioChangedParams onUserActiveAudioChangedParams;
  typedef CallbackBody_onChatNewMessageNotifyParams onChatNewMessageNotifyParams;
  typedef CallbackBody_onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParams;
  typedef CallbackBody_onVideoSourceInitializeParams onVideoSourceInitializeParams;
  typedef CallbackBody_onPropertyChangeParams onPropertyChangeParams;
  typedef CallbackBody_onRawDataStatusChangedParams onRawDataStatusChangedParams;
  typedef CallbackBody_onCommandReceivedParams onCommandReceivedParams;
  typedef CallbackBody_onCommandChannelConnectResultParams onCommandChannelConnectResultParams;
  typedef CallbackBody_onInviteByPhoneStatusParams onInviteByPhoneStatusParams;
  typedef CallbackBody_onCloudRecordingStatusParams onCloudRecordingStatusParams;
  typedef CallbackBody_onCameraControlRequestResultParams onCameraControlRequestResultParams;
  typedef CallbackBody_onCameraControlRequestReceivedParams onCameraControlRequestReceivedParams;
  typedef CallbackBody_onRemoteControlStatusParams onRemoteControlStatusParams;
  typedef CallbackBody_onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParams;
  typedef CallbackBody_onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParams;
  typedef CallbackBody_onHostAskUnmuteParams onHostAskUnmuteParams;
  typedef CallbackBody_onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParams;
  typedef CallbackBody_onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParams;
  typedef CallbackBody_onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParams;
  typedef CallbackBody_onTestMicStatusChangedParams onTestMicStatusChangedParams;
  typedef CallbackBody_onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParams;
  typedef CallbackBody_onLiveTranscriptionStatusParams onLiveTranscriptionStatusParams;
  typedef CallbackBody_onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParams;
  typedef CallbackBody_liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParams;
  typedef CallbackBody_onCalloutJoinSuccessParams onCalloutJoinSuccessParams;
  typedef CallbackBody_onSessionLeaveParams onSessionLeaveParams;
  typedef CallbackBody_onShareCursorDataReceivedParams onShareCursorDataReceivedParams;
  typedef CallbackBody_onSpotlightVideoChangedParams onSpotlightVideoChangedParams;
  typedef CallbackBody_onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParams;
  typedef CallbackBody_onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParams;
  typedef CallbackBody_onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParams;
  typedef CallbackBody_onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParams;
  typedef CallbackBody_onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParams;

  // accessors -------------------------------------------------------

  enum : int {
    kOnErrorParamFieldNumber = 2,
    kOnUserJoinParamFieldNumber = 3,
    kOnUserLeaveParamFieldNumber = 4,
    kOnUserVideoStatusChangedParamFieldNumber = 5,
    kOnUserAudioStatusChangedParamFieldNumber = 6,
    kOnUserShareStatusChangedParamFieldNumber = 7,
    kOnLiveStreamStatusChangedParamFieldNumber = 8,
    kOnUserHostChangedParamFieldNumber = 9,
    kOnUserActiveAudioChangedParamFieldNumber = 10,
    kOnChatNewMessageNotifyParamFieldNumber = 11,
    kOnVideoSourceInitializeParamFieldNumber = 12,
    kOnPropertyChangeParamFieldNumber = 13,
    kOnRawDataStatusChangedParamFieldNumber = 14,
    kOnUserManagerChangedParamFieldNumber = 15,
    kOnUserNameChangedParamFieldNumber = 16,
    kOnCommandReceivedParamFieldNumber = 17,
    kOnCloudRecordingStatusParamFieldNumber = 18,
    kOnCameraControlRequestResultParamFieldNumber = 19,
    kOnCameraControlRequestReceivedParamFieldNumber = 20,
    kOnCommandChannelConnectResultParamFieldNumber = 21,
    kOnHostAskUnmuteParamFieldNumber = 22,
    kOnInviteByPhoneStatusParamFieldNumber = 23,
    kOnMultiCameraStreamStatusChangedParamFieldNumber = 24,
    kOnMicSpeakerVolumeChangedParamFieldNumber = 25,
    kOnAudioDeviceStatusChangedParamFieldNumber = 26,
    kOnTestMicStatusChangedParamFieldNumber = 27,
    kOnSelectedAudioDeviceChangedParamFieldNumber = 28,
    kOnLiveTranscriptionStatusParamFieldNumber = 29,
    kOnLiveTranscriptionMsgErrorParamFieldNumber = 31,
    kOnChatMsgDeleteNotificationParamFieldNumber = 32,
    kLiveTranscriptionMsgInfoParamFieldNumber = 33,
    kOnCalloutJoinSuccessParamFieldNumber = 34,
    kOnSessionLeaveParamFieldNumber = 35,
    kOnShareCursorDataReceivedParamFieldNumber = 36,
    kOnRemoteControlStatusParamFieldNumber = 37,
    kOnRemoteControlRequestReceivedParamFieldNumber = 38,
    kOnRemoteControlServiceInstallResultParamFieldNumber = 39,
    kOnSpotlightVideoChangedParamFieldNumber = 40,
    kOnBindIncomingLiveStreamResponseParamFieldNumber = 41,
    kOnUnbindIncomingLiveStreamResponseParamFieldNumber = 42,
    kOnIncomingLiveStreamStatusResponseParamFieldNumber = 43,
    kOnStartIncomingLiveStreamResponseParamFieldNumber = 44,
    kOnStopIncomingLiveStreamResponseParamFieldNumber = 45,
    kOnFailedToStartShareParamFieldNumber = 46,
    kMsgtypeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams onErrorParam = 2;
  bool has_onerrorparam() const;
  void clear_onerrorparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams& onerrorparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* release_onerrorparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* mutable_onerrorparam();
  void set_allocated_onerrorparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* onerrorparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams& _internal_onerrorparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* _internal_mutable_onerrorparam();
  public:
  void unsafe_arena_set_allocated_onerrorparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* onerrorparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* unsafe_arena_release_onerrorparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams onUserJoinParam = 3;
  bool has_onuserjoinparam() const;
  void clear_onuserjoinparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams& onuserjoinparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* release_onuserjoinparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* mutable_onuserjoinparam();
  void set_allocated_onuserjoinparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* onuserjoinparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams& _internal_onuserjoinparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* _internal_mutable_onuserjoinparam();
  public:
  void unsafe_arena_set_allocated_onuserjoinparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* onuserjoinparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* unsafe_arena_release_onuserjoinparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams onUserLeaveParam = 4;
  bool has_onuserleaveparam() const;
  void clear_onuserleaveparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams& onuserleaveparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* release_onuserleaveparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* mutable_onuserleaveparam();
  void set_allocated_onuserleaveparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* onuserleaveparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams& _internal_onuserleaveparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* _internal_mutable_onuserleaveparam();
  public:
  void unsafe_arena_set_allocated_onuserleaveparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* onuserleaveparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* unsafe_arena_release_onuserleaveparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams onUserVideoStatusChangedParam = 5;
  bool has_onuservideostatuschangedparam() const;
  void clear_onuservideostatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams& onuservideostatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* release_onuservideostatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* mutable_onuservideostatuschangedparam();
  void set_allocated_onuservideostatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* onuservideostatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams& _internal_onuservideostatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* _internal_mutable_onuservideostatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onuservideostatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* onuservideostatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* unsafe_arena_release_onuservideostatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams onUserAudioStatusChangedParam = 6;
  bool has_onuseraudiostatuschangedparam() const;
  void clear_onuseraudiostatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams& onuseraudiostatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* release_onuseraudiostatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* mutable_onuseraudiostatuschangedparam();
  void set_allocated_onuseraudiostatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* onuseraudiostatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams& _internal_onuseraudiostatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* _internal_mutable_onuseraudiostatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onuseraudiostatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* onuseraudiostatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* unsafe_arena_release_onuseraudiostatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams onUserShareStatusChangedParam = 7;
  bool has_onusersharestatuschangedparam() const;
  void clear_onusersharestatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams& onusersharestatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* release_onusersharestatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* mutable_onusersharestatuschangedparam();
  void set_allocated_onusersharestatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* onusersharestatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams& _internal_onusersharestatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* _internal_mutable_onusersharestatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onusersharestatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* onusersharestatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* unsafe_arena_release_onusersharestatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams onLiveStreamStatusChangedParam = 8;
  bool has_onlivestreamstatuschangedparam() const;
  void clear_onlivestreamstatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams& onlivestreamstatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* release_onlivestreamstatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* mutable_onlivestreamstatuschangedparam();
  void set_allocated_onlivestreamstatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* onlivestreamstatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams& _internal_onlivestreamstatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* _internal_mutable_onlivestreamstatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onlivestreamstatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* onlivestreamstatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* unsafe_arena_release_onlivestreamstatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams onUserHostChangedParam = 9;
  bool has_onuserhostchangedparam() const;
  void clear_onuserhostchangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams& onuserhostchangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* release_onuserhostchangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* mutable_onuserhostchangedparam();
  void set_allocated_onuserhostchangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* onuserhostchangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams& _internal_onuserhostchangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* _internal_mutable_onuserhostchangedparam();
  public:
  void unsafe_arena_set_allocated_onuserhostchangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* onuserhostchangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* unsafe_arena_release_onuserhostchangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams onUserActiveAudioChangedParam = 10;
  bool has_onuseractiveaudiochangedparam() const;
  void clear_onuseractiveaudiochangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams& onuseractiveaudiochangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* release_onuseractiveaudiochangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* mutable_onuseractiveaudiochangedparam();
  void set_allocated_onuseractiveaudiochangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* onuseractiveaudiochangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams& _internal_onuseractiveaudiochangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* _internal_mutable_onuseractiveaudiochangedparam();
  public:
  void unsafe_arena_set_allocated_onuseractiveaudiochangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* onuseractiveaudiochangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* unsafe_arena_release_onuseractiveaudiochangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams onChatNewMessageNotifyParam = 11;
  bool has_onchatnewmessagenotifyparam() const;
  void clear_onchatnewmessagenotifyparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams& onchatnewmessagenotifyparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* release_onchatnewmessagenotifyparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* mutable_onchatnewmessagenotifyparam();
  void set_allocated_onchatnewmessagenotifyparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* onchatnewmessagenotifyparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams& _internal_onchatnewmessagenotifyparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* _internal_mutable_onchatnewmessagenotifyparam();
  public:
  void unsafe_arena_set_allocated_onchatnewmessagenotifyparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* onchatnewmessagenotifyparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* unsafe_arena_release_onchatnewmessagenotifyparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams onVideoSourceInitializeParam = 12;
  bool has_onvideosourceinitializeparam() const;
  void clear_onvideosourceinitializeparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams& onvideosourceinitializeparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* release_onvideosourceinitializeparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* mutable_onvideosourceinitializeparam();
  void set_allocated_onvideosourceinitializeparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* onvideosourceinitializeparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams& _internal_onvideosourceinitializeparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* _internal_mutable_onvideosourceinitializeparam();
  public:
  void unsafe_arena_set_allocated_onvideosourceinitializeparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* onvideosourceinitializeparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* unsafe_arena_release_onvideosourceinitializeparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams onPropertyChangeParam = 13;
  bool has_onpropertychangeparam() const;
  void clear_onpropertychangeparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams& onpropertychangeparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* release_onpropertychangeparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* mutable_onpropertychangeparam();
  void set_allocated_onpropertychangeparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* onpropertychangeparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams& _internal_onpropertychangeparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* _internal_mutable_onpropertychangeparam();
  public:
  void unsafe_arena_set_allocated_onpropertychangeparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* onpropertychangeparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* unsafe_arena_release_onpropertychangeparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams onRawDataStatusChangedParam = 14;
  bool has_onrawdatastatuschangedparam() const;
  void clear_onrawdatastatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams& onrawdatastatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* release_onrawdatastatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* mutable_onrawdatastatuschangedparam();
  void set_allocated_onrawdatastatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* onrawdatastatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams& _internal_onrawdatastatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* _internal_mutable_onrawdatastatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onrawdatastatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* onrawdatastatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* unsafe_arena_release_onrawdatastatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams onUserManagerChangedParam = 15;
  bool has_onusermanagerchangedparam() const;
  void clear_onusermanagerchangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams& onusermanagerchangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* release_onusermanagerchangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* mutable_onusermanagerchangedparam();
  void set_allocated_onusermanagerchangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* onusermanagerchangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams& _internal_onusermanagerchangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* _internal_mutable_onusermanagerchangedparam();
  public:
  void unsafe_arena_set_allocated_onusermanagerchangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* onusermanagerchangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* unsafe_arena_release_onusermanagerchangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams onUserNameChangedParam = 16;
  bool has_onusernamechangedparam() const;
  void clear_onusernamechangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams& onusernamechangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* release_onusernamechangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* mutable_onusernamechangedparam();
  void set_allocated_onusernamechangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* onusernamechangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams& _internal_onusernamechangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* _internal_mutable_onusernamechangedparam();
  public:
  void unsafe_arena_set_allocated_onusernamechangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* onusernamechangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* unsafe_arena_release_onusernamechangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams onCommandReceivedParam = 17;
  bool has_oncommandreceivedparam() const;
  void clear_oncommandreceivedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams& oncommandreceivedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* release_oncommandreceivedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* mutable_oncommandreceivedparam();
  void set_allocated_oncommandreceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* oncommandreceivedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams& _internal_oncommandreceivedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* _internal_mutable_oncommandreceivedparam();
  public:
  void unsafe_arena_set_allocated_oncommandreceivedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* oncommandreceivedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* unsafe_arena_release_oncommandreceivedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams onCloudRecordingStatusParam = 18;
  bool has_oncloudrecordingstatusparam() const;
  void clear_oncloudrecordingstatusparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams& oncloudrecordingstatusparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* release_oncloudrecordingstatusparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* mutable_oncloudrecordingstatusparam();
  void set_allocated_oncloudrecordingstatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* oncloudrecordingstatusparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams& _internal_oncloudrecordingstatusparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* _internal_mutable_oncloudrecordingstatusparam();
  public:
  void unsafe_arena_set_allocated_oncloudrecordingstatusparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* oncloudrecordingstatusparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* unsafe_arena_release_oncloudrecordingstatusparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams onCameraControlRequestResultParam = 19;
  bool has_oncameracontrolrequestresultparam() const;
  void clear_oncameracontrolrequestresultparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams& oncameracontrolrequestresultparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* release_oncameracontrolrequestresultparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* mutable_oncameracontrolrequestresultparam();
  void set_allocated_oncameracontrolrequestresultparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* oncameracontrolrequestresultparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams& _internal_oncameracontrolrequestresultparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* _internal_mutable_oncameracontrolrequestresultparam();
  public:
  void unsafe_arena_set_allocated_oncameracontrolrequestresultparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* oncameracontrolrequestresultparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* unsafe_arena_release_oncameracontrolrequestresultparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams onCameraControlRequestReceivedParam = 20;
  bool has_oncameracontrolrequestreceivedparam() const;
  void clear_oncameracontrolrequestreceivedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams& oncameracontrolrequestreceivedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* release_oncameracontrolrequestreceivedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* mutable_oncameracontrolrequestreceivedparam();
  void set_allocated_oncameracontrolrequestreceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* oncameracontrolrequestreceivedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams& _internal_oncameracontrolrequestreceivedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* _internal_mutable_oncameracontrolrequestreceivedparam();
  public:
  void unsafe_arena_set_allocated_oncameracontrolrequestreceivedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* oncameracontrolrequestreceivedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* unsafe_arena_release_oncameracontrolrequestreceivedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams onCommandChannelConnectResultParam = 21;
  bool has_oncommandchannelconnectresultparam() const;
  void clear_oncommandchannelconnectresultparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams& oncommandchannelconnectresultparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* release_oncommandchannelconnectresultparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* mutable_oncommandchannelconnectresultparam();
  void set_allocated_oncommandchannelconnectresultparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* oncommandchannelconnectresultparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams& _internal_oncommandchannelconnectresultparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* _internal_mutable_oncommandchannelconnectresultparam();
  public:
  void unsafe_arena_set_allocated_oncommandchannelconnectresultparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* oncommandchannelconnectresultparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* unsafe_arena_release_oncommandchannelconnectresultparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams onHostAskUnmuteParam = 22;
  bool has_onhostaskunmuteparam() const;
  void clear_onhostaskunmuteparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams& onhostaskunmuteparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* release_onhostaskunmuteparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* mutable_onhostaskunmuteparam();
  void set_allocated_onhostaskunmuteparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* onhostaskunmuteparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams& _internal_onhostaskunmuteparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* _internal_mutable_onhostaskunmuteparam();
  public:
  void unsafe_arena_set_allocated_onhostaskunmuteparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* onhostaskunmuteparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* unsafe_arena_release_onhostaskunmuteparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams onInviteByPhoneStatusParam = 23;
  bool has_oninvitebyphonestatusparam() const;
  void clear_oninvitebyphonestatusparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams& oninvitebyphonestatusparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* release_oninvitebyphonestatusparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* mutable_oninvitebyphonestatusparam();
  void set_allocated_oninvitebyphonestatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* oninvitebyphonestatusparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams& _internal_oninvitebyphonestatusparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* _internal_mutable_oninvitebyphonestatusparam();
  public:
  void unsafe_arena_set_allocated_oninvitebyphonestatusparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* oninvitebyphonestatusparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* unsafe_arena_release_oninvitebyphonestatusparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParam = 24;
  bool has_onmulticamerastreamstatuschangedparam() const;
  void clear_onmulticamerastreamstatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams& onmulticamerastreamstatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* release_onmulticamerastreamstatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* mutable_onmulticamerastreamstatuschangedparam();
  void set_allocated_onmulticamerastreamstatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* onmulticamerastreamstatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams& _internal_onmulticamerastreamstatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* _internal_mutable_onmulticamerastreamstatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onmulticamerastreamstatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* onmulticamerastreamstatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* unsafe_arena_release_onmulticamerastreamstatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParam = 25;
  bool has_onmicspeakervolumechangedparam() const;
  void clear_onmicspeakervolumechangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams& onmicspeakervolumechangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* release_onmicspeakervolumechangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* mutable_onmicspeakervolumechangedparam();
  void set_allocated_onmicspeakervolumechangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* onmicspeakervolumechangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams& _internal_onmicspeakervolumechangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* _internal_mutable_onmicspeakervolumechangedparam();
  public:
  void unsafe_arena_set_allocated_onmicspeakervolumechangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* onmicspeakervolumechangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* unsafe_arena_release_onmicspeakervolumechangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParam = 26;
  bool has_onaudiodevicestatuschangedparam() const;
  void clear_onaudiodevicestatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams& onaudiodevicestatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* release_onaudiodevicestatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* mutable_onaudiodevicestatuschangedparam();
  void set_allocated_onaudiodevicestatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* onaudiodevicestatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams& _internal_onaudiodevicestatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* _internal_mutable_onaudiodevicestatuschangedparam();
  public:
  void unsafe_arena_set_allocated_onaudiodevicestatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* onaudiodevicestatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* unsafe_arena_release_onaudiodevicestatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams onTestMicStatusChangedParam = 27;
  bool has_ontestmicstatuschangedparam() const;
  void clear_ontestmicstatuschangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams& ontestmicstatuschangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* release_ontestmicstatuschangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* mutable_ontestmicstatuschangedparam();
  void set_allocated_ontestmicstatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* ontestmicstatuschangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams& _internal_ontestmicstatuschangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* _internal_mutable_ontestmicstatuschangedparam();
  public:
  void unsafe_arena_set_allocated_ontestmicstatuschangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* ontestmicstatuschangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* unsafe_arena_release_ontestmicstatuschangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParam = 28;
  bool has_onselectedaudiodevicechangedparam() const;
  void clear_onselectedaudiodevicechangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams& onselectedaudiodevicechangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* release_onselectedaudiodevicechangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* mutable_onselectedaudiodevicechangedparam();
  void set_allocated_onselectedaudiodevicechangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* onselectedaudiodevicechangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams& _internal_onselectedaudiodevicechangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* _internal_mutable_onselectedaudiodevicechangedparam();
  public:
  void unsafe_arena_set_allocated_onselectedaudiodevicechangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* onselectedaudiodevicechangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* unsafe_arena_release_onselectedaudiodevicechangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams onLiveTranscriptionStatusParam = 29;
  bool has_onlivetranscriptionstatusparam() const;
  void clear_onlivetranscriptionstatusparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams& onlivetranscriptionstatusparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* release_onlivetranscriptionstatusparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* mutable_onlivetranscriptionstatusparam();
  void set_allocated_onlivetranscriptionstatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* onlivetranscriptionstatusparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams& _internal_onlivetranscriptionstatusparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* _internal_mutable_onlivetranscriptionstatusparam();
  public:
  void unsafe_arena_set_allocated_onlivetranscriptionstatusparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* onlivetranscriptionstatusparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* unsafe_arena_release_onlivetranscriptionstatusparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParam = 31;
  bool has_onlivetranscriptionmsgerrorparam() const;
  void clear_onlivetranscriptionmsgerrorparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams& onlivetranscriptionmsgerrorparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* release_onlivetranscriptionmsgerrorparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* mutable_onlivetranscriptionmsgerrorparam();
  void set_allocated_onlivetranscriptionmsgerrorparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* onlivetranscriptionmsgerrorparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams& _internal_onlivetranscriptionmsgerrorparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* _internal_mutable_onlivetranscriptionmsgerrorparam();
  public:
  void unsafe_arena_set_allocated_onlivetranscriptionmsgerrorparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* onlivetranscriptionmsgerrorparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* unsafe_arena_release_onlivetranscriptionmsgerrorparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParam = 32;
  bool has_onchatmsgdeletenotificationparam() const;
  void clear_onchatmsgdeletenotificationparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams& onchatmsgdeletenotificationparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* release_onchatmsgdeletenotificationparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* mutable_onchatmsgdeletenotificationparam();
  void set_allocated_onchatmsgdeletenotificationparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* onchatmsgdeletenotificationparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams& _internal_onchatmsgdeletenotificationparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* _internal_mutable_onchatmsgdeletenotificationparam();
  public:
  void unsafe_arena_set_allocated_onchatmsgdeletenotificationparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* onchatmsgdeletenotificationparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* unsafe_arena_release_onchatmsgdeletenotificationparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParam = 33;
  bool has_livetranscriptionmsginfoparam() const;
  void clear_livetranscriptionmsginfoparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams& livetranscriptionmsginfoparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* release_livetranscriptionmsginfoparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* mutable_livetranscriptionmsginfoparam();
  void set_allocated_livetranscriptionmsginfoparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* livetranscriptionmsginfoparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams& _internal_livetranscriptionmsginfoparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* _internal_mutable_livetranscriptionmsginfoparam();
  public:
  void unsafe_arena_set_allocated_livetranscriptionmsginfoparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* livetranscriptionmsginfoparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* unsafe_arena_release_livetranscriptionmsginfoparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams onCalloutJoinSuccessParam = 34;
  bool has_oncalloutjoinsuccessparam() const;
  void clear_oncalloutjoinsuccessparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams& oncalloutjoinsuccessparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* release_oncalloutjoinsuccessparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* mutable_oncalloutjoinsuccessparam();
  void set_allocated_oncalloutjoinsuccessparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* oncalloutjoinsuccessparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams& _internal_oncalloutjoinsuccessparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* _internal_mutable_oncalloutjoinsuccessparam();
  public:
  void unsafe_arena_set_allocated_oncalloutjoinsuccessparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* oncalloutjoinsuccessparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* unsafe_arena_release_oncalloutjoinsuccessparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams onSessionLeaveParam = 35;
  bool has_onsessionleaveparam() const;
  void clear_onsessionleaveparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams& onsessionleaveparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* release_onsessionleaveparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* mutable_onsessionleaveparam();
  void set_allocated_onsessionleaveparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* onsessionleaveparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams& _internal_onsessionleaveparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* _internal_mutable_onsessionleaveparam();
  public:
  void unsafe_arena_set_allocated_onsessionleaveparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* onsessionleaveparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* unsafe_arena_release_onsessionleaveparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams onShareCursorDataReceivedParam = 36;
  bool has_onsharecursordatareceivedparam() const;
  void clear_onsharecursordatareceivedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams& onsharecursordatareceivedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* release_onsharecursordatareceivedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* mutable_onsharecursordatareceivedparam();
  void set_allocated_onsharecursordatareceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* onsharecursordatareceivedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams& _internal_onsharecursordatareceivedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* _internal_mutable_onsharecursordatareceivedparam();
  public:
  void unsafe_arena_set_allocated_onsharecursordatareceivedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* onsharecursordatareceivedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* unsafe_arena_release_onsharecursordatareceivedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams onRemoteControlStatusParam = 37;
  bool has_onremotecontrolstatusparam() const;
  void clear_onremotecontrolstatusparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams& onremotecontrolstatusparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* release_onremotecontrolstatusparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* mutable_onremotecontrolstatusparam();
  void set_allocated_onremotecontrolstatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* onremotecontrolstatusparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams& _internal_onremotecontrolstatusparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* _internal_mutable_onremotecontrolstatusparam();
  public:
  void unsafe_arena_set_allocated_onremotecontrolstatusparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* onremotecontrolstatusparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* unsafe_arena_release_onremotecontrolstatusparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParam = 38;
  bool has_onremotecontrolrequestreceivedparam() const;
  void clear_onremotecontrolrequestreceivedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams& onremotecontrolrequestreceivedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* release_onremotecontrolrequestreceivedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* mutable_onremotecontrolrequestreceivedparam();
  void set_allocated_onremotecontrolrequestreceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* onremotecontrolrequestreceivedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams& _internal_onremotecontrolrequestreceivedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* _internal_mutable_onremotecontrolrequestreceivedparam();
  public:
  void unsafe_arena_set_allocated_onremotecontrolrequestreceivedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* onremotecontrolrequestreceivedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* unsafe_arena_release_onremotecontrolrequestreceivedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParam = 39;
  bool has_onremotecontrolserviceinstallresultparam() const;
  void clear_onremotecontrolserviceinstallresultparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams& onremotecontrolserviceinstallresultparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* release_onremotecontrolserviceinstallresultparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* mutable_onremotecontrolserviceinstallresultparam();
  void set_allocated_onremotecontrolserviceinstallresultparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* onremotecontrolserviceinstallresultparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams& _internal_onremotecontrolserviceinstallresultparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* _internal_mutable_onremotecontrolserviceinstallresultparam();
  public:
  void unsafe_arena_set_allocated_onremotecontrolserviceinstallresultparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* onremotecontrolserviceinstallresultparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* unsafe_arena_release_onremotecontrolserviceinstallresultparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams onSpotlightVideoChangedParam = 40;
  bool has_onspotlightvideochangedparam() const;
  void clear_onspotlightvideochangedparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams& onspotlightvideochangedparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* release_onspotlightvideochangedparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* mutable_onspotlightvideochangedparam();
  void set_allocated_onspotlightvideochangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* onspotlightvideochangedparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams& _internal_onspotlightvideochangedparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* _internal_mutable_onspotlightvideochangedparam();
  public:
  void unsafe_arena_set_allocated_onspotlightvideochangedparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* onspotlightvideochangedparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* unsafe_arena_release_onspotlightvideochangedparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParam = 41;
  bool has_onbindincominglivestreamresponseparam() const;
  void clear_onbindincominglivestreamresponseparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams& onbindincominglivestreamresponseparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* release_onbindincominglivestreamresponseparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* mutable_onbindincominglivestreamresponseparam();
  void set_allocated_onbindincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* onbindincominglivestreamresponseparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams& _internal_onbindincominglivestreamresponseparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* _internal_mutable_onbindincominglivestreamresponseparam();
  public:
  void unsafe_arena_set_allocated_onbindincominglivestreamresponseparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* onbindincominglivestreamresponseparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* unsafe_arena_release_onbindincominglivestreamresponseparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParam = 42;
  bool has_onunbindincominglivestreamresponseparam() const;
  void clear_onunbindincominglivestreamresponseparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams& onunbindincominglivestreamresponseparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* release_onunbindincominglivestreamresponseparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* mutable_onunbindincominglivestreamresponseparam();
  void set_allocated_onunbindincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* onunbindincominglivestreamresponseparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams& _internal_onunbindincominglivestreamresponseparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* _internal_mutable_onunbindincominglivestreamresponseparam();
  public:
  void unsafe_arena_set_allocated_onunbindincominglivestreamresponseparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* onunbindincominglivestreamresponseparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* unsafe_arena_release_onunbindincominglivestreamresponseparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParam = 43;
  bool has_onincominglivestreamstatusresponseparam() const;
  void clear_onincominglivestreamstatusresponseparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams& onincominglivestreamstatusresponseparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* release_onincominglivestreamstatusresponseparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* mutable_onincominglivestreamstatusresponseparam();
  void set_allocated_onincominglivestreamstatusresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* onincominglivestreamstatusresponseparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams& _internal_onincominglivestreamstatusresponseparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* _internal_mutable_onincominglivestreamstatusresponseparam();
  public:
  void unsafe_arena_set_allocated_onincominglivestreamstatusresponseparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* onincominglivestreamstatusresponseparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* unsafe_arena_release_onincominglivestreamstatusresponseparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParam = 44;
  bool has_onstartincominglivestreamresponseparam() const;
  void clear_onstartincominglivestreamresponseparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams& onstartincominglivestreamresponseparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* release_onstartincominglivestreamresponseparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* mutable_onstartincominglivestreamresponseparam();
  void set_allocated_onstartincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* onstartincominglivestreamresponseparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams& _internal_onstartincominglivestreamresponseparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* _internal_mutable_onstartincominglivestreamresponseparam();
  public:
  void unsafe_arena_set_allocated_onstartincominglivestreamresponseparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* onstartincominglivestreamresponseparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* unsafe_arena_release_onstartincominglivestreamresponseparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParam = 45;
  bool has_onstopincominglivestreamresponseparam() const;
  void clear_onstopincominglivestreamresponseparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams& onstopincominglivestreamresponseparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* release_onstopincominglivestreamresponseparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* mutable_onstopincominglivestreamresponseparam();
  void set_allocated_onstopincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* onstopincominglivestreamresponseparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams& _internal_onstopincominglivestreamresponseparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* _internal_mutable_onstopincominglivestreamresponseparam();
  public:
  void unsafe_arena_set_allocated_onstopincominglivestreamresponseparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* onstopincominglivestreamresponseparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* unsafe_arena_release_onstopincominglivestreamresponseparam();
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams onFailedToStartShareParam = 46;
  bool has_onfailedtostartshareparam() const;
  void clear_onfailedtostartshareparam() ;
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams& onfailedtostartshareparam() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* release_onfailedtostartshareparam();
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* mutable_onfailedtostartshareparam();
  void set_allocated_onfailedtostartshareparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* onfailedtostartshareparam);
  private:
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams& _internal_onfailedtostartshareparam() const;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* _internal_mutable_onfailedtostartshareparam();
  public:
  void unsafe_arena_set_allocated_onfailedtostartshareparam(
      ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* onfailedtostartshareparam);
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* unsafe_arena_release_onfailedtostartshareparam();
  // optional int32 msgtype = 1;
  bool has_msgtype() const;
  void clear_msgtype() ;
  ::int32_t msgtype() const;
  void set_msgtype(::int32_t value);

  private:
  ::int32_t _internal_msgtype() const;
  void _internal_set_msgtype(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CallbackBody)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* onerrorparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* onuserjoinparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* onuserleaveparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* onuservideostatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* onuseraudiostatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* onusersharestatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* onlivestreamstatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* onuserhostchangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* onuseractiveaudiochangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* onchatnewmessagenotifyparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* onvideosourceinitializeparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* onpropertychangeparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* onrawdatastatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* onusermanagerchangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* onusernamechangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* oncommandreceivedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* oncloudrecordingstatusparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* oncameracontrolrequestresultparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* oncameracontrolrequestreceivedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* oncommandchannelconnectresultparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* onhostaskunmuteparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* oninvitebyphonestatusparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* onmulticamerastreamstatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* onmicspeakervolumechangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* onaudiodevicestatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* ontestmicstatuschangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* onselectedaudiodevicechangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* onlivetranscriptionstatusparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* onlivetranscriptionmsgerrorparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* onchatmsgdeletenotificationparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* livetranscriptionmsginfoparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* oncalloutjoinsuccessparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* onsessionleaveparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* onsharecursordatareceivedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* onremotecontrolstatusparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* onremotecontrolrequestreceivedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* onremotecontrolserviceinstallresultparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* onspotlightvideochangedparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* onbindincominglivestreamresponseparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* onunbindincominglivestreamresponseparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* onincominglivestreamstatusresponseparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* onstartincominglivestreamresponseparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* onstopincominglivestreamresponseparam_;
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* onfailedtostartshareparam_;
    ::int32_t msgtype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CreateVideoSDKObjParam final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam) */ {
 public:
  inline CreateVideoSDKObjParam() : CreateVideoSDKObjParam(nullptr) {}
  ~CreateVideoSDKObjParam() override;
  explicit PROTOBUF_CONSTEXPR CreateVideoSDKObjParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateVideoSDKObjParam(const CreateVideoSDKObjParam& from);
  CreateVideoSDKObjParam(CreateVideoSDKObjParam&& from) noexcept
    : CreateVideoSDKObjParam() {
    *this = ::std::move(from);
  }

  inline CreateVideoSDKObjParam& operator=(const CreateVideoSDKObjParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateVideoSDKObjParam& operator=(CreateVideoSDKObjParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CreateVideoSDKObjParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateVideoSDKObjParam* internal_default_instance() {
    return reinterpret_cast<const CreateVideoSDKObjParam*>(
               &_CreateVideoSDKObjParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(CreateVideoSDKObjParam& a, CreateVideoSDKObjParam& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateVideoSDKObjParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateVideoSDKObjParam* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateVideoSDKObjParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateVideoSDKObjParam>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CreateVideoSDKObjParam& from);
  void MergeFrom(const CreateVideoSDKObjParam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateVideoSDKObjParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam";
  }
  protected:
  explicit CreateVideoSDKObjParam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathFieldNumber = 1,
  };
  // optional string path = 1;
  bool has_path() const;
  void clear_path() ;
  const std::string& path() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_path(Arg_&& arg, Args_... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* ptr);

  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(
      const std::string& value);
  std::string* _internal_mutable_path();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VideoSDKInitParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams) */ {
 public:
  inline VideoSDKInitParams() : VideoSDKInitParams(nullptr) {}
  ~VideoSDKInitParams() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKInitParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKInitParams(const VideoSDKInitParams& from);
  VideoSDKInitParams(VideoSDKInitParams&& from) noexcept
    : VideoSDKInitParams() {
    *this = ::std::move(from);
  }

  inline VideoSDKInitParams& operator=(const VideoSDKInitParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKInitParams& operator=(VideoSDKInitParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKInitParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKInitParams* internal_default_instance() {
    return reinterpret_cast<const VideoSDKInitParams*>(
               &_VideoSDKInitParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(VideoSDKInitParams& a, VideoSDKInitParams& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKInitParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKInitParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKInitParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKInitParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKInitParams& from);
  void MergeFrom(const VideoSDKInitParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKInitParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKInitParams";
  }
  protected:
  explicit VideoSDKInitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDomainFieldNumber = 1,
    kLogFilePrefixFieldNumber = 2,
    kSpeakerTestFilePathFieldNumber = 7,
    kEnableLogFieldNumber = 3,
    kAudioRawDataMemoryModeFieldNumber = 4,
    kZnVideoRawDataMemoryModeFieldNumber = 5,
    kZnShareRawDataMemoryModeFieldNumber = 6,
  };
  // optional string domain = 1;
  bool has_domain() const;
  void clear_domain() ;
  const std::string& domain() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_domain(Arg_&& arg, Args_... args);
  std::string* mutable_domain();
  PROTOBUF_NODISCARD std::string* release_domain();
  void set_allocated_domain(std::string* ptr);

  private:
  const std::string& _internal_domain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_domain(
      const std::string& value);
  std::string* _internal_mutable_domain();

  public:
  // optional string logFilePrefix = 2;
  bool has_logfileprefix() const;
  void clear_logfileprefix() ;
  const std::string& logfileprefix() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_logfileprefix(Arg_&& arg, Args_... args);
  std::string* mutable_logfileprefix();
  PROTOBUF_NODISCARD std::string* release_logfileprefix();
  void set_allocated_logfileprefix(std::string* ptr);

  private:
  const std::string& _internal_logfileprefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_logfileprefix(
      const std::string& value);
  std::string* _internal_mutable_logfileprefix();

  public:
  // optional string speakerTestFilePath = 7;
  bool has_speakertestfilepath() const;
  void clear_speakertestfilepath() ;
  const std::string& speakertestfilepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_speakertestfilepath(Arg_&& arg, Args_... args);
  std::string* mutable_speakertestfilepath();
  PROTOBUF_NODISCARD std::string* release_speakertestfilepath();
  void set_allocated_speakertestfilepath(std::string* ptr);

  private:
  const std::string& _internal_speakertestfilepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_speakertestfilepath(
      const std::string& value);
  std::string* _internal_mutable_speakertestfilepath();

  public:
  // optional bool enableLog = 3;
  bool has_enablelog() const;
  void clear_enablelog() ;
  bool enablelog() const;
  void set_enablelog(bool value);

  private:
  bool _internal_enablelog() const;
  void _internal_set_enablelog(bool value);

  public:
  // optional int32 audioRawDataMemoryMode = 4;
  bool has_audiorawdatamemorymode() const;
  void clear_audiorawdatamemorymode() ;
  ::int32_t audiorawdatamemorymode() const;
  void set_audiorawdatamemorymode(::int32_t value);

  private:
  ::int32_t _internal_audiorawdatamemorymode() const;
  void _internal_set_audiorawdatamemorymode(::int32_t value);

  public:
  // optional int32 zn_videoRawDataMemoryMode = 5;
  bool has_zn_videorawdatamemorymode() const;
  void clear_zn_videorawdatamemorymode() ;
  ::int32_t zn_videorawdatamemorymode() const;
  void set_zn_videorawdatamemorymode(::int32_t value);

  private:
  ::int32_t _internal_zn_videorawdatamemorymode() const;
  void _internal_set_zn_videorawdatamemorymode(::int32_t value);

  public:
  // optional int32 zn_shareRawDataMemoryMode = 6;
  bool has_zn_sharerawdatamemorymode() const;
  void clear_zn_sharerawdatamemorymode() ;
  ::int32_t zn_sharerawdatamemorymode() const;
  void set_zn_sharerawdatamemorymode(::int32_t value);

  private:
  ::int32_t _internal_zn_sharerawdatamemorymode() const;
  void _internal_set_zn_sharerawdatamemorymode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr domain_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logfileprefix_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr speakertestfilepath_;
    bool enablelog_;
    ::int32_t audiorawdatamemorymode_;
    ::int32_t zn_videorawdatamemorymode_;
    ::int32_t zn_sharerawdatamemorymode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VideoSDKSessionContext final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext) */ {
 public:
  inline VideoSDKSessionContext() : VideoSDKSessionContext(nullptr) {}
  ~VideoSDKSessionContext() override;
  explicit PROTOBUF_CONSTEXPR VideoSDKSessionContext(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VideoSDKSessionContext(const VideoSDKSessionContext& from);
  VideoSDKSessionContext(VideoSDKSessionContext&& from) noexcept
    : VideoSDKSessionContext() {
    *this = ::std::move(from);
  }

  inline VideoSDKSessionContext& operator=(const VideoSDKSessionContext& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoSDKSessionContext& operator=(VideoSDKSessionContext&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VideoSDKSessionContext& default_instance() {
    return *internal_default_instance();
  }
  static inline const VideoSDKSessionContext* internal_default_instance() {
    return reinterpret_cast<const VideoSDKSessionContext*>(
               &_VideoSDKSessionContext_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(VideoSDKSessionContext& a, VideoSDKSessionContext& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoSDKSessionContext* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoSDKSessionContext* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VideoSDKSessionContext* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VideoSDKSessionContext>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VideoSDKSessionContext& from);
  void MergeFrom(const VideoSDKSessionContext& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoSDKSessionContext* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext";
  }
  protected:
  explicit VideoSDKSessionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionNameFieldNumber = 1,
    kSessionPasswordFieldNumber = 2,
    kTokenFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kLocalVideoOnFieldNumber = 5,
    kConnectFieldNumber = 6,
    kMuteFieldNumber = 7,
    kPreProcessorFieldNumber = 8,
    kExternalVideoSourceFieldNumber = 9,
    kSessionIdleTimeoutMinsFieldNumber = 10,
  };
  // optional string sessionName = 1;
  bool has_sessionname() const;
  void clear_sessionname() ;
  const std::string& sessionname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionname(Arg_&& arg, Args_... args);
  std::string* mutable_sessionname();
  PROTOBUF_NODISCARD std::string* release_sessionname();
  void set_allocated_sessionname(std::string* ptr);

  private:
  const std::string& _internal_sessionname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionname(
      const std::string& value);
  std::string* _internal_mutable_sessionname();

  public:
  // optional string sessionPassword = 2;
  bool has_sessionpassword() const;
  void clear_sessionpassword() ;
  const std::string& sessionpassword() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_sessionpassword(Arg_&& arg, Args_... args);
  std::string* mutable_sessionpassword();
  PROTOBUF_NODISCARD std::string* release_sessionpassword();
  void set_allocated_sessionpassword(std::string* ptr);

  private:
  const std::string& _internal_sessionpassword() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sessionpassword(
      const std::string& value);
  std::string* _internal_mutable_sessionpassword();

  public:
  // optional string token = 3;
  bool has_token() const;
  void clear_token() ;
  const std::string& token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_token(Arg_&& arg, Args_... args);
  std::string* mutable_token();
  PROTOBUF_NODISCARD std::string* release_token();
  void set_allocated_token(std::string* ptr);

  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(
      const std::string& value);
  std::string* _internal_mutable_token();

  public:
  // optional string userName = 4;
  bool has_username() const;
  void clear_username() ;
  const std::string& username() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_username(Arg_&& arg, Args_... args);
  std::string* mutable_username();
  PROTOBUF_NODISCARD std::string* release_username();
  void set_allocated_username(std::string* ptr);

  private:
  const std::string& _internal_username() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_username(
      const std::string& value);
  std::string* _internal_mutable_username();

  public:
  // optional bool localVideoOn = 5;
  bool has_localvideoon() const;
  void clear_localvideoon() ;
  bool localvideoon() const;
  void set_localvideoon(bool value);

  private:
  bool _internal_localvideoon() const;
  void _internal_set_localvideoon(bool value);

  public:
  // optional bool connect = 6;
  bool has_connect() const;
  void clear_connect() ;
  bool connect() const;
  void set_connect(bool value);

  private:
  bool _internal_connect() const;
  void _internal_set_connect(bool value);

  public:
  // optional bool mute = 7;
  bool has_mute() const;
  void clear_mute() ;
  bool mute() const;
  void set_mute(bool value);

  private:
  bool _internal_mute() const;
  void _internal_set_mute(bool value);

  public:
  // optional bool preProcessor = 8;
  bool has_preprocessor() const;
  void clear_preprocessor() ;
  bool preprocessor() const;
  void set_preprocessor(bool value);

  private:
  bool _internal_preprocessor() const;
  void _internal_set_preprocessor(bool value);

  public:
  // optional bool externalVideoSource = 9;
  bool has_externalvideosource() const;
  void clear_externalvideosource() ;
  bool externalvideosource() const;
  void set_externalvideosource(bool value);

  private:
  bool _internal_externalvideosource() const;
  void _internal_set_externalvideosource(bool value);

  public:
  // optional uint32 sessionIdleTimeoutMins = 10;
  bool has_sessionidletimeoutmins() const;
  void clear_sessionidletimeoutmins() ;
  ::uint32_t sessionidletimeoutmins() const;
  void set_sessionidletimeoutmins(::uint32_t value);

  private:
  ::uint32_t _internal_sessionidletimeoutmins() const;
  void _internal_set_sessionidletimeoutmins(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sessionpassword_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
    bool localvideoon_;
    bool connect_;
    bool mute_;
    bool preprocessor_;
    bool externalvideosource_;
    ::uint32_t sessionidletimeoutmins_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LeaveSessionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LeaveSessionParams) */ {
 public:
  inline LeaveSessionParams() : LeaveSessionParams(nullptr) {}
  ~LeaveSessionParams() override;
  explicit PROTOBUF_CONSTEXPR LeaveSessionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LeaveSessionParams(const LeaveSessionParams& from);
  LeaveSessionParams(LeaveSessionParams&& from) noexcept
    : LeaveSessionParams() {
    *this = ::std::move(from);
  }

  inline LeaveSessionParams& operator=(const LeaveSessionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaveSessionParams& operator=(LeaveSessionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LeaveSessionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LeaveSessionParams* internal_default_instance() {
    return reinterpret_cast<const LeaveSessionParams*>(
               &_LeaveSessionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(LeaveSessionParams& a, LeaveSessionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaveSessionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaveSessionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LeaveSessionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LeaveSessionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LeaveSessionParams& from);
  void MergeFrom(const LeaveSessionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LeaveSessionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LeaveSessionParams";
  }
  protected:
  explicit LeaveSessionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnBEndFieldNumber = 1,
  };
  // optional bool zn_bEnd = 1;
  bool has_zn_bend() const;
  void clear_zn_bend() ;
  bool zn_bend() const;
  void set_zn_bend(bool value);

  private:
  bool _internal_zn_bend() const;
  void _internal_set_zn_bend(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool zn_bend_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SessionPasswordParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SessionPasswordParams) */ {
 public:
  inline SessionPasswordParams() : SessionPasswordParams(nullptr) {}
  ~SessionPasswordParams() override;
  explicit PROTOBUF_CONSTEXPR SessionPasswordParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SessionPasswordParams(const SessionPasswordParams& from);
  SessionPasswordParams(SessionPasswordParams&& from) noexcept
    : SessionPasswordParams() {
    *this = ::std::move(from);
  }

  inline SessionPasswordParams& operator=(const SessionPasswordParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionPasswordParams& operator=(SessionPasswordParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SessionPasswordParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SessionPasswordParams* internal_default_instance() {
    return reinterpret_cast<const SessionPasswordParams*>(
               &_SessionPasswordParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(SessionPasswordParams& a, SessionPasswordParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionPasswordParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SessionPasswordParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SessionPasswordParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SessionPasswordParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SessionPasswordParams& from);
  void MergeFrom(const SessionPasswordParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SessionPasswordParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SessionPasswordParams";
  }
  protected:
  explicit SessionPasswordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnPasswordFieldNumber = 1,
  };
  // optional string zn_password = 1;
  bool has_zn_password() const;
  void clear_zn_password() ;
  const std::string& zn_password() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_password(Arg_&& arg, Args_... args);
  std::string* mutable_zn_password();
  PROTOBUF_NODISCARD std::string* release_zn_password();
  void set_allocated_zn_password(std::string* ptr);

  private:
  const std::string& _internal_zn_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_password(
      const std::string& value);
  std::string* _internal_mutable_zn_password();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_password_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class MuteAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.MuteAudioParams) */ {
 public:
  inline MuteAudioParams() : MuteAudioParams(nullptr) {}
  ~MuteAudioParams() override;
  explicit PROTOBUF_CONSTEXPR MuteAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MuteAudioParams(const MuteAudioParams& from);
  MuteAudioParams(MuteAudioParams&& from) noexcept
    : MuteAudioParams() {
    *this = ::std::move(from);
  }

  inline MuteAudioParams& operator=(const MuteAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MuteAudioParams& operator=(MuteAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MuteAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MuteAudioParams* internal_default_instance() {
    return reinterpret_cast<const MuteAudioParams*>(
               &_MuteAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(MuteAudioParams& a, MuteAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MuteAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MuteAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MuteAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MuteAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MuteAudioParams& from);
  void MergeFrom(const MuteAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MuteAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.MuteAudioParams";
  }
  protected:
  explicit MuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class UnMuteAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams) */ {
 public:
  inline UnMuteAudioParams() : UnMuteAudioParams(nullptr) {}
  ~UnMuteAudioParams() override;
  explicit PROTOBUF_CONSTEXPR UnMuteAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnMuteAudioParams(const UnMuteAudioParams& from);
  UnMuteAudioParams(UnMuteAudioParams&& from) noexcept
    : UnMuteAudioParams() {
    *this = ::std::move(from);
  }

  inline UnMuteAudioParams& operator=(const UnMuteAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnMuteAudioParams& operator=(UnMuteAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnMuteAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnMuteAudioParams* internal_default_instance() {
    return reinterpret_cast<const UnMuteAudioParams*>(
               &_UnMuteAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(UnMuteAudioParams& a, UnMuteAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnMuteAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnMuteAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnMuteAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnMuteAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnMuteAudioParams& from);
  void MergeFrom(const UnMuteAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnMuteAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.UnMuteAudioParams";
  }
  protected:
  explicit UnMuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetSpeakerParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetSpeakerParams) */ {
 public:
  inline SetSpeakerParams() : SetSpeakerParams(nullptr) {}
  ~SetSpeakerParams() override;
  explicit PROTOBUF_CONSTEXPR SetSpeakerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSpeakerParams(const SetSpeakerParams& from);
  SetSpeakerParams(SetSpeakerParams&& from) noexcept
    : SetSpeakerParams() {
    *this = ::std::move(from);
  }

  inline SetSpeakerParams& operator=(const SetSpeakerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSpeakerParams& operator=(SetSpeakerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetSpeakerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSpeakerParams* internal_default_instance() {
    return reinterpret_cast<const SetSpeakerParams*>(
               &_SetSpeakerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(SetSpeakerParams& a, SetSpeakerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSpeakerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSpeakerParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSpeakerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSpeakerParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetSpeakerParams& from);
  void MergeFrom(const SetSpeakerParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetSpeakerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetSpeakerParams";
  }
  protected:
  explicit SetSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnSpeakerFieldNumber = 1,
  };
  // optional bool zn_speaker = 1;
  bool has_zn_speaker() const;
  void clear_zn_speaker() ;
  bool zn_speaker() const;
  void set_zn_speaker(bool value);

  private:
  bool _internal_zn_speaker() const;
  void _internal_set_zn_speaker(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool zn_speaker_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SelectSpeakerParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams) */ {
 public:
  inline SelectSpeakerParams() : SelectSpeakerParams(nullptr) {}
  ~SelectSpeakerParams() override;
  explicit PROTOBUF_CONSTEXPR SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectSpeakerParams(const SelectSpeakerParams& from);
  SelectSpeakerParams(SelectSpeakerParams&& from) noexcept
    : SelectSpeakerParams() {
    *this = ::std::move(from);
  }

  inline SelectSpeakerParams& operator=(const SelectSpeakerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectSpeakerParams& operator=(SelectSpeakerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelectSpeakerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectSpeakerParams* internal_default_instance() {
    return reinterpret_cast<const SelectSpeakerParams*>(
               &_SelectSpeakerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(SelectSpeakerParams& a, SelectSpeakerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectSpeakerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectSpeakerParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectSpeakerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectSpeakerParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelectSpeakerParams& from);
  void MergeFrom(const SelectSpeakerParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectSpeakerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SelectSpeakerParams";
  }
  protected:
  explicit SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnDeviceidFieldNumber = 1,
    kZnDevicenameFieldNumber = 2,
  };
  // optional string zn_deviceid = 1;
  bool has_zn_deviceid() const;
  void clear_zn_deviceid() ;
  const std::string& zn_deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_zn_deviceid();
  PROTOBUF_NODISCARD std::string* release_zn_deviceid();
  void set_allocated_zn_deviceid(std::string* ptr);

  private:
  const std::string& _internal_zn_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_deviceid(
      const std::string& value);
  std::string* _internal_mutable_zn_deviceid();

  public:
  // optional string zn_devicename = 2;
  bool has_zn_devicename() const;
  void clear_zn_devicename() ;
  const std::string& zn_devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_zn_devicename();
  PROTOBUF_NODISCARD std::string* release_zn_devicename();
  void set_allocated_zn_devicename(std::string* ptr);

  private:
  const std::string& _internal_zn_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_devicename(
      const std::string& value);
  std::string* _internal_mutable_zn_devicename();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_devicename_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SelectMicParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SelectMicParams) */ {
 public:
  inline SelectMicParams() : SelectMicParams(nullptr) {}
  ~SelectMicParams() override;
  explicit PROTOBUF_CONSTEXPR SelectMicParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectMicParams(const SelectMicParams& from);
  SelectMicParams(SelectMicParams&& from) noexcept
    : SelectMicParams() {
    *this = ::std::move(from);
  }

  inline SelectMicParams& operator=(const SelectMicParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectMicParams& operator=(SelectMicParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelectMicParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectMicParams* internal_default_instance() {
    return reinterpret_cast<const SelectMicParams*>(
               &_SelectMicParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(SelectMicParams& a, SelectMicParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectMicParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectMicParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectMicParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectMicParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelectMicParams& from);
  void MergeFrom(const SelectMicParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectMicParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SelectMicParams";
  }
  protected:
  explicit SelectMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnDeviceidFieldNumber = 1,
    kZnDevicenameFieldNumber = 2,
  };
  // optional string zn_deviceid = 1;
  bool has_zn_deviceid() const;
  void clear_zn_deviceid() ;
  const std::string& zn_deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_zn_deviceid();
  PROTOBUF_NODISCARD std::string* release_zn_deviceid();
  void set_allocated_zn_deviceid(std::string* ptr);

  private:
  const std::string& _internal_zn_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_deviceid(
      const std::string& value);
  std::string* _internal_mutable_zn_deviceid();

  public:
  // optional string zn_devicename = 2;
  bool has_zn_devicename() const;
  void clear_zn_devicename() ;
  const std::string& zn_devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_zn_devicename();
  PROTOBUF_NODISCARD std::string* release_zn_devicename();
  void set_allocated_zn_devicename(std::string* ptr);

  private:
  const std::string& _internal_zn_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_devicename(
      const std::string& value);
  std::string* _internal_mutable_zn_devicename();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SelectMicParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_devicename_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SendChatToUserParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SendChatToUserParams) */ {
 public:
  inline SendChatToUserParams() : SendChatToUserParams(nullptr) {}
  ~SendChatToUserParams() override;
  explicit PROTOBUF_CONSTEXPR SendChatToUserParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChatToUserParams(const SendChatToUserParams& from);
  SendChatToUserParams(SendChatToUserParams&& from) noexcept
    : SendChatToUserParams() {
    *this = ::std::move(from);
  }

  inline SendChatToUserParams& operator=(const SendChatToUserParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatToUserParams& operator=(SendChatToUserParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SendChatToUserParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatToUserParams* internal_default_instance() {
    return reinterpret_cast<const SendChatToUserParams*>(
               &_SendChatToUserParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(SendChatToUserParams& a, SendChatToUserParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatToUserParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatToUserParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatToUserParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChatToUserParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SendChatToUserParams& from);
  void MergeFrom(const SendChatToUserParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendChatToUserParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SendChatToUserParams";
  }
  protected:
  explicit SendChatToUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnMsgContentFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // optional string zn_msgContent = 2;
  bool has_zn_msgcontent() const;
  void clear_zn_msgcontent() ;
  const std::string& zn_msgcontent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_msgcontent(Arg_&& arg, Args_... args);
  std::string* mutable_zn_msgcontent();
  PROTOBUF_NODISCARD std::string* release_zn_msgcontent();
  void set_allocated_zn_msgcontent(std::string* ptr);

  private:
  const std::string& _internal_zn_msgcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_msgcontent(
      const std::string& value);
  std::string* _internal_mutable_zn_msgcontent();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_msgcontent_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SendChatToAllParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SendChatToAllParams) */ {
 public:
  inline SendChatToAllParams() : SendChatToAllParams(nullptr) {}
  ~SendChatToAllParams() override;
  explicit PROTOBUF_CONSTEXPR SendChatToAllParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendChatToAllParams(const SendChatToAllParams& from);
  SendChatToAllParams(SendChatToAllParams&& from) noexcept
    : SendChatToAllParams() {
    *this = ::std::move(from);
  }

  inline SendChatToAllParams& operator=(const SendChatToAllParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendChatToAllParams& operator=(SendChatToAllParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SendChatToAllParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendChatToAllParams* internal_default_instance() {
    return reinterpret_cast<const SendChatToAllParams*>(
               &_SendChatToAllParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(SendChatToAllParams& a, SendChatToAllParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SendChatToAllParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendChatToAllParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendChatToAllParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendChatToAllParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SendChatToAllParams& from);
  void MergeFrom(const SendChatToAllParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendChatToAllParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SendChatToAllParams";
  }
  protected:
  explicit SendChatToAllParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnMsgContentFieldNumber = 1,
  };
  // optional string zn_msgContent = 1;
  bool has_zn_msgcontent() const;
  void clear_zn_msgcontent() ;
  const std::string& zn_msgcontent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_msgcontent(Arg_&& arg, Args_... args);
  std::string* mutable_zn_msgcontent();
  PROTOBUF_NODISCARD std::string* release_zn_msgcontent();
  void set_allocated_zn_msgcontent(std::string* ptr);

  private:
  const std::string& _internal_zn_msgcontent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_msgcontent(
      const std::string& value);
  std::string* _internal_mutable_zn_msgcontent();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_msgcontent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartLiveStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams) */ {
 public:
  inline StartLiveStreamParams() : StartLiveStreamParams(nullptr) {}
  ~StartLiveStreamParams() override;
  explicit PROTOBUF_CONSTEXPR StartLiveStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartLiveStreamParams(const StartLiveStreamParams& from);
  StartLiveStreamParams(StartLiveStreamParams&& from) noexcept
    : StartLiveStreamParams() {
    *this = ::std::move(from);
  }

  inline StartLiveStreamParams& operator=(const StartLiveStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLiveStreamParams& operator=(StartLiveStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartLiveStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartLiveStreamParams* internal_default_instance() {
    return reinterpret_cast<const StartLiveStreamParams*>(
               &_StartLiveStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(StartLiveStreamParams& a, StartLiveStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLiveStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartLiveStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartLiveStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartLiveStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartLiveStreamParams& from);
  void MergeFrom(const StartLiveStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartLiveStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartLiveStreamParams";
  }
  protected:
  explicit StartLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnStreamUrlFieldNumber = 1,
    kZnKeyFieldNumber = 2,
    kZnBroadcastUrlFieldNumber = 3,
  };
  // optional string zn_streamUrl = 1;
  bool has_zn_streamurl() const;
  void clear_zn_streamurl() ;
  const std::string& zn_streamurl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_streamurl(Arg_&& arg, Args_... args);
  std::string* mutable_zn_streamurl();
  PROTOBUF_NODISCARD std::string* release_zn_streamurl();
  void set_allocated_zn_streamurl(std::string* ptr);

  private:
  const std::string& _internal_zn_streamurl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_streamurl(
      const std::string& value);
  std::string* _internal_mutable_zn_streamurl();

  public:
  // optional string zn_key = 2;
  bool has_zn_key() const;
  void clear_zn_key() ;
  const std::string& zn_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_key(Arg_&& arg, Args_... args);
  std::string* mutable_zn_key();
  PROTOBUF_NODISCARD std::string* release_zn_key();
  void set_allocated_zn_key(std::string* ptr);

  private:
  const std::string& _internal_zn_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_key(
      const std::string& value);
  std::string* _internal_mutable_zn_key();

  public:
  // optional string zn_broadcastUrl = 3;
  bool has_zn_broadcasturl() const;
  void clear_zn_broadcasturl() ;
  const std::string& zn_broadcasturl() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_broadcasturl(Arg_&& arg, Args_... args);
  std::string* mutable_zn_broadcasturl();
  PROTOBUF_NODISCARD std::string* release_zn_broadcasturl();
  void set_allocated_zn_broadcasturl(std::string* ptr);

  private:
  const std::string& _internal_zn_broadcasturl() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_broadcasturl(
      const std::string& value);
  std::string* _internal_mutable_zn_broadcasturl();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_streamurl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_broadcasturl_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class IncomingLiveStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams) */ {
 public:
  inline IncomingLiveStreamParams() : IncomingLiveStreamParams(nullptr) {}
  ~IncomingLiveStreamParams() override;
  explicit PROTOBUF_CONSTEXPR IncomingLiveStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IncomingLiveStreamParams(const IncomingLiveStreamParams& from);
  IncomingLiveStreamParams(IncomingLiveStreamParams&& from) noexcept
    : IncomingLiveStreamParams() {
    *this = ::std::move(from);
  }

  inline IncomingLiveStreamParams& operator=(const IncomingLiveStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline IncomingLiveStreamParams& operator=(IncomingLiveStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IncomingLiveStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const IncomingLiveStreamParams* internal_default_instance() {
    return reinterpret_cast<const IncomingLiveStreamParams*>(
               &_IncomingLiveStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(IncomingLiveStreamParams& a, IncomingLiveStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(IncomingLiveStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IncomingLiveStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IncomingLiveStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IncomingLiveStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IncomingLiveStreamParams& from);
  void MergeFrom(const IncomingLiveStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IncomingLiveStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams";
  }
  protected:
  explicit IncomingLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrStreamKeyIDFieldNumber = 1,
  };
  // optional string strStreamKeyID = 1;
  bool has_strstreamkeyid() const;
  void clear_strstreamkeyid() ;
  const std::string& strstreamkeyid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strstreamkeyid(Arg_&& arg, Args_... args);
  std::string* mutable_strstreamkeyid();
  PROTOBUF_NODISCARD std::string* release_strstreamkeyid();
  void set_allocated_strstreamkeyid(std::string* ptr);

  private:
  const std::string& _internal_strstreamkeyid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strstreamkeyid(
      const std::string& value);
  std::string* _internal_mutable_strstreamkeyid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strstreamkeyid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartShareViewParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartShareViewParams) */ {
 public:
  inline StartShareViewParams() : StartShareViewParams(nullptr) {}
  ~StartShareViewParams() override;
  explicit PROTOBUF_CONSTEXPR StartShareViewParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartShareViewParams(const StartShareViewParams& from);
  StartShareViewParams(StartShareViewParams&& from) noexcept
    : StartShareViewParams() {
    *this = ::std::move(from);
  }

  inline StartShareViewParams& operator=(const StartShareViewParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartShareViewParams& operator=(StartShareViewParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartShareViewParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartShareViewParams* internal_default_instance() {
    return reinterpret_cast<const StartShareViewParams*>(
               &_StartShareViewParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(StartShareViewParams& a, StartShareViewParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartShareViewParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartShareViewParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartShareViewParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartShareViewParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartShareViewParams& from);
  void MergeFrom(const StartShareViewParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartShareViewParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartShareViewParams";
  }
  protected:
  explicit StartShareViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnHandleFieldNumber = 1,
    kIsWithDeviceAudioFieldNumber = 2,
    kIsOptimizeForSharedVideoFieldNumber = 3,
  };
  // optional string zn_handle = 1;
  bool has_zn_handle() const;
  void clear_zn_handle() ;
  const std::string& zn_handle() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_handle(Arg_&& arg, Args_... args);
  std::string* mutable_zn_handle();
  PROTOBUF_NODISCARD std::string* release_zn_handle();
  void set_allocated_zn_handle(std::string* ptr);

  private:
  const std::string& _internal_zn_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_handle(
      const std::string& value);
  std::string* _internal_mutable_zn_handle();

  public:
  // optional bool isWithDeviceAudio = 2;
  bool has_iswithdeviceaudio() const;
  void clear_iswithdeviceaudio() ;
  bool iswithdeviceaudio() const;
  void set_iswithdeviceaudio(bool value);

  private:
  bool _internal_iswithdeviceaudio() const;
  void _internal_set_iswithdeviceaudio(bool value);

  public:
  // optional bool isOptimizeForSharedVideo = 3;
  bool has_isoptimizeforsharedvideo() const;
  void clear_isoptimizeforsharedvideo() ;
  bool isoptimizeforsharedvideo() const;
  void set_isoptimizeforsharedvideo(bool value);

  private:
  bool _internal_isoptimizeforsharedvideo() const;
  void _internal_set_isoptimizeforsharedvideo(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_handle_;
    bool iswithdeviceaudio_;
    bool isoptimizeforsharedvideo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartShareScreenParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartShareScreenParams) */ {
 public:
  inline StartShareScreenParams() : StartShareScreenParams(nullptr) {}
  ~StartShareScreenParams() override;
  explicit PROTOBUF_CONSTEXPR StartShareScreenParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartShareScreenParams(const StartShareScreenParams& from);
  StartShareScreenParams(StartShareScreenParams&& from) noexcept
    : StartShareScreenParams() {
    *this = ::std::move(from);
  }

  inline StartShareScreenParams& operator=(const StartShareScreenParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartShareScreenParams& operator=(StartShareScreenParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartShareScreenParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartShareScreenParams* internal_default_instance() {
    return reinterpret_cast<const StartShareScreenParams*>(
               &_StartShareScreenParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(StartShareScreenParams& a, StartShareScreenParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartShareScreenParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartShareScreenParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartShareScreenParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartShareScreenParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartShareScreenParams& from);
  void MergeFrom(const StartShareScreenParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartShareScreenParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartShareScreenParams";
  }
  protected:
  explicit StartShareScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnMonitorIDFieldNumber = 1,
    kIsWithDeviceAudioFieldNumber = 2,
    kIsOptimizeForSharedVideoFieldNumber = 3,
  };
  // optional string zn_monitorID = 1;
  bool has_zn_monitorid() const;
  void clear_zn_monitorid() ;
  const std::string& zn_monitorid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_monitorid(Arg_&& arg, Args_... args);
  std::string* mutable_zn_monitorid();
  PROTOBUF_NODISCARD std::string* release_zn_monitorid();
  void set_allocated_zn_monitorid(std::string* ptr);

  private:
  const std::string& _internal_zn_monitorid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_monitorid(
      const std::string& value);
  std::string* _internal_mutable_zn_monitorid();

  public:
  // optional bool isWithDeviceAudio = 2;
  bool has_iswithdeviceaudio() const;
  void clear_iswithdeviceaudio() ;
  bool iswithdeviceaudio() const;
  void set_iswithdeviceaudio(bool value);

  private:
  bool _internal_iswithdeviceaudio() const;
  void _internal_set_iswithdeviceaudio(bool value);

  public:
  // optional bool isOptimizeForSharedVideo = 3;
  bool has_isoptimizeforsharedvideo() const;
  void clear_isoptimizeforsharedvideo() ;
  bool isoptimizeforsharedvideo() const;
  void set_isoptimizeforsharedvideo(bool value);

  private:
  bool _internal_isoptimizeforsharedvideo() const;
  void _internal_set_isoptimizeforsharedvideo(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_monitorid_;
    bool iswithdeviceaudio_;
    bool isoptimizeforsharedvideo_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LockShareParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LockShareParams) */ {
 public:
  inline LockShareParams() : LockShareParams(nullptr) {}
  ~LockShareParams() override;
  explicit PROTOBUF_CONSTEXPR LockShareParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LockShareParams(const LockShareParams& from);
  LockShareParams(LockShareParams&& from) noexcept
    : LockShareParams() {
    *this = ::std::move(from);
  }

  inline LockShareParams& operator=(const LockShareParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockShareParams& operator=(LockShareParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LockShareParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LockShareParams* internal_default_instance() {
    return reinterpret_cast<const LockShareParams*>(
               &_LockShareParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(LockShareParams& a, LockShareParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LockShareParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LockShareParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LockShareParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LockShareParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LockShareParams& from);
  void MergeFrom(const LockShareParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockShareParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LockShareParams";
  }
  protected:
  explicit LockShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnBLockFieldNumber = 1,
  };
  // optional bool zn_bLock = 1;
  bool has_zn_block() const;
  void clear_zn_block() ;
  bool zn_block() const;
  void set_zn_block(bool value);

  private:
  bool _internal_zn_block() const;
  void _internal_set_zn_block(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LockShareParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool zn_block_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableShareDeviceAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams) */ {
 public:
  inline EnableShareDeviceAudioParams() : EnableShareDeviceAudioParams(nullptr) {}
  ~EnableShareDeviceAudioParams() override;
  explicit PROTOBUF_CONSTEXPR EnableShareDeviceAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableShareDeviceAudioParams(const EnableShareDeviceAudioParams& from);
  EnableShareDeviceAudioParams(EnableShareDeviceAudioParams&& from) noexcept
    : EnableShareDeviceAudioParams() {
    *this = ::std::move(from);
  }

  inline EnableShareDeviceAudioParams& operator=(const EnableShareDeviceAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableShareDeviceAudioParams& operator=(EnableShareDeviceAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableShareDeviceAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableShareDeviceAudioParams* internal_default_instance() {
    return reinterpret_cast<const EnableShareDeviceAudioParams*>(
               &_EnableShareDeviceAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(EnableShareDeviceAudioParams& a, EnableShareDeviceAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableShareDeviceAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableShareDeviceAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableShareDeviceAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableShareDeviceAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableShareDeviceAudioParams& from);
  void MergeFrom(const EnableShareDeviceAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableShareDeviceAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams";
  }
  protected:
  explicit EnableShareDeviceAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // optional bool enable = 1;
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableOptimizeForSharedVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams) */ {
 public:
  inline EnableOptimizeForSharedVideoParams() : EnableOptimizeForSharedVideoParams(nullptr) {}
  ~EnableOptimizeForSharedVideoParams() override;
  explicit PROTOBUF_CONSTEXPR EnableOptimizeForSharedVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableOptimizeForSharedVideoParams(const EnableOptimizeForSharedVideoParams& from);
  EnableOptimizeForSharedVideoParams(EnableOptimizeForSharedVideoParams&& from) noexcept
    : EnableOptimizeForSharedVideoParams() {
    *this = ::std::move(from);
  }

  inline EnableOptimizeForSharedVideoParams& operator=(const EnableOptimizeForSharedVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableOptimizeForSharedVideoParams& operator=(EnableOptimizeForSharedVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableOptimizeForSharedVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableOptimizeForSharedVideoParams* internal_default_instance() {
    return reinterpret_cast<const EnableOptimizeForSharedVideoParams*>(
               &_EnableOptimizeForSharedVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(EnableOptimizeForSharedVideoParams& a, EnableOptimizeForSharedVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableOptimizeForSharedVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableOptimizeForSharedVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableOptimizeForSharedVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableOptimizeForSharedVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableOptimizeForSharedVideoParams& from);
  void MergeFrom(const EnableOptimizeForSharedVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableOptimizeForSharedVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams";
  }
  protected:
  explicit EnableOptimizeForSharedVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableFieldNumber = 1,
  };
  // optional bool enable = 1;
  bool has_enable() const;
  void clear_enable() ;
  bool enable() const;
  void set_enable(bool value);

  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool enable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartShare2ndCameraParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams) */ {
 public:
  inline StartShare2ndCameraParams() : StartShare2ndCameraParams(nullptr) {}
  ~StartShare2ndCameraParams() override;
  explicit PROTOBUF_CONSTEXPR StartShare2ndCameraParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartShare2ndCameraParams(const StartShare2ndCameraParams& from);
  StartShare2ndCameraParams(StartShare2ndCameraParams&& from) noexcept
    : StartShare2ndCameraParams() {
    *this = ::std::move(from);
  }

  inline StartShare2ndCameraParams& operator=(const StartShare2ndCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartShare2ndCameraParams& operator=(StartShare2ndCameraParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartShare2ndCameraParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartShare2ndCameraParams* internal_default_instance() {
    return reinterpret_cast<const StartShare2ndCameraParams*>(
               &_StartShare2ndCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(StartShare2ndCameraParams& a, StartShare2ndCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartShare2ndCameraParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartShare2ndCameraParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartShare2ndCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartShare2ndCameraParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartShare2ndCameraParams& from);
  void MergeFrom(const StartShare2ndCameraParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartShare2ndCameraParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams";
  }
  protected:
  explicit StartShare2ndCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnCameraIDFieldNumber = 1,
  };
  // optional string zn_cameraID = 1;
  bool has_zn_cameraid() const;
  void clear_zn_cameraid() ;
  const std::string& zn_cameraid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_cameraid(Arg_&& arg, Args_... args);
  std::string* mutable_zn_cameraid();
  PROTOBUF_NODISCARD std::string* release_zn_cameraid();
  void set_allocated_zn_cameraid(std::string* ptr);

  private:
  const std::string& _internal_zn_cameraid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_cameraid(
      const std::string& value);
  std::string* _internal_mutable_zn_cameraid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_cameraid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetRemoteUsersParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams) */ {
 public:
  inline GetRemoteUsersParams() : GetRemoteUsersParams(nullptr) {}
  ~GetRemoteUsersParams() override;
  explicit PROTOBUF_CONSTEXPR GetRemoteUsersParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRemoteUsersParams(const GetRemoteUsersParams& from);
  GetRemoteUsersParams(GetRemoteUsersParams&& from) noexcept
    : GetRemoteUsersParams() {
    *this = ::std::move(from);
  }

  inline GetRemoteUsersParams& operator=(const GetRemoteUsersParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRemoteUsersParams& operator=(GetRemoteUsersParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetRemoteUsersParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRemoteUsersParams* internal_default_instance() {
    return reinterpret_cast<const GetRemoteUsersParams*>(
               &_GetRemoteUsersParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(GetRemoteUsersParams& a, GetRemoteUsersParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRemoteUsersParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRemoteUsersParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRemoteUsersParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRemoteUsersParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetRemoteUsersParams& from);
  void MergeFrom(const GetRemoteUsersParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRemoteUsersParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams";
  }
  protected:
  explicit GetRemoteUsersParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnOptionsFieldNumber = 1,
  };
  // optional int64 zn_options = 1;
  bool has_zn_options() const;
  void clear_zn_options() ;
  ::int64_t zn_options() const;
  void set_zn_options(::int64_t value);

  private:
  ::int64_t _internal_zn_options() const;
  void _internal_set_zn_options(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetMyInfoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetMyInfoParams) */ {
 public:
  inline GetMyInfoParams() : GetMyInfoParams(nullptr) {}
  ~GetMyInfoParams() override;
  explicit PROTOBUF_CONSTEXPR GetMyInfoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMyInfoParams(const GetMyInfoParams& from);
  GetMyInfoParams(GetMyInfoParams&& from) noexcept
    : GetMyInfoParams() {
    *this = ::std::move(from);
  }

  inline GetMyInfoParams& operator=(const GetMyInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMyInfoParams& operator=(GetMyInfoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetMyInfoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMyInfoParams* internal_default_instance() {
    return reinterpret_cast<const GetMyInfoParams*>(
               &_GetMyInfoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(GetMyInfoParams& a, GetMyInfoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMyInfoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMyInfoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMyInfoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMyInfoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetMyInfoParams& from);
  void MergeFrom(const GetMyInfoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMyInfoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetMyInfoParams";
  }
  protected:
  explicit GetMyInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnOptionsFieldNumber = 1,
  };
  // optional int64 zn_options = 1;
  bool has_zn_options() const;
  void clear_zn_options() ;
  ::int64_t zn_options() const;
  void set_zn_options(::int64_t value);

  private:
  ::int64_t _internal_zn_options() const;
  void _internal_set_zn_options(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_options_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class ChangeNameParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.ChangeNameParams) */ {
 public:
  inline ChangeNameParams() : ChangeNameParams(nullptr) {}
  ~ChangeNameParams() override;
  explicit PROTOBUF_CONSTEXPR ChangeNameParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeNameParams(const ChangeNameParams& from);
  ChangeNameParams(ChangeNameParams&& from) noexcept
    : ChangeNameParams() {
    *this = ::std::move(from);
  }

  inline ChangeNameParams& operator=(const ChangeNameParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeNameParams& operator=(ChangeNameParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ChangeNameParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeNameParams* internal_default_instance() {
    return reinterpret_cast<const ChangeNameParams*>(
               &_ChangeNameParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(ChangeNameParams& a, ChangeNameParams& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeNameParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeNameParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeNameParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeNameParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ChangeNameParams& from);
  void MergeFrom(const ChangeNameParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ChangeNameParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.ChangeNameParams";
  }
  protected:
  explicit ChangeNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnNameFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // optional string zn_name = 1;
  bool has_zn_name() const;
  void clear_zn_name() ;
  const std::string& zn_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_name(Arg_&& arg, Args_... args);
  std::string* mutable_zn_name();
  PROTOBUF_NODISCARD std::string* release_zn_name();
  void set_allocated_zn_name(std::string* ptr);

  private:
  const std::string& _internal_zn_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_name(
      const std::string& value);
  std::string* _internal_mutable_zn_name();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_name_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class MakeHostParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.MakeHostParams) */ {
 public:
  inline MakeHostParams() : MakeHostParams(nullptr) {}
  ~MakeHostParams() override;
  explicit PROTOBUF_CONSTEXPR MakeHostParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakeHostParams(const MakeHostParams& from);
  MakeHostParams(MakeHostParams&& from) noexcept
    : MakeHostParams() {
    *this = ::std::move(from);
  }

  inline MakeHostParams& operator=(const MakeHostParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeHostParams& operator=(MakeHostParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MakeHostParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakeHostParams* internal_default_instance() {
    return reinterpret_cast<const MakeHostParams*>(
               &_MakeHostParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(MakeHostParams& a, MakeHostParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeHostParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeHostParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MakeHostParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MakeHostParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MakeHostParams& from);
  void MergeFrom(const MakeHostParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MakeHostParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.MakeHostParams";
  }
  protected:
  explicit MakeHostParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnNameFieldNumber = 1,
    kUserFieldNumber = 2,
  };
  // optional string zn_name = 1;
  bool has_zn_name() const;
  void clear_zn_name() ;
  const std::string& zn_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_name(Arg_&& arg, Args_... args);
  std::string* mutable_zn_name();
  PROTOBUF_NODISCARD std::string* release_zn_name();
  void set_allocated_zn_name(std::string* ptr);

  private:
  const std::string& _internal_zn_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_name(
      const std::string& value);
  std::string* _internal_mutable_zn_name();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.MakeHostParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_name_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class MakeManagerParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.MakeManagerParams) */ {
 public:
  inline MakeManagerParams() : MakeManagerParams(nullptr) {}
  ~MakeManagerParams() override;
  explicit PROTOBUF_CONSTEXPR MakeManagerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MakeManagerParams(const MakeManagerParams& from);
  MakeManagerParams(MakeManagerParams&& from) noexcept
    : MakeManagerParams() {
    *this = ::std::move(from);
  }

  inline MakeManagerParams& operator=(const MakeManagerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MakeManagerParams& operator=(MakeManagerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MakeManagerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MakeManagerParams* internal_default_instance() {
    return reinterpret_cast<const MakeManagerParams*>(
               &_MakeManagerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(MakeManagerParams& a, MakeManagerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MakeManagerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MakeManagerParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MakeManagerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MakeManagerParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MakeManagerParams& from);
  void MergeFrom(const MakeManagerParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MakeManagerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.MakeManagerParams";
  }
  protected:
  explicit MakeManagerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RevokeManagerParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RevokeManagerParams) */ {
 public:
  inline RevokeManagerParams() : RevokeManagerParams(nullptr) {}
  ~RevokeManagerParams() override;
  explicit PROTOBUF_CONSTEXPR RevokeManagerParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RevokeManagerParams(const RevokeManagerParams& from);
  RevokeManagerParams(RevokeManagerParams&& from) noexcept
    : RevokeManagerParams() {
    *this = ::std::move(from);
  }

  inline RevokeManagerParams& operator=(const RevokeManagerParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RevokeManagerParams& operator=(RevokeManagerParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RevokeManagerParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RevokeManagerParams* internal_default_instance() {
    return reinterpret_cast<const RevokeManagerParams*>(
               &_RevokeManagerParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(RevokeManagerParams& a, RevokeManagerParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RevokeManagerParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RevokeManagerParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RevokeManagerParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RevokeManagerParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RevokeManagerParams& from);
  void MergeFrom(const RevokeManagerParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RevokeManagerParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RevokeManagerParams";
  }
  protected:
  explicit RevokeManagerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoveUserParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoveUserParams) */ {
 public:
  inline RemoveUserParams() : RemoveUserParams(nullptr) {}
  ~RemoveUserParams() override;
  explicit PROTOBUF_CONSTEXPR RemoveUserParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveUserParams(const RemoveUserParams& from);
  RemoveUserParams(RemoveUserParams&& from) noexcept
    : RemoveUserParams() {
    *this = ::std::move(from);
  }

  inline RemoveUserParams& operator=(const RemoveUserParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveUserParams& operator=(RemoveUserParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoveUserParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveUserParams* internal_default_instance() {
    return reinterpret_cast<const RemoveUserParams*>(
               &_RemoveUserParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(RemoveUserParams& a, RemoveUserParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveUserParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveUserParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveUserParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveUserParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoveUserParams& from);
  void MergeFrom(const RemoveUserParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveUserParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoveUserParams";
  }
  protected:
  explicit RemoveUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RotateMyVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams) */ {
 public:
  inline RotateMyVideoParams() : RotateMyVideoParams(nullptr) {}
  ~RotateMyVideoParams() override;
  explicit PROTOBUF_CONSTEXPR RotateMyVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RotateMyVideoParams(const RotateMyVideoParams& from);
  RotateMyVideoParams(RotateMyVideoParams&& from) noexcept
    : RotateMyVideoParams() {
    *this = ::std::move(from);
  }

  inline RotateMyVideoParams& operator=(const RotateMyVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RotateMyVideoParams& operator=(RotateMyVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RotateMyVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RotateMyVideoParams* internal_default_instance() {
    return reinterpret_cast<const RotateMyVideoParams*>(
               &_RotateMyVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(RotateMyVideoParams& a, RotateMyVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RotateMyVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RotateMyVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RotateMyVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RotateMyVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RotateMyVideoParams& from);
  void MergeFrom(const RotateMyVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RotateMyVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RotateMyVideoParams";
  }
  protected:
  explicit RotateMyVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRotationFieldNumber = 1,
  };
  // optional int32 zn_rotation = 1;
  bool has_zn_rotation() const;
  void clear_zn_rotation() ;
  ::int32_t zn_rotation() const;
  void set_zn_rotation(::int32_t value);

  private:
  ::int32_t _internal_zn_rotation() const;
  void _internal_set_zn_rotation(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t zn_rotation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SelectCameraParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SelectCameraParams) */ {
 public:
  inline SelectCameraParams() : SelectCameraParams(nullptr) {}
  ~SelectCameraParams() override;
  explicit PROTOBUF_CONSTEXPR SelectCameraParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SelectCameraParams(const SelectCameraParams& from);
  SelectCameraParams(SelectCameraParams&& from) noexcept
    : SelectCameraParams() {
    *this = ::std::move(from);
  }

  inline SelectCameraParams& operator=(const SelectCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SelectCameraParams& operator=(SelectCameraParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SelectCameraParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SelectCameraParams* internal_default_instance() {
    return reinterpret_cast<const SelectCameraParams*>(
               &_SelectCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(SelectCameraParams& a, SelectCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SelectCameraParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SelectCameraParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SelectCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SelectCameraParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SelectCameraParams& from);
  void MergeFrom(const SelectCameraParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SelectCameraParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SelectCameraParams";
  }
  protected:
  explicit SelectCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnDeviceIDFieldNumber = 1,
  };
  // optional string zn_deviceID = 1;
  bool has_zn_deviceid() const;
  void clear_zn_deviceid() ;
  const std::string& zn_deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zn_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_zn_deviceid();
  PROTOBUF_NODISCARD std::string* release_zn_deviceid();
  void set_allocated_zn_deviceid(std::string* ptr);

  private:
  const std::string& _internal_zn_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zn_deviceid(
      const std::string& value);
  std::string* _internal_mutable_zn_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zn_deviceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CreateRenderParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CreateRenderParams) */ {
 public:
  inline CreateRenderParams() : CreateRenderParams(nullptr) {}
  ~CreateRenderParams() override;
  explicit PROTOBUF_CONSTEXPR CreateRenderParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRenderParams(const CreateRenderParams& from);
  CreateRenderParams(CreateRenderParams&& from) noexcept
    : CreateRenderParams() {
    *this = ::std::move(from);
  }

  inline CreateRenderParams& operator=(const CreateRenderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRenderParams& operator=(CreateRenderParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CreateRenderParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRenderParams* internal_default_instance() {
    return reinterpret_cast<const CreateRenderParams*>(
               &_CreateRenderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(CreateRenderParams& a, CreateRenderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRenderParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRenderParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRenderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRenderParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CreateRenderParams& from);
  void MergeFrom(const CreateRenderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CreateRenderParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CreateRenderParams";
  }
  protected:
  explicit CreateRenderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRecvHandleFieldNumber = 1,
  };
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_recv_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class DestroyRendererParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.DestroyRendererParams) */ {
 public:
  inline DestroyRendererParams() : DestroyRendererParams(nullptr) {}
  ~DestroyRendererParams() override;
  explicit PROTOBUF_CONSTEXPR DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DestroyRendererParams(const DestroyRendererParams& from);
  DestroyRendererParams(DestroyRendererParams&& from) noexcept
    : DestroyRendererParams() {
    *this = ::std::move(from);
  }

  inline DestroyRendererParams& operator=(const DestroyRendererParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DestroyRendererParams& operator=(DestroyRendererParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DestroyRendererParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DestroyRendererParams* internal_default_instance() {
    return reinterpret_cast<const DestroyRendererParams*>(
               &_DestroyRendererParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(DestroyRendererParams& a, DestroyRendererParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DestroyRendererParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DestroyRendererParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DestroyRendererParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DestroyRendererParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DestroyRendererParams& from);
  void MergeFrom(const DestroyRendererParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DestroyRendererParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.DestroyRendererParams";
  }
  protected:
  explicit DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRecvHandleFieldNumber = 1,
  };
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_recv_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SubscribeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SubscribeParams) */ {
 public:
  inline SubscribeParams() : SubscribeParams(nullptr) {}
  ~SubscribeParams() override;
  explicit PROTOBUF_CONSTEXPR SubscribeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeParams(const SubscribeParams& from);
  SubscribeParams(SubscribeParams&& from) noexcept
    : SubscribeParams() {
    *this = ::std::move(from);
  }

  inline SubscribeParams& operator=(const SubscribeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeParams& operator=(SubscribeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SubscribeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeParams* internal_default_instance() {
    return reinterpret_cast<const SubscribeParams*>(
               &_SubscribeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(SubscribeParams& a, SubscribeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SubscribeParams& from);
  void MergeFrom(const SubscribeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SubscribeParams";
  }
  protected:
  explicit SubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserFieldNumber = 1,
    kZnRecvHandleFieldNumber = 3,
    kZnTypeFieldNumber = 2,
    kZnResolutionFieldNumber = 4,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
  bool has_zn_user() const;
  void clear_zn_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_zn_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_zn_user();
  void set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_zn_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_zn_user();
  public:
  void unsafe_arena_set_allocated_zn_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_zn_user();
  // optional int64 zn_recv_handle = 3;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // optional int32 zn_type = 2;
  bool has_zn_type() const;
  void clear_zn_type() ;
  ::int32_t zn_type() const;
  void set_zn_type(::int32_t value);

  private:
  ::int32_t _internal_zn_type() const;
  void _internal_set_zn_type(::int32_t value);

  public:
  // optional int32 zn_resolution = 4;
  bool has_zn_resolution() const;
  void clear_zn_resolution() ;
  ::int32_t zn_resolution() const;
  void set_zn_resolution(::int32_t value);

  private:
  ::int32_t _internal_zn_resolution() const;
  void _internal_set_zn_resolution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SubscribeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user_;
    ::int64_t zn_recv_handle_;
    ::int32_t zn_type_;
    ::int32_t zn_resolution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class UnSubscribeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.UnSubscribeParams) */ {
 public:
  inline UnSubscribeParams() : UnSubscribeParams(nullptr) {}
  ~UnSubscribeParams() override;
  explicit PROTOBUF_CONSTEXPR UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnSubscribeParams(const UnSubscribeParams& from);
  UnSubscribeParams(UnSubscribeParams&& from) noexcept
    : UnSubscribeParams() {
    *this = ::std::move(from);
  }

  inline UnSubscribeParams& operator=(const UnSubscribeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnSubscribeParams& operator=(UnSubscribeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnSubscribeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnSubscribeParams* internal_default_instance() {
    return reinterpret_cast<const UnSubscribeParams*>(
               &_UnSubscribeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(UnSubscribeParams& a, UnSubscribeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnSubscribeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnSubscribeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnSubscribeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnSubscribeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnSubscribeParams& from);
  void MergeFrom(const UnSubscribeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnSubscribeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.UnSubscribeParams";
  }
  protected:
  explicit UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserFieldNumber = 2,
    kZnRecvHandleFieldNumber = 1,
    kZnTypeFieldNumber = 3,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
  bool has_zn_user() const;
  void clear_zn_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_zn_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_zn_user();
  void set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_zn_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_zn_user();
  public:
  void unsafe_arena_set_allocated_zn_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_zn_user();
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // optional int32 zn_type = 3;
  bool has_zn_type() const;
  void clear_zn_type() ;
  ::int32_t zn_type() const;
  void set_zn_type(::int32_t value);

  private:
  ::int32_t _internal_zn_type() const;
  void _internal_set_zn_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user_;
    ::int64_t zn_recv_handle_;
    ::int32_t zn_type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SubscribeMultiCameraStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams) */ {
 public:
  inline SubscribeMultiCameraStreamParams() : SubscribeMultiCameraStreamParams(nullptr) {}
  ~SubscribeMultiCameraStreamParams() override;
  explicit PROTOBUF_CONSTEXPR SubscribeMultiCameraStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SubscribeMultiCameraStreamParams(const SubscribeMultiCameraStreamParams& from);
  SubscribeMultiCameraStreamParams(SubscribeMultiCameraStreamParams&& from) noexcept
    : SubscribeMultiCameraStreamParams() {
    *this = ::std::move(from);
  }

  inline SubscribeMultiCameraStreamParams& operator=(const SubscribeMultiCameraStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMultiCameraStreamParams& operator=(SubscribeMultiCameraStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SubscribeMultiCameraStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeMultiCameraStreamParams* internal_default_instance() {
    return reinterpret_cast<const SubscribeMultiCameraStreamParams*>(
               &_SubscribeMultiCameraStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(SubscribeMultiCameraStreamParams& a, SubscribeMultiCameraStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMultiCameraStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeMultiCameraStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeMultiCameraStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeMultiCameraStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SubscribeMultiCameraStreamParams& from);
  void MergeFrom(const SubscribeMultiCameraStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeMultiCameraStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams";
  }
  protected:
  explicit SubscribeMultiCameraStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserFieldNumber = 1,
    kCameraStreamIDFieldNumber = 2,
    kZnRecvHandleFieldNumber = 3,
    kZnResolutionFieldNumber = 4,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
  bool has_zn_user() const;
  void clear_zn_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_zn_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_zn_user();
  void set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_zn_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_zn_user();
  public:
  void unsafe_arena_set_allocated_zn_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_zn_user();
  // optional int64 cameraStreamID = 2;
  bool has_camerastreamid() const;
  void clear_camerastreamid() ;
  ::int64_t camerastreamid() const;
  void set_camerastreamid(::int64_t value);

  private:
  ::int64_t _internal_camerastreamid() const;
  void _internal_set_camerastreamid(::int64_t value);

  public:
  // optional int64 zn_recv_handle = 3;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // optional int32 zn_resolution = 4;
  bool has_zn_resolution() const;
  void clear_zn_resolution() ;
  ::int32_t zn_resolution() const;
  void set_zn_resolution(::int32_t value);

  private:
  ::int32_t _internal_zn_resolution() const;
  void _internal_set_zn_resolution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user_;
    ::int64_t camerastreamid_;
    ::int64_t zn_recv_handle_;
    ::int32_t zn_resolution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class UnSubscribeMultiCameraStreamParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams) */ {
 public:
  inline UnSubscribeMultiCameraStreamParams() : UnSubscribeMultiCameraStreamParams(nullptr) {}
  ~UnSubscribeMultiCameraStreamParams() override;
  explicit PROTOBUF_CONSTEXPR UnSubscribeMultiCameraStreamParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnSubscribeMultiCameraStreamParams(const UnSubscribeMultiCameraStreamParams& from);
  UnSubscribeMultiCameraStreamParams(UnSubscribeMultiCameraStreamParams&& from) noexcept
    : UnSubscribeMultiCameraStreamParams() {
    *this = ::std::move(from);
  }

  inline UnSubscribeMultiCameraStreamParams& operator=(const UnSubscribeMultiCameraStreamParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnSubscribeMultiCameraStreamParams& operator=(UnSubscribeMultiCameraStreamParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnSubscribeMultiCameraStreamParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnSubscribeMultiCameraStreamParams* internal_default_instance() {
    return reinterpret_cast<const UnSubscribeMultiCameraStreamParams*>(
               &_UnSubscribeMultiCameraStreamParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(UnSubscribeMultiCameraStreamParams& a, UnSubscribeMultiCameraStreamParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnSubscribeMultiCameraStreamParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnSubscribeMultiCameraStreamParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnSubscribeMultiCameraStreamParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnSubscribeMultiCameraStreamParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnSubscribeMultiCameraStreamParams& from);
  void MergeFrom(const UnSubscribeMultiCameraStreamParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnSubscribeMultiCameraStreamParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams";
  }
  protected:
  explicit UnSubscribeMultiCameraStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnUserFieldNumber = 2,
    kZnRecvHandleFieldNumber = 1,
    kCameraStreamIDFieldNumber = 3,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
  bool has_zn_user() const;
  void clear_zn_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_zn_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_zn_user();
  void set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_zn_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_zn_user();
  public:
  void unsafe_arena_set_allocated_zn_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_zn_user();
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // optional int64 cameraStreamID = 3;
  bool has_camerastreamid() const;
  void clear_camerastreamid() ;
  ::int64_t camerastreamid() const;
  void set_camerastreamid(::int64_t value);

  private:
  ::int64_t _internal_camerastreamid() const;
  void _internal_set_camerastreamid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user_;
    ::int64_t zn_recv_handle_;
    ::int64_t camerastreamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetRawDataResolutionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams) */ {
 public:
  inline SetRawDataResolutionParams() : SetRawDataResolutionParams(nullptr) {}
  ~SetRawDataResolutionParams() override;
  explicit PROTOBUF_CONSTEXPR SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetRawDataResolutionParams(const SetRawDataResolutionParams& from);
  SetRawDataResolutionParams(SetRawDataResolutionParams&& from) noexcept
    : SetRawDataResolutionParams() {
    *this = ::std::move(from);
  }

  inline SetRawDataResolutionParams& operator=(const SetRawDataResolutionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetRawDataResolutionParams& operator=(SetRawDataResolutionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetRawDataResolutionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetRawDataResolutionParams* internal_default_instance() {
    return reinterpret_cast<const SetRawDataResolutionParams*>(
               &_SetRawDataResolutionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(SetRawDataResolutionParams& a, SetRawDataResolutionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetRawDataResolutionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetRawDataResolutionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetRawDataResolutionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetRawDataResolutionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetRawDataResolutionParams& from);
  void MergeFrom(const SetRawDataResolutionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetRawDataResolutionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams";
  }
  protected:
  explicit SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRecvHandleFieldNumber = 2,
    kZnResolutionFieldNumber = 1,
  };
  // optional int64 zn_recv_handle = 2;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // optional int32 zn_resolution = 1;
  bool has_zn_resolution() const;
  void clear_zn_resolution() ;
  ::int32_t zn_resolution() const;
  void set_zn_resolution(::int32_t value);

  private:
  ::int32_t _internal_zn_resolution() const;
  void _internal_set_zn_resolution(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_recv_handle_;
    ::int32_t zn_resolution_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetResolutionParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetResolutionParams) */ {
 public:
  inline GetResolutionParams() : GetResolutionParams(nullptr) {}
  ~GetResolutionParams() override;
  explicit PROTOBUF_CONSTEXPR GetResolutionParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResolutionParams(const GetResolutionParams& from);
  GetResolutionParams(GetResolutionParams&& from) noexcept
    : GetResolutionParams() {
    *this = ::std::move(from);
  }

  inline GetResolutionParams& operator=(const GetResolutionParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResolutionParams& operator=(GetResolutionParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetResolutionParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResolutionParams* internal_default_instance() {
    return reinterpret_cast<const GetResolutionParams*>(
               &_GetResolutionParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(GetResolutionParams& a, GetResolutionParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResolutionParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResolutionParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResolutionParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResolutionParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetResolutionParams& from);
  void MergeFrom(const GetResolutionParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetResolutionParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetResolutionParams";
  }
  protected:
  explicit GetResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRecvHandleFieldNumber = 1,
  };
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_recv_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetRawDataTypeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams) */ {
 public:
  inline GetRawDataTypeParams() : GetRawDataTypeParams(nullptr) {}
  ~GetRawDataTypeParams() override;
  explicit PROTOBUF_CONSTEXPR GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRawDataTypeParams(const GetRawDataTypeParams& from);
  GetRawDataTypeParams(GetRawDataTypeParams&& from) noexcept
    : GetRawDataTypeParams() {
    *this = ::std::move(from);
  }

  inline GetRawDataTypeParams& operator=(const GetRawDataTypeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRawDataTypeParams& operator=(GetRawDataTypeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetRawDataTypeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRawDataTypeParams* internal_default_instance() {
    return reinterpret_cast<const GetRawDataTypeParams*>(
               &_GetRawDataTypeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(GetRawDataTypeParams& a, GetRawDataTypeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRawDataTypeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRawDataTypeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRawDataTypeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRawDataTypeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetRawDataTypeParams& from);
  void MergeFrom(const GetRawDataTypeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetRawDataTypeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams";
  }
  protected:
  explicit GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRecvHandleFieldNumber = 1,
  };
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_recv_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CameraInfos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CameraInfos) */ {
 public:
  inline CameraInfos() : CameraInfos(nullptr) {}
  ~CameraInfos() override;
  explicit PROTOBUF_CONSTEXPR CameraInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraInfos(const CameraInfos& from);
  CameraInfos(CameraInfos&& from) noexcept
    : CameraInfos() {
    *this = ::std::move(from);
  }

  inline CameraInfos& operator=(const CameraInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraInfos& operator=(CameraInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CameraInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraInfos* internal_default_instance() {
    return reinterpret_cast<const CameraInfos*>(
               &_CameraInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(CameraInfos& a, CameraInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraInfos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraInfos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CameraInfos& from);
  void MergeFrom(const CameraInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CameraInfos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CameraInfos";
  }
  protected:
  explicit CameraInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
    kIsSelectedDeviceFieldNumber = 3,
    kIsSelectedAsMultiCameraFieldNumber = 4,
    kIsRunningAsMultiCameraFieldNumber = 5,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // optional string deviceName = 2;
  bool has_devicename() const;
  void clear_devicename() ;
  const std::string& devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* ptr);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // optional bool isSelectedDevice = 3;
  bool has_isselecteddevice() const;
  void clear_isselecteddevice() ;
  bool isselecteddevice() const;
  void set_isselecteddevice(bool value);

  private:
  bool _internal_isselecteddevice() const;
  void _internal_set_isselecteddevice(bool value);

  public:
  // optional bool isSelectedAsMultiCamera = 4;
  bool has_isselectedasmulticamera() const;
  void clear_isselectedasmulticamera() ;
  bool isselectedasmulticamera() const;
  void set_isselectedasmulticamera(bool value);

  private:
  bool _internal_isselectedasmulticamera() const;
  void _internal_set_isselectedasmulticamera(bool value);

  public:
  // optional bool isRunningAsMultiCamera = 5;
  bool has_isrunningasmulticamera() const;
  void clear_isrunningasmulticamera() ;
  bool isrunningasmulticamera() const;
  void set_isrunningasmulticamera(bool value);

  private:
  bool _internal_isrunningasmulticamera() const;
  void _internal_set_isrunningasmulticamera(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CameraInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
    bool isselecteddevice_;
    bool isselectedasmulticamera_;
    bool isrunningasmulticamera_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetCameraList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetCameraList) */ {
 public:
  inline GetCameraList() : GetCameraList(nullptr) {}
  ~GetCameraList() override;
  explicit PROTOBUF_CONSTEXPR GetCameraList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCameraList(const GetCameraList& from);
  GetCameraList(GetCameraList&& from) noexcept
    : GetCameraList() {
    *this = ::std::move(from);
  }

  inline GetCameraList& operator=(const GetCameraList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCameraList& operator=(GetCameraList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetCameraList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCameraList* internal_default_instance() {
    return reinterpret_cast<const GetCameraList*>(
               &_GetCameraList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(GetCameraList& a, GetCameraList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCameraList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCameraList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCameraList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCameraList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetCameraList& from);
  void MergeFrom(const GetCameraList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetCameraList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetCameraList";
  }
  protected:
  explicit GetCameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.CameraInfos CameraInfo = 1;
  int camerainfo_size() const;
  private:
  int _internal_camerainfo_size() const;

  public:
  void clear_camerainfo() ;
  ::com::electron::zoomvideo::sdk::proto::CameraInfos* mutable_camerainfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::CameraInfos >*
      mutable_camerainfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::CameraInfos& _internal_camerainfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::CameraInfos* _internal_add_camerainfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::CameraInfos& camerainfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::CameraInfos* add_camerainfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::CameraInfos >&
      camerainfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetCameraList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::CameraInfos > camerainfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class MultiCameraStreamInfos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos) */ {
 public:
  inline MultiCameraStreamInfos() : MultiCameraStreamInfos(nullptr) {}
  ~MultiCameraStreamInfos() override;
  explicit PROTOBUF_CONSTEXPR MultiCameraStreamInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiCameraStreamInfos(const MultiCameraStreamInfos& from);
  MultiCameraStreamInfos(MultiCameraStreamInfos&& from) noexcept
    : MultiCameraStreamInfos() {
    *this = ::std::move(from);
  }

  inline MultiCameraStreamInfos& operator=(const MultiCameraStreamInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCameraStreamInfos& operator=(MultiCameraStreamInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MultiCameraStreamInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiCameraStreamInfos* internal_default_instance() {
    return reinterpret_cast<const MultiCameraStreamInfos*>(
               &_MultiCameraStreamInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(MultiCameraStreamInfos& a, MultiCameraStreamInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCameraStreamInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiCameraStreamInfos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiCameraStreamInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiCameraStreamInfos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiCameraStreamInfos& from);
  void MergeFrom(const MultiCameraStreamInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiCameraStreamInfos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos";
  }
  protected:
  explicit MultiCameraStreamInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraStreamIDFieldNumber = 1,
  };
  // optional int64 cameraStreamID = 1;
  bool has_camerastreamid() const;
  void clear_camerastreamid() ;
  ::int64_t camerastreamid() const;
  void set_camerastreamid(::int64_t value);

  private:
  ::int64_t _internal_camerastreamid() const;
  void _internal_set_camerastreamid(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t camerastreamid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class MultiCameraStreamList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList) */ {
 public:
  inline MultiCameraStreamList() : MultiCameraStreamList(nullptr) {}
  ~MultiCameraStreamList() override;
  explicit PROTOBUF_CONSTEXPR MultiCameraStreamList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiCameraStreamList(const MultiCameraStreamList& from);
  MultiCameraStreamList(MultiCameraStreamList&& from) noexcept
    : MultiCameraStreamList() {
    *this = ::std::move(from);
  }

  inline MultiCameraStreamList& operator=(const MultiCameraStreamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiCameraStreamList& operator=(MultiCameraStreamList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MultiCameraStreamList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiCameraStreamList* internal_default_instance() {
    return reinterpret_cast<const MultiCameraStreamList*>(
               &_MultiCameraStreamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(MultiCameraStreamList& a, MultiCameraStreamList& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiCameraStreamList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiCameraStreamList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MultiCameraStreamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MultiCameraStreamList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MultiCameraStreamList& from);
  void MergeFrom(const MultiCameraStreamList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiCameraStreamList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.MultiCameraStreamList";
  }
  protected:
  explicit MultiCameraStreamList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraStreamInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos CameraStreamInfo = 1;
  int camerastreaminfo_size() const;
  private:
  int _internal_camerastreaminfo_size() const;

  public:
  void clear_camerastreaminfo() ;
  ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* mutable_camerastreaminfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos >*
      mutable_camerastreaminfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos& _internal_camerastreaminfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* _internal_add_camerastreaminfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos& camerastreaminfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* add_camerastreaminfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos >&
      camerastreaminfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos > camerastreaminfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetMultiCameraStreamList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList) */ {
 public:
  inline GetMultiCameraStreamList() : GetMultiCameraStreamList(nullptr) {}
  ~GetMultiCameraStreamList() override;
  explicit PROTOBUF_CONSTEXPR GetMultiCameraStreamList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMultiCameraStreamList(const GetMultiCameraStreamList& from);
  GetMultiCameraStreamList(GetMultiCameraStreamList&& from) noexcept
    : GetMultiCameraStreamList() {
    *this = ::std::move(from);
  }

  inline GetMultiCameraStreamList& operator=(const GetMultiCameraStreamList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMultiCameraStreamList& operator=(GetMultiCameraStreamList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetMultiCameraStreamList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMultiCameraStreamList* internal_default_instance() {
    return reinterpret_cast<const GetMultiCameraStreamList*>(
               &_GetMultiCameraStreamList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(GetMultiCameraStreamList& a, GetMultiCameraStreamList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMultiCameraStreamList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMultiCameraStreamList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMultiCameraStreamList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMultiCameraStreamList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetMultiCameraStreamList& from);
  void MergeFrom(const GetMultiCameraStreamList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMultiCameraStreamList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList";
  }
  protected:
  explicit GetMultiCameraStreamList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class MicInfos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.MicInfos) */ {
 public:
  inline MicInfos() : MicInfos(nullptr) {}
  ~MicInfos() override;
  explicit PROTOBUF_CONSTEXPR MicInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MicInfos(const MicInfos& from);
  MicInfos(MicInfos&& from) noexcept
    : MicInfos() {
    *this = ::std::move(from);
  }

  inline MicInfos& operator=(const MicInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline MicInfos& operator=(MicInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const MicInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const MicInfos* internal_default_instance() {
    return reinterpret_cast<const MicInfos*>(
               &_MicInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(MicInfos& a, MicInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(MicInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MicInfos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MicInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MicInfos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const MicInfos& from);
  void MergeFrom(const MicInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MicInfos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.MicInfos";
  }
  protected:
  explicit MicInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
    kIsSelectedDeviceFieldNumber = 3,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // optional string deviceName = 2;
  bool has_devicename() const;
  void clear_devicename() ;
  const std::string& devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* ptr);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // optional bool isSelectedDevice = 3;
  bool has_isselecteddevice() const;
  void clear_isselecteddevice() ;
  bool isselecteddevice() const;
  void set_isselecteddevice(bool value);

  private:
  bool _internal_isselecteddevice() const;
  void _internal_set_isselecteddevice(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.MicInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
    bool isselecteddevice_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetMicList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetMicList) */ {
 public:
  inline GetMicList() : GetMicList(nullptr) {}
  ~GetMicList() override;
  explicit PROTOBUF_CONSTEXPR GetMicList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMicList(const GetMicList& from);
  GetMicList(GetMicList&& from) noexcept
    : GetMicList() {
    *this = ::std::move(from);
  }

  inline GetMicList& operator=(const GetMicList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMicList& operator=(GetMicList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetMicList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMicList* internal_default_instance() {
    return reinterpret_cast<const GetMicList*>(
               &_GetMicList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(GetMicList& a, GetMicList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMicList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMicList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMicList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMicList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetMicList& from);
  void MergeFrom(const GetMicList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetMicList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetMicList";
  }
  protected:
  explicit GetMicList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMicInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.MicInfos MicInfo = 1;
  int micinfo_size() const;
  private:
  int _internal_micinfo_size() const;

  public:
  void clear_micinfo() ;
  ::com::electron::zoomvideo::sdk::proto::MicInfos* mutable_micinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MicInfos >*
      mutable_micinfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::MicInfos& _internal_micinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::MicInfos* _internal_add_micinfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::MicInfos& micinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::MicInfos* add_micinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MicInfos >&
      micinfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetMicList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MicInfos > micinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SpeakerInfos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SpeakerInfos) */ {
 public:
  inline SpeakerInfos() : SpeakerInfos(nullptr) {}
  ~SpeakerInfos() override;
  explicit PROTOBUF_CONSTEXPR SpeakerInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpeakerInfos(const SpeakerInfos& from);
  SpeakerInfos(SpeakerInfos&& from) noexcept
    : SpeakerInfos() {
    *this = ::std::move(from);
  }

  inline SpeakerInfos& operator=(const SpeakerInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpeakerInfos& operator=(SpeakerInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SpeakerInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpeakerInfos* internal_default_instance() {
    return reinterpret_cast<const SpeakerInfos*>(
               &_SpeakerInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(SpeakerInfos& a, SpeakerInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(SpeakerInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpeakerInfos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpeakerInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpeakerInfos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SpeakerInfos& from);
  void MergeFrom(const SpeakerInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpeakerInfos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SpeakerInfos";
  }
  protected:
  explicit SpeakerInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
    kDeviceNameFieldNumber = 2,
    kIsSelectedDeviceFieldNumber = 3,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // optional string deviceName = 2;
  bool has_devicename() const;
  void clear_devicename() ;
  const std::string& devicename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_devicename(Arg_&& arg, Args_... args);
  std::string* mutable_devicename();
  PROTOBUF_NODISCARD std::string* release_devicename();
  void set_allocated_devicename(std::string* ptr);

  private:
  const std::string& _internal_devicename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_devicename(
      const std::string& value);
  std::string* _internal_mutable_devicename();

  public:
  // optional bool isSelectedDevice = 3;
  bool has_isselecteddevice() const;
  void clear_isselecteddevice() ;
  bool isselecteddevice() const;
  void set_isselecteddevice(bool value);

  private:
  bool _internal_isselecteddevice() const;
  void _internal_set_isselecteddevice(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devicename_;
    bool isselecteddevice_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetSpeakerList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetSpeakerList) */ {
 public:
  inline GetSpeakerList() : GetSpeakerList(nullptr) {}
  ~GetSpeakerList() override;
  explicit PROTOBUF_CONSTEXPR GetSpeakerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetSpeakerList(const GetSpeakerList& from);
  GetSpeakerList(GetSpeakerList&& from) noexcept
    : GetSpeakerList() {
    *this = ::std::move(from);
  }

  inline GetSpeakerList& operator=(const GetSpeakerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSpeakerList& operator=(GetSpeakerList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetSpeakerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSpeakerList* internal_default_instance() {
    return reinterpret_cast<const GetSpeakerList*>(
               &_GetSpeakerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(GetSpeakerList& a, GetSpeakerList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSpeakerList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSpeakerList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSpeakerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetSpeakerList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetSpeakerList& from);
  void MergeFrom(const GetSpeakerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetSpeakerList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetSpeakerList";
  }
  protected:
  explicit GetSpeakerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpeakerInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.SpeakerInfos SpeakerInfo = 1;
  int speakerinfo_size() const;
  private:
  int _internal_speakerinfo_size() const;

  public:
  void clear_speakerinfo() ;
  ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* mutable_speakerinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos >*
      mutable_speakerinfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::SpeakerInfos& _internal_speakerinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* _internal_add_speakerinfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::SpeakerInfos& speakerinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* add_speakerinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos >&
      speakerinfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos > speakerinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SendCommandParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SendCommandParams) */ {
 public:
  inline SendCommandParams() : SendCommandParams(nullptr) {}
  ~SendCommandParams() override;
  explicit PROTOBUF_CONSTEXPR SendCommandParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SendCommandParams(const SendCommandParams& from);
  SendCommandParams(SendCommandParams&& from) noexcept
    : SendCommandParams() {
    *this = ::std::move(from);
  }

  inline SendCommandParams& operator=(const SendCommandParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendCommandParams& operator=(SendCommandParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SendCommandParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SendCommandParams* internal_default_instance() {
    return reinterpret_cast<const SendCommandParams*>(
               &_SendCommandParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(SendCommandParams& a, SendCommandParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SendCommandParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendCommandParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SendCommandParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SendCommandParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SendCommandParams& from);
  void MergeFrom(const SendCommandParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SendCommandParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SendCommandParams";
  }
  protected:
  explicit SendCommandParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrCmdFieldNumber = 2,
    kUserFieldNumber = 1,
  };
  // optional string strCmd = 2;
  bool has_strcmd() const;
  void clear_strcmd() ;
  const std::string& strcmd() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strcmd(Arg_&& arg, Args_... args);
  std::string* mutable_strcmd();
  PROTOBUF_NODISCARD std::string* release_strcmd();
  void set_allocated_strcmd(std::string* ptr);

  private:
  const std::string& _internal_strcmd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strcmd(
      const std::string& value);
  std::string* _internal_mutable_strcmd();

  public:
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SendCommandParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr strcmd_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class PhoneSupportCountryInfos final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos) */ {
 public:
  inline PhoneSupportCountryInfos() : PhoneSupportCountryInfos(nullptr) {}
  ~PhoneSupportCountryInfos() override;
  explicit PROTOBUF_CONSTEXPR PhoneSupportCountryInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PhoneSupportCountryInfos(const PhoneSupportCountryInfos& from);
  PhoneSupportCountryInfos(PhoneSupportCountryInfos&& from) noexcept
    : PhoneSupportCountryInfos() {
    *this = ::std::move(from);
  }

  inline PhoneSupportCountryInfos& operator=(const PhoneSupportCountryInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline PhoneSupportCountryInfos& operator=(PhoneSupportCountryInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PhoneSupportCountryInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const PhoneSupportCountryInfos* internal_default_instance() {
    return reinterpret_cast<const PhoneSupportCountryInfos*>(
               &_PhoneSupportCountryInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(PhoneSupportCountryInfos& a, PhoneSupportCountryInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(PhoneSupportCountryInfos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PhoneSupportCountryInfos* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PhoneSupportCountryInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PhoneSupportCountryInfos>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PhoneSupportCountryInfos& from);
  void MergeFrom(const PhoneSupportCountryInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PhoneSupportCountryInfos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos";
  }
  protected:
  explicit PhoneSupportCountryInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryIDFieldNumber = 1,
    kCountryNameFieldNumber = 2,
    kCountryCodeFieldNumber = 3,
  };
  // optional string countryID = 1;
  bool has_countryid() const;
  void clear_countryid() ;
  const std::string& countryid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countryid(Arg_&& arg, Args_... args);
  std::string* mutable_countryid();
  PROTOBUF_NODISCARD std::string* release_countryid();
  void set_allocated_countryid(std::string* ptr);

  private:
  const std::string& _internal_countryid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countryid(
      const std::string& value);
  std::string* _internal_mutable_countryid();

  public:
  // optional string countryName = 2;
  bool has_countryname() const;
  void clear_countryname() ;
  const std::string& countryname() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countryname(Arg_&& arg, Args_... args);
  std::string* mutable_countryname();
  PROTOBUF_NODISCARD std::string* release_countryname();
  void set_allocated_countryname(std::string* ptr);

  private:
  const std::string& _internal_countryname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countryname(
      const std::string& value);
  std::string* _internal_mutable_countryname();

  public:
  // optional string countryCode = 3;
  bool has_countrycode() const;
  void clear_countrycode() ;
  const std::string& countrycode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countrycode(Arg_&& arg, Args_... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* ptr);

  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(
      const std::string& value);
  std::string* _internal_mutable_countrycode();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countryname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetPhoneSupportCountryList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList) */ {
 public:
  inline GetPhoneSupportCountryList() : GetPhoneSupportCountryList(nullptr) {}
  ~GetPhoneSupportCountryList() override;
  explicit PROTOBUF_CONSTEXPR GetPhoneSupportCountryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhoneSupportCountryList(const GetPhoneSupportCountryList& from);
  GetPhoneSupportCountryList(GetPhoneSupportCountryList&& from) noexcept
    : GetPhoneSupportCountryList() {
    *this = ::std::move(from);
  }

  inline GetPhoneSupportCountryList& operator=(const GetPhoneSupportCountryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhoneSupportCountryList& operator=(GetPhoneSupportCountryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetPhoneSupportCountryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhoneSupportCountryList* internal_default_instance() {
    return reinterpret_cast<const GetPhoneSupportCountryList*>(
               &_GetPhoneSupportCountryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(GetPhoneSupportCountryList& a, GetPhoneSupportCountryList& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhoneSupportCountryList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhoneSupportCountryList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhoneSupportCountryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhoneSupportCountryList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetPhoneSupportCountryList& from);
  void MergeFrom(const GetPhoneSupportCountryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetPhoneSupportCountryList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList";
  }
  protected:
  explicit GetPhoneSupportCountryList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPhoneSupportCountryInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos PhoneSupportCountryInfo = 1;
  int phonesupportcountryinfo_size() const;
  private:
  int _internal_phonesupportcountryinfo_size() const;

  public:
  void clear_phonesupportcountryinfo() ;
  ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* mutable_phonesupportcountryinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos >*
      mutable_phonesupportcountryinfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos& _internal_phonesupportcountryinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* _internal_add_phonesupportcountryinfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos& phonesupportcountryinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* add_phonesupportcountryinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos >&
      phonesupportcountryinfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos > phonesupportcountryinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class InviteByPhoneParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams) */ {
 public:
  inline InviteByPhoneParams() : InviteByPhoneParams(nullptr) {}
  ~InviteByPhoneParams() override;
  explicit PROTOBUF_CONSTEXPR InviteByPhoneParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InviteByPhoneParams(const InviteByPhoneParams& from);
  InviteByPhoneParams(InviteByPhoneParams&& from) noexcept
    : InviteByPhoneParams() {
    *this = ::std::move(from);
  }

  inline InviteByPhoneParams& operator=(const InviteByPhoneParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InviteByPhoneParams& operator=(InviteByPhoneParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InviteByPhoneParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InviteByPhoneParams* internal_default_instance() {
    return reinterpret_cast<const InviteByPhoneParams*>(
               &_InviteByPhoneParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(InviteByPhoneParams& a, InviteByPhoneParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InviteByPhoneParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InviteByPhoneParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InviteByPhoneParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InviteByPhoneParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InviteByPhoneParams& from);
  void MergeFrom(const InviteByPhoneParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InviteByPhoneParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.InviteByPhoneParams";
  }
  protected:
  explicit InviteByPhoneParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kPhoneNumberFieldNumber = 2,
    kNameFieldNumber = 3,
  };
  // optional string countryCode = 1;
  bool has_countrycode() const;
  void clear_countrycode() ;
  const std::string& countrycode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countrycode(Arg_&& arg, Args_... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* ptr);

  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(
      const std::string& value);
  std::string* _internal_mutable_countrycode();

  public:
  // optional string phoneNumber = 2;
  bool has_phonenumber() const;
  void clear_phonenumber() ;
  const std::string& phonenumber() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenumber(Arg_&& arg, Args_... args);
  std::string* mutable_phonenumber();
  PROTOBUF_NODISCARD std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* ptr);

  private:
  const std::string& _internal_phonenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenumber(
      const std::string& value);
  std::string* _internal_mutable_phonenumber();

  public:
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenumber_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class InvitePhoneUserParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams) */ {
 public:
  inline InvitePhoneUserParams() : InvitePhoneUserParams(nullptr) {}
  ~InvitePhoneUserParams() override;
  explicit PROTOBUF_CONSTEXPR InvitePhoneUserParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InvitePhoneUserParams(const InvitePhoneUserParams& from);
  InvitePhoneUserParams(InvitePhoneUserParams&& from) noexcept
    : InvitePhoneUserParams() {
    *this = ::std::move(from);
  }

  inline InvitePhoneUserParams& operator=(const InvitePhoneUserParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline InvitePhoneUserParams& operator=(InvitePhoneUserParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InvitePhoneUserParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const InvitePhoneUserParams* internal_default_instance() {
    return reinterpret_cast<const InvitePhoneUserParams*>(
               &_InvitePhoneUserParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(InvitePhoneUserParams& a, InvitePhoneUserParams& b) {
    a.Swap(&b);
  }
  inline void Swap(InvitePhoneUserParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InvitePhoneUserParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InvitePhoneUserParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InvitePhoneUserParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InvitePhoneUserParams& from);
  void MergeFrom(const InvitePhoneUserParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InvitePhoneUserParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams";
  }
  protected:
  explicit InvitePhoneUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kPhoneNumberFieldNumber = 2,
    kNameFieldNumber = 3,
    kBPressOneFieldNumber = 4,
    kBGreetingFieldNumber = 5,
  };
  // optional string countryCode = 1;
  bool has_countrycode() const;
  void clear_countrycode() ;
  const std::string& countrycode() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_countrycode(Arg_&& arg, Args_... args);
  std::string* mutable_countrycode();
  PROTOBUF_NODISCARD std::string* release_countrycode();
  void set_allocated_countrycode(std::string* ptr);

  private:
  const std::string& _internal_countrycode() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_countrycode(
      const std::string& value);
  std::string* _internal_mutable_countrycode();

  public:
  // optional string phoneNumber = 2;
  bool has_phonenumber() const;
  void clear_phonenumber() ;
  const std::string& phonenumber() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_phonenumber(Arg_&& arg, Args_... args);
  std::string* mutable_phonenumber();
  PROTOBUF_NODISCARD std::string* release_phonenumber();
  void set_allocated_phonenumber(std::string* ptr);

  private:
  const std::string& _internal_phonenumber() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_phonenumber(
      const std::string& value);
  std::string* _internal_mutable_phonenumber();

  public:
  // optional string name = 3;
  bool has_name() const;
  void clear_name() ;
  const std::string& name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* ptr);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // optional bool bPressOne = 4;
  bool has_bpressone() const;
  void clear_bpressone() ;
  bool bpressone() const;
  void set_bpressone(bool value);

  private:
  bool _internal_bpressone() const;
  void _internal_set_bpressone(bool value);

  public:
  // optional bool bGreeting = 5;
  bool has_bgreeting() const;
  void clear_bgreeting() ;
  bool bgreeting() const;
  void set_bgreeting(bool value);

  private:
  bool _internal_bgreeting() const;
  void _internal_set_bgreeting(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr countrycode_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr phonenumber_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    bool bpressone_;
    bool bgreeting_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LocalCameraCtrlTurnLeftParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams) */ {
 public:
  inline LocalCameraCtrlTurnLeftParams() : LocalCameraCtrlTurnLeftParams(nullptr) {}
  ~LocalCameraCtrlTurnLeftParams() override;
  explicit PROTOBUF_CONSTEXPR LocalCameraCtrlTurnLeftParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCameraCtrlTurnLeftParams(const LocalCameraCtrlTurnLeftParams& from);
  LocalCameraCtrlTurnLeftParams(LocalCameraCtrlTurnLeftParams&& from) noexcept
    : LocalCameraCtrlTurnLeftParams() {
    *this = ::std::move(from);
  }

  inline LocalCameraCtrlTurnLeftParams& operator=(const LocalCameraCtrlTurnLeftParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCameraCtrlTurnLeftParams& operator=(LocalCameraCtrlTurnLeftParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCameraCtrlTurnLeftParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCameraCtrlTurnLeftParams* internal_default_instance() {
    return reinterpret_cast<const LocalCameraCtrlTurnLeftParams*>(
               &_LocalCameraCtrlTurnLeftParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(LocalCameraCtrlTurnLeftParams& a, LocalCameraCtrlTurnLeftParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCameraCtrlTurnLeftParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCameraCtrlTurnLeftParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCameraCtrlTurnLeftParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCameraCtrlTurnLeftParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalCameraCtrlTurnLeftParams& from);
  void MergeFrom(const LocalCameraCtrlTurnLeftParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalCameraCtrlTurnLeftParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams";
  }
  protected:
  explicit LocalCameraCtrlTurnLeftParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LocalCameraCtrlTurnRightParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams) */ {
 public:
  inline LocalCameraCtrlTurnRightParams() : LocalCameraCtrlTurnRightParams(nullptr) {}
  ~LocalCameraCtrlTurnRightParams() override;
  explicit PROTOBUF_CONSTEXPR LocalCameraCtrlTurnRightParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCameraCtrlTurnRightParams(const LocalCameraCtrlTurnRightParams& from);
  LocalCameraCtrlTurnRightParams(LocalCameraCtrlTurnRightParams&& from) noexcept
    : LocalCameraCtrlTurnRightParams() {
    *this = ::std::move(from);
  }

  inline LocalCameraCtrlTurnRightParams& operator=(const LocalCameraCtrlTurnRightParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCameraCtrlTurnRightParams& operator=(LocalCameraCtrlTurnRightParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCameraCtrlTurnRightParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCameraCtrlTurnRightParams* internal_default_instance() {
    return reinterpret_cast<const LocalCameraCtrlTurnRightParams*>(
               &_LocalCameraCtrlTurnRightParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(LocalCameraCtrlTurnRightParams& a, LocalCameraCtrlTurnRightParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCameraCtrlTurnRightParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCameraCtrlTurnRightParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCameraCtrlTurnRightParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCameraCtrlTurnRightParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalCameraCtrlTurnRightParams& from);
  void MergeFrom(const LocalCameraCtrlTurnRightParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalCameraCtrlTurnRightParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams";
  }
  protected:
  explicit LocalCameraCtrlTurnRightParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LocalCameraCtrlTurnUpParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams) */ {
 public:
  inline LocalCameraCtrlTurnUpParams() : LocalCameraCtrlTurnUpParams(nullptr) {}
  ~LocalCameraCtrlTurnUpParams() override;
  explicit PROTOBUF_CONSTEXPR LocalCameraCtrlTurnUpParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCameraCtrlTurnUpParams(const LocalCameraCtrlTurnUpParams& from);
  LocalCameraCtrlTurnUpParams(LocalCameraCtrlTurnUpParams&& from) noexcept
    : LocalCameraCtrlTurnUpParams() {
    *this = ::std::move(from);
  }

  inline LocalCameraCtrlTurnUpParams& operator=(const LocalCameraCtrlTurnUpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCameraCtrlTurnUpParams& operator=(LocalCameraCtrlTurnUpParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCameraCtrlTurnUpParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCameraCtrlTurnUpParams* internal_default_instance() {
    return reinterpret_cast<const LocalCameraCtrlTurnUpParams*>(
               &_LocalCameraCtrlTurnUpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(LocalCameraCtrlTurnUpParams& a, LocalCameraCtrlTurnUpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCameraCtrlTurnUpParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCameraCtrlTurnUpParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCameraCtrlTurnUpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCameraCtrlTurnUpParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalCameraCtrlTurnUpParams& from);
  void MergeFrom(const LocalCameraCtrlTurnUpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalCameraCtrlTurnUpParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams";
  }
  protected:
  explicit LocalCameraCtrlTurnUpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LocalCameraCtrlTurnDownParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams) */ {
 public:
  inline LocalCameraCtrlTurnDownParams() : LocalCameraCtrlTurnDownParams(nullptr) {}
  ~LocalCameraCtrlTurnDownParams() override;
  explicit PROTOBUF_CONSTEXPR LocalCameraCtrlTurnDownParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCameraCtrlTurnDownParams(const LocalCameraCtrlTurnDownParams& from);
  LocalCameraCtrlTurnDownParams(LocalCameraCtrlTurnDownParams&& from) noexcept
    : LocalCameraCtrlTurnDownParams() {
    *this = ::std::move(from);
  }

  inline LocalCameraCtrlTurnDownParams& operator=(const LocalCameraCtrlTurnDownParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCameraCtrlTurnDownParams& operator=(LocalCameraCtrlTurnDownParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCameraCtrlTurnDownParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCameraCtrlTurnDownParams* internal_default_instance() {
    return reinterpret_cast<const LocalCameraCtrlTurnDownParams*>(
               &_LocalCameraCtrlTurnDownParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(LocalCameraCtrlTurnDownParams& a, LocalCameraCtrlTurnDownParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCameraCtrlTurnDownParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCameraCtrlTurnDownParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCameraCtrlTurnDownParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCameraCtrlTurnDownParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalCameraCtrlTurnDownParams& from);
  void MergeFrom(const LocalCameraCtrlTurnDownParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalCameraCtrlTurnDownParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams";
  }
  protected:
  explicit LocalCameraCtrlTurnDownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LocalCameraCtrlZoomInParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams) */ {
 public:
  inline LocalCameraCtrlZoomInParams() : LocalCameraCtrlZoomInParams(nullptr) {}
  ~LocalCameraCtrlZoomInParams() override;
  explicit PROTOBUF_CONSTEXPR LocalCameraCtrlZoomInParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCameraCtrlZoomInParams(const LocalCameraCtrlZoomInParams& from);
  LocalCameraCtrlZoomInParams(LocalCameraCtrlZoomInParams&& from) noexcept
    : LocalCameraCtrlZoomInParams() {
    *this = ::std::move(from);
  }

  inline LocalCameraCtrlZoomInParams& operator=(const LocalCameraCtrlZoomInParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCameraCtrlZoomInParams& operator=(LocalCameraCtrlZoomInParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCameraCtrlZoomInParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCameraCtrlZoomInParams* internal_default_instance() {
    return reinterpret_cast<const LocalCameraCtrlZoomInParams*>(
               &_LocalCameraCtrlZoomInParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(LocalCameraCtrlZoomInParams& a, LocalCameraCtrlZoomInParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCameraCtrlZoomInParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCameraCtrlZoomInParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCameraCtrlZoomInParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCameraCtrlZoomInParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalCameraCtrlZoomInParams& from);
  void MergeFrom(const LocalCameraCtrlZoomInParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalCameraCtrlZoomInParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams";
  }
  protected:
  explicit LocalCameraCtrlZoomInParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LocalCameraCtrlZoomOutParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams) */ {
 public:
  inline LocalCameraCtrlZoomOutParams() : LocalCameraCtrlZoomOutParams(nullptr) {}
  ~LocalCameraCtrlZoomOutParams() override;
  explicit PROTOBUF_CONSTEXPR LocalCameraCtrlZoomOutParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocalCameraCtrlZoomOutParams(const LocalCameraCtrlZoomOutParams& from);
  LocalCameraCtrlZoomOutParams(LocalCameraCtrlZoomOutParams&& from) noexcept
    : LocalCameraCtrlZoomOutParams() {
    *this = ::std::move(from);
  }

  inline LocalCameraCtrlZoomOutParams& operator=(const LocalCameraCtrlZoomOutParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocalCameraCtrlZoomOutParams& operator=(LocalCameraCtrlZoomOutParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LocalCameraCtrlZoomOutParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocalCameraCtrlZoomOutParams* internal_default_instance() {
    return reinterpret_cast<const LocalCameraCtrlZoomOutParams*>(
               &_LocalCameraCtrlZoomOutParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(LocalCameraCtrlZoomOutParams& a, LocalCameraCtrlZoomOutParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LocalCameraCtrlZoomOutParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocalCameraCtrlZoomOutParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocalCameraCtrlZoomOutParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocalCameraCtrlZoomOutParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LocalCameraCtrlZoomOutParams& from);
  void MergeFrom(const LocalCameraCtrlZoomOutParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocalCameraCtrlZoomOutParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams";
  }
  protected:
  explicit LocalCameraCtrlZoomOutParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 1,
  };
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RequestControlRemoteCameraParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams) */ {
 public:
  inline RequestControlRemoteCameraParams() : RequestControlRemoteCameraParams(nullptr) {}
  ~RequestControlRemoteCameraParams() override;
  explicit PROTOBUF_CONSTEXPR RequestControlRemoteCameraParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestControlRemoteCameraParams(const RequestControlRemoteCameraParams& from);
  RequestControlRemoteCameraParams(RequestControlRemoteCameraParams&& from) noexcept
    : RequestControlRemoteCameraParams() {
    *this = ::std::move(from);
  }

  inline RequestControlRemoteCameraParams& operator=(const RequestControlRemoteCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestControlRemoteCameraParams& operator=(RequestControlRemoteCameraParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RequestControlRemoteCameraParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestControlRemoteCameraParams* internal_default_instance() {
    return reinterpret_cast<const RequestControlRemoteCameraParams*>(
               &_RequestControlRemoteCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(RequestControlRemoteCameraParams& a, RequestControlRemoteCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestControlRemoteCameraParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestControlRemoteCameraParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestControlRemoteCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestControlRemoteCameraParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RequestControlRemoteCameraParams& from);
  void MergeFrom(const RequestControlRemoteCameraParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RequestControlRemoteCameraParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams";
  }
  protected:
  explicit RequestControlRemoteCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GiveUpControlRemoteCameraParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams) */ {
 public:
  inline GiveUpControlRemoteCameraParams() : GiveUpControlRemoteCameraParams(nullptr) {}
  ~GiveUpControlRemoteCameraParams() override;
  explicit PROTOBUF_CONSTEXPR GiveUpControlRemoteCameraParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GiveUpControlRemoteCameraParams(const GiveUpControlRemoteCameraParams& from);
  GiveUpControlRemoteCameraParams(GiveUpControlRemoteCameraParams&& from) noexcept
    : GiveUpControlRemoteCameraParams() {
    *this = ::std::move(from);
  }

  inline GiveUpControlRemoteCameraParams& operator=(const GiveUpControlRemoteCameraParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GiveUpControlRemoteCameraParams& operator=(GiveUpControlRemoteCameraParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GiveUpControlRemoteCameraParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GiveUpControlRemoteCameraParams* internal_default_instance() {
    return reinterpret_cast<const GiveUpControlRemoteCameraParams*>(
               &_GiveUpControlRemoteCameraParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(GiveUpControlRemoteCameraParams& a, GiveUpControlRemoteCameraParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GiveUpControlRemoteCameraParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GiveUpControlRemoteCameraParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GiveUpControlRemoteCameraParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GiveUpControlRemoteCameraParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GiveUpControlRemoteCameraParams& from);
  void MergeFrom(const GiveUpControlRemoteCameraParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GiveUpControlRemoteCameraParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams";
  }
  protected:
  explicit GiveUpControlRemoteCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoteCameraCtrlTurnLeftParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams) */ {
 public:
  inline RemoteCameraCtrlTurnLeftParams() : RemoteCameraCtrlTurnLeftParams(nullptr) {}
  ~RemoteCameraCtrlTurnLeftParams() override;
  explicit PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnLeftParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteCameraCtrlTurnLeftParams(const RemoteCameraCtrlTurnLeftParams& from);
  RemoteCameraCtrlTurnLeftParams(RemoteCameraCtrlTurnLeftParams&& from) noexcept
    : RemoteCameraCtrlTurnLeftParams() {
    *this = ::std::move(from);
  }

  inline RemoteCameraCtrlTurnLeftParams& operator=(const RemoteCameraCtrlTurnLeftParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCameraCtrlTurnLeftParams& operator=(RemoteCameraCtrlTurnLeftParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteCameraCtrlTurnLeftParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteCameraCtrlTurnLeftParams* internal_default_instance() {
    return reinterpret_cast<const RemoteCameraCtrlTurnLeftParams*>(
               &_RemoteCameraCtrlTurnLeftParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(RemoteCameraCtrlTurnLeftParams& a, RemoteCameraCtrlTurnLeftParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCameraCtrlTurnLeftParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteCameraCtrlTurnLeftParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteCameraCtrlTurnLeftParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteCameraCtrlTurnLeftParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteCameraCtrlTurnLeftParams& from);
  void MergeFrom(const RemoteCameraCtrlTurnLeftParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCameraCtrlTurnLeftParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams";
  }
  protected:
  explicit RemoteCameraCtrlTurnLeftParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoteCameraCtrlTurnRightParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams) */ {
 public:
  inline RemoteCameraCtrlTurnRightParams() : RemoteCameraCtrlTurnRightParams(nullptr) {}
  ~RemoteCameraCtrlTurnRightParams() override;
  explicit PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnRightParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteCameraCtrlTurnRightParams(const RemoteCameraCtrlTurnRightParams& from);
  RemoteCameraCtrlTurnRightParams(RemoteCameraCtrlTurnRightParams&& from) noexcept
    : RemoteCameraCtrlTurnRightParams() {
    *this = ::std::move(from);
  }

  inline RemoteCameraCtrlTurnRightParams& operator=(const RemoteCameraCtrlTurnRightParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCameraCtrlTurnRightParams& operator=(RemoteCameraCtrlTurnRightParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteCameraCtrlTurnRightParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteCameraCtrlTurnRightParams* internal_default_instance() {
    return reinterpret_cast<const RemoteCameraCtrlTurnRightParams*>(
               &_RemoteCameraCtrlTurnRightParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(RemoteCameraCtrlTurnRightParams& a, RemoteCameraCtrlTurnRightParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCameraCtrlTurnRightParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteCameraCtrlTurnRightParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteCameraCtrlTurnRightParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteCameraCtrlTurnRightParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteCameraCtrlTurnRightParams& from);
  void MergeFrom(const RemoteCameraCtrlTurnRightParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCameraCtrlTurnRightParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams";
  }
  protected:
  explicit RemoteCameraCtrlTurnRightParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoteCameraCtrlTurnUpParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams) */ {
 public:
  inline RemoteCameraCtrlTurnUpParams() : RemoteCameraCtrlTurnUpParams(nullptr) {}
  ~RemoteCameraCtrlTurnUpParams() override;
  explicit PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnUpParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteCameraCtrlTurnUpParams(const RemoteCameraCtrlTurnUpParams& from);
  RemoteCameraCtrlTurnUpParams(RemoteCameraCtrlTurnUpParams&& from) noexcept
    : RemoteCameraCtrlTurnUpParams() {
    *this = ::std::move(from);
  }

  inline RemoteCameraCtrlTurnUpParams& operator=(const RemoteCameraCtrlTurnUpParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCameraCtrlTurnUpParams& operator=(RemoteCameraCtrlTurnUpParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteCameraCtrlTurnUpParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteCameraCtrlTurnUpParams* internal_default_instance() {
    return reinterpret_cast<const RemoteCameraCtrlTurnUpParams*>(
               &_RemoteCameraCtrlTurnUpParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(RemoteCameraCtrlTurnUpParams& a, RemoteCameraCtrlTurnUpParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCameraCtrlTurnUpParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteCameraCtrlTurnUpParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteCameraCtrlTurnUpParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteCameraCtrlTurnUpParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteCameraCtrlTurnUpParams& from);
  void MergeFrom(const RemoteCameraCtrlTurnUpParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCameraCtrlTurnUpParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams";
  }
  protected:
  explicit RemoteCameraCtrlTurnUpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoteCameraCtrlTurnDownParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams) */ {
 public:
  inline RemoteCameraCtrlTurnDownParams() : RemoteCameraCtrlTurnDownParams(nullptr) {}
  ~RemoteCameraCtrlTurnDownParams() override;
  explicit PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnDownParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteCameraCtrlTurnDownParams(const RemoteCameraCtrlTurnDownParams& from);
  RemoteCameraCtrlTurnDownParams(RemoteCameraCtrlTurnDownParams&& from) noexcept
    : RemoteCameraCtrlTurnDownParams() {
    *this = ::std::move(from);
  }

  inline RemoteCameraCtrlTurnDownParams& operator=(const RemoteCameraCtrlTurnDownParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCameraCtrlTurnDownParams& operator=(RemoteCameraCtrlTurnDownParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteCameraCtrlTurnDownParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteCameraCtrlTurnDownParams* internal_default_instance() {
    return reinterpret_cast<const RemoteCameraCtrlTurnDownParams*>(
               &_RemoteCameraCtrlTurnDownParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(RemoteCameraCtrlTurnDownParams& a, RemoteCameraCtrlTurnDownParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCameraCtrlTurnDownParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteCameraCtrlTurnDownParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteCameraCtrlTurnDownParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteCameraCtrlTurnDownParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteCameraCtrlTurnDownParams& from);
  void MergeFrom(const RemoteCameraCtrlTurnDownParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCameraCtrlTurnDownParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams";
  }
  protected:
  explicit RemoteCameraCtrlTurnDownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoteCameraCtrlZoomInParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams) */ {
 public:
  inline RemoteCameraCtrlZoomInParams() : RemoteCameraCtrlZoomInParams(nullptr) {}
  ~RemoteCameraCtrlZoomInParams() override;
  explicit PROTOBUF_CONSTEXPR RemoteCameraCtrlZoomInParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteCameraCtrlZoomInParams(const RemoteCameraCtrlZoomInParams& from);
  RemoteCameraCtrlZoomInParams(RemoteCameraCtrlZoomInParams&& from) noexcept
    : RemoteCameraCtrlZoomInParams() {
    *this = ::std::move(from);
  }

  inline RemoteCameraCtrlZoomInParams& operator=(const RemoteCameraCtrlZoomInParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCameraCtrlZoomInParams& operator=(RemoteCameraCtrlZoomInParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteCameraCtrlZoomInParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteCameraCtrlZoomInParams* internal_default_instance() {
    return reinterpret_cast<const RemoteCameraCtrlZoomInParams*>(
               &_RemoteCameraCtrlZoomInParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(RemoteCameraCtrlZoomInParams& a, RemoteCameraCtrlZoomInParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCameraCtrlZoomInParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteCameraCtrlZoomInParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteCameraCtrlZoomInParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteCameraCtrlZoomInParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteCameraCtrlZoomInParams& from);
  void MergeFrom(const RemoteCameraCtrlZoomInParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCameraCtrlZoomInParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams";
  }
  protected:
  explicit RemoteCameraCtrlZoomInParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoteCameraCtrlZoomOutParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams) */ {
 public:
  inline RemoteCameraCtrlZoomOutParams() : RemoteCameraCtrlZoomOutParams(nullptr) {}
  ~RemoteCameraCtrlZoomOutParams() override;
  explicit PROTOBUF_CONSTEXPR RemoteCameraCtrlZoomOutParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoteCameraCtrlZoomOutParams(const RemoteCameraCtrlZoomOutParams& from);
  RemoteCameraCtrlZoomOutParams(RemoteCameraCtrlZoomOutParams&& from) noexcept
    : RemoteCameraCtrlZoomOutParams() {
    *this = ::std::move(from);
  }

  inline RemoteCameraCtrlZoomOutParams& operator=(const RemoteCameraCtrlZoomOutParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoteCameraCtrlZoomOutParams& operator=(RemoteCameraCtrlZoomOutParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoteCameraCtrlZoomOutParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoteCameraCtrlZoomOutParams* internal_default_instance() {
    return reinterpret_cast<const RemoteCameraCtrlZoomOutParams*>(
               &_RemoteCameraCtrlZoomOutParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(RemoteCameraCtrlZoomOutParams& a, RemoteCameraCtrlZoomOutParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoteCameraCtrlZoomOutParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoteCameraCtrlZoomOutParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoteCameraCtrlZoomOutParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoteCameraCtrlZoomOutParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoteCameraCtrlZoomOutParams& from);
  void MergeFrom(const RemoteCameraCtrlZoomOutParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoteCameraCtrlZoomOutParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams";
  }
  protected:
  explicit RemoteCameraCtrlZoomOutParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 2,
    kRangeFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // optional uint32 range = 1;
  bool has_range() const;
  void clear_range() ;
  ::uint32_t range() const;
  void set_range(::uint32_t value);

  private:
  ::uint32_t _internal_range() const;
  void _internal_set_range(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
    ::uint32_t range_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetVideoQualityPreferenceParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams) */ {
 public:
  inline SetVideoQualityPreferenceParams() : SetVideoQualityPreferenceParams(nullptr) {}
  ~SetVideoQualityPreferenceParams() override;
  explicit PROTOBUF_CONSTEXPR SetVideoQualityPreferenceParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVideoQualityPreferenceParams(const SetVideoQualityPreferenceParams& from);
  SetVideoQualityPreferenceParams(SetVideoQualityPreferenceParams&& from) noexcept
    : SetVideoQualityPreferenceParams() {
    *this = ::std::move(from);
  }

  inline SetVideoQualityPreferenceParams& operator=(const SetVideoQualityPreferenceParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVideoQualityPreferenceParams& operator=(SetVideoQualityPreferenceParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetVideoQualityPreferenceParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVideoQualityPreferenceParams* internal_default_instance() {
    return reinterpret_cast<const SetVideoQualityPreferenceParams*>(
               &_SetVideoQualityPreferenceParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(SetVideoQualityPreferenceParams& a, SetVideoQualityPreferenceParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVideoQualityPreferenceParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVideoQualityPreferenceParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVideoQualityPreferenceParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVideoQualityPreferenceParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetVideoQualityPreferenceParams& from);
  void MergeFrom(const SetVideoQualityPreferenceParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetVideoQualityPreferenceParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams";
  }
  protected:
  explicit SetVideoQualityPreferenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 1,
    kMinimumFrameRateFieldNumber = 2,
    kMaximumFrameRateFieldNumber = 3,
  };
  // optional int32 mode = 1;
  bool has_mode() const;
  void clear_mode() ;
  ::int32_t mode() const;
  void set_mode(::int32_t value);

  private:
  ::int32_t _internal_mode() const;
  void _internal_set_mode(::int32_t value);

  public:
  // optional uint32 minimum_frame_rate = 2;
  bool has_minimum_frame_rate() const;
  void clear_minimum_frame_rate() ;
  ::uint32_t minimum_frame_rate() const;
  void set_minimum_frame_rate(::uint32_t value);

  private:
  ::uint32_t _internal_minimum_frame_rate() const;
  void _internal_set_minimum_frame_rate(::uint32_t value);

  public:
  // optional uint32 maximum_frame_rate = 3;
  bool has_maximum_frame_rate() const;
  void clear_maximum_frame_rate() ;
  ::uint32_t maximum_frame_rate() const;
  void set_maximum_frame_rate(::uint32_t value);

  private:
  ::uint32_t _internal_maximum_frame_rate() const;
  void _internal_set_maximum_frame_rate(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t mode_;
    ::uint32_t minimum_frame_rate_;
    ::uint32_t maximum_frame_rate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetSuppressBackgroundNoiseLevelParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams) */ {
 public:
  inline SetSuppressBackgroundNoiseLevelParams() : SetSuppressBackgroundNoiseLevelParams(nullptr) {}
  ~SetSuppressBackgroundNoiseLevelParams() override;
  explicit PROTOBUF_CONSTEXPR SetSuppressBackgroundNoiseLevelParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSuppressBackgroundNoiseLevelParams(const SetSuppressBackgroundNoiseLevelParams& from);
  SetSuppressBackgroundNoiseLevelParams(SetSuppressBackgroundNoiseLevelParams&& from) noexcept
    : SetSuppressBackgroundNoiseLevelParams() {
    *this = ::std::move(from);
  }

  inline SetSuppressBackgroundNoiseLevelParams& operator=(const SetSuppressBackgroundNoiseLevelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSuppressBackgroundNoiseLevelParams& operator=(SetSuppressBackgroundNoiseLevelParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetSuppressBackgroundNoiseLevelParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSuppressBackgroundNoiseLevelParams* internal_default_instance() {
    return reinterpret_cast<const SetSuppressBackgroundNoiseLevelParams*>(
               &_SetSuppressBackgroundNoiseLevelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(SetSuppressBackgroundNoiseLevelParams& a, SetSuppressBackgroundNoiseLevelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSuppressBackgroundNoiseLevelParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSuppressBackgroundNoiseLevelParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSuppressBackgroundNoiseLevelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSuppressBackgroundNoiseLevelParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetSuppressBackgroundNoiseLevelParams& from);
  void MergeFrom(const SetSuppressBackgroundNoiseLevelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetSuppressBackgroundNoiseLevelParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams";
  }
  protected:
  explicit SetSuppressBackgroundNoiseLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // optional int32 level = 1;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetEchoCancellationLevelParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams) */ {
 public:
  inline SetEchoCancellationLevelParams() : SetEchoCancellationLevelParams(nullptr) {}
  ~SetEchoCancellationLevelParams() override;
  explicit PROTOBUF_CONSTEXPR SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetEchoCancellationLevelParams(const SetEchoCancellationLevelParams& from);
  SetEchoCancellationLevelParams(SetEchoCancellationLevelParams&& from) noexcept
    : SetEchoCancellationLevelParams() {
    *this = ::std::move(from);
  }

  inline SetEchoCancellationLevelParams& operator=(const SetEchoCancellationLevelParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetEchoCancellationLevelParams& operator=(SetEchoCancellationLevelParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetEchoCancellationLevelParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetEchoCancellationLevelParams* internal_default_instance() {
    return reinterpret_cast<const SetEchoCancellationLevelParams*>(
               &_SetEchoCancellationLevelParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(SetEchoCancellationLevelParams& a, SetEchoCancellationLevelParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetEchoCancellationLevelParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetEchoCancellationLevelParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetEchoCancellationLevelParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetEchoCancellationLevelParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetEchoCancellationLevelParams& from);
  void MergeFrom(const SetEchoCancellationLevelParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetEchoCancellationLevelParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams";
  }
  protected:
  explicit SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
  };
  // optional int32 level = 1;
  bool has_level() const;
  void clear_level() ;
  ::int32_t level() const;
  void set_level(::int32_t value);

  private:
  ::int32_t _internal_level() const;
  void _internal_set_level(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t level_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableMicOriginalInputParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams) */ {
 public:
  inline EnableMicOriginalInputParams() : EnableMicOriginalInputParams(nullptr) {}
  ~EnableMicOriginalInputParams() override;
  explicit PROTOBUF_CONSTEXPR EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableMicOriginalInputParams(const EnableMicOriginalInputParams& from);
  EnableMicOriginalInputParams(EnableMicOriginalInputParams&& from) noexcept
    : EnableMicOriginalInputParams() {
    *this = ::std::move(from);
  }

  inline EnableMicOriginalInputParams& operator=(const EnableMicOriginalInputParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableMicOriginalInputParams& operator=(EnableMicOriginalInputParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableMicOriginalInputParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableMicOriginalInputParams* internal_default_instance() {
    return reinterpret_cast<const EnableMicOriginalInputParams*>(
               &_EnableMicOriginalInputParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(EnableMicOriginalInputParams& a, EnableMicOriginalInputParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableMicOriginalInputParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableMicOriginalInputParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableMicOriginalInputParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableMicOriginalInputParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableMicOriginalInputParams& from);
  void MergeFrom(const EnableMicOriginalInputParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableMicOriginalInputParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams";
  }
  protected:
  explicit EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableHighFidelityMusicModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams) */ {
 public:
  inline EnableHighFidelityMusicModeParams() : EnableHighFidelityMusicModeParams(nullptr) {}
  ~EnableHighFidelityMusicModeParams() override;
  explicit PROTOBUF_CONSTEXPR EnableHighFidelityMusicModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableHighFidelityMusicModeParams(const EnableHighFidelityMusicModeParams& from);
  EnableHighFidelityMusicModeParams(EnableHighFidelityMusicModeParams&& from) noexcept
    : EnableHighFidelityMusicModeParams() {
    *this = ::std::move(from);
  }

  inline EnableHighFidelityMusicModeParams& operator=(const EnableHighFidelityMusicModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableHighFidelityMusicModeParams& operator=(EnableHighFidelityMusicModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableHighFidelityMusicModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableHighFidelityMusicModeParams* internal_default_instance() {
    return reinterpret_cast<const EnableHighFidelityMusicModeParams*>(
               &_EnableHighFidelityMusicModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(EnableHighFidelityMusicModeParams& a, EnableHighFidelityMusicModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableHighFidelityMusicModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableHighFidelityMusicModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableHighFidelityMusicModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableHighFidelityMusicModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableHighFidelityMusicModeParams& from);
  void MergeFrom(const EnableHighFidelityMusicModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableHighFidelityMusicModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams";
  }
  protected:
  explicit EnableHighFidelityMusicModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableEchoCancellationParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams) */ {
 public:
  inline EnableEchoCancellationParams() : EnableEchoCancellationParams(nullptr) {}
  ~EnableEchoCancellationParams() override;
  explicit PROTOBUF_CONSTEXPR EnableEchoCancellationParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableEchoCancellationParams(const EnableEchoCancellationParams& from);
  EnableEchoCancellationParams(EnableEchoCancellationParams&& from) noexcept
    : EnableEchoCancellationParams() {
    *this = ::std::move(from);
  }

  inline EnableEchoCancellationParams& operator=(const EnableEchoCancellationParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableEchoCancellationParams& operator=(EnableEchoCancellationParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableEchoCancellationParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableEchoCancellationParams* internal_default_instance() {
    return reinterpret_cast<const EnableEchoCancellationParams*>(
               &_EnableEchoCancellationParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(EnableEchoCancellationParams& a, EnableEchoCancellationParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableEchoCancellationParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableEchoCancellationParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableEchoCancellationParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableEchoCancellationParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableEchoCancellationParams& from);
  void MergeFrom(const EnableEchoCancellationParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableEchoCancellationParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams";
  }
  protected:
  explicit EnableEchoCancellationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableStereoAudioParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams) */ {
 public:
  inline EnableStereoAudioParams() : EnableStereoAudioParams(nullptr) {}
  ~EnableStereoAudioParams() override;
  explicit PROTOBUF_CONSTEXPR EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableStereoAudioParams(const EnableStereoAudioParams& from);
  EnableStereoAudioParams(EnableStereoAudioParams&& from) noexcept
    : EnableStereoAudioParams() {
    *this = ::std::move(from);
  }

  inline EnableStereoAudioParams& operator=(const EnableStereoAudioParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableStereoAudioParams& operator=(EnableStereoAudioParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableStereoAudioParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableStereoAudioParams* internal_default_instance() {
    return reinterpret_cast<const EnableStereoAudioParams*>(
               &_EnableStereoAudioParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(EnableStereoAudioParams& a, EnableStereoAudioParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableStereoAudioParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableStereoAudioParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableStereoAudioParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableStereoAudioParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableStereoAudioParams& from);
  void MergeFrom(const EnableStereoAudioParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableStereoAudioParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams";
  }
  protected:
  explicit EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartMicTestRecordingParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams) */ {
 public:
  inline StartMicTestRecordingParams() : StartMicTestRecordingParams(nullptr) {}
  ~StartMicTestRecordingParams() override;
  explicit PROTOBUF_CONSTEXPR StartMicTestRecordingParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartMicTestRecordingParams(const StartMicTestRecordingParams& from);
  StartMicTestRecordingParams(StartMicTestRecordingParams&& from) noexcept
    : StartMicTestRecordingParams() {
    *this = ::std::move(from);
  }

  inline StartMicTestRecordingParams& operator=(const StartMicTestRecordingParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartMicTestRecordingParams& operator=(StartMicTestRecordingParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartMicTestRecordingParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartMicTestRecordingParams* internal_default_instance() {
    return reinterpret_cast<const StartMicTestRecordingParams*>(
               &_StartMicTestRecordingParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(StartMicTestRecordingParams& a, StartMicTestRecordingParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartMicTestRecordingParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartMicTestRecordingParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartMicTestRecordingParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartMicTestRecordingParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartMicTestRecordingParams& from);
  void MergeFrom(const StartMicTestRecordingParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartMicTestRecordingParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams";
  }
  protected:
  explicit StartMicTestRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartSpeakerTestParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams) */ {
 public:
  inline StartSpeakerTestParams() : StartSpeakerTestParams(nullptr) {}
  ~StartSpeakerTestParams() override;
  explicit PROTOBUF_CONSTEXPR StartSpeakerTestParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartSpeakerTestParams(const StartSpeakerTestParams& from);
  StartSpeakerTestParams(StartSpeakerTestParams&& from) noexcept
    : StartSpeakerTestParams() {
    *this = ::std::move(from);
  }

  inline StartSpeakerTestParams& operator=(const StartSpeakerTestParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartSpeakerTestParams& operator=(StartSpeakerTestParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartSpeakerTestParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartSpeakerTestParams* internal_default_instance() {
    return reinterpret_cast<const StartSpeakerTestParams*>(
               &_StartSpeakerTestParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(StartSpeakerTestParams& a, StartSpeakerTestParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartSpeakerTestParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartSpeakerTestParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartSpeakerTestParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartSpeakerTestParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartSpeakerTestParams& from);
  void MergeFrom(const StartSpeakerTestParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartSpeakerTestParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams";
  }
  protected:
  explicit StartSpeakerTestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetTimerIntervalParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams) */ {
 public:
  inline SetTimerIntervalParams() : SetTimerIntervalParams(nullptr) {}
  ~SetTimerIntervalParams() override;
  explicit PROTOBUF_CONSTEXPR SetTimerIntervalParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTimerIntervalParams(const SetTimerIntervalParams& from);
  SetTimerIntervalParams(SetTimerIntervalParams&& from) noexcept
    : SetTimerIntervalParams() {
    *this = ::std::move(from);
  }

  inline SetTimerIntervalParams& operator=(const SetTimerIntervalParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTimerIntervalParams& operator=(SetTimerIntervalParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetTimerIntervalParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTimerIntervalParams* internal_default_instance() {
    return reinterpret_cast<const SetTimerIntervalParams*>(
               &_SetTimerIntervalParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(SetTimerIntervalParams& a, SetTimerIntervalParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTimerIntervalParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTimerIntervalParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTimerIntervalParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTimerIntervalParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetTimerIntervalParams& from);
  void MergeFrom(const SetTimerIntervalParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetTimerIntervalParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams";
  }
  protected:
  explicit SetTimerIntervalParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimerIntervalFieldNumber = 1,
  };
  // optional uint32 timerInterval = 1;
  bool has_timerinterval() const;
  void clear_timerinterval() ;
  ::uint32_t timerinterval() const;
  void set_timerinterval(::uint32_t value);

  private:
  ::uint32_t _internal_timerinterval() const;
  void _internal_set_timerinterval(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint32_t timerinterval_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableMultiStreamVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams) */ {
 public:
  inline EnableMultiStreamVideoParams() : EnableMultiStreamVideoParams(nullptr) {}
  ~EnableMultiStreamVideoParams() override;
  explicit PROTOBUF_CONSTEXPR EnableMultiStreamVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableMultiStreamVideoParams(const EnableMultiStreamVideoParams& from);
  EnableMultiStreamVideoParams(EnableMultiStreamVideoParams&& from) noexcept
    : EnableMultiStreamVideoParams() {
    *this = ::std::move(from);
  }

  inline EnableMultiStreamVideoParams& operator=(const EnableMultiStreamVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableMultiStreamVideoParams& operator=(EnableMultiStreamVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableMultiStreamVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableMultiStreamVideoParams* internal_default_instance() {
    return reinterpret_cast<const EnableMultiStreamVideoParams*>(
               &_EnableMultiStreamVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(EnableMultiStreamVideoParams& a, EnableMultiStreamVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableMultiStreamVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableMultiStreamVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableMultiStreamVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableMultiStreamVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableMultiStreamVideoParams& from);
  void MergeFrom(const EnableMultiStreamVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableMultiStreamVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams";
  }
  protected:
  explicit EnableMultiStreamVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class DisableMultiStreamVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams) */ {
 public:
  inline DisableMultiStreamVideoParams() : DisableMultiStreamVideoParams(nullptr) {}
  ~DisableMultiStreamVideoParams() override;
  explicit PROTOBUF_CONSTEXPR DisableMultiStreamVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisableMultiStreamVideoParams(const DisableMultiStreamVideoParams& from);
  DisableMultiStreamVideoParams(DisableMultiStreamVideoParams&& from) noexcept
    : DisableMultiStreamVideoParams() {
    *this = ::std::move(from);
  }

  inline DisableMultiStreamVideoParams& operator=(const DisableMultiStreamVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisableMultiStreamVideoParams& operator=(DisableMultiStreamVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisableMultiStreamVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisableMultiStreamVideoParams* internal_default_instance() {
    return reinterpret_cast<const DisableMultiStreamVideoParams*>(
               &_DisableMultiStreamVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(DisableMultiStreamVideoParams& a, DisableMultiStreamVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DisableMultiStreamVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisableMultiStreamVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisableMultiStreamVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisableMultiStreamVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisableMultiStreamVideoParams& from);
  void MergeFrom(const DisableMultiStreamVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisableMultiStreamVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams";
  }
  protected:
  explicit DisableMultiStreamVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceIDFieldNumber = 1,
  };
  // optional string deviceID = 1;
  bool has_deviceid() const;
  void clear_deviceid() ;
  const std::string& deviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_deviceid(Arg_&& arg, Args_... args);
  std::string* mutable_deviceid();
  PROTOBUF_NODISCARD std::string* release_deviceid();
  void set_allocated_deviceid(std::string* ptr);

  private:
  const std::string& _internal_deviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deviceid(
      const std::string& value);
  std::string* _internal_mutable_deviceid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StartVideoPreviewParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams) */ {
 public:
  inline StartVideoPreviewParams() : StartVideoPreviewParams(nullptr) {}
  ~StartVideoPreviewParams() override;
  explicit PROTOBUF_CONSTEXPR StartVideoPreviewParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StartVideoPreviewParams(const StartVideoPreviewParams& from);
  StartVideoPreviewParams(StartVideoPreviewParams&& from) noexcept
    : StartVideoPreviewParams() {
    *this = ::std::move(from);
  }

  inline StartVideoPreviewParams& operator=(const StartVideoPreviewParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartVideoPreviewParams& operator=(StartVideoPreviewParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StartVideoPreviewParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StartVideoPreviewParams* internal_default_instance() {
    return reinterpret_cast<const StartVideoPreviewParams*>(
               &_StartVideoPreviewParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(StartVideoPreviewParams& a, StartVideoPreviewParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StartVideoPreviewParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartVideoPreviewParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StartVideoPreviewParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StartVideoPreviewParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StartVideoPreviewParams& from);
  void MergeFrom(const StartVideoPreviewParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StartVideoPreviewParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams";
  }
  protected:
  explicit StartVideoPreviewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraDeviceIDFieldNumber = 2,
    kZnRecvHandleFieldNumber = 1,
  };
  // optional string cameraDeviceID = 2;
  bool has_cameradeviceid() const;
  void clear_cameradeviceid() ;
  const std::string& cameradeviceid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_cameradeviceid(Arg_&& arg, Args_... args);
  std::string* mutable_cameradeviceid();
  PROTOBUF_NODISCARD std::string* release_cameradeviceid();
  void set_allocated_cameradeviceid(std::string* ptr);

  private:
  const std::string& _internal_cameradeviceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cameradeviceid(
      const std::string& value);
  std::string* _internal_mutable_cameradeviceid();

  public:
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cameradeviceid_;
    ::int64_t zn_recv_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class StopVideoPreviewParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams) */ {
 public:
  inline StopVideoPreviewParams() : StopVideoPreviewParams(nullptr) {}
  ~StopVideoPreviewParams() override;
  explicit PROTOBUF_CONSTEXPR StopVideoPreviewParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopVideoPreviewParams(const StopVideoPreviewParams& from);
  StopVideoPreviewParams(StopVideoPreviewParams&& from) noexcept
    : StopVideoPreviewParams() {
    *this = ::std::move(from);
  }

  inline StopVideoPreviewParams& operator=(const StopVideoPreviewParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopVideoPreviewParams& operator=(StopVideoPreviewParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const StopVideoPreviewParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopVideoPreviewParams* internal_default_instance() {
    return reinterpret_cast<const StopVideoPreviewParams*>(
               &_StopVideoPreviewParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(StopVideoPreviewParams& a, StopVideoPreviewParams& b) {
    a.Swap(&b);
  }
  inline void Swap(StopVideoPreviewParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopVideoPreviewParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopVideoPreviewParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopVideoPreviewParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const StopVideoPreviewParams& from);
  void MergeFrom(const StopVideoPreviewParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(StopVideoPreviewParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams";
  }
  protected:
  explicit StopVideoPreviewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZnRecvHandleFieldNumber = 1,
  };
  // optional int64 zn_recv_handle = 1;
  bool has_zn_recv_handle() const;
  void clear_zn_recv_handle() ;
  ::int64_t zn_recv_handle() const;
  void set_zn_recv_handle(::int64_t value);

  private:
  ::int64_t _internal_zn_recv_handle() const;
  void _internal_set_zn_recv_handle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t zn_recv_handle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SpotLightVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams) */ {
 public:
  inline SpotLightVideoParams() : SpotLightVideoParams(nullptr) {}
  ~SpotLightVideoParams() override;
  explicit PROTOBUF_CONSTEXPR SpotLightVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpotLightVideoParams(const SpotLightVideoParams& from);
  SpotLightVideoParams(SpotLightVideoParams&& from) noexcept
    : SpotLightVideoParams() {
    *this = ::std::move(from);
  }

  inline SpotLightVideoParams& operator=(const SpotLightVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpotLightVideoParams& operator=(SpotLightVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SpotLightVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpotLightVideoParams* internal_default_instance() {
    return reinterpret_cast<const SpotLightVideoParams*>(
               &_SpotLightVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(SpotLightVideoParams& a, SpotLightVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SpotLightVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpotLightVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpotLightVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpotLightVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SpotLightVideoParams& from);
  void MergeFrom(const SpotLightVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpotLightVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SpotLightVideoParams";
  }
  protected:
  explicit SpotLightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class UnSpotLightVideoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams) */ {
 public:
  inline UnSpotLightVideoParams() : UnSpotLightVideoParams(nullptr) {}
  ~UnSpotLightVideoParams() override;
  explicit PROTOBUF_CONSTEXPR UnSpotLightVideoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UnSpotLightVideoParams(const UnSpotLightVideoParams& from);
  UnSpotLightVideoParams(UnSpotLightVideoParams&& from) noexcept
    : UnSpotLightVideoParams() {
    *this = ::std::move(from);
  }

  inline UnSpotLightVideoParams& operator=(const UnSpotLightVideoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnSpotLightVideoParams& operator=(UnSpotLightVideoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UnSpotLightVideoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const UnSpotLightVideoParams* internal_default_instance() {
    return reinterpret_cast<const UnSpotLightVideoParams*>(
               &_UnSpotLightVideoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(UnSpotLightVideoParams& a, UnSpotLightVideoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(UnSpotLightVideoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UnSpotLightVideoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UnSpotLightVideoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UnSpotLightVideoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UnSpotLightVideoParams& from);
  void MergeFrom(const UnSpotLightVideoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UnSpotLightVideoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams";
  }
  protected:
  explicit UnSpotLightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  bool has_user() const;
  void clear_user() ;
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user() const;
  PROTOBUF_NODISCARD ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* release_user();
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* mutable_user();
  void set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  private:
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& _internal_user() const;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _internal_mutable_user();
  public:
  void unsafe_arena_set_allocated_user(
      ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user);
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* unsafe_arena_release_user();
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetSpokenLanguageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams) */ {
 public:
  inline SetSpokenLanguageParams() : SetSpokenLanguageParams(nullptr) {}
  ~SetSpokenLanguageParams() override;
  explicit PROTOBUF_CONSTEXPR SetSpokenLanguageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetSpokenLanguageParams(const SetSpokenLanguageParams& from);
  SetSpokenLanguageParams(SetSpokenLanguageParams&& from) noexcept
    : SetSpokenLanguageParams() {
    *this = ::std::move(from);
  }

  inline SetSpokenLanguageParams& operator=(const SetSpokenLanguageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetSpokenLanguageParams& operator=(SetSpokenLanguageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetSpokenLanguageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetSpokenLanguageParams* internal_default_instance() {
    return reinterpret_cast<const SetSpokenLanguageParams*>(
               &_SetSpokenLanguageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(SetSpokenLanguageParams& a, SetSpokenLanguageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetSpokenLanguageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetSpokenLanguageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetSpokenLanguageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetSpokenLanguageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetSpokenLanguageParams& from);
  void MergeFrom(const SetSpokenLanguageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetSpokenLanguageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams";
  }
  protected:
  explicit SetSpokenLanguageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageIDFieldNumber = 1,
  };
  // optional int32 languageID = 1;
  bool has_languageid() const;
  void clear_languageid() ;
  ::int32_t languageid() const;
  void set_languageid(::int32_t value);

  private:
  ::int32_t _internal_languageid() const;
  void _internal_set_languageid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t languageid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class LTTLanguagesList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.LTTLanguagesList) */ {
 public:
  inline LTTLanguagesList() : LTTLanguagesList(nullptr) {}
  ~LTTLanguagesList() override;
  explicit PROTOBUF_CONSTEXPR LTTLanguagesList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LTTLanguagesList(const LTTLanguagesList& from);
  LTTLanguagesList(LTTLanguagesList&& from) noexcept
    : LTTLanguagesList() {
    *this = ::std::move(from);
  }

  inline LTTLanguagesList& operator=(const LTTLanguagesList& from) {
    CopyFrom(from);
    return *this;
  }
  inline LTTLanguagesList& operator=(LTTLanguagesList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LTTLanguagesList& default_instance() {
    return *internal_default_instance();
  }
  static inline const LTTLanguagesList* internal_default_instance() {
    return reinterpret_cast<const LTTLanguagesList*>(
               &_LTTLanguagesList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(LTTLanguagesList& a, LTTLanguagesList& b) {
    a.Swap(&b);
  }
  inline void Swap(LTTLanguagesList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LTTLanguagesList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LTTLanguagesList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LTTLanguagesList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LTTLanguagesList& from);
  void MergeFrom(const LTTLanguagesList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LTTLanguagesList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.LTTLanguagesList";
  }
  protected:
  explicit LTTLanguagesList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLttLanguageInfoFieldNumber = 1,
  };
  // repeated .com.electron.zoomvideo.sdk.proto.LTTLanguage lttLanguageInfo = 1;
  int lttlanguageinfo_size() const;
  private:
  int _internal_lttlanguageinfo_size() const;

  public:
  void clear_lttlanguageinfo() ;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* mutable_lttlanguageinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::LTTLanguage >*
      mutable_lttlanguageinfo();
  private:
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& _internal_lttlanguageinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* _internal_add_lttlanguageinfo();
  public:
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& lttlanguageinfo(int index) const;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* add_lttlanguageinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::LTTLanguage >&
      lttlanguageinfo() const;
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::LTTLanguage > lttlanguageinfo_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetTranslationLanguageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams) */ {
 public:
  inline SetTranslationLanguageParams() : SetTranslationLanguageParams(nullptr) {}
  ~SetTranslationLanguageParams() override;
  explicit PROTOBUF_CONSTEXPR SetTranslationLanguageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetTranslationLanguageParams(const SetTranslationLanguageParams& from);
  SetTranslationLanguageParams(SetTranslationLanguageParams&& from) noexcept
    : SetTranslationLanguageParams() {
    *this = ::std::move(from);
  }

  inline SetTranslationLanguageParams& operator=(const SetTranslationLanguageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetTranslationLanguageParams& operator=(SetTranslationLanguageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetTranslationLanguageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetTranslationLanguageParams* internal_default_instance() {
    return reinterpret_cast<const SetTranslationLanguageParams*>(
               &_SetTranslationLanguageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(SetTranslationLanguageParams& a, SetTranslationLanguageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetTranslationLanguageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetTranslationLanguageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetTranslationLanguageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetTranslationLanguageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetTranslationLanguageParams& from);
  void MergeFrom(const SetTranslationLanguageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetTranslationLanguageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams";
  }
  protected:
  explicit SetTranslationLanguageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLanguageIDFieldNumber = 1,
  };
  // optional int32 languageID = 1;
  bool has_languageid() const;
  void clear_languageid() ;
  ::int32_t languageid() const;
  void set_languageid(::int32_t value);

  private:
  ::int32_t _internal_languageid() const;
  void _internal_set_languageid(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t languageid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class CanChatMessageBeDeletedParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams) */ {
 public:
  inline CanChatMessageBeDeletedParams() : CanChatMessageBeDeletedParams(nullptr) {}
  ~CanChatMessageBeDeletedParams() override;
  explicit PROTOBUF_CONSTEXPR CanChatMessageBeDeletedParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CanChatMessageBeDeletedParams(const CanChatMessageBeDeletedParams& from);
  CanChatMessageBeDeletedParams(CanChatMessageBeDeletedParams&& from) noexcept
    : CanChatMessageBeDeletedParams() {
    *this = ::std::move(from);
  }

  inline CanChatMessageBeDeletedParams& operator=(const CanChatMessageBeDeletedParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline CanChatMessageBeDeletedParams& operator=(CanChatMessageBeDeletedParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const CanChatMessageBeDeletedParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const CanChatMessageBeDeletedParams* internal_default_instance() {
    return reinterpret_cast<const CanChatMessageBeDeletedParams*>(
               &_CanChatMessageBeDeletedParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(CanChatMessageBeDeletedParams& a, CanChatMessageBeDeletedParams& b) {
    a.Swap(&b);
  }
  inline void Swap(CanChatMessageBeDeletedParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CanChatMessageBeDeletedParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CanChatMessageBeDeletedParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CanChatMessageBeDeletedParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const CanChatMessageBeDeletedParams& from);
  void MergeFrom(const CanChatMessageBeDeletedParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CanChatMessageBeDeletedParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams";
  }
  protected:
  explicit CanChatMessageBeDeletedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDFieldNumber = 1,
  };
  // optional string messageID = 1;
  bool has_messageid() const;
  void clear_messageid() ;
  const std::string& messageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* ptr);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class DeleteChatMessageParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams) */ {
 public:
  inline DeleteChatMessageParams() : DeleteChatMessageParams(nullptr) {}
  ~DeleteChatMessageParams() override;
  explicit PROTOBUF_CONSTEXPR DeleteChatMessageParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteChatMessageParams(const DeleteChatMessageParams& from);
  DeleteChatMessageParams(DeleteChatMessageParams&& from) noexcept
    : DeleteChatMessageParams() {
    *this = ::std::move(from);
  }

  inline DeleteChatMessageParams& operator=(const DeleteChatMessageParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteChatMessageParams& operator=(DeleteChatMessageParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeleteChatMessageParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteChatMessageParams* internal_default_instance() {
    return reinterpret_cast<const DeleteChatMessageParams*>(
               &_DeleteChatMessageParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(DeleteChatMessageParams& a, DeleteChatMessageParams& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteChatMessageParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteChatMessageParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteChatMessageParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteChatMessageParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeleteChatMessageParams& from);
  void MergeFrom(const DeleteChatMessageParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeleteChatMessageParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams";
  }
  protected:
  explicit DeleteChatMessageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIDFieldNumber = 1,
  };
  // optional string messageID = 1;
  bool has_messageid() const;
  void clear_messageid() ;
  const std::string& messageid() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_messageid(Arg_&& arg, Args_... args);
  std::string* mutable_messageid();
  PROTOBUF_NODISCARD std::string* release_messageid();
  void set_allocated_messageid(std::string* ptr);

  private:
  const std::string& _internal_messageid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_messageid(
      const std::string& value);
  std::string* _internal_mutable_messageid();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr messageid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VBItemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VBItemInfo) */ {
 public:
  inline VBItemInfo() : VBItemInfo(nullptr) {}
  ~VBItemInfo() override;
  explicit PROTOBUF_CONSTEXPR VBItemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VBItemInfo(const VBItemInfo& from);
  VBItemInfo(VBItemInfo&& from) noexcept
    : VBItemInfo() {
    *this = ::std::move(from);
  }

  inline VBItemInfo& operator=(const VBItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VBItemInfo& operator=(VBItemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VBItemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const VBItemInfo* internal_default_instance() {
    return reinterpret_cast<const VBItemInfo*>(
               &_VBItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(VBItemInfo& a, VBItemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VBItemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VBItemInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VBItemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VBItemInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VBItemInfo& from);
  void MergeFrom(const VBItemInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VBItemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VBItemInfo";
  }
  protected:
  explicit VBItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageFilePathFieldNumber = 1,
    kImageNameFieldNumber = 2,
    kVbTypeFieldNumber = 3,
    kCanBeDeletedFieldNumber = 4,
  };
  // optional string imageFilePath = 1;
  bool has_imagefilepath() const;
  void clear_imagefilepath() ;
  const std::string& imagefilepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imagefilepath(Arg_&& arg, Args_... args);
  std::string* mutable_imagefilepath();
  PROTOBUF_NODISCARD std::string* release_imagefilepath();
  void set_allocated_imagefilepath(std::string* ptr);

  private:
  const std::string& _internal_imagefilepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagefilepath(
      const std::string& value);
  std::string* _internal_mutable_imagefilepath();

  public:
  // optional string imageName = 2;
  bool has_imagename() const;
  void clear_imagename() ;
  const std::string& imagename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imagename(Arg_&& arg, Args_... args);
  std::string* mutable_imagename();
  PROTOBUF_NODISCARD std::string* release_imagename();
  void set_allocated_imagename(std::string* ptr);

  private:
  const std::string& _internal_imagename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagename(
      const std::string& value);
  std::string* _internal_mutable_imagename();

  public:
  // optional int32 vbType = 3;
  bool has_vbtype() const;
  void clear_vbtype() ;
  ::int32_t vbtype() const;
  void set_vbtype(::int32_t value);

  private:
  ::int32_t _internal_vbtype() const;
  void _internal_set_vbtype(::int32_t value);

  public:
  // optional bool canBeDeleted = 4;
  bool has_canbedeleted() const;
  void clear_canbedeleted() ;
  bool canbedeleted() const;
  void set_canbedeleted(bool value);

  private:
  bool _internal_canbedeleted() const;
  void _internal_set_canbedeleted(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VBItemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagefilepath_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagename_;
    ::int32_t vbtype_;
    bool canbedeleted_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class VBItemHandleList final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.VBItemHandleList) */ {
 public:
  inline VBItemHandleList() : VBItemHandleList(nullptr) {}
  ~VBItemHandleList() override;
  explicit PROTOBUF_CONSTEXPR VBItemHandleList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VBItemHandleList(const VBItemHandleList& from);
  VBItemHandleList(VBItemHandleList&& from) noexcept
    : VBItemHandleList() {
    *this = ::std::move(from);
  }

  inline VBItemHandleList& operator=(const VBItemHandleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline VBItemHandleList& operator=(VBItemHandleList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const VBItemHandleList& default_instance() {
    return *internal_default_instance();
  }
  static inline const VBItemHandleList* internal_default_instance() {
    return reinterpret_cast<const VBItemHandleList*>(
               &_VBItemHandleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(VBItemHandleList& a, VBItemHandleList& b) {
    a.Swap(&b);
  }
  inline void Swap(VBItemHandleList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VBItemHandleList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  VBItemHandleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<VBItemHandleList>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const VBItemHandleList& from);
  void MergeFrom(const VBItemHandleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VBItemHandleList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.VBItemHandleList";
  }
  protected:
  explicit VBItemHandleList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbItemHandleFieldNumber = 1,
  };
  // repeated int64 vbItemHandle = 1;
  int vbitemhandle_size() const;
  private:
  int _internal_vbitemhandle_size() const;

  public:
  void clear_vbitemhandle() ;
  ::int64_t vbitemhandle(int index) const;
  void set_vbitemhandle(int index, ::int64_t value);
  void add_vbitemhandle(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& vbitemhandle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* mutable_vbitemhandle();

  private:
  ::int64_t _internal_vbitemhandle(int index) const;
  void _internal_add_vbitemhandle(::int64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& _internal_vbitemhandle() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* _internal_mutable_vbitemhandle();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t> vbitemhandle_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class AddVirtualBackgroundItemParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams) */ {
 public:
  inline AddVirtualBackgroundItemParams() : AddVirtualBackgroundItemParams(nullptr) {}
  ~AddVirtualBackgroundItemParams() override;
  explicit PROTOBUF_CONSTEXPR AddVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddVirtualBackgroundItemParams(const AddVirtualBackgroundItemParams& from);
  AddVirtualBackgroundItemParams(AddVirtualBackgroundItemParams&& from) noexcept
    : AddVirtualBackgroundItemParams() {
    *this = ::std::move(from);
  }

  inline AddVirtualBackgroundItemParams& operator=(const AddVirtualBackgroundItemParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddVirtualBackgroundItemParams& operator=(AddVirtualBackgroundItemParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AddVirtualBackgroundItemParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddVirtualBackgroundItemParams* internal_default_instance() {
    return reinterpret_cast<const AddVirtualBackgroundItemParams*>(
               &_AddVirtualBackgroundItemParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(AddVirtualBackgroundItemParams& a, AddVirtualBackgroundItemParams& b) {
    a.Swap(&b);
  }
  inline void Swap(AddVirtualBackgroundItemParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddVirtualBackgroundItemParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddVirtualBackgroundItemParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddVirtualBackgroundItemParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AddVirtualBackgroundItemParams& from);
  void MergeFrom(const AddVirtualBackgroundItemParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddVirtualBackgroundItemParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams";
  }
  protected:
  explicit AddVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImagePathFieldNumber = 1,
  };
  // optional string imagePath = 1;
  bool has_imagepath() const;
  void clear_imagepath() ;
  const std::string& imagepath() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_imagepath(Arg_&& arg, Args_... args);
  std::string* mutable_imagepath();
  PROTOBUF_NODISCARD std::string* release_imagepath();
  void set_allocated_imagepath(std::string* ptr);

  private:
  const std::string& _internal_imagepath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_imagepath(
      const std::string& value);
  std::string* _internal_mutable_imagepath();

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagepath_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class RemoveVirtualBackgroundItemParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams) */ {
 public:
  inline RemoveVirtualBackgroundItemParams() : RemoveVirtualBackgroundItemParams(nullptr) {}
  ~RemoveVirtualBackgroundItemParams() override;
  explicit PROTOBUF_CONSTEXPR RemoveVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RemoveVirtualBackgroundItemParams(const RemoveVirtualBackgroundItemParams& from);
  RemoveVirtualBackgroundItemParams(RemoveVirtualBackgroundItemParams&& from) noexcept
    : RemoveVirtualBackgroundItemParams() {
    *this = ::std::move(from);
  }

  inline RemoveVirtualBackgroundItemParams& operator=(const RemoveVirtualBackgroundItemParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline RemoveVirtualBackgroundItemParams& operator=(RemoveVirtualBackgroundItemParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const RemoveVirtualBackgroundItemParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const RemoveVirtualBackgroundItemParams* internal_default_instance() {
    return reinterpret_cast<const RemoveVirtualBackgroundItemParams*>(
               &_RemoveVirtualBackgroundItemParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(RemoveVirtualBackgroundItemParams& a, RemoveVirtualBackgroundItemParams& b) {
    a.Swap(&b);
  }
  inline void Swap(RemoveVirtualBackgroundItemParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RemoveVirtualBackgroundItemParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RemoveVirtualBackgroundItemParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RemoveVirtualBackgroundItemParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const RemoveVirtualBackgroundItemParams& from);
  void MergeFrom(const RemoveVirtualBackgroundItemParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RemoveVirtualBackgroundItemParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams";
  }
  protected:
  explicit RemoveVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbItemHandleFieldNumber = 1,
  };
  // optional int64 vbItemHandle = 1;
  bool has_vbitemhandle() const;
  void clear_vbitemhandle() ;
  ::int64_t vbitemhandle() const;
  void set_vbitemhandle(::int64_t value);

  private:
  ::int64_t _internal_vbitemhandle() const;
  void _internal_set_vbitemhandle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t vbitemhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetVirtualBackgroundItemParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams) */ {
 public:
  inline SetVirtualBackgroundItemParams() : SetVirtualBackgroundItemParams(nullptr) {}
  ~SetVirtualBackgroundItemParams() override;
  explicit PROTOBUF_CONSTEXPR SetVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetVirtualBackgroundItemParams(const SetVirtualBackgroundItemParams& from);
  SetVirtualBackgroundItemParams(SetVirtualBackgroundItemParams&& from) noexcept
    : SetVirtualBackgroundItemParams() {
    *this = ::std::move(from);
  }

  inline SetVirtualBackgroundItemParams& operator=(const SetVirtualBackgroundItemParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetVirtualBackgroundItemParams& operator=(SetVirtualBackgroundItemParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetVirtualBackgroundItemParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetVirtualBackgroundItemParams* internal_default_instance() {
    return reinterpret_cast<const SetVirtualBackgroundItemParams*>(
               &_SetVirtualBackgroundItemParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(SetVirtualBackgroundItemParams& a, SetVirtualBackgroundItemParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetVirtualBackgroundItemParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetVirtualBackgroundItemParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetVirtualBackgroundItemParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetVirtualBackgroundItemParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetVirtualBackgroundItemParams& from);
  void MergeFrom(const SetVirtualBackgroundItemParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetVirtualBackgroundItemParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams";
  }
  protected:
  explicit SetVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbItemHandleFieldNumber = 1,
  };
  // optional int64 vbItemHandle = 1;
  bool has_vbitemhandle() const;
  void clear_vbitemhandle() ;
  ::int64_t vbitemhandle() const;
  void set_vbitemhandle(::int64_t value);

  private:
  ::int64_t _internal_vbitemhandle() const;
  void _internal_set_vbitemhandle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t vbitemhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class GetVirtualBackgroundItemInfoParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams) */ {
 public:
  inline GetVirtualBackgroundItemInfoParams() : GetVirtualBackgroundItemInfoParams(nullptr) {}
  ~GetVirtualBackgroundItemInfoParams() override;
  explicit PROTOBUF_CONSTEXPR GetVirtualBackgroundItemInfoParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetVirtualBackgroundItemInfoParams(const GetVirtualBackgroundItemInfoParams& from);
  GetVirtualBackgroundItemInfoParams(GetVirtualBackgroundItemInfoParams&& from) noexcept
    : GetVirtualBackgroundItemInfoParams() {
    *this = ::std::move(from);
  }

  inline GetVirtualBackgroundItemInfoParams& operator=(const GetVirtualBackgroundItemInfoParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetVirtualBackgroundItemInfoParams& operator=(GetVirtualBackgroundItemInfoParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GetVirtualBackgroundItemInfoParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetVirtualBackgroundItemInfoParams* internal_default_instance() {
    return reinterpret_cast<const GetVirtualBackgroundItemInfoParams*>(
               &_GetVirtualBackgroundItemInfoParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(GetVirtualBackgroundItemInfoParams& a, GetVirtualBackgroundItemInfoParams& b) {
    a.Swap(&b);
  }
  inline void Swap(GetVirtualBackgroundItemInfoParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetVirtualBackgroundItemInfoParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetVirtualBackgroundItemInfoParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetVirtualBackgroundItemInfoParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GetVirtualBackgroundItemInfoParams& from);
  void MergeFrom(const GetVirtualBackgroundItemInfoParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GetVirtualBackgroundItemInfoParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams";
  }
  protected:
  explicit GetVirtualBackgroundItemInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVbItemHandleFieldNumber = 1,
  };
  // optional int64 vbItemHandle = 1;
  bool has_vbitemhandle() const;
  void clear_vbitemhandle() ;
  ::int64_t vbitemhandle() const;
  void set_vbitemhandle(::int64_t value);

  private:
  ::int64_t _internal_vbitemhandle() const;
  void _internal_set_vbitemhandle(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int64_t vbitemhandle_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class SetScreenCaptureModeParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams) */ {
 public:
  inline SetScreenCaptureModeParams() : SetScreenCaptureModeParams(nullptr) {}
  ~SetScreenCaptureModeParams() override;
  explicit PROTOBUF_CONSTEXPR SetScreenCaptureModeParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetScreenCaptureModeParams(const SetScreenCaptureModeParams& from);
  SetScreenCaptureModeParams(SetScreenCaptureModeParams&& from) noexcept
    : SetScreenCaptureModeParams() {
    *this = ::std::move(from);
  }

  inline SetScreenCaptureModeParams& operator=(const SetScreenCaptureModeParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetScreenCaptureModeParams& operator=(SetScreenCaptureModeParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SetScreenCaptureModeParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetScreenCaptureModeParams* internal_default_instance() {
    return reinterpret_cast<const SetScreenCaptureModeParams*>(
               &_SetScreenCaptureModeParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(SetScreenCaptureModeParams& a, SetScreenCaptureModeParams& b) {
    a.Swap(&b);
  }
  inline void Swap(SetScreenCaptureModeParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetScreenCaptureModeParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetScreenCaptureModeParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetScreenCaptureModeParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SetScreenCaptureModeParams& from);
  void MergeFrom(const SetScreenCaptureModeParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SetScreenCaptureModeParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams";
  }
  protected:
  explicit SetScreenCaptureModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureModeFieldNumber = 1,
  };
  // optional int32 captureMode = 1;
  bool has_capturemode() const;
  void clear_capturemode() ;
  ::int32_t capturemode() const;
  void set_capturemode(::int32_t value);

  private:
  ::int32_t _internal_capturemode() const;
  void _internal_set_capturemode(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::int32_t capturemode_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableGreenBorderParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams) */ {
 public:
  inline EnableGreenBorderParams() : EnableGreenBorderParams(nullptr) {}
  ~EnableGreenBorderParams() override;
  explicit PROTOBUF_CONSTEXPR EnableGreenBorderParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableGreenBorderParams(const EnableGreenBorderParams& from);
  EnableGreenBorderParams(EnableGreenBorderParams&& from) noexcept
    : EnableGreenBorderParams() {
    *this = ::std::move(from);
  }

  inline EnableGreenBorderParams& operator=(const EnableGreenBorderParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableGreenBorderParams& operator=(EnableGreenBorderParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableGreenBorderParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableGreenBorderParams* internal_default_instance() {
    return reinterpret_cast<const EnableGreenBorderParams*>(
               &_EnableGreenBorderParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(EnableGreenBorderParams& a, EnableGreenBorderParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableGreenBorderParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableGreenBorderParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableGreenBorderParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableGreenBorderParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableGreenBorderParams& from);
  void MergeFrom(const EnableGreenBorderParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableGreenBorderParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams";
  }
  protected:
  explicit EnableGreenBorderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};// -------------------------------------------------------------------

class EnableAdminRemoteControlParams final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams) */ {
 public:
  inline EnableAdminRemoteControlParams() : EnableAdminRemoteControlParams(nullptr) {}
  ~EnableAdminRemoteControlParams() override;
  explicit PROTOBUF_CONSTEXPR EnableAdminRemoteControlParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnableAdminRemoteControlParams(const EnableAdminRemoteControlParams& from);
  EnableAdminRemoteControlParams(EnableAdminRemoteControlParams&& from) noexcept
    : EnableAdminRemoteControlParams() {
    *this = ::std::move(from);
  }

  inline EnableAdminRemoteControlParams& operator=(const EnableAdminRemoteControlParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnableAdminRemoteControlParams& operator=(EnableAdminRemoteControlParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EnableAdminRemoteControlParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnableAdminRemoteControlParams* internal_default_instance() {
    return reinterpret_cast<const EnableAdminRemoteControlParams*>(
               &_EnableAdminRemoteControlParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(EnableAdminRemoteControlParams& a, EnableAdminRemoteControlParams& b) {
    a.Swap(&b);
  }
  inline void Swap(EnableAdminRemoteControlParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnableAdminRemoteControlParams* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnableAdminRemoteControlParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnableAdminRemoteControlParams>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EnableAdminRemoteControlParams& from);
  void MergeFrom(const EnableAdminRemoteControlParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EnableAdminRemoteControlParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams";
  }
  protected:
  explicit EnableAdminRemoteControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBEnableFieldNumber = 1,
  };
  // optional bool bEnable = 1;
  bool has_benable() const;
  void clear_benable() ;
  bool benable() const;
  void set_benable(bool value);

  private:
  bool _internal_benable() const;
  void _internal_set_benable(bool value);

  public:
  // @@protoc_insertion_point(class_scope:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    bool benable_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_electron_5fzoomvideosdk_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// VideoSDKUser

// optional int64 p_user = 1;
inline bool VideoSDKUser::has_p_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VideoSDKUser::clear_p_user() {
  _impl_.p_user_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t VideoSDKUser::p_user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.p_user)
  return _internal_p_user();
}
inline void VideoSDKUser::set_p_user(::int64_t value) {
  _internal_set_p_user(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.p_user)
}
inline ::int64_t VideoSDKUser::_internal_p_user() const {
  return _impl_.p_user_;
}
inline void VideoSDKUser::_internal_set_p_user(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.p_user_ = value;
}

// optional string custom_identity = 2;
inline bool VideoSDKUser::has_custom_identity() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VideoSDKUser::clear_custom_identity() {
  _impl_.custom_identity_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VideoSDKUser::custom_identity() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.custom_identity)
  return _internal_custom_identity();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKUser::set_custom_identity(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.custom_identity_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.custom_identity)
}
inline std::string* VideoSDKUser::mutable_custom_identity() {
  std::string* _s = _internal_mutable_custom_identity();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKUser.custom_identity)
  return _s;
}
inline const std::string& VideoSDKUser::_internal_custom_identity() const {
  return _impl_.custom_identity_.Get();
}
inline void VideoSDKUser::_internal_set_custom_identity(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.custom_identity_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKUser::_internal_mutable_custom_identity() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.custom_identity_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKUser::release_custom_identity() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKUser.custom_identity)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.custom_identity_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.custom_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKUser::set_allocated_custom_identity(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.custom_identity_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.custom_identity_.IsDefault()) {
          _impl_.custom_identity_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKUser.custom_identity)
}

// optional string username = 3;
inline bool VideoSDKUser::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoSDKUser::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VideoSDKUser::username() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.username)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKUser::set_username(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.username)
}
inline std::string* VideoSDKUser::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKUser.username)
  return _s;
}
inline const std::string& VideoSDKUser::_internal_username() const {
  return _impl_.username_.Get();
}
inline void VideoSDKUser::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKUser::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKUser::release_username() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKUser.username)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKUser::set_allocated_username(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKUser.username)
}

// optional bool isHasVideoDevice = 4;
inline bool VideoSDKUser::has_ishasvideodevice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VideoSDKUser::clear_ishasvideodevice() {
  _impl_.ishasvideodevice_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool VideoSDKUser::ishasvideodevice() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isHasVideoDevice)
  return _internal_ishasvideodevice();
}
inline void VideoSDKUser::set_ishasvideodevice(bool value) {
  _internal_set_ishasvideodevice(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isHasVideoDevice)
}
inline bool VideoSDKUser::_internal_ishasvideodevice() const {
  return _impl_.ishasvideodevice_;
}
inline void VideoSDKUser::_internal_set_ishasvideodevice(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ishasvideodevice_ = value;
}

// optional bool isVideoOn = 5;
inline bool VideoSDKUser::has_isvideoon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VideoSDKUser::clear_isvideoon() {
  _impl_.isvideoon_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool VideoSDKUser::isvideoon() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isVideoOn)
  return _internal_isvideoon();
}
inline void VideoSDKUser::set_isvideoon(bool value) {
  _internal_set_isvideoon(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isVideoOn)
}
inline bool VideoSDKUser::_internal_isvideoon() const {
  return _impl_.isvideoon_;
}
inline void VideoSDKUser::_internal_set_isvideoon(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.isvideoon_ = value;
}

// optional int32 audioType = 6;
inline bool VideoSDKUser::has_audiotype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VideoSDKUser::clear_audiotype() {
  _impl_.audiotype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t VideoSDKUser::audiotype() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.audioType)
  return _internal_audiotype();
}
inline void VideoSDKUser::set_audiotype(::int32_t value) {
  _internal_set_audiotype(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.audioType)
}
inline ::int32_t VideoSDKUser::_internal_audiotype() const {
  return _impl_.audiotype_;
}
inline void VideoSDKUser::_internal_set_audiotype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.audiotype_ = value;
}

// optional bool isAudioMuted = 7;
inline bool VideoSDKUser::has_isaudiomuted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void VideoSDKUser::clear_isaudiomuted() {
  _impl_.isaudiomuted_ = false;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline bool VideoSDKUser::isaudiomuted() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isAudioMuted)
  return _internal_isaudiomuted();
}
inline void VideoSDKUser::set_isaudiomuted(bool value) {
  _internal_set_isaudiomuted(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isAudioMuted)
}
inline bool VideoSDKUser::_internal_isaudiomuted() const {
  return _impl_.isaudiomuted_;
}
inline void VideoSDKUser::_internal_set_isaudiomuted(bool value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.isaudiomuted_ = value;
}

// optional bool isAudioTalking = 8;
inline bool VideoSDKUser::has_isaudiotalking() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void VideoSDKUser::clear_isaudiotalking() {
  _impl_.isaudiotalking_ = false;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline bool VideoSDKUser::isaudiotalking() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isAudioTalking)
  return _internal_isaudiotalking();
}
inline void VideoSDKUser::set_isaudiotalking(bool value) {
  _internal_set_isaudiotalking(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isAudioTalking)
}
inline bool VideoSDKUser::_internal_isaudiotalking() const {
  return _impl_.isaudiotalking_;
}
inline void VideoSDKUser::_internal_set_isaudiotalking(bool value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.isaudiotalking_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.ShareActionList zn_shareActionList = 9;
inline bool VideoSDKUser::has_zn_shareactionlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_shareactionlist_ != nullptr);
  return value;
}
inline void VideoSDKUser::clear_zn_shareactionlist() {
  if (_impl_.zn_shareactionlist_ != nullptr) _impl_.zn_shareactionlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareActionList& VideoSDKUser::_internal_zn_shareactionlist() const {
  const ::com::electron::zoomvideo::sdk::proto::ShareActionList* p = _impl_.zn_shareactionlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::ShareActionList&>(
      ::com::electron::zoomvideo::sdk::proto::_ShareActionList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareActionList& VideoSDKUser::zn_shareactionlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.zn_shareActionList)
  return _internal_zn_shareactionlist();
}
inline void VideoSDKUser::unsafe_arena_set_allocated_zn_shareactionlist(
    ::com::electron::zoomvideo::sdk::proto::ShareActionList* zn_shareactionlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_shareactionlist_);
  }
  _impl_.zn_shareactionlist_ = zn_shareactionlist;
  if (zn_shareactionlist) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKUser.zn_shareActionList)
}
inline ::com::electron::zoomvideo::sdk::proto::ShareActionList* VideoSDKUser::release_zn_shareactionlist() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::com::electron::zoomvideo::sdk::proto::ShareActionList* temp = _impl_.zn_shareactionlist_;
  _impl_.zn_shareactionlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareActionList* VideoSDKUser::unsafe_arena_release_zn_shareactionlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKUser.zn_shareActionList)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::com::electron::zoomvideo::sdk::proto::ShareActionList* temp = _impl_.zn_shareactionlist_;
  _impl_.zn_shareactionlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareActionList* VideoSDKUser::_internal_mutable_zn_shareactionlist() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.zn_shareactionlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ShareActionList>(GetArenaForAllocation());
    _impl_.zn_shareactionlist_ = p;
  }
  return _impl_.zn_shareactionlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareActionList* VideoSDKUser::mutable_zn_shareactionlist() {
  ::com::electron::zoomvideo::sdk::proto::ShareActionList* _msg = _internal_mutable_zn_shareactionlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKUser.zn_shareActionList)
  return _msg;
}
inline void VideoSDKUser::set_allocated_zn_shareactionlist(::com::electron::zoomvideo::sdk::proto::ShareActionList* zn_shareactionlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_shareactionlist_;
  }
  if (zn_shareactionlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_shareactionlist);
    if (message_arena != submessage_arena) {
      zn_shareactionlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_shareactionlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.zn_shareactionlist_ = zn_shareactionlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKUser.zn_shareActionList)
}

// optional bool isHost = 10;
inline bool VideoSDKUser::has_ishost() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_ishost() {
  _impl_.ishost_ = false;
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline bool VideoSDKUser::ishost() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isHost)
  return _internal_ishost();
}
inline void VideoSDKUser::set_ishost(bool value) {
  _internal_set_ishost(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isHost)
}
inline bool VideoSDKUser::_internal_ishost() const {
  return _impl_.ishost_;
}
inline void VideoSDKUser::_internal_set_ishost(bool value) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.ishost_ = value;
}

// optional bool isManager = 11;
inline bool VideoSDKUser::has_ismanager() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_ismanager() {
  _impl_.ismanager_ = false;
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline bool VideoSDKUser::ismanager() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isManager)
  return _internal_ismanager();
}
inline void VideoSDKUser::set_ismanager(bool value) {
  _internal_set_ismanager(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isManager)
}
inline bool VideoSDKUser::_internal_ismanager() const {
  return _impl_.ismanager_;
}
inline void VideoSDKUser::_internal_set_ismanager(bool value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.ismanager_ = value;
}

// optional int32 VideoStatisticInfo_width = 12;
inline bool VideoSDKUser::has_videostatisticinfo_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void VideoSDKUser::clear_videostatisticinfo_width() {
  _impl_.videostatisticinfo_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t VideoSDKUser::videostatisticinfo_width() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_width)
  return _internal_videostatisticinfo_width();
}
inline void VideoSDKUser::set_videostatisticinfo_width(::int32_t value) {
  _internal_set_videostatisticinfo_width(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_width)
}
inline ::int32_t VideoSDKUser::_internal_videostatisticinfo_width() const {
  return _impl_.videostatisticinfo_width_;
}
inline void VideoSDKUser::_internal_set_videostatisticinfo_width(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.videostatisticinfo_width_ = value;
}

// optional int32 VideoStatisticInfo_height = 13;
inline bool VideoSDKUser::has_videostatisticinfo_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_videostatisticinfo_height() {
  _impl_.videostatisticinfo_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::int32_t VideoSDKUser::videostatisticinfo_height() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_height)
  return _internal_videostatisticinfo_height();
}
inline void VideoSDKUser::set_videostatisticinfo_height(::int32_t value) {
  _internal_set_videostatisticinfo_height(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_height)
}
inline ::int32_t VideoSDKUser::_internal_videostatisticinfo_height() const {
  return _impl_.videostatisticinfo_height_;
}
inline void VideoSDKUser::_internal_set_videostatisticinfo_height(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.videostatisticinfo_height_ = value;
}

// optional int32 VideoStatisticInfo_fps = 14;
inline bool VideoSDKUser::has_videostatisticinfo_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_videostatisticinfo_fps() {
  _impl_.videostatisticinfo_fps_ = 0;
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline ::int32_t VideoSDKUser::videostatisticinfo_fps() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_fps)
  return _internal_videostatisticinfo_fps();
}
inline void VideoSDKUser::set_videostatisticinfo_fps(::int32_t value) {
  _internal_set_videostatisticinfo_fps(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_fps)
}
inline ::int32_t VideoSDKUser::_internal_videostatisticinfo_fps() const {
  return _impl_.videostatisticinfo_fps_;
}
inline void VideoSDKUser::_internal_set_videostatisticinfo_fps(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.videostatisticinfo_fps_ = value;
}

// optional int32 VideoStatisticInfo_bpf = 15;
inline bool VideoSDKUser::has_videostatisticinfo_bpf() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_videostatisticinfo_bpf() {
  _impl_.videostatisticinfo_bpf_ = 0;
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline ::int32_t VideoSDKUser::videostatisticinfo_bpf() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_bpf)
  return _internal_videostatisticinfo_bpf();
}
inline void VideoSDKUser::set_videostatisticinfo_bpf(::int32_t value) {
  _internal_set_videostatisticinfo_bpf(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.VideoStatisticInfo_bpf)
}
inline ::int32_t VideoSDKUser::_internal_videostatisticinfo_bpf() const {
  return _impl_.videostatisticinfo_bpf_;
}
inline void VideoSDKUser::_internal_set_videostatisticinfo_bpf(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.videostatisticinfo_bpf_ = value;
}

// optional int32 ShareStatisticInfo_width = 16;
inline bool VideoSDKUser::has_sharestatisticinfo_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_sharestatisticinfo_width() {
  _impl_.sharestatisticinfo_width_ = 0;
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline ::int32_t VideoSDKUser::sharestatisticinfo_width() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_width)
  return _internal_sharestatisticinfo_width();
}
inline void VideoSDKUser::set_sharestatisticinfo_width(::int32_t value) {
  _internal_set_sharestatisticinfo_width(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_width)
}
inline ::int32_t VideoSDKUser::_internal_sharestatisticinfo_width() const {
  return _impl_.sharestatisticinfo_width_;
}
inline void VideoSDKUser::_internal_set_sharestatisticinfo_width(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.sharestatisticinfo_width_ = value;
}

// optional int32 ShareStatisticInfo_height = 17;
inline bool VideoSDKUser::has_sharestatisticinfo_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_sharestatisticinfo_height() {
  _impl_.sharestatisticinfo_height_ = 0;
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int32_t VideoSDKUser::sharestatisticinfo_height() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_height)
  return _internal_sharestatisticinfo_height();
}
inline void VideoSDKUser::set_sharestatisticinfo_height(::int32_t value) {
  _internal_set_sharestatisticinfo_height(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_height)
}
inline ::int32_t VideoSDKUser::_internal_sharestatisticinfo_height() const {
  return _impl_.sharestatisticinfo_height_;
}
inline void VideoSDKUser::_internal_set_sharestatisticinfo_height(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.sharestatisticinfo_height_ = value;
}

// optional int32 ShareStatisticInfo_fps = 18;
inline bool VideoSDKUser::has_sharestatisticinfo_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_sharestatisticinfo_fps() {
  _impl_.sharestatisticinfo_fps_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t VideoSDKUser::sharestatisticinfo_fps() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_fps)
  return _internal_sharestatisticinfo_fps();
}
inline void VideoSDKUser::set_sharestatisticinfo_fps(::int32_t value) {
  _internal_set_sharestatisticinfo_fps(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_fps)
}
inline ::int32_t VideoSDKUser::_internal_sharestatisticinfo_fps() const {
  return _impl_.sharestatisticinfo_fps_;
}
inline void VideoSDKUser::_internal_set_sharestatisticinfo_fps(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.sharestatisticinfo_fps_ = value;
}

// optional int32 ShareStatisticInfo_bpf = 19;
inline bool VideoSDKUser::has_sharestatisticinfo_bpf() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_sharestatisticinfo_bpf() {
  _impl_.sharestatisticinfo_bpf_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t VideoSDKUser::sharestatisticinfo_bpf() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_bpf)
  return _internal_sharestatisticinfo_bpf();
}
inline void VideoSDKUser::set_sharestatisticinfo_bpf(::int32_t value) {
  _internal_set_sharestatisticinfo_bpf(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.ShareStatisticInfo_bpf)
}
inline ::int32_t VideoSDKUser::_internal_sharestatisticinfo_bpf() const {
  return _impl_.sharestatisticinfo_bpf_;
}
inline void VideoSDKUser::_internal_set_sharestatisticinfo_bpf(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.sharestatisticinfo_bpf_ = value;
}

// optional string userid = 20;
inline bool VideoSDKUser::has_userid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VideoSDKUser::clear_userid() {
  _impl_.userid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VideoSDKUser::userid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userid)
  return _internal_userid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKUser::set_userid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.userid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userid)
}
inline std::string* VideoSDKUser::mutable_userid() {
  std::string* _s = _internal_mutable_userid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userid)
  return _s;
}
inline const std::string& VideoSDKUser::_internal_userid() const {
  return _impl_.userid_.Get();
}
inline void VideoSDKUser::_internal_set_userid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.userid_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKUser::_internal_mutable_userid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.userid_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKUser::release_userid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userid)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.userid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKUser::set_allocated_userid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.userid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userid_.IsDefault()) {
          _impl_.userid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userid)
}

// optional string userReference = 21;
inline bool VideoSDKUser::has_userreference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VideoSDKUser::clear_userreference() {
  _impl_.userreference_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VideoSDKUser::userreference() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userReference)
  return _internal_userreference();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKUser::set_userreference(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.userreference_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userReference)
}
inline std::string* VideoSDKUser::mutable_userreference() {
  std::string* _s = _internal_mutable_userreference();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userReference)
  return _s;
}
inline const std::string& VideoSDKUser::_internal_userreference() const {
  return _impl_.userreference_.Get();
}
inline void VideoSDKUser::_internal_set_userreference(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.userreference_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKUser::_internal_mutable_userreference() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.userreference_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKUser::release_userreference() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userReference)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.userreference_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userreference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKUser::set_allocated_userreference(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.userreference_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.userreference_.IsDefault()) {
          _impl_.userreference_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKUser.userReference)
}

// optional bool isVideoSpotLighted = 22;
inline bool VideoSDKUser::has_isvideospotlighted() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_isvideospotlighted() {
  _impl_.isvideospotlighted_ = false;
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline bool VideoSDKUser::isvideospotlighted() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isVideoSpotLighted)
  return _internal_isvideospotlighted();
}
inline void VideoSDKUser::set_isvideospotlighted(bool value) {
  _internal_set_isvideospotlighted(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isVideoSpotLighted)
}
inline bool VideoSDKUser::_internal_isvideospotlighted() const {
  return _impl_.isvideospotlighted_;
}
inline void VideoSDKUser::_internal_set_isvideospotlighted(bool value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.isvideospotlighted_ = value;
}

// optional bool isIncomingLiveStreamUser = 23;
inline bool VideoSDKUser::has_isincominglivestreamuser() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void VideoSDKUser::clear_isincominglivestreamuser() {
  _impl_.isincominglivestreamuser_ = false;
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline bool VideoSDKUser::isincominglivestreamuser() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isIncomingLiveStreamUser)
  return _internal_isincominglivestreamuser();
}
inline void VideoSDKUser::set_isincominglivestreamuser(bool value) {
  _internal_set_isincominglivestreamuser(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKUser.isIncomingLiveStreamUser)
}
inline bool VideoSDKUser::_internal_isincominglivestreamuser() const {
  return _impl_.isincominglivestreamuser_;
}
inline void VideoSDKUser::_internal_set_isincominglivestreamuser(bool value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.isincominglivestreamuser_ = value;
}

// -------------------------------------------------------------------

// UserList

// repeated .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline int UserList::_internal_user_size() const {
  return _impl_.user_.size();
}
inline int UserList::user_size() const {
  return _internal_user_size();
}
inline void UserList::clear_user() {
  _impl_.user_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UserList::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.UserList.user)
  return _impl_.user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser >*
UserList::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.UserList.user)
  return &_impl_.user_;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UserList::_internal_user(int index) const {
  return _impl_.user_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UserList::user(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UserList.user)
  return _internal_user(index);
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UserList::_internal_add_user() {
  return _impl_.user_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UserList::add_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _add = _internal_add_user();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.UserList.user)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser >&
UserList::user() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.UserList.user)
  return _impl_.user_;
}

// -------------------------------------------------------------------

// ShareAction

// optional int32 shareSourceId = 1;
inline bool ShareAction::has_sharesourceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ShareAction::clear_sharesourceid() {
  _impl_.sharesourceid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t ShareAction::sharesourceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ShareAction.shareSourceId)
  return _internal_sharesourceid();
}
inline void ShareAction::set_sharesourceid(::int32_t value) {
  _internal_set_sharesourceid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ShareAction.shareSourceId)
}
inline ::int32_t ShareAction::_internal_sharesourceid() const {
  return _impl_.sharesourceid_;
}
inline void ShareAction::_internal_set_sharesourceid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sharesourceid_ = value;
}

// optional int32 shareStatus = 2;
inline bool ShareAction::has_sharestatus() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ShareAction::clear_sharestatus() {
  _impl_.sharestatus_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ShareAction::sharestatus() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ShareAction.shareStatus)
  return _internal_sharestatus();
}
inline void ShareAction::set_sharestatus(::int32_t value) {
  _internal_set_sharestatus(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ShareAction.shareStatus)
}
inline ::int32_t ShareAction::_internal_sharestatus() const {
  return _impl_.sharestatus_;
}
inline void ShareAction::_internal_set_sharestatus(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sharestatus_ = value;
}

// optional int32 subscribeFailReason = 3;
inline bool ShareAction::has_subscribefailreason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ShareAction::clear_subscribefailreason() {
  _impl_.subscribefailreason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ShareAction::subscribefailreason() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ShareAction.subscribeFailReason)
  return _internal_subscribefailreason();
}
inline void ShareAction::set_subscribefailreason(::int32_t value) {
  _internal_set_subscribefailreason(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ShareAction.subscribeFailReason)
}
inline ::int32_t ShareAction::_internal_subscribefailreason() const {
  return _impl_.subscribefailreason_;
}
inline void ShareAction::_internal_set_subscribefailreason(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.subscribefailreason_ = value;
}

// optional bool isAnnotationPrivilegeEnabled = 4;
inline bool ShareAction::has_isannotationprivilegeenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ShareAction::clear_isannotationprivilegeenabled() {
  _impl_.isannotationprivilegeenabled_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool ShareAction::isannotationprivilegeenabled() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ShareAction.isAnnotationPrivilegeEnabled)
  return _internal_isannotationprivilegeenabled();
}
inline void ShareAction::set_isannotationprivilegeenabled(bool value) {
  _internal_set_isannotationprivilegeenabled(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ShareAction.isAnnotationPrivilegeEnabled)
}
inline bool ShareAction::_internal_isannotationprivilegeenabled() const {
  return _impl_.isannotationprivilegeenabled_;
}
inline void ShareAction::_internal_set_isannotationprivilegeenabled(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.isannotationprivilegeenabled_ = value;
}

// optional int32 shareType = 5;
inline bool ShareAction::has_sharetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ShareAction::clear_sharetype() {
  _impl_.sharetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t ShareAction::sharetype() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ShareAction.shareType)
  return _internal_sharetype();
}
inline void ShareAction::set_sharetype(::int32_t value) {
  _internal_set_sharetype(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ShareAction.shareType)
}
inline ::int32_t ShareAction::_internal_sharetype() const {
  return _impl_.sharetype_;
}
inline void ShareAction::_internal_set_sharetype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.sharetype_ = value;
}

// -------------------------------------------------------------------

// ShareActionList

// repeated .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 1;
inline int ShareActionList::_internal_shareaction_size() const {
  return _impl_.shareaction_.size();
}
inline int ShareActionList::shareaction_size() const {
  return _internal_shareaction_size();
}
inline void ShareActionList::clear_shareaction() {
  _impl_.shareaction_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* ShareActionList::mutable_shareaction(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.ShareActionList.shareAction)
  return _impl_.shareaction_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::ShareAction >*
ShareActionList::mutable_shareaction() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.ShareActionList.shareAction)
  return &_impl_.shareaction_;
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& ShareActionList::_internal_shareaction(int index) const {
  return _impl_.shareaction_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& ShareActionList::shareaction(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ShareActionList.shareAction)
  return _internal_shareaction(index);
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* ShareActionList::_internal_add_shareaction() {
  return _impl_.shareaction_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* ShareActionList::add_shareaction() {
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _add = _internal_add_shareaction();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.ShareActionList.shareAction)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::ShareAction >&
ShareActionList::shareaction() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.ShareActionList.shareAction)
  return _impl_.shareaction_;
}

// -------------------------------------------------------------------

// VideoSDKSessionAudioStatisticInfo

// optional int64 frequency = 1;
inline bool VideoSDKSessionAudioStatisticInfo::has_frequency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VideoSDKSessionAudioStatisticInfo::clear_frequency() {
  _impl_.frequency_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t VideoSDKSessionAudioStatisticInfo::frequency() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.frequency)
  return _internal_frequency();
}
inline void VideoSDKSessionAudioStatisticInfo::set_frequency(::int64_t value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.frequency)
}
inline ::int64_t VideoSDKSessionAudioStatisticInfo::_internal_frequency() const {
  return _impl_.frequency_;
}
inline void VideoSDKSessionAudioStatisticInfo::_internal_set_frequency(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frequency_ = value;
}

// optional int64 latency = 2;
inline bool VideoSDKSessionAudioStatisticInfo::has_latency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoSDKSessionAudioStatisticInfo::clear_latency() {
  _impl_.latency_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t VideoSDKSessionAudioStatisticInfo::latency() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.latency)
  return _internal_latency();
}
inline void VideoSDKSessionAudioStatisticInfo::set_latency(::int64_t value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.latency)
}
inline ::int64_t VideoSDKSessionAudioStatisticInfo::_internal_latency() const {
  return _impl_.latency_;
}
inline void VideoSDKSessionAudioStatisticInfo::_internal_set_latency(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.latency_ = value;
}

// optional int64 Jitter = 3;
inline bool VideoSDKSessionAudioStatisticInfo::has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VideoSDKSessionAudioStatisticInfo::clear_jitter() {
  _impl_.jitter_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t VideoSDKSessionAudioStatisticInfo::jitter() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.Jitter)
  return _internal_jitter();
}
inline void VideoSDKSessionAudioStatisticInfo::set_jitter(::int64_t value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.Jitter)
}
inline ::int64_t VideoSDKSessionAudioStatisticInfo::_internal_jitter() const {
  return _impl_.jitter_;
}
inline void VideoSDKSessionAudioStatisticInfo::_internal_set_jitter(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.jitter_ = value;
}

// optional float packetLossAvg = 4;
inline bool VideoSDKSessionAudioStatisticInfo::has_packetlossavg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VideoSDKSessionAudioStatisticInfo::clear_packetlossavg() {
  _impl_.packetlossavg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float VideoSDKSessionAudioStatisticInfo::packetlossavg() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.packetLossAvg)
  return _internal_packetlossavg();
}
inline void VideoSDKSessionAudioStatisticInfo::set_packetlossavg(float value) {
  _internal_set_packetlossavg(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.packetLossAvg)
}
inline float VideoSDKSessionAudioStatisticInfo::_internal_packetlossavg() const {
  return _impl_.packetlossavg_;
}
inline void VideoSDKSessionAudioStatisticInfo::_internal_set_packetlossavg(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.packetlossavg_ = value;
}

// optional float packetLossMax = 5;
inline bool VideoSDKSessionAudioStatisticInfo::has_packetlossmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VideoSDKSessionAudioStatisticInfo::clear_packetlossmax() {
  _impl_.packetlossmax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float VideoSDKSessionAudioStatisticInfo::packetlossmax() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.packetLossMax)
  return _internal_packetlossmax();
}
inline void VideoSDKSessionAudioStatisticInfo::set_packetlossmax(float value) {
  _internal_set_packetlossmax(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.packetLossMax)
}
inline float VideoSDKSessionAudioStatisticInfo::_internal_packetlossmax() const {
  return _impl_.packetlossmax_;
}
inline void VideoSDKSessionAudioStatisticInfo::_internal_set_packetlossmax(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.packetlossmax_ = value;
}

// -------------------------------------------------------------------

// VideoSDKSessionAudioStatisticInfoList

// repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo audioStatisticInfo = 1;
inline int VideoSDKSessionAudioStatisticInfoList::_internal_audiostatisticinfo_size() const {
  return _impl_.audiostatisticinfo_.size();
}
inline int VideoSDKSessionAudioStatisticInfoList::audiostatisticinfo_size() const {
  return _internal_audiostatisticinfo_size();
}
inline void VideoSDKSessionAudioStatisticInfoList::clear_audiostatisticinfo() {
  _impl_.audiostatisticinfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* VideoSDKSessionAudioStatisticInfoList::mutable_audiostatisticinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.audioStatisticInfo)
  return _impl_.audiostatisticinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo >*
VideoSDKSessionAudioStatisticInfoList::mutable_audiostatisticinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.audioStatisticInfo)
  return &_impl_.audiostatisticinfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo& VideoSDKSessionAudioStatisticInfoList::_internal_audiostatisticinfo(int index) const {
  return _impl_.audiostatisticinfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo& VideoSDKSessionAudioStatisticInfoList::audiostatisticinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.audioStatisticInfo)
  return _internal_audiostatisticinfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* VideoSDKSessionAudioStatisticInfoList::_internal_add_audiostatisticinfo() {
  return _impl_.audiostatisticinfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* VideoSDKSessionAudioStatisticInfoList::add_audiostatisticinfo() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo* _add = _internal_add_audiostatisticinfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.audioStatisticInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo >&
VideoSDKSessionAudioStatisticInfoList::audiostatisticinfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.audioStatisticInfo)
  return _impl_.audiostatisticinfo_;
}

// -------------------------------------------------------------------

// VideoSDKSessionASVStatisticInfo

// optional int64 frame_width = 1;
inline bool VideoSDKSessionASVStatisticInfo::has_frame_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_frame_width() {
  _impl_.frame_width_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::frame_width() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.frame_width)
  return _internal_frame_width();
}
inline void VideoSDKSessionASVStatisticInfo::set_frame_width(::int64_t value) {
  _internal_set_frame_width(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.frame_width)
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::_internal_frame_width() const {
  return _impl_.frame_width_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_frame_width(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.frame_width_ = value;
}

// optional int64 frame_height = 2;
inline bool VideoSDKSessionASVStatisticInfo::has_frame_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_frame_height() {
  _impl_.frame_height_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::frame_height() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.frame_height)
  return _internal_frame_height();
}
inline void VideoSDKSessionASVStatisticInfo::set_frame_height(::int64_t value) {
  _internal_set_frame_height(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.frame_height)
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::_internal_frame_height() const {
  return _impl_.frame_height_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_frame_height(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.frame_height_ = value;
}

// optional int64 fps = 3;
inline bool VideoSDKSessionASVStatisticInfo::has_fps() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_fps() {
  _impl_.fps_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::fps() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.fps)
  return _internal_fps();
}
inline void VideoSDKSessionASVStatisticInfo::set_fps(::int64_t value) {
  _internal_set_fps(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.fps)
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::_internal_fps() const {
  return _impl_.fps_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_fps(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.fps_ = value;
}

// optional int64 latency = 4;
inline bool VideoSDKSessionASVStatisticInfo::has_latency() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_latency() {
  _impl_.latency_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::latency() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.latency)
  return _internal_latency();
}
inline void VideoSDKSessionASVStatisticInfo::set_latency(::int64_t value) {
  _internal_set_latency(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.latency)
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::_internal_latency() const {
  return _impl_.latency_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_latency(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.latency_ = value;
}

// optional int64 Jitter = 5;
inline bool VideoSDKSessionASVStatisticInfo::has_jitter() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_jitter() {
  _impl_.jitter_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::jitter() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.Jitter)
  return _internal_jitter();
}
inline void VideoSDKSessionASVStatisticInfo::set_jitter(::int64_t value) {
  _internal_set_jitter(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.Jitter)
}
inline ::int64_t VideoSDKSessionASVStatisticInfo::_internal_jitter() const {
  return _impl_.jitter_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_jitter(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.jitter_ = value;
}

// optional float packetLossAvg = 6;
inline bool VideoSDKSessionASVStatisticInfo::has_packetlossavg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_packetlossavg() {
  _impl_.packetlossavg_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline float VideoSDKSessionASVStatisticInfo::packetlossavg() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.packetLossAvg)
  return _internal_packetlossavg();
}
inline void VideoSDKSessionASVStatisticInfo::set_packetlossavg(float value) {
  _internal_set_packetlossavg(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.packetLossAvg)
}
inline float VideoSDKSessionASVStatisticInfo::_internal_packetlossavg() const {
  return _impl_.packetlossavg_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_packetlossavg(float value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.packetlossavg_ = value;
}

// optional float packetLossMax = 7;
inline bool VideoSDKSessionASVStatisticInfo::has_packetlossmax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VideoSDKSessionASVStatisticInfo::clear_packetlossmax() {
  _impl_.packetlossmax_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline float VideoSDKSessionASVStatisticInfo::packetlossmax() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.packetLossMax)
  return _internal_packetlossmax();
}
inline void VideoSDKSessionASVStatisticInfo::set_packetlossmax(float value) {
  _internal_set_packetlossmax(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.packetLossMax)
}
inline float VideoSDKSessionASVStatisticInfo::_internal_packetlossmax() const {
  return _impl_.packetlossmax_;
}
inline void VideoSDKSessionASVStatisticInfo::_internal_set_packetlossmax(float value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.packetlossmax_ = value;
}

// -------------------------------------------------------------------

// VideoSDKSessionASVStatisticInfoList

// repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo ASVStatisticInfo = 1;
inline int VideoSDKSessionASVStatisticInfoList::_internal_asvstatisticinfo_size() const {
  return _impl_.asvstatisticinfo_.size();
}
inline int VideoSDKSessionASVStatisticInfoList::asvstatisticinfo_size() const {
  return _internal_asvstatisticinfo_size();
}
inline void VideoSDKSessionASVStatisticInfoList::clear_asvstatisticinfo() {
  _impl_.asvstatisticinfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* VideoSDKSessionASVStatisticInfoList::mutable_asvstatisticinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.ASVStatisticInfo)
  return _impl_.asvstatisticinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo >*
VideoSDKSessionASVStatisticInfoList::mutable_asvstatisticinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.ASVStatisticInfo)
  return &_impl_.asvstatisticinfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo& VideoSDKSessionASVStatisticInfoList::_internal_asvstatisticinfo(int index) const {
  return _impl_.asvstatisticinfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo& VideoSDKSessionASVStatisticInfoList::asvstatisticinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.ASVStatisticInfo)
  return _internal_asvstatisticinfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* VideoSDKSessionASVStatisticInfoList::_internal_add_asvstatisticinfo() {
  return _impl_.asvstatisticinfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* VideoSDKSessionASVStatisticInfoList::add_asvstatisticinfo() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo* _add = _internal_add_asvstatisticinfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.ASVStatisticInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo >&
VideoSDKSessionASVStatisticInfoList::asvstatisticinfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.ASVStatisticInfo)
  return _impl_.asvstatisticinfo_;
}

// -------------------------------------------------------------------

// SDKVideoCapability

// optional bool isEffective = 1;
inline bool SDKVideoCapability::has_iseffective() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SDKVideoCapability::clear_iseffective() {
  _impl_.iseffective_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SDKVideoCapability::iseffective() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.isEffective)
  return _internal_iseffective();
}
inline void SDKVideoCapability::set_iseffective(bool value) {
  _internal_set_iseffective(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.isEffective)
}
inline bool SDKVideoCapability::_internal_iseffective() const {
  return _impl_.iseffective_;
}
inline void SDKVideoCapability::_internal_set_iseffective(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.iseffective_ = value;
}

// optional int32 width = 2;
inline bool SDKVideoCapability::has_width() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SDKVideoCapability::clear_width() {
  _impl_.width_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SDKVideoCapability::width() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.width)
  return _internal_width();
}
inline void SDKVideoCapability::set_width(::int32_t value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.width)
}
inline ::int32_t SDKVideoCapability::_internal_width() const {
  return _impl_.width_;
}
inline void SDKVideoCapability::_internal_set_width(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.width_ = value;
}

// optional int32 height = 3;
inline bool SDKVideoCapability::has_height() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SDKVideoCapability::clear_height() {
  _impl_.height_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t SDKVideoCapability::height() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.height)
  return _internal_height();
}
inline void SDKVideoCapability::set_height(::int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.height)
}
inline ::int32_t SDKVideoCapability::_internal_height() const {
  return _impl_.height_;
}
inline void SDKVideoCapability::_internal_set_height(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.height_ = value;
}

// optional int32 frame = 4;
inline bool SDKVideoCapability::has_frame() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SDKVideoCapability::clear_frame() {
  _impl_.frame_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SDKVideoCapability::frame() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.frame)
  return _internal_frame();
}
inline void SDKVideoCapability::set_frame(::int32_t value) {
  _internal_set_frame(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SDKVideoCapability.frame)
}
inline ::int32_t SDKVideoCapability::_internal_frame() const {
  return _impl_.frame_;
}
inline void SDKVideoCapability::_internal_set_frame(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.frame_ = value;
}

// -------------------------------------------------------------------

// SDKVideoCapabilityList

// repeated .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
inline int SDKVideoCapabilityList::_internal_videocapability_size() const {
  return _impl_.videocapability_.size();
}
inline int SDKVideoCapabilityList::videocapability_size() const {
  return _internal_videocapability_size();
}
inline void SDKVideoCapabilityList::clear_videocapability() {
  _impl_.videocapability_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* SDKVideoCapabilityList::mutable_videocapability(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.VideoCapability)
  return _impl_.videocapability_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability >*
SDKVideoCapabilityList::mutable_videocapability() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.VideoCapability)
  return &_impl_.videocapability_;
}
inline const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& SDKVideoCapabilityList::_internal_videocapability(int index) const {
  return _impl_.videocapability_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& SDKVideoCapabilityList::videocapability(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.VideoCapability)
  return _internal_videocapability(index);
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* SDKVideoCapabilityList::_internal_add_videocapability() {
  return _impl_.videocapability_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* SDKVideoCapabilityList::add_videocapability() {
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* _add = _internal_add_videocapability();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.VideoCapability)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability >&
SDKVideoCapabilityList::videocapability() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.VideoCapability)
  return _impl_.videocapability_;
}

// -------------------------------------------------------------------

// LTTLanguage

// optional int32 lttLanguageID = 1;
inline bool LTTLanguage::has_lttlanguageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LTTLanguage::clear_lttlanguageid() {
  _impl_.lttlanguageid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t LTTLanguage::lttlanguageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageID)
  return _internal_lttlanguageid();
}
inline void LTTLanguage::set_lttlanguageid(::int32_t value) {
  _internal_set_lttlanguageid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageID)
}
inline ::int32_t LTTLanguage::_internal_lttlanguageid() const {
  return _impl_.lttlanguageid_;
}
inline void LTTLanguage::_internal_set_lttlanguageid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.lttlanguageid_ = value;
}

// optional string lttLanguageName = 2;
inline bool LTTLanguage::has_lttlanguagename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LTTLanguage::clear_lttlanguagename() {
  _impl_.lttlanguagename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LTTLanguage::lttlanguagename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageName)
  return _internal_lttlanguagename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LTTLanguage::set_lttlanguagename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.lttlanguagename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageName)
}
inline std::string* LTTLanguage::mutable_lttlanguagename() {
  std::string* _s = _internal_mutable_lttlanguagename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageName)
  return _s;
}
inline const std::string& LTTLanguage::_internal_lttlanguagename() const {
  return _impl_.lttlanguagename_.Get();
}
inline void LTTLanguage::_internal_set_lttlanguagename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.lttlanguagename_.Set(value, GetArenaForAllocation());
}
inline std::string* LTTLanguage::_internal_mutable_lttlanguagename() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.lttlanguagename_.Mutable( GetArenaForAllocation());
}
inline std::string* LTTLanguage::release_lttlanguagename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.lttlanguagename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lttlanguagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LTTLanguage::set_allocated_lttlanguagename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.lttlanguagename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.lttlanguagename_.IsDefault()) {
          _impl_.lttlanguagename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.LTTLanguage.lttLanguageName)
}

// -------------------------------------------------------------------

// ZoomVideoSDKShareCursorData

// optional uint32 source_id = 1;
inline bool ZoomVideoSDKShareCursorData::has_source_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ZoomVideoSDKShareCursorData::clear_source_id() {
  _impl_.source_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t ZoomVideoSDKShareCursorData::source_id() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.source_id)
  return _internal_source_id();
}
inline void ZoomVideoSDKShareCursorData::set_source_id(::uint32_t value) {
  _internal_set_source_id(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.source_id)
}
inline ::uint32_t ZoomVideoSDKShareCursorData::_internal_source_id() const {
  return _impl_.source_id_;
}
inline void ZoomVideoSDKShareCursorData::_internal_set_source_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.source_id_ = value;
}

// optional int32 x = 2;
inline bool ZoomVideoSDKShareCursorData::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ZoomVideoSDKShareCursorData::clear_x() {
  _impl_.x_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ZoomVideoSDKShareCursorData::x() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.x)
  return _internal_x();
}
inline void ZoomVideoSDKShareCursorData::set_x(::int32_t value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.x)
}
inline ::int32_t ZoomVideoSDKShareCursorData::_internal_x() const {
  return _impl_.x_;
}
inline void ZoomVideoSDKShareCursorData::_internal_set_x(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.x_ = value;
}

// optional int32 y = 3;
inline bool ZoomVideoSDKShareCursorData::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ZoomVideoSDKShareCursorData::clear_y() {
  _impl_.y_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t ZoomVideoSDKShareCursorData::y() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.y)
  return _internal_y();
}
inline void ZoomVideoSDKShareCursorData::set_y(::int32_t value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.y)
}
inline ::int32_t ZoomVideoSDKShareCursorData::_internal_y() const {
  return _impl_.y_;
}
inline void ZoomVideoSDKShareCursorData::_internal_set_y(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.y_ = value;
}

// -------------------------------------------------------------------

// IncomingLiveStreamStatus

// optional string strStreamKeyID = 1;
inline bool IncomingLiveStreamStatus::has_strstreamkeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IncomingLiveStreamStatus::clear_strstreamkeyid() {
  _impl_.strstreamkeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncomingLiveStreamStatus::strstreamkeyid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.strStreamKeyID)
  return _internal_strstreamkeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncomingLiveStreamStatus::set_strstreamkeyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strstreamkeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.strStreamKeyID)
}
inline std::string* IncomingLiveStreamStatus::mutable_strstreamkeyid() {
  std::string* _s = _internal_mutable_strstreamkeyid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.strStreamKeyID)
  return _s;
}
inline const std::string& IncomingLiveStreamStatus::_internal_strstreamkeyid() const {
  return _impl_.strstreamkeyid_.Get();
}
inline void IncomingLiveStreamStatus::_internal_set_strstreamkeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strstreamkeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* IncomingLiveStreamStatus::_internal_mutable_strstreamkeyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strstreamkeyid_.Mutable( GetArenaForAllocation());
}
inline std::string* IncomingLiveStreamStatus::release_strstreamkeyid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.strStreamKeyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strstreamkeyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void IncomingLiveStreamStatus::set_allocated_strstreamkeyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strstreamkeyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strstreamkeyid_.IsDefault()) {
          _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.strStreamKeyID)
}

// optional bool isRTMPConnected = 2;
inline bool IncomingLiveStreamStatus::has_isrtmpconnected() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IncomingLiveStreamStatus::clear_isrtmpconnected() {
  _impl_.isrtmpconnected_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool IncomingLiveStreamStatus::isrtmpconnected() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.isRTMPConnected)
  return _internal_isrtmpconnected();
}
inline void IncomingLiveStreamStatus::set_isrtmpconnected(bool value) {
  _internal_set_isrtmpconnected(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.isRTMPConnected)
}
inline bool IncomingLiveStreamStatus::_internal_isrtmpconnected() const {
  return _impl_.isrtmpconnected_;
}
inline void IncomingLiveStreamStatus::_internal_set_isrtmpconnected(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.isrtmpconnected_ = value;
}

// optional bool isStreamPushed = 3;
inline bool IncomingLiveStreamStatus::has_isstreampushed() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void IncomingLiveStreamStatus::clear_isstreampushed() {
  _impl_.isstreampushed_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool IncomingLiveStreamStatus::isstreampushed() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.isStreamPushed)
  return _internal_isstreampushed();
}
inline void IncomingLiveStreamStatus::set_isstreampushed(bool value) {
  _internal_set_isstreampushed(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.isStreamPushed)
}
inline bool IncomingLiveStreamStatus::_internal_isstreampushed() const {
  return _impl_.isstreampushed_;
}
inline void IncomingLiveStreamStatus::_internal_set_isstreampushed(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isstreampushed_ = value;
}

// -------------------------------------------------------------------

// IncomingLiveStreamStatusList

// repeated .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus status = 1;
inline int IncomingLiveStreamStatusList::_internal_status_size() const {
  return _impl_.status_.size();
}
inline int IncomingLiveStreamStatusList::status_size() const {
  return _internal_status_size();
}
inline void IncomingLiveStreamStatusList::clear_status() {
  _impl_.status_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* IncomingLiveStreamStatusList::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.status)
  return _impl_.status_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus >*
IncomingLiveStreamStatusList::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.status)
  return &_impl_.status_;
}
inline const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus& IncomingLiveStreamStatusList::_internal_status(int index) const {
  return _impl_.status_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus& IncomingLiveStreamStatusList::status(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.status)
  return _internal_status(index);
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* IncomingLiveStreamStatusList::_internal_add_status() {
  return _impl_.status_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* IncomingLiveStreamStatusList::add_status() {
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus* _add = _internal_add_status();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.status)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus >&
IncomingLiveStreamStatusList::status() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.status)
  return _impl_.status_;
}

// -------------------------------------------------------------------

// CallbackBody_onErrorParams

// optional int32 errorCode = 1;
inline bool CallbackBody_onErrorParams::has_errorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onErrorParams::clear_errorcode() {
  _impl_.errorcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onErrorParams::errorcode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.errorCode)
  return _internal_errorcode();
}
inline void CallbackBody_onErrorParams::set_errorcode(::int32_t value) {
  _internal_set_errorcode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.errorCode)
}
inline ::int32_t CallbackBody_onErrorParams::_internal_errorcode() const {
  return _impl_.errorcode_;
}
inline void CallbackBody_onErrorParams::_internal_set_errorcode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.errorcode_ = value;
}

// optional int32 detailErrorCode = 2;
inline bool CallbackBody_onErrorParams::has_detailerrorcode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onErrorParams::clear_detailerrorcode() {
  _impl_.detailerrorcode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CallbackBody_onErrorParams::detailerrorcode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.detailErrorCode)
  return _internal_detailerrorcode();
}
inline void CallbackBody_onErrorParams::set_detailerrorcode(::int32_t value) {
  _internal_set_detailerrorcode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.detailErrorCode)
}
inline ::int32_t CallbackBody_onErrorParams::_internal_detailerrorcode() const {
  return _impl_.detailerrorcode_;
}
inline void CallbackBody_onErrorParams::_internal_set_detailerrorcode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.detailerrorcode_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onUserJoinParams

// optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
inline bool CallbackBody_onUserJoinParams::has_zn_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_userlist_ != nullptr);
  return value;
}
inline void CallbackBody_onUserJoinParams::clear_zn_userlist() {
  if (_impl_.zn_userlist_ != nullptr) _impl_.zn_userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserJoinParams::_internal_zn_userlist() const {
  const ::com::electron::zoomvideo::sdk::proto::UserList* p = _impl_.zn_userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::UserList&>(
      ::com::electron::zoomvideo::sdk::proto::_UserList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserJoinParams::zn_userlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.zn_userList)
  return _internal_zn_userlist();
}
inline void CallbackBody_onUserJoinParams::unsafe_arena_set_allocated_zn_userlist(
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_userlist_);
  }
  _impl_.zn_userlist_ = zn_userlist;
  if (zn_userlist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.zn_userList)
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserJoinParams::release_zn_userlist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserJoinParams::unsafe_arena_release_zn_userlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.zn_userList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserJoinParams::_internal_mutable_zn_userlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_userlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(GetArenaForAllocation());
    _impl_.zn_userlist_ = p;
  }
  return _impl_.zn_userlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserJoinParams::mutable_zn_userlist() {
  ::com::electron::zoomvideo::sdk::proto::UserList* _msg = _internal_mutable_zn_userlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.zn_userList)
  return _msg;
}
inline void CallbackBody_onUserJoinParams::set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_userlist_;
  }
  if (zn_userlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_userlist);
    if (message_arena != submessage_arena) {
      zn_userlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_userlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_userlist_ = zn_userlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.zn_userList)
}

// -------------------------------------------------------------------

// CallbackBody_onUserLeaveParams

// optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
inline bool CallbackBody_onUserLeaveParams::has_zn_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_userlist_ != nullptr);
  return value;
}
inline void CallbackBody_onUserLeaveParams::clear_zn_userlist() {
  if (_impl_.zn_userlist_ != nullptr) _impl_.zn_userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserLeaveParams::_internal_zn_userlist() const {
  const ::com::electron::zoomvideo::sdk::proto::UserList* p = _impl_.zn_userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::UserList&>(
      ::com::electron::zoomvideo::sdk::proto::_UserList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserLeaveParams::zn_userlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.zn_userList)
  return _internal_zn_userlist();
}
inline void CallbackBody_onUserLeaveParams::unsafe_arena_set_allocated_zn_userlist(
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_userlist_);
  }
  _impl_.zn_userlist_ = zn_userlist;
  if (zn_userlist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.zn_userList)
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserLeaveParams::release_zn_userlist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserLeaveParams::unsafe_arena_release_zn_userlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.zn_userList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserLeaveParams::_internal_mutable_zn_userlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_userlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(GetArenaForAllocation());
    _impl_.zn_userlist_ = p;
  }
  return _impl_.zn_userlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserLeaveParams::mutable_zn_userlist() {
  ::com::electron::zoomvideo::sdk::proto::UserList* _msg = _internal_mutable_zn_userlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.zn_userList)
  return _msg;
}
inline void CallbackBody_onUserLeaveParams::set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_userlist_;
  }
  if (zn_userlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_userlist);
    if (message_arena != submessage_arena) {
      zn_userlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_userlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_userlist_ = zn_userlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.zn_userList)
}

// -------------------------------------------------------------------

// CallbackBody_onUserVideoStatusChangedParams

// optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
inline bool CallbackBody_onUserVideoStatusChangedParams::has_zn_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_userlist_ != nullptr);
  return value;
}
inline void CallbackBody_onUserVideoStatusChangedParams::clear_zn_userlist() {
  if (_impl_.zn_userlist_ != nullptr) _impl_.zn_userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserVideoStatusChangedParams::_internal_zn_userlist() const {
  const ::com::electron::zoomvideo::sdk::proto::UserList* p = _impl_.zn_userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::UserList&>(
      ::com::electron::zoomvideo::sdk::proto::_UserList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserVideoStatusChangedParams::zn_userlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.zn_userList)
  return _internal_zn_userlist();
}
inline void CallbackBody_onUserVideoStatusChangedParams::unsafe_arena_set_allocated_zn_userlist(
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_userlist_);
  }
  _impl_.zn_userlist_ = zn_userlist;
  if (zn_userlist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.zn_userList)
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserVideoStatusChangedParams::release_zn_userlist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserVideoStatusChangedParams::unsafe_arena_release_zn_userlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.zn_userList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserVideoStatusChangedParams::_internal_mutable_zn_userlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_userlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(GetArenaForAllocation());
    _impl_.zn_userlist_ = p;
  }
  return _impl_.zn_userlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserVideoStatusChangedParams::mutable_zn_userlist() {
  ::com::electron::zoomvideo::sdk::proto::UserList* _msg = _internal_mutable_zn_userlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.zn_userList)
  return _msg;
}
inline void CallbackBody_onUserVideoStatusChangedParams::set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_userlist_;
  }
  if (zn_userlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_userlist);
    if (message_arena != submessage_arena) {
      zn_userlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_userlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_userlist_ = zn_userlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.zn_userList)
}

// -------------------------------------------------------------------

// CallbackBody_onUserAudioStatusChangedParams

// optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
inline bool CallbackBody_onUserAudioStatusChangedParams::has_zn_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_userlist_ != nullptr);
  return value;
}
inline void CallbackBody_onUserAudioStatusChangedParams::clear_zn_userlist() {
  if (_impl_.zn_userlist_ != nullptr) _impl_.zn_userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserAudioStatusChangedParams::_internal_zn_userlist() const {
  const ::com::electron::zoomvideo::sdk::proto::UserList* p = _impl_.zn_userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::UserList&>(
      ::com::electron::zoomvideo::sdk::proto::_UserList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserAudioStatusChangedParams::zn_userlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.zn_userList)
  return _internal_zn_userlist();
}
inline void CallbackBody_onUserAudioStatusChangedParams::unsafe_arena_set_allocated_zn_userlist(
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_userlist_);
  }
  _impl_.zn_userlist_ = zn_userlist;
  if (zn_userlist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.zn_userList)
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserAudioStatusChangedParams::release_zn_userlist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserAudioStatusChangedParams::unsafe_arena_release_zn_userlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.zn_userList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserAudioStatusChangedParams::_internal_mutable_zn_userlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_userlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(GetArenaForAllocation());
    _impl_.zn_userlist_ = p;
  }
  return _impl_.zn_userlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserAudioStatusChangedParams::mutable_zn_userlist() {
  ::com::electron::zoomvideo::sdk::proto::UserList* _msg = _internal_mutable_zn_userlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.zn_userList)
  return _msg;
}
inline void CallbackBody_onUserAudioStatusChangedParams::set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_userlist_;
  }
  if (zn_userlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_userlist);
    if (message_arena != submessage_arena) {
      zn_userlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_userlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_userlist_ = zn_userlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.zn_userList)
}

// -------------------------------------------------------------------

// CallbackBody_onUserShareStatusChangedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool CallbackBody_onUserShareStatusChangedParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onUserShareStatusChangedParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserShareStatusChangedParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserShareStatusChangedParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.user)
  return _internal_user();
}
inline void CallbackBody_onUserShareStatusChangedParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserShareStatusChangedParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserShareStatusChangedParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserShareStatusChangedParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserShareStatusChangedParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.user)
  return _msg;
}
inline void CallbackBody_onUserShareStatusChangedParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.user)
}

// optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
inline bool CallbackBody_onUserShareStatusChangedParams::has_shareaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shareaction_ != nullptr);
  return value;
}
inline void CallbackBody_onUserShareStatusChangedParams::clear_shareaction() {
  if (_impl_.shareaction_ != nullptr) _impl_.shareaction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& CallbackBody_onUserShareStatusChangedParams::_internal_shareaction() const {
  const ::com::electron::zoomvideo::sdk::proto::ShareAction* p = _impl_.shareaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::ShareAction&>(
      ::com::electron::zoomvideo::sdk::proto::_ShareAction_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& CallbackBody_onUserShareStatusChangedParams::shareaction() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.shareAction)
  return _internal_shareaction();
}
inline void CallbackBody_onUserShareStatusChangedParams::unsafe_arena_set_allocated_shareaction(
    ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shareaction_);
  }
  _impl_.shareaction_ = shareaction;
  if (shareaction) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.shareAction)
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onUserShareStatusChangedParams::release_shareaction() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* temp = _impl_.shareaction_;
  _impl_.shareaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onUserShareStatusChangedParams::unsafe_arena_release_shareaction() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.shareAction)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* temp = _impl_.shareaction_;
  _impl_.shareaction_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onUserShareStatusChangedParams::_internal_mutable_shareaction() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shareaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ShareAction>(GetArenaForAllocation());
    _impl_.shareaction_ = p;
  }
  return _impl_.shareaction_;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onUserShareStatusChangedParams::mutable_shareaction() {
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _msg = _internal_mutable_shareaction();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.shareAction)
  return _msg;
}
inline void CallbackBody_onUserShareStatusChangedParams::set_allocated_shareaction(::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shareaction_;
  }
  if (shareaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shareaction);
    if (message_arena != submessage_arena) {
      shareaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shareaction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shareaction_ = shareaction;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.shareAction)
}

// -------------------------------------------------------------------

// CallbackBody_onFailedToStartShareParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool CallbackBody_onFailedToStartShareParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onFailedToStartShareParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onFailedToStartShareParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onFailedToStartShareParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.user)
  return _internal_user();
}
inline void CallbackBody_onFailedToStartShareParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onFailedToStartShareParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onFailedToStartShareParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onFailedToStartShareParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onFailedToStartShareParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.user)
  return _msg;
}
inline void CallbackBody_onFailedToStartShareParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.user)
}

// -------------------------------------------------------------------

// CallbackBody_onLiveStreamStatusChangedParams

// optional int32 status = 1;
inline bool CallbackBody_onLiveStreamStatusChangedParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onLiveStreamStatusChangedParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onLiveStreamStatusChangedParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.status)
  return _internal_status();
}
inline void CallbackBody_onLiveStreamStatusChangedParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.status)
}
inline ::int32_t CallbackBody_onLiveStreamStatusChangedParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onLiveStreamStatusChangedParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onUserHostChangedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool CallbackBody_onUserHostChangedParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onUserHostChangedParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserHostChangedParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserHostChangedParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.user)
  return _internal_user();
}
inline void CallbackBody_onUserHostChangedParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserHostChangedParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserHostChangedParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserHostChangedParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserHostChangedParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.user)
  return _msg;
}
inline void CallbackBody_onUserHostChangedParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.user)
}

// -------------------------------------------------------------------

// CallbackBody_onUserNameChangedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool CallbackBody_onUserNameChangedParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onUserNameChangedParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserNameChangedParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserNameChangedParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.user)
  return _internal_user();
}
inline void CallbackBody_onUserNameChangedParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserNameChangedParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserNameChangedParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserNameChangedParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserNameChangedParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.user)
  return _msg;
}
inline void CallbackBody_onUserNameChangedParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.user)
}

// -------------------------------------------------------------------

// CallbackBody_onUserManagerChangedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool CallbackBody_onUserManagerChangedParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onUserManagerChangedParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserManagerChangedParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onUserManagerChangedParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.user)
  return _internal_user();
}
inline void CallbackBody_onUserManagerChangedParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserManagerChangedParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserManagerChangedParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserManagerChangedParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onUserManagerChangedParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.user)
  return _msg;
}
inline void CallbackBody_onUserManagerChangedParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.user)
}

// -------------------------------------------------------------------

// CallbackBody_onUserActiveAudioChangedParams

// optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
inline bool CallbackBody_onUserActiveAudioChangedParams::has_zn_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_userlist_ != nullptr);
  return value;
}
inline void CallbackBody_onUserActiveAudioChangedParams::clear_zn_userlist() {
  if (_impl_.zn_userlist_ != nullptr) _impl_.zn_userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserActiveAudioChangedParams::_internal_zn_userlist() const {
  const ::com::electron::zoomvideo::sdk::proto::UserList* p = _impl_.zn_userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::UserList&>(
      ::com::electron::zoomvideo::sdk::proto::_UserList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onUserActiveAudioChangedParams::zn_userlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.zn_userList)
  return _internal_zn_userlist();
}
inline void CallbackBody_onUserActiveAudioChangedParams::unsafe_arena_set_allocated_zn_userlist(
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_userlist_);
  }
  _impl_.zn_userlist_ = zn_userlist;
  if (zn_userlist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.zn_userList)
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserActiveAudioChangedParams::release_zn_userlist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserActiveAudioChangedParams::unsafe_arena_release_zn_userlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.zn_userList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserActiveAudioChangedParams::_internal_mutable_zn_userlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_userlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(GetArenaForAllocation());
    _impl_.zn_userlist_ = p;
  }
  return _impl_.zn_userlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onUserActiveAudioChangedParams::mutable_zn_userlist() {
  ::com::electron::zoomvideo::sdk::proto::UserList* _msg = _internal_mutable_zn_userlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.zn_userList)
  return _msg;
}
inline void CallbackBody_onUserActiveAudioChangedParams::set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_userlist_;
  }
  if (zn_userlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_userlist);
    if (message_arena != submessage_arena) {
      zn_userlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_userlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_userlist_ = zn_userlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.zn_userList)
}

// -------------------------------------------------------------------

// CallbackBody_onChatNewMessageNotifyParams

// optional int64 pSender = 1;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_psender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_psender() {
  _impl_.psender_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t CallbackBody_onChatNewMessageNotifyParams::psender() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.pSender)
  return _internal_psender();
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_psender(::int64_t value) {
  _internal_set_psender(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.pSender)
}
inline ::int64_t CallbackBody_onChatNewMessageNotifyParams::_internal_psender() const {
  return _impl_.psender_;
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_psender(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.psender_ = value;
}

// optional string senderName = 2;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_sendername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_sendername() {
  _impl_.sendername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::sendername() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.senderName)
  return _internal_sendername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onChatNewMessageNotifyParams::set_sendername(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sendername_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.senderName)
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::mutable_sendername() {
  std::string* _s = _internal_mutable_sendername();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.senderName)
  return _s;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::_internal_sendername() const {
  return _impl_.sendername_.Get();
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_sendername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.sendername_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::_internal_mutable_sendername() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sendername_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::release_sendername() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.senderName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sendername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sendername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_allocated_sendername(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sendername_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sendername_.IsDefault()) {
          _impl_.sendername_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.senderName)
}

// optional int64 pReceiver = 3;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_preceiver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_preceiver() {
  _impl_.preceiver_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int64_t CallbackBody_onChatNewMessageNotifyParams::preceiver() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.pReceiver)
  return _internal_preceiver();
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_preceiver(::int64_t value) {
  _internal_set_preceiver(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.pReceiver)
}
inline ::int64_t CallbackBody_onChatNewMessageNotifyParams::_internal_preceiver() const {
  return _impl_.preceiver_;
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_preceiver(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.preceiver_ = value;
}

// optional string receiverName = 4;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_receivername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_receivername() {
  _impl_.receivername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::receivername() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.receiverName)
  return _internal_receivername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onChatNewMessageNotifyParams::set_receivername(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.receivername_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.receiverName)
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::mutable_receivername() {
  std::string* _s = _internal_mutable_receivername();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.receiverName)
  return _s;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::_internal_receivername() const {
  return _impl_.receivername_.Get();
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_receivername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.receivername_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::_internal_mutable_receivername() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.receivername_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::release_receivername() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.receiverName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.receivername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receivername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_allocated_receivername(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.receivername_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.receivername_.IsDefault()) {
          _impl_.receivername_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.receiverName)
}

// optional string messageContent = 5;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_messagecontent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_messagecontent() {
  _impl_.messagecontent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::messagecontent() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageContent)
  return _internal_messagecontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onChatNewMessageNotifyParams::set_messagecontent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.messagecontent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageContent)
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::mutable_messagecontent() {
  std::string* _s = _internal_mutable_messagecontent();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageContent)
  return _s;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::_internal_messagecontent() const {
  return _impl_.messagecontent_.Get();
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_messagecontent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.messagecontent_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::_internal_mutable_messagecontent() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.messagecontent_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::release_messagecontent() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageContent)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.messagecontent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messagecontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_allocated_messagecontent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.messagecontent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messagecontent_.IsDefault()) {
          _impl_.messagecontent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageContent)
}

// optional int64 timeStamp = 6;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int64_t CallbackBody_onChatNewMessageNotifyParams::timestamp() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.timeStamp)
  return _internal_timestamp();
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.timeStamp)
}
inline ::int64_t CallbackBody_onChatNewMessageNotifyParams::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.timestamp_ = value;
}

// optional bool isChatToAll = 7;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_ischattoall() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_ischattoall() {
  _impl_.ischattoall_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool CallbackBody_onChatNewMessageNotifyParams::ischattoall() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.isChatToAll)
  return _internal_ischattoall();
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_ischattoall(bool value) {
  _internal_set_ischattoall(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.isChatToAll)
}
inline bool CallbackBody_onChatNewMessageNotifyParams::_internal_ischattoall() const {
  return _impl_.ischattoall_;
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_ischattoall(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.ischattoall_ = value;
}

// optional bool isSelfSend = 8;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_isselfsend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_isselfsend() {
  _impl_.isselfsend_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool CallbackBody_onChatNewMessageNotifyParams::isselfsend() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.isSelfSend)
  return _internal_isselfsend();
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_isselfsend(bool value) {
  _internal_set_isselfsend(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.isSelfSend)
}
inline bool CallbackBody_onChatNewMessageNotifyParams::_internal_isselfsend() const {
  return _impl_.isselfsend_;
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_isselfsend(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.isselfsend_ = value;
}

// optional string messageID = 9;
inline bool CallbackBody_onChatNewMessageNotifyParams::has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CallbackBody_onChatNewMessageNotifyParams::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::messageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageID)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onChatNewMessageNotifyParams::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageID)
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageID)
  return _s;
}
inline const std::string& CallbackBody_onChatNewMessageNotifyParams::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void CallbackBody_onChatNewMessageNotifyParams::_internal_set_messageid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::_internal_mutable_messageid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.messageid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatNewMessageNotifyParams::release_messageid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageID)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.messageid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onChatNewMessageNotifyParams::set_allocated_messageid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.messageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.messageID)
}

// -------------------------------------------------------------------

// CallbackBody_onChatMsgDeleteNotificationParams

// optional string messageID = 1;
inline bool CallbackBody_onChatMsgDeleteNotificationParams::has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onChatMsgDeleteNotificationParams::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onChatMsgDeleteNotificationParams::messageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.messageID)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onChatMsgDeleteNotificationParams::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.messageID)
}
inline std::string* CallbackBody_onChatMsgDeleteNotificationParams::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.messageID)
  return _s;
}
inline const std::string& CallbackBody_onChatMsgDeleteNotificationParams::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void CallbackBody_onChatMsgDeleteNotificationParams::_internal_set_messageid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatMsgDeleteNotificationParams::_internal_mutable_messageid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.messageid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onChatMsgDeleteNotificationParams::release_messageid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.messageID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.messageid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onChatMsgDeleteNotificationParams::set_allocated_messageid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.messageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.messageID)
}

// optional int32 deleteBy = 2;
inline bool CallbackBody_onChatMsgDeleteNotificationParams::has_deleteby() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onChatMsgDeleteNotificationParams::clear_deleteby() {
  _impl_.deleteby_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CallbackBody_onChatMsgDeleteNotificationParams::deleteby() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.deleteBy)
  return _internal_deleteby();
}
inline void CallbackBody_onChatMsgDeleteNotificationParams::set_deleteby(::int32_t value) {
  _internal_set_deleteby(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.deleteBy)
}
inline ::int32_t CallbackBody_onChatMsgDeleteNotificationParams::_internal_deleteby() const {
  return _impl_.deleteby_;
}
inline void CallbackBody_onChatMsgDeleteNotificationParams::_internal_set_deleteby(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.deleteby_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onVideoSourceInitializeParams

// optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList VideoCapabilityList = 1;
inline bool CallbackBody_onVideoSourceInitializeParams::has_videocapabilitylist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.videocapabilitylist_ != nullptr);
  return value;
}
inline void CallbackBody_onVideoSourceInitializeParams::clear_videocapabilitylist() {
  if (_impl_.videocapabilitylist_ != nullptr) _impl_.videocapabilitylist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList& CallbackBody_onVideoSourceInitializeParams::_internal_videocapabilitylist() const {
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* p = _impl_.videocapabilitylist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList&>(
      ::com::electron::zoomvideo::sdk::proto::_SDKVideoCapabilityList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList& CallbackBody_onVideoSourceInitializeParams::videocapabilitylist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.VideoCapabilityList)
  return _internal_videocapabilitylist();
}
inline void CallbackBody_onVideoSourceInitializeParams::unsafe_arena_set_allocated_videocapabilitylist(
    ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* videocapabilitylist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.videocapabilitylist_);
  }
  _impl_.videocapabilitylist_ = videocapabilitylist;
  if (videocapabilitylist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.VideoCapabilityList)
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* CallbackBody_onVideoSourceInitializeParams::release_videocapabilitylist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* temp = _impl_.videocapabilitylist_;
  _impl_.videocapabilitylist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* CallbackBody_onVideoSourceInitializeParams::unsafe_arena_release_videocapabilitylist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.VideoCapabilityList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* temp = _impl_.videocapabilitylist_;
  _impl_.videocapabilitylist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* CallbackBody_onVideoSourceInitializeParams::_internal_mutable_videocapabilitylist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.videocapabilitylist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList>(GetArenaForAllocation());
    _impl_.videocapabilitylist_ = p;
  }
  return _impl_.videocapabilitylist_;
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* CallbackBody_onVideoSourceInitializeParams::mutable_videocapabilitylist() {
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* _msg = _internal_mutable_videocapabilitylist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.VideoCapabilityList)
  return _msg;
}
inline void CallbackBody_onVideoSourceInitializeParams::set_allocated_videocapabilitylist(::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList* videocapabilitylist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.videocapabilitylist_;
  }
  if (videocapabilitylist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videocapabilitylist);
    if (message_arena != submessage_arena) {
      videocapabilitylist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videocapabilitylist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.videocapabilitylist_ = videocapabilitylist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.VideoCapabilityList)
}

// -------------------------------------------------------------------

// CallbackBody_onPropertyChangeParams

// optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
inline bool CallbackBody_onPropertyChangeParams::has_videocapability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.videocapability_ != nullptr);
  return value;
}
inline void CallbackBody_onPropertyChangeParams::clear_videocapability() {
  if (_impl_.videocapability_ != nullptr) _impl_.videocapability_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& CallbackBody_onPropertyChangeParams::_internal_videocapability() const {
  const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* p = _impl_.videocapability_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability&>(
      ::com::electron::zoomvideo::sdk::proto::_SDKVideoCapability_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& CallbackBody_onPropertyChangeParams::videocapability() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.VideoCapability)
  return _internal_videocapability();
}
inline void CallbackBody_onPropertyChangeParams::unsafe_arena_set_allocated_videocapability(
    ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* videocapability) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.videocapability_);
  }
  _impl_.videocapability_ = videocapability;
  if (videocapability) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.VideoCapability)
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* CallbackBody_onPropertyChangeParams::release_videocapability() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* temp = _impl_.videocapability_;
  _impl_.videocapability_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* CallbackBody_onPropertyChangeParams::unsafe_arena_release_videocapability() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.VideoCapability)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* temp = _impl_.videocapability_;
  _impl_.videocapability_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* CallbackBody_onPropertyChangeParams::_internal_mutable_videocapability() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.videocapability_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::SDKVideoCapability>(GetArenaForAllocation());
    _impl_.videocapability_ = p;
  }
  return _impl_.videocapability_;
}
inline ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* CallbackBody_onPropertyChangeParams::mutable_videocapability() {
  ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* _msg = _internal_mutable_videocapability();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.VideoCapability)
  return _msg;
}
inline void CallbackBody_onPropertyChangeParams::set_allocated_videocapability(::com::electron::zoomvideo::sdk::proto::SDKVideoCapability* videocapability) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.videocapability_;
  }
  if (videocapability) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(videocapability);
    if (message_arena != submessage_arena) {
      videocapability = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, videocapability, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.videocapability_ = videocapability;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.VideoCapability)
}

// -------------------------------------------------------------------

// CallbackBody_onRawDataStatusChangedParams

// optional int64 recv_handle = 1;
inline bool CallbackBody_onRawDataStatusChangedParams::has_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onRawDataStatusChangedParams::clear_recv_handle() {
  _impl_.recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t CallbackBody_onRawDataStatusChangedParams::recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.recv_handle)
  return _internal_recv_handle();
}
inline void CallbackBody_onRawDataStatusChangedParams::set_recv_handle(::int64_t value) {
  _internal_set_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.recv_handle)
}
inline ::int64_t CallbackBody_onRawDataStatusChangedParams::_internal_recv_handle() const {
  return _impl_.recv_handle_;
}
inline void CallbackBody_onRawDataStatusChangedParams::_internal_set_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.recv_handle_ = value;
}

// optional int32 status = 2;
inline bool CallbackBody_onRawDataStatusChangedParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onRawDataStatusChangedParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CallbackBody_onRawDataStatusChangedParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.status)
  return _internal_status();
}
inline void CallbackBody_onRawDataStatusChangedParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.status)
}
inline ::int32_t CallbackBody_onRawDataStatusChangedParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onRawDataStatusChangedParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onCommandReceivedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pSender = 1;
inline bool CallbackBody_onCommandReceivedParams::has_psender() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.psender_ != nullptr);
  return value;
}
inline void CallbackBody_onCommandReceivedParams::clear_psender() {
  if (_impl_.psender_ != nullptr) _impl_.psender_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCommandReceivedParams::_internal_psender() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.psender_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCommandReceivedParams::psender() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.pSender)
  return _internal_psender();
}
inline void CallbackBody_onCommandReceivedParams::unsafe_arena_set_allocated_psender(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* psender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.psender_);
  }
  _impl_.psender_ = psender;
  if (psender) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.pSender)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCommandReceivedParams::release_psender() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.psender_;
  _impl_.psender_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCommandReceivedParams::unsafe_arena_release_psender() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.pSender)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.psender_;
  _impl_.psender_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCommandReceivedParams::_internal_mutable_psender() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.psender_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.psender_ = p;
  }
  return _impl_.psender_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCommandReceivedParams::mutable_psender() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_psender();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.pSender)
  return _msg;
}
inline void CallbackBody_onCommandReceivedParams::set_allocated_psender(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* psender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.psender_;
  }
  if (psender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(psender);
    if (message_arena != submessage_arena) {
      psender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, psender, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.psender_ = psender;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.pSender)
}

// optional string strCmd = 2;
inline bool CallbackBody_onCommandReceivedParams::has_strcmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onCommandReceivedParams::clear_strcmd() {
  _impl_.strcmd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onCommandReceivedParams::strcmd() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.strCmd)
  return _internal_strcmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onCommandReceivedParams::set_strcmd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strcmd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.strCmd)
}
inline std::string* CallbackBody_onCommandReceivedParams::mutable_strcmd() {
  std::string* _s = _internal_mutable_strcmd();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.strCmd)
  return _s;
}
inline const std::string& CallbackBody_onCommandReceivedParams::_internal_strcmd() const {
  return _impl_.strcmd_.Get();
}
inline void CallbackBody_onCommandReceivedParams::_internal_set_strcmd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strcmd_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onCommandReceivedParams::_internal_mutable_strcmd() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strcmd_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onCommandReceivedParams::release_strcmd() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.strCmd)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strcmd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strcmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onCommandReceivedParams::set_allocated_strcmd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strcmd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strcmd_.IsDefault()) {
          _impl_.strcmd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.strCmd)
}

// -------------------------------------------------------------------

// CallbackBody_onCommandChannelConnectResultParams

// optional bool isSuccess = 1;
inline bool CallbackBody_onCommandChannelConnectResultParams::has_issuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onCommandChannelConnectResultParams::clear_issuccess() {
  _impl_.issuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CallbackBody_onCommandChannelConnectResultParams::issuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.isSuccess)
  return _internal_issuccess();
}
inline void CallbackBody_onCommandChannelConnectResultParams::set_issuccess(bool value) {
  _internal_set_issuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.isSuccess)
}
inline bool CallbackBody_onCommandChannelConnectResultParams::_internal_issuccess() const {
  return _impl_.issuccess_;
}
inline void CallbackBody_onCommandChannelConnectResultParams::_internal_set_issuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.issuccess_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onInviteByPhoneStatusParams

// optional int32 status = 1;
inline bool CallbackBody_onInviteByPhoneStatusParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onInviteByPhoneStatusParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onInviteByPhoneStatusParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.status)
  return _internal_status();
}
inline void CallbackBody_onInviteByPhoneStatusParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.status)
}
inline ::int32_t CallbackBody_onInviteByPhoneStatusParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onInviteByPhoneStatusParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_ = value;
}

// optional int32 reason = 2;
inline bool CallbackBody_onInviteByPhoneStatusParams::has_reason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onInviteByPhoneStatusParams::clear_reason() {
  _impl_.reason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CallbackBody_onInviteByPhoneStatusParams::reason() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.reason)
  return _internal_reason();
}
inline void CallbackBody_onInviteByPhoneStatusParams::set_reason(::int32_t value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.reason)
}
inline ::int32_t CallbackBody_onInviteByPhoneStatusParams::_internal_reason() const {
  return _impl_.reason_;
}
inline void CallbackBody_onInviteByPhoneStatusParams::_internal_set_reason(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.reason_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onCloudRecordingStatusParams

// optional int32 status = 1;
inline bool CallbackBody_onCloudRecordingStatusParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onCloudRecordingStatusParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onCloudRecordingStatusParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.status)
  return _internal_status();
}
inline void CallbackBody_onCloudRecordingStatusParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.status)
}
inline ::int32_t CallbackBody_onCloudRecordingStatusParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onCloudRecordingStatusParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onCameraControlRequestResultParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
inline bool CallbackBody_onCameraControlRequestResultParams::has_puser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.puser_ != nullptr);
  return value;
}
inline void CallbackBody_onCameraControlRequestResultParams::clear_puser() {
  if (_impl_.puser_ != nullptr) _impl_.puser_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCameraControlRequestResultParams::_internal_puser() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.puser_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCameraControlRequestResultParams::puser() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.pUser)
  return _internal_puser();
}
inline void CallbackBody_onCameraControlRequestResultParams::unsafe_arena_set_allocated_puser(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.puser_);
  }
  _impl_.puser_ = puser;
  if (puser) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.pUser)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestResultParams::release_puser() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestResultParams::unsafe_arena_release_puser() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.pUser)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestResultParams::_internal_mutable_puser() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.puser_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.puser_ = p;
  }
  return _impl_.puser_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestResultParams::mutable_puser() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_puser();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.pUser)
  return _msg;
}
inline void CallbackBody_onCameraControlRequestResultParams::set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.puser_;
  }
  if (puser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(puser);
    if (message_arena != submessage_arena) {
      puser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, puser, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.puser_ = puser;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.pUser)
}

// optional bool isApproved = 2;
inline bool CallbackBody_onCameraControlRequestResultParams::has_isapproved() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onCameraControlRequestResultParams::clear_isapproved() {
  _impl_.isapproved_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CallbackBody_onCameraControlRequestResultParams::isapproved() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.isApproved)
  return _internal_isapproved();
}
inline void CallbackBody_onCameraControlRequestResultParams::set_isapproved(bool value) {
  _internal_set_isapproved(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.isApproved)
}
inline bool CallbackBody_onCameraControlRequestResultParams::_internal_isapproved() const {
  return _impl_.isapproved_;
}
inline void CallbackBody_onCameraControlRequestResultParams::_internal_set_isapproved(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.isapproved_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onCameraControlRequestReceivedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
inline bool CallbackBody_onCameraControlRequestReceivedParams::has_puser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.puser_ != nullptr);
  return value;
}
inline void CallbackBody_onCameraControlRequestReceivedParams::clear_puser() {
  if (_impl_.puser_ != nullptr) _impl_.puser_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCameraControlRequestReceivedParams::_internal_puser() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.puser_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCameraControlRequestReceivedParams::puser() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.pUser)
  return _internal_puser();
}
inline void CallbackBody_onCameraControlRequestReceivedParams::unsafe_arena_set_allocated_puser(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.puser_);
  }
  _impl_.puser_ = puser;
  if (puser) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.pUser)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestReceivedParams::release_puser() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestReceivedParams::unsafe_arena_release_puser() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.pUser)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestReceivedParams::_internal_mutable_puser() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.puser_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.puser_ = p;
  }
  return _impl_.puser_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCameraControlRequestReceivedParams::mutable_puser() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_puser();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.pUser)
  return _msg;
}
inline void CallbackBody_onCameraControlRequestReceivedParams::set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.puser_;
  }
  if (puser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(puser);
    if (message_arena != submessage_arena) {
      puser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, puser, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.puser_ = puser;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.pUser)
}

// optional int32 requestType = 2;
inline bool CallbackBody_onCameraControlRequestReceivedParams::has_requesttype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onCameraControlRequestReceivedParams::clear_requesttype() {
  _impl_.requesttype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CallbackBody_onCameraControlRequestReceivedParams::requesttype() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.requestType)
  return _internal_requesttype();
}
inline void CallbackBody_onCameraControlRequestReceivedParams::set_requesttype(::int32_t value) {
  _internal_set_requesttype(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.requestType)
}
inline ::int32_t CallbackBody_onCameraControlRequestReceivedParams::_internal_requesttype() const {
  return _impl_.requesttype_;
}
inline void CallbackBody_onCameraControlRequestReceivedParams::_internal_set_requesttype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.requesttype_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onRemoteControlStatusParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
inline bool CallbackBody_onRemoteControlStatusParams::has_puser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.puser_ != nullptr);
  return value;
}
inline void CallbackBody_onRemoteControlStatusParams::clear_puser() {
  if (_impl_.puser_ != nullptr) _impl_.puser_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onRemoteControlStatusParams::_internal_puser() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.puser_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onRemoteControlStatusParams::puser() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.pUser)
  return _internal_puser();
}
inline void CallbackBody_onRemoteControlStatusParams::unsafe_arena_set_allocated_puser(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.puser_);
  }
  _impl_.puser_ = puser;
  if (puser) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.pUser)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlStatusParams::release_puser() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlStatusParams::unsafe_arena_release_puser() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.pUser)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlStatusParams::_internal_mutable_puser() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.puser_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.puser_ = p;
  }
  return _impl_.puser_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlStatusParams::mutable_puser() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_puser();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.pUser)
  return _msg;
}
inline void CallbackBody_onRemoteControlStatusParams::set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.puser_;
  }
  if (puser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(puser);
    if (message_arena != submessage_arena) {
      puser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, puser, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.puser_ = puser;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.pUser)
}

// optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
inline bool CallbackBody_onRemoteControlStatusParams::has_shareaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shareaction_ != nullptr);
  return value;
}
inline void CallbackBody_onRemoteControlStatusParams::clear_shareaction() {
  if (_impl_.shareaction_ != nullptr) _impl_.shareaction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& CallbackBody_onRemoteControlStatusParams::_internal_shareaction() const {
  const ::com::electron::zoomvideo::sdk::proto::ShareAction* p = _impl_.shareaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::ShareAction&>(
      ::com::electron::zoomvideo::sdk::proto::_ShareAction_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& CallbackBody_onRemoteControlStatusParams::shareaction() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.shareAction)
  return _internal_shareaction();
}
inline void CallbackBody_onRemoteControlStatusParams::unsafe_arena_set_allocated_shareaction(
    ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shareaction_);
  }
  _impl_.shareaction_ = shareaction;
  if (shareaction) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.shareAction)
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlStatusParams::release_shareaction() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* temp = _impl_.shareaction_;
  _impl_.shareaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlStatusParams::unsafe_arena_release_shareaction() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.shareAction)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* temp = _impl_.shareaction_;
  _impl_.shareaction_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlStatusParams::_internal_mutable_shareaction() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shareaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ShareAction>(GetArenaForAllocation());
    _impl_.shareaction_ = p;
  }
  return _impl_.shareaction_;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlStatusParams::mutable_shareaction() {
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _msg = _internal_mutable_shareaction();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.shareAction)
  return _msg;
}
inline void CallbackBody_onRemoteControlStatusParams::set_allocated_shareaction(::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shareaction_;
  }
  if (shareaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shareaction);
    if (message_arena != submessage_arena) {
      shareaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shareaction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shareaction_ = shareaction;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.shareAction)
}

// optional int32 status = 3;
inline bool CallbackBody_onRemoteControlStatusParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CallbackBody_onRemoteControlStatusParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CallbackBody_onRemoteControlStatusParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.status)
  return _internal_status();
}
inline void CallbackBody_onRemoteControlStatusParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.status)
}
inline ::int32_t CallbackBody_onRemoteControlStatusParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onRemoteControlStatusParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onRemoteControlRequestReceivedParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
inline bool CallbackBody_onRemoteControlRequestReceivedParams::has_puser() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.puser_ != nullptr);
  return value;
}
inline void CallbackBody_onRemoteControlRequestReceivedParams::clear_puser() {
  if (_impl_.puser_ != nullptr) _impl_.puser_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onRemoteControlRequestReceivedParams::_internal_puser() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.puser_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onRemoteControlRequestReceivedParams::puser() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.pUser)
  return _internal_puser();
}
inline void CallbackBody_onRemoteControlRequestReceivedParams::unsafe_arena_set_allocated_puser(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.puser_);
  }
  _impl_.puser_ = puser;
  if (puser) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.pUser)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlRequestReceivedParams::release_puser() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlRequestReceivedParams::unsafe_arena_release_puser() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.pUser)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.puser_;
  _impl_.puser_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlRequestReceivedParams::_internal_mutable_puser() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.puser_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.puser_ = p;
  }
  return _impl_.puser_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onRemoteControlRequestReceivedParams::mutable_puser() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_puser();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.pUser)
  return _msg;
}
inline void CallbackBody_onRemoteControlRequestReceivedParams::set_allocated_puser(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* puser) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.puser_;
  }
  if (puser) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(puser);
    if (message_arena != submessage_arena) {
      puser = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, puser, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.puser_ = puser;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.pUser)
}

// optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
inline bool CallbackBody_onRemoteControlRequestReceivedParams::has_shareaction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.shareaction_ != nullptr);
  return value;
}
inline void CallbackBody_onRemoteControlRequestReceivedParams::clear_shareaction() {
  if (_impl_.shareaction_ != nullptr) _impl_.shareaction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& CallbackBody_onRemoteControlRequestReceivedParams::_internal_shareaction() const {
  const ::com::electron::zoomvideo::sdk::proto::ShareAction* p = _impl_.shareaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::ShareAction&>(
      ::com::electron::zoomvideo::sdk::proto::_ShareAction_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::ShareAction& CallbackBody_onRemoteControlRequestReceivedParams::shareaction() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.shareAction)
  return _internal_shareaction();
}
inline void CallbackBody_onRemoteControlRequestReceivedParams::unsafe_arena_set_allocated_shareaction(
    ::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.shareaction_);
  }
  _impl_.shareaction_ = shareaction;
  if (shareaction) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.shareAction)
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlRequestReceivedParams::release_shareaction() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* temp = _impl_.shareaction_;
  _impl_.shareaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlRequestReceivedParams::unsafe_arena_release_shareaction() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.shareAction)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::ShareAction* temp = _impl_.shareaction_;
  _impl_.shareaction_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlRequestReceivedParams::_internal_mutable_shareaction() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.shareaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ShareAction>(GetArenaForAllocation());
    _impl_.shareaction_ = p;
  }
  return _impl_.shareaction_;
}
inline ::com::electron::zoomvideo::sdk::proto::ShareAction* CallbackBody_onRemoteControlRequestReceivedParams::mutable_shareaction() {
  ::com::electron::zoomvideo::sdk::proto::ShareAction* _msg = _internal_mutable_shareaction();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.shareAction)
  return _msg;
}
inline void CallbackBody_onRemoteControlRequestReceivedParams::set_allocated_shareaction(::com::electron::zoomvideo::sdk::proto::ShareAction* shareaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.shareaction_;
  }
  if (shareaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(shareaction);
    if (message_arena != submessage_arena) {
      shareaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shareaction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.shareaction_ = shareaction;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.shareAction)
}

// -------------------------------------------------------------------

// CallbackBody_onRemoteControlServiceInstallResultParams

// optional bool bSuccess = 1;
inline bool CallbackBody_onRemoteControlServiceInstallResultParams::has_bsuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onRemoteControlServiceInstallResultParams::clear_bsuccess() {
  _impl_.bsuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool CallbackBody_onRemoteControlServiceInstallResultParams::bsuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.bSuccess)
  return _internal_bsuccess();
}
inline void CallbackBody_onRemoteControlServiceInstallResultParams::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.bSuccess)
}
inline bool CallbackBody_onRemoteControlServiceInstallResultParams::_internal_bsuccess() const {
  return _impl_.bsuccess_;
}
inline void CallbackBody_onRemoteControlServiceInstallResultParams::_internal_set_bsuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.bsuccess_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onHostAskUnmuteParams

// -------------------------------------------------------------------

// CallbackBody_onMultiCameraStreamStatusChangedParams

// optional int32 status = 1;
inline bool CallbackBody_onMultiCameraStreamStatusChangedParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CallbackBody_onMultiCameraStreamStatusChangedParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.status)
  return _internal_status();
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.status)
}
inline ::int32_t CallbackBody_onMultiCameraStreamStatusChangedParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.status_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool CallbackBody_onMultiCameraStreamStatusChangedParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onMultiCameraStreamStatusChangedParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onMultiCameraStreamStatusChangedParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.user)
  return _internal_user();
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onMultiCameraStreamStatusChangedParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onMultiCameraStreamStatusChangedParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onMultiCameraStreamStatusChangedParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onMultiCameraStreamStatusChangedParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.user)
  return _msg;
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.user)
}

// optional int64 cameraStreamID = 3;
inline bool CallbackBody_onMultiCameraStreamStatusChangedParams::has_camerastreamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::clear_camerastreamid() {
  _impl_.camerastreamid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t CallbackBody_onMultiCameraStreamStatusChangedParams::camerastreamid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.cameraStreamID)
  return _internal_camerastreamid();
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::set_camerastreamid(::int64_t value) {
  _internal_set_camerastreamid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.cameraStreamID)
}
inline ::int64_t CallbackBody_onMultiCameraStreamStatusChangedParams::_internal_camerastreamid() const {
  return _impl_.camerastreamid_;
}
inline void CallbackBody_onMultiCameraStreamStatusChangedParams::_internal_set_camerastreamid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.camerastreamid_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onMicSpeakerVolumeChangedParams

// optional uint32 MicVolume = 1;
inline bool CallbackBody_onMicSpeakerVolumeChangedParams::has_micvolume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onMicSpeakerVolumeChangedParams::clear_micvolume() {
  _impl_.micvolume_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CallbackBody_onMicSpeakerVolumeChangedParams::micvolume() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.MicVolume)
  return _internal_micvolume();
}
inline void CallbackBody_onMicSpeakerVolumeChangedParams::set_micvolume(::uint32_t value) {
  _internal_set_micvolume(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.MicVolume)
}
inline ::uint32_t CallbackBody_onMicSpeakerVolumeChangedParams::_internal_micvolume() const {
  return _impl_.micvolume_;
}
inline void CallbackBody_onMicSpeakerVolumeChangedParams::_internal_set_micvolume(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.micvolume_ = value;
}

// optional uint32 SpeakerVolume = 2;
inline bool CallbackBody_onMicSpeakerVolumeChangedParams::has_speakervolume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onMicSpeakerVolumeChangedParams::clear_speakervolume() {
  _impl_.speakervolume_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CallbackBody_onMicSpeakerVolumeChangedParams::speakervolume() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.SpeakerVolume)
  return _internal_speakervolume();
}
inline void CallbackBody_onMicSpeakerVolumeChangedParams::set_speakervolume(::uint32_t value) {
  _internal_set_speakervolume(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.SpeakerVolume)
}
inline ::uint32_t CallbackBody_onMicSpeakerVolumeChangedParams::_internal_speakervolume() const {
  return _impl_.speakervolume_;
}
inline void CallbackBody_onMicSpeakerVolumeChangedParams::_internal_set_speakervolume(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.speakervolume_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onAudioDeviceStatusChangedParams

// optional int32 type = 1;
inline bool CallbackBody_onAudioDeviceStatusChangedParams::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onAudioDeviceStatusChangedParams::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onAudioDeviceStatusChangedParams::type() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.type)
  return _internal_type();
}
inline void CallbackBody_onAudioDeviceStatusChangedParams::set_type(::int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.type)
}
inline ::int32_t CallbackBody_onAudioDeviceStatusChangedParams::_internal_type() const {
  return _impl_.type_;
}
inline void CallbackBody_onAudioDeviceStatusChangedParams::_internal_set_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}

// optional int32 status = 2;
inline bool CallbackBody_onAudioDeviceStatusChangedParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onAudioDeviceStatusChangedParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CallbackBody_onAudioDeviceStatusChangedParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.status)
  return _internal_status();
}
inline void CallbackBody_onAudioDeviceStatusChangedParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.status)
}
inline ::int32_t CallbackBody_onAudioDeviceStatusChangedParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onAudioDeviceStatusChangedParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onTestMicStatusChangedParams

// optional int32 status = 1;
inline bool CallbackBody_onTestMicStatusChangedParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onTestMicStatusChangedParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onTestMicStatusChangedParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.status)
  return _internal_status();
}
inline void CallbackBody_onTestMicStatusChangedParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.status)
}
inline ::int32_t CallbackBody_onTestMicStatusChangedParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onTestMicStatusChangedParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onSelectedAudioDeviceChangedParams

// -------------------------------------------------------------------

// CallbackBody_onLiveTranscriptionStatusParams

// optional int32 status = 1;
inline bool CallbackBody_onLiveTranscriptionStatusParams::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onLiveTranscriptionStatusParams::clear_status() {
  _impl_.status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onLiveTranscriptionStatusParams::status() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.status)
  return _internal_status();
}
inline void CallbackBody_onLiveTranscriptionStatusParams::set_status(::int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.status)
}
inline ::int32_t CallbackBody_onLiveTranscriptionStatusParams::_internal_status() const {
  return _impl_.status_;
}
inline void CallbackBody_onLiveTranscriptionStatusParams::_internal_set_status(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onLiveTranscriptionMsgErrorParams

// optional .com.electron.zoomvideo.sdk.proto.LTTLanguage spokenLanguage = 1;
inline bool CallbackBody_onLiveTranscriptionMsgErrorParams::has_spokenlanguage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spokenlanguage_ != nullptr);
  return value;
}
inline void CallbackBody_onLiveTranscriptionMsgErrorParams::clear_spokenlanguage() {
  if (_impl_.spokenlanguage_ != nullptr) _impl_.spokenlanguage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& CallbackBody_onLiveTranscriptionMsgErrorParams::_internal_spokenlanguage() const {
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage* p = _impl_.spokenlanguage_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::LTTLanguage&>(
      ::com::electron::zoomvideo::sdk::proto::_LTTLanguage_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& CallbackBody_onLiveTranscriptionMsgErrorParams::spokenlanguage() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.spokenLanguage)
  return _internal_spokenlanguage();
}
inline void CallbackBody_onLiveTranscriptionMsgErrorParams::unsafe_arena_set_allocated_spokenlanguage(
    ::com::electron::zoomvideo::sdk::proto::LTTLanguage* spokenlanguage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spokenlanguage_);
  }
  _impl_.spokenlanguage_ = spokenlanguage;
  if (spokenlanguage) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.spokenLanguage)
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::release_spokenlanguage() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* temp = _impl_.spokenlanguage_;
  _impl_.spokenlanguage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::unsafe_arena_release_spokenlanguage() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.spokenLanguage)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* temp = _impl_.spokenlanguage_;
  _impl_.spokenlanguage_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::_internal_mutable_spokenlanguage() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.spokenlanguage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LTTLanguage>(GetArenaForAllocation());
    _impl_.spokenlanguage_ = p;
  }
  return _impl_.spokenlanguage_;
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::mutable_spokenlanguage() {
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* _msg = _internal_mutable_spokenlanguage();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.spokenLanguage)
  return _msg;
}
inline void CallbackBody_onLiveTranscriptionMsgErrorParams::set_allocated_spokenlanguage(::com::electron::zoomvideo::sdk::proto::LTTLanguage* spokenlanguage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spokenlanguage_;
  }
  if (spokenlanguage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spokenlanguage);
    if (message_arena != submessage_arena) {
      spokenlanguage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spokenlanguage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.spokenlanguage_ = spokenlanguage;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.spokenLanguage)
}

// optional .com.electron.zoomvideo.sdk.proto.LTTLanguage transcriptLanguage = 2;
inline bool CallbackBody_onLiveTranscriptionMsgErrorParams::has_transcriptlanguage() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transcriptlanguage_ != nullptr);
  return value;
}
inline void CallbackBody_onLiveTranscriptionMsgErrorParams::clear_transcriptlanguage() {
  if (_impl_.transcriptlanguage_ != nullptr) _impl_.transcriptlanguage_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& CallbackBody_onLiveTranscriptionMsgErrorParams::_internal_transcriptlanguage() const {
  const ::com::electron::zoomvideo::sdk::proto::LTTLanguage* p = _impl_.transcriptlanguage_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::LTTLanguage&>(
      ::com::electron::zoomvideo::sdk::proto::_LTTLanguage_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& CallbackBody_onLiveTranscriptionMsgErrorParams::transcriptlanguage() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.transcriptLanguage)
  return _internal_transcriptlanguage();
}
inline void CallbackBody_onLiveTranscriptionMsgErrorParams::unsafe_arena_set_allocated_transcriptlanguage(
    ::com::electron::zoomvideo::sdk::proto::LTTLanguage* transcriptlanguage) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transcriptlanguage_);
  }
  _impl_.transcriptlanguage_ = transcriptlanguage;
  if (transcriptlanguage) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.transcriptLanguage)
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::release_transcriptlanguage() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* temp = _impl_.transcriptlanguage_;
  _impl_.transcriptlanguage_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::unsafe_arena_release_transcriptlanguage() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.transcriptLanguage)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* temp = _impl_.transcriptlanguage_;
  _impl_.transcriptlanguage_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::_internal_mutable_transcriptlanguage() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.transcriptlanguage_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::LTTLanguage>(GetArenaForAllocation());
    _impl_.transcriptlanguage_ = p;
  }
  return _impl_.transcriptlanguage_;
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* CallbackBody_onLiveTranscriptionMsgErrorParams::mutable_transcriptlanguage() {
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* _msg = _internal_mutable_transcriptlanguage();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.transcriptLanguage)
  return _msg;
}
inline void CallbackBody_onLiveTranscriptionMsgErrorParams::set_allocated_transcriptlanguage(::com::electron::zoomvideo::sdk::proto::LTTLanguage* transcriptlanguage) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transcriptlanguage_;
  }
  if (transcriptlanguage) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transcriptlanguage);
    if (message_arena != submessage_arena) {
      transcriptlanguage = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transcriptlanguage, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.transcriptlanguage_ = transcriptlanguage;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.transcriptLanguage)
}

// -------------------------------------------------------------------

// CallbackBody_liveTranscriptionMsgInfoParams

// optional int64 timeStamp = 1;
inline bool CallbackBody_liveTranscriptionMsgInfoParams::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::clear_timestamp() {
  _impl_.timestamp_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int64_t CallbackBody_liveTranscriptionMsgInfoParams::timestamp() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.timeStamp)
  return _internal_timestamp();
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::set_timestamp(::int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.timeStamp)
}
inline ::int64_t CallbackBody_liveTranscriptionMsgInfoParams::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::_internal_set_timestamp(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.timestamp_ = value;
}

// optional string messageID = 2;
inline bool CallbackBody_liveTranscriptionMsgInfoParams::has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::messageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageID)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_liveTranscriptionMsgInfoParams::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageID)
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageID)
  return _s;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::_internal_set_messageid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::_internal_mutable_messageid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.messageid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::release_messageid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.messageid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::set_allocated_messageid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.messageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageID)
}

// optional string messageContent = 3;
inline bool CallbackBody_liveTranscriptionMsgInfoParams::has_messagecontent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::clear_messagecontent() {
  _impl_.messagecontent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::messagecontent() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageContent)
  return _internal_messagecontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_liveTranscriptionMsgInfoParams::set_messagecontent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.messagecontent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageContent)
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::mutable_messagecontent() {
  std::string* _s = _internal_mutable_messagecontent();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageContent)
  return _s;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::_internal_messagecontent() const {
  return _impl_.messagecontent_.Get();
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::_internal_set_messagecontent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.messagecontent_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::_internal_mutable_messagecontent() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.messagecontent_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::release_messagecontent() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageContent)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.messagecontent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messagecontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::set_allocated_messagecontent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.messagecontent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messagecontent_.IsDefault()) {
          _impl_.messagecontent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageContent)
}

// optional string speakerName = 4;
inline bool CallbackBody_liveTranscriptionMsgInfoParams::has_speakername() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::clear_speakername() {
  _impl_.speakername_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::speakername() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerName)
  return _internal_speakername();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_liveTranscriptionMsgInfoParams::set_speakername(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.speakername_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerName)
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::mutable_speakername() {
  std::string* _s = _internal_mutable_speakername();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerName)
  return _s;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::_internal_speakername() const {
  return _impl_.speakername_.Get();
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::_internal_set_speakername(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.speakername_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::_internal_mutable_speakername() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.speakername_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::release_speakername() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerName)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.speakername_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.speakername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::set_allocated_speakername(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.speakername_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.speakername_.IsDefault()) {
          _impl_.speakername_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerName)
}

// optional string speakerID = 5;
inline bool CallbackBody_liveTranscriptionMsgInfoParams::has_speakerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::clear_speakerid() {
  _impl_.speakerid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::speakerid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerID)
  return _internal_speakerid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_liveTranscriptionMsgInfoParams::set_speakerid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.speakerid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerID)
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::mutable_speakerid() {
  std::string* _s = _internal_mutable_speakerid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerID)
  return _s;
}
inline const std::string& CallbackBody_liveTranscriptionMsgInfoParams::_internal_speakerid() const {
  return _impl_.speakerid_.Get();
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::_internal_set_speakerid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.speakerid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::_internal_mutable_speakerid() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.speakerid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_liveTranscriptionMsgInfoParams::release_speakerid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerID)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.speakerid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.speakerid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::set_allocated_speakerid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.speakerid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.speakerid_.IsDefault()) {
          _impl_.speakerid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.speakerID)
}

// optional int32 messageType = 6;
inline bool CallbackBody_liveTranscriptionMsgInfoParams::has_messagetype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::clear_messagetype() {
  _impl_.messagetype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t CallbackBody_liveTranscriptionMsgInfoParams::messagetype() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageType)
  return _internal_messagetype();
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::set_messagetype(::int32_t value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.messageType)
}
inline ::int32_t CallbackBody_liveTranscriptionMsgInfoParams::_internal_messagetype() const {
  return _impl_.messagetype_;
}
inline void CallbackBody_liveTranscriptionMsgInfoParams::_internal_set_messagetype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.messagetype_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onCalloutJoinSuccessParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool CallbackBody_onCalloutJoinSuccessParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void CallbackBody_onCalloutJoinSuccessParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCalloutJoinSuccessParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& CallbackBody_onCalloutJoinSuccessParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.user)
  return _internal_user();
}
inline void CallbackBody_onCalloutJoinSuccessParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCalloutJoinSuccessParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCalloutJoinSuccessParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCalloutJoinSuccessParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* CallbackBody_onCalloutJoinSuccessParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.user)
  return _msg;
}
inline void CallbackBody_onCalloutJoinSuccessParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.user)
}

// optional string phoneNumber = 2;
inline bool CallbackBody_onCalloutJoinSuccessParams::has_phonenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onCalloutJoinSuccessParams::clear_phonenumber() {
  _impl_.phonenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onCalloutJoinSuccessParams::phonenumber() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.phoneNumber)
  return _internal_phonenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onCalloutJoinSuccessParams::set_phonenumber(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.phonenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.phoneNumber)
}
inline std::string* CallbackBody_onCalloutJoinSuccessParams::mutable_phonenumber() {
  std::string* _s = _internal_mutable_phonenumber();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.phoneNumber)
  return _s;
}
inline const std::string& CallbackBody_onCalloutJoinSuccessParams::_internal_phonenumber() const {
  return _impl_.phonenumber_.Get();
}
inline void CallbackBody_onCalloutJoinSuccessParams::_internal_set_phonenumber(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.phonenumber_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onCalloutJoinSuccessParams::_internal_mutable_phonenumber() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.phonenumber_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onCalloutJoinSuccessParams::release_phonenumber() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.phoneNumber)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.phonenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onCalloutJoinSuccessParams::set_allocated_phonenumber(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.phonenumber_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenumber_.IsDefault()) {
          _impl_.phonenumber_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.phoneNumber)
}

// -------------------------------------------------------------------

// CallbackBody_onSessionLeaveParams

// optional int32 eReason = 1;
inline bool CallbackBody_onSessionLeaveParams::has_ereason() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onSessionLeaveParams::clear_ereason() {
  _impl_.ereason_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CallbackBody_onSessionLeaveParams::ereason() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.eReason)
  return _internal_ereason();
}
inline void CallbackBody_onSessionLeaveParams::set_ereason(::int32_t value) {
  _internal_set_ereason(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.eReason)
}
inline ::int32_t CallbackBody_onSessionLeaveParams::_internal_ereason() const {
  return _impl_.ereason_;
}
inline void CallbackBody_onSessionLeaveParams::_internal_set_ereason(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.ereason_ = value;
}

// -------------------------------------------------------------------

// CallbackBody_onShareCursorDataReceivedParams

// optional .com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData info = 1;
inline bool CallbackBody_onShareCursorDataReceivedParams::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.info_ != nullptr);
  return value;
}
inline void CallbackBody_onShareCursorDataReceivedParams::clear_info() {
  if (_impl_.info_ != nullptr) _impl_.info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData& CallbackBody_onShareCursorDataReceivedParams::_internal_info() const {
  const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* p = _impl_.info_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData&>(
      ::com::electron::zoomvideo::sdk::proto::_ZoomVideoSDKShareCursorData_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData& CallbackBody_onShareCursorDataReceivedParams::info() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.info)
  return _internal_info();
}
inline void CallbackBody_onShareCursorDataReceivedParams::unsafe_arena_set_allocated_info(
    ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.info_);
  }
  _impl_.info_ = info;
  if (info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.info)
}
inline ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* CallbackBody_onShareCursorDataReceivedParams::release_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* temp = _impl_.info_;
  _impl_.info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* CallbackBody_onShareCursorDataReceivedParams::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* temp = _impl_.info_;
  _impl_.info_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* CallbackBody_onShareCursorDataReceivedParams::_internal_mutable_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData>(GetArenaForAllocation());
    _impl_.info_ = p;
  }
  return _impl_.info_;
}
inline ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* CallbackBody_onShareCursorDataReceivedParams::mutable_info() {
  ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.info)
  return _msg;
}
inline void CallbackBody_onShareCursorDataReceivedParams::set_allocated_info(::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_ = info;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.info)
}

// -------------------------------------------------------------------

// CallbackBody_onSpotlightVideoChangedParams

// optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
inline bool CallbackBody_onSpotlightVideoChangedParams::has_zn_userlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_userlist_ != nullptr);
  return value;
}
inline void CallbackBody_onSpotlightVideoChangedParams::clear_zn_userlist() {
  if (_impl_.zn_userlist_ != nullptr) _impl_.zn_userlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onSpotlightVideoChangedParams::_internal_zn_userlist() const {
  const ::com::electron::zoomvideo::sdk::proto::UserList* p = _impl_.zn_userlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::UserList&>(
      ::com::electron::zoomvideo::sdk::proto::_UserList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::UserList& CallbackBody_onSpotlightVideoChangedParams::zn_userlist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.zn_userList)
  return _internal_zn_userlist();
}
inline void CallbackBody_onSpotlightVideoChangedParams::unsafe_arena_set_allocated_zn_userlist(
    ::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_userlist_);
  }
  _impl_.zn_userlist_ = zn_userlist;
  if (zn_userlist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.zn_userList)
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onSpotlightVideoChangedParams::release_zn_userlist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onSpotlightVideoChangedParams::unsafe_arena_release_zn_userlist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.zn_userList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::UserList* temp = _impl_.zn_userlist_;
  _impl_.zn_userlist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onSpotlightVideoChangedParams::_internal_mutable_zn_userlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_userlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::UserList>(GetArenaForAllocation());
    _impl_.zn_userlist_ = p;
  }
  return _impl_.zn_userlist_;
}
inline ::com::electron::zoomvideo::sdk::proto::UserList* CallbackBody_onSpotlightVideoChangedParams::mutable_zn_userlist() {
  ::com::electron::zoomvideo::sdk::proto::UserList* _msg = _internal_mutable_zn_userlist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.zn_userList)
  return _msg;
}
inline void CallbackBody_onSpotlightVideoChangedParams::set_allocated_zn_userlist(::com::electron::zoomvideo::sdk::proto::UserList* zn_userlist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_userlist_;
  }
  if (zn_userlist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_userlist);
    if (message_arena != submessage_arena) {
      zn_userlist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_userlist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_userlist_ = zn_userlist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.zn_userList)
}

// -------------------------------------------------------------------

// CallbackBody_onBindIncomingLiveStreamResponseParams

// optional bool bSuccess = 1;
inline bool CallbackBody_onBindIncomingLiveStreamResponseParams::has_bsuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onBindIncomingLiveStreamResponseParams::clear_bsuccess() {
  _impl_.bsuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CallbackBody_onBindIncomingLiveStreamResponseParams::bsuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.bSuccess)
  return _internal_bsuccess();
}
inline void CallbackBody_onBindIncomingLiveStreamResponseParams::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.bSuccess)
}
inline bool CallbackBody_onBindIncomingLiveStreamResponseParams::_internal_bsuccess() const {
  return _impl_.bsuccess_;
}
inline void CallbackBody_onBindIncomingLiveStreamResponseParams::_internal_set_bsuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsuccess_ = value;
}

// optional string strStreamKeyID = 2;
inline bool CallbackBody_onBindIncomingLiveStreamResponseParams::has_strstreamkeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onBindIncomingLiveStreamResponseParams::clear_strstreamkeyid() {
  _impl_.strstreamkeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onBindIncomingLiveStreamResponseParams::strstreamkeyid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.strStreamKeyID)
  return _internal_strstreamkeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onBindIncomingLiveStreamResponseParams::set_strstreamkeyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strstreamkeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.strStreamKeyID)
}
inline std::string* CallbackBody_onBindIncomingLiveStreamResponseParams::mutable_strstreamkeyid() {
  std::string* _s = _internal_mutable_strstreamkeyid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.strStreamKeyID)
  return _s;
}
inline const std::string& CallbackBody_onBindIncomingLiveStreamResponseParams::_internal_strstreamkeyid() const {
  return _impl_.strstreamkeyid_.Get();
}
inline void CallbackBody_onBindIncomingLiveStreamResponseParams::_internal_set_strstreamkeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strstreamkeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onBindIncomingLiveStreamResponseParams::_internal_mutable_strstreamkeyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strstreamkeyid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onBindIncomingLiveStreamResponseParams::release_strstreamkeyid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.strStreamKeyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strstreamkeyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onBindIncomingLiveStreamResponseParams::set_allocated_strstreamkeyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strstreamkeyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strstreamkeyid_.IsDefault()) {
          _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.strStreamKeyID)
}

// -------------------------------------------------------------------

// CallbackBody_onUnbindIncomingLiveStreamResponseParams

// optional bool bSuccess = 1;
inline bool CallbackBody_onUnbindIncomingLiveStreamResponseParams::has_bsuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::clear_bsuccess() {
  _impl_.bsuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CallbackBody_onUnbindIncomingLiveStreamResponseParams::bsuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.bSuccess)
  return _internal_bsuccess();
}
inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.bSuccess)
}
inline bool CallbackBody_onUnbindIncomingLiveStreamResponseParams::_internal_bsuccess() const {
  return _impl_.bsuccess_;
}
inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::_internal_set_bsuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsuccess_ = value;
}

// optional string strStreamKeyID = 2;
inline bool CallbackBody_onUnbindIncomingLiveStreamResponseParams::has_strstreamkeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::clear_strstreamkeyid() {
  _impl_.strstreamkeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onUnbindIncomingLiveStreamResponseParams::strstreamkeyid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.strStreamKeyID)
  return _internal_strstreamkeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onUnbindIncomingLiveStreamResponseParams::set_strstreamkeyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strstreamkeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.strStreamKeyID)
}
inline std::string* CallbackBody_onUnbindIncomingLiveStreamResponseParams::mutable_strstreamkeyid() {
  std::string* _s = _internal_mutable_strstreamkeyid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.strStreamKeyID)
  return _s;
}
inline const std::string& CallbackBody_onUnbindIncomingLiveStreamResponseParams::_internal_strstreamkeyid() const {
  return _impl_.strstreamkeyid_.Get();
}
inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::_internal_set_strstreamkeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strstreamkeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onUnbindIncomingLiveStreamResponseParams::_internal_mutable_strstreamkeyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strstreamkeyid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onUnbindIncomingLiveStreamResponseParams::release_strstreamkeyid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.strStreamKeyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strstreamkeyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::set_allocated_strstreamkeyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strstreamkeyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strstreamkeyid_.IsDefault()) {
          _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.strStreamKeyID)
}

// -------------------------------------------------------------------

// CallbackBody_onIncomingLiveStreamStatusResponseParams

// optional bool bSuccess = 1;
inline bool CallbackBody_onIncomingLiveStreamStatusResponseParams::has_bsuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::clear_bsuccess() {
  _impl_.bsuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CallbackBody_onIncomingLiveStreamStatusResponseParams::bsuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.bSuccess)
  return _internal_bsuccess();
}
inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.bSuccess)
}
inline bool CallbackBody_onIncomingLiveStreamStatusResponseParams::_internal_bsuccess() const {
  return _impl_.bsuccess_;
}
inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::_internal_set_bsuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsuccess_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList pStreamsStatusList = 2;
inline bool CallbackBody_onIncomingLiveStreamStatusResponseParams::has_pstreamsstatuslist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pstreamsstatuslist_ != nullptr);
  return value;
}
inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::clear_pstreamsstatuslist() {
  if (_impl_.pstreamsstatuslist_ != nullptr) _impl_.pstreamsstatuslist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList& CallbackBody_onIncomingLiveStreamStatusResponseParams::_internal_pstreamsstatuslist() const {
  const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* p = _impl_.pstreamsstatuslist_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList&>(
      ::com::electron::zoomvideo::sdk::proto::_IncomingLiveStreamStatusList_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList& CallbackBody_onIncomingLiveStreamStatusResponseParams::pstreamsstatuslist() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.pStreamsStatusList)
  return _internal_pstreamsstatuslist();
}
inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::unsafe_arena_set_allocated_pstreamsstatuslist(
    ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* pstreamsstatuslist) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pstreamsstatuslist_);
  }
  _impl_.pstreamsstatuslist_ = pstreamsstatuslist;
  if (pstreamsstatuslist) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.pStreamsStatusList)
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* CallbackBody_onIncomingLiveStreamStatusResponseParams::release_pstreamsstatuslist() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* temp = _impl_.pstreamsstatuslist_;
  _impl_.pstreamsstatuslist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* CallbackBody_onIncomingLiveStreamStatusResponseParams::unsafe_arena_release_pstreamsstatuslist() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.pStreamsStatusList)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* temp = _impl_.pstreamsstatuslist_;
  _impl_.pstreamsstatuslist_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* CallbackBody_onIncomingLiveStreamStatusResponseParams::_internal_mutable_pstreamsstatuslist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.pstreamsstatuslist_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList>(GetArenaForAllocation());
    _impl_.pstreamsstatuslist_ = p;
  }
  return _impl_.pstreamsstatuslist_;
}
inline ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* CallbackBody_onIncomingLiveStreamStatusResponseParams::mutable_pstreamsstatuslist() {
  ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* _msg = _internal_mutable_pstreamsstatuslist();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.pStreamsStatusList)
  return _msg;
}
inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::set_allocated_pstreamsstatuslist(::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList* pstreamsstatuslist) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.pstreamsstatuslist_;
  }
  if (pstreamsstatuslist) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pstreamsstatuslist);
    if (message_arena != submessage_arena) {
      pstreamsstatuslist = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pstreamsstatuslist, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.pstreamsstatuslist_ = pstreamsstatuslist;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.pStreamsStatusList)
}

// -------------------------------------------------------------------

// CallbackBody_onStartIncomingLiveStreamResponseParams

// optional bool bSuccess = 1;
inline bool CallbackBody_onStartIncomingLiveStreamResponseParams::has_bsuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onStartIncomingLiveStreamResponseParams::clear_bsuccess() {
  _impl_.bsuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CallbackBody_onStartIncomingLiveStreamResponseParams::bsuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.bSuccess)
  return _internal_bsuccess();
}
inline void CallbackBody_onStartIncomingLiveStreamResponseParams::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.bSuccess)
}
inline bool CallbackBody_onStartIncomingLiveStreamResponseParams::_internal_bsuccess() const {
  return _impl_.bsuccess_;
}
inline void CallbackBody_onStartIncomingLiveStreamResponseParams::_internal_set_bsuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsuccess_ = value;
}

// optional string strStreamKeyID = 2;
inline bool CallbackBody_onStartIncomingLiveStreamResponseParams::has_strstreamkeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onStartIncomingLiveStreamResponseParams::clear_strstreamkeyid() {
  _impl_.strstreamkeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onStartIncomingLiveStreamResponseParams::strstreamkeyid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.strStreamKeyID)
  return _internal_strstreamkeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onStartIncomingLiveStreamResponseParams::set_strstreamkeyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strstreamkeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.strStreamKeyID)
}
inline std::string* CallbackBody_onStartIncomingLiveStreamResponseParams::mutable_strstreamkeyid() {
  std::string* _s = _internal_mutable_strstreamkeyid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.strStreamKeyID)
  return _s;
}
inline const std::string& CallbackBody_onStartIncomingLiveStreamResponseParams::_internal_strstreamkeyid() const {
  return _impl_.strstreamkeyid_.Get();
}
inline void CallbackBody_onStartIncomingLiveStreamResponseParams::_internal_set_strstreamkeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strstreamkeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onStartIncomingLiveStreamResponseParams::_internal_mutable_strstreamkeyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strstreamkeyid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onStartIncomingLiveStreamResponseParams::release_strstreamkeyid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.strStreamKeyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strstreamkeyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onStartIncomingLiveStreamResponseParams::set_allocated_strstreamkeyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strstreamkeyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strstreamkeyid_.IsDefault()) {
          _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.strStreamKeyID)
}

// -------------------------------------------------------------------

// CallbackBody_onStopIncomingLiveStreamResponseParams

// optional bool bSuccess = 1;
inline bool CallbackBody_onStopIncomingLiveStreamResponseParams::has_bsuccess() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CallbackBody_onStopIncomingLiveStreamResponseParams::clear_bsuccess() {
  _impl_.bsuccess_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool CallbackBody_onStopIncomingLiveStreamResponseParams::bsuccess() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.bSuccess)
  return _internal_bsuccess();
}
inline void CallbackBody_onStopIncomingLiveStreamResponseParams::set_bsuccess(bool value) {
  _internal_set_bsuccess(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.bSuccess)
}
inline bool CallbackBody_onStopIncomingLiveStreamResponseParams::_internal_bsuccess() const {
  return _impl_.bsuccess_;
}
inline void CallbackBody_onStopIncomingLiveStreamResponseParams::_internal_set_bsuccess(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.bsuccess_ = value;
}

// optional string strStreamKeyID = 2;
inline bool CallbackBody_onStopIncomingLiveStreamResponseParams::has_strstreamkeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CallbackBody_onStopIncomingLiveStreamResponseParams::clear_strstreamkeyid() {
  _impl_.strstreamkeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CallbackBody_onStopIncomingLiveStreamResponseParams::strstreamkeyid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.strStreamKeyID)
  return _internal_strstreamkeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CallbackBody_onStopIncomingLiveStreamResponseParams::set_strstreamkeyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strstreamkeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.strStreamKeyID)
}
inline std::string* CallbackBody_onStopIncomingLiveStreamResponseParams::mutable_strstreamkeyid() {
  std::string* _s = _internal_mutable_strstreamkeyid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.strStreamKeyID)
  return _s;
}
inline const std::string& CallbackBody_onStopIncomingLiveStreamResponseParams::_internal_strstreamkeyid() const {
  return _impl_.strstreamkeyid_.Get();
}
inline void CallbackBody_onStopIncomingLiveStreamResponseParams::_internal_set_strstreamkeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strstreamkeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* CallbackBody_onStopIncomingLiveStreamResponseParams::_internal_mutable_strstreamkeyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strstreamkeyid_.Mutable( GetArenaForAllocation());
}
inline std::string* CallbackBody_onStopIncomingLiveStreamResponseParams::release_strstreamkeyid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.strStreamKeyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strstreamkeyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CallbackBody_onStopIncomingLiveStreamResponseParams::set_allocated_strstreamkeyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strstreamkeyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strstreamkeyid_.IsDefault()) {
          _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.strStreamKeyID)
}

// -------------------------------------------------------------------

// CallbackBody

// optional int32 msgtype = 1;
inline bool CallbackBody::has_msgtype() const {
  bool value = (_impl_._has_bits_[1] & 0x00001000u) != 0;
  return value;
}
inline void CallbackBody::clear_msgtype() {
  _impl_.msgtype_ = 0;
  _impl_._has_bits_[1] &= ~0x00001000u;
}
inline ::int32_t CallbackBody::msgtype() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.msgtype)
  return _internal_msgtype();
}
inline void CallbackBody::set_msgtype(::int32_t value) {
  _internal_set_msgtype(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CallbackBody.msgtype)
}
inline ::int32_t CallbackBody::_internal_msgtype() const {
  return _impl_.msgtype_;
}
inline void CallbackBody::_internal_set_msgtype(::int32_t value) {
  _impl_._has_bits_[1] |= 0x00001000u;
  _impl_.msgtype_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams onErrorParam = 2;
inline bool CallbackBody::has_onerrorparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onerrorparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onerrorparam() {
  if (_impl_.onerrorparam_ != nullptr) _impl_.onerrorparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams& CallbackBody::_internal_onerrorparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* p = _impl_.onerrorparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onErrorParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams& CallbackBody::onerrorparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParam)
  return _internal_onerrorparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onerrorparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* onerrorparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onerrorparam_);
  }
  _impl_.onerrorparam_ = onerrorparam;
  if (onerrorparam) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* CallbackBody::release_onerrorparam() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* temp = _impl_.onerrorparam_;
  _impl_.onerrorparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* CallbackBody::unsafe_arena_release_onerrorparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParam)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* temp = _impl_.onerrorparam_;
  _impl_.onerrorparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* CallbackBody::_internal_mutable_onerrorparam() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.onerrorparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams>(GetArenaForAllocation());
    _impl_.onerrorparam_ = p;
  }
  return _impl_.onerrorparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* CallbackBody::mutable_onerrorparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* _msg = _internal_mutable_onerrorparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onerrorparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams* onerrorparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onerrorparam_;
  }
  if (onerrorparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onerrorparam);
    if (message_arena != submessage_arena) {
      onerrorparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onerrorparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.onerrorparam_ = onerrorparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams onUserJoinParam = 3;
inline bool CallbackBody::has_onuserjoinparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onuserjoinparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onuserjoinparam() {
  if (_impl_.onuserjoinparam_ != nullptr) _impl_.onuserjoinparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams& CallbackBody::_internal_onuserjoinparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* p = _impl_.onuserjoinparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserJoinParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams& CallbackBody::onuserjoinparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParam)
  return _internal_onuserjoinparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onuserjoinparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* onuserjoinparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onuserjoinparam_);
  }
  _impl_.onuserjoinparam_ = onuserjoinparam;
  if (onuserjoinparam) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* CallbackBody::release_onuserjoinparam() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* temp = _impl_.onuserjoinparam_;
  _impl_.onuserjoinparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* CallbackBody::unsafe_arena_release_onuserjoinparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParam)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* temp = _impl_.onuserjoinparam_;
  _impl_.onuserjoinparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* CallbackBody::_internal_mutable_onuserjoinparam() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.onuserjoinparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams>(GetArenaForAllocation());
    _impl_.onuserjoinparam_ = p;
  }
  return _impl_.onuserjoinparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* CallbackBody::mutable_onuserjoinparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* _msg = _internal_mutable_onuserjoinparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onuserjoinparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams* onuserjoinparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onuserjoinparam_;
  }
  if (onuserjoinparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onuserjoinparam);
    if (message_arena != submessage_arena) {
      onuserjoinparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuserjoinparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.onuserjoinparam_ = onuserjoinparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams onUserLeaveParam = 4;
inline bool CallbackBody::has_onuserleaveparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onuserleaveparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onuserleaveparam() {
  if (_impl_.onuserleaveparam_ != nullptr) _impl_.onuserleaveparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams& CallbackBody::_internal_onuserleaveparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* p = _impl_.onuserleaveparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserLeaveParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams& CallbackBody::onuserleaveparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParam)
  return _internal_onuserleaveparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onuserleaveparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* onuserleaveparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onuserleaveparam_);
  }
  _impl_.onuserleaveparam_ = onuserleaveparam;
  if (onuserleaveparam) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* CallbackBody::release_onuserleaveparam() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* temp = _impl_.onuserleaveparam_;
  _impl_.onuserleaveparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* CallbackBody::unsafe_arena_release_onuserleaveparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParam)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* temp = _impl_.onuserleaveparam_;
  _impl_.onuserleaveparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* CallbackBody::_internal_mutable_onuserleaveparam() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.onuserleaveparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams>(GetArenaForAllocation());
    _impl_.onuserleaveparam_ = p;
  }
  return _impl_.onuserleaveparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* CallbackBody::mutable_onuserleaveparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* _msg = _internal_mutable_onuserleaveparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onuserleaveparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams* onuserleaveparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onuserleaveparam_;
  }
  if (onuserleaveparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onuserleaveparam);
    if (message_arena != submessage_arena) {
      onuserleaveparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuserleaveparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.onuserleaveparam_ = onuserleaveparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams onUserVideoStatusChangedParam = 5;
inline bool CallbackBody::has_onuservideostatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onuservideostatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onuservideostatuschangedparam() {
  if (_impl_.onuservideostatuschangedparam_ != nullptr) _impl_.onuservideostatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams& CallbackBody::_internal_onuservideostatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* p = _impl_.onuservideostatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserVideoStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams& CallbackBody::onuservideostatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParam)
  return _internal_onuservideostatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onuservideostatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* onuservideostatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onuservideostatuschangedparam_);
  }
  _impl_.onuservideostatuschangedparam_ = onuservideostatuschangedparam;
  if (onuservideostatuschangedparam) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* CallbackBody::release_onuservideostatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* temp = _impl_.onuservideostatuschangedparam_;
  _impl_.onuservideostatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* CallbackBody::unsafe_arena_release_onuservideostatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* temp = _impl_.onuservideostatuschangedparam_;
  _impl_.onuservideostatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* CallbackBody::_internal_mutable_onuservideostatuschangedparam() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.onuservideostatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams>(GetArenaForAllocation());
    _impl_.onuservideostatuschangedparam_ = p;
  }
  return _impl_.onuservideostatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* CallbackBody::mutable_onuservideostatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* _msg = _internal_mutable_onuservideostatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onuservideostatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams* onuservideostatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onuservideostatuschangedparam_;
  }
  if (onuservideostatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onuservideostatuschangedparam);
    if (message_arena != submessage_arena) {
      onuservideostatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuservideostatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.onuservideostatuschangedparam_ = onuservideostatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams onUserAudioStatusChangedParam = 6;
inline bool CallbackBody::has_onuseraudiostatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onuseraudiostatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onuseraudiostatuschangedparam() {
  if (_impl_.onuseraudiostatuschangedparam_ != nullptr) _impl_.onuseraudiostatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams& CallbackBody::_internal_onuseraudiostatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* p = _impl_.onuseraudiostatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserAudioStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams& CallbackBody::onuseraudiostatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParam)
  return _internal_onuseraudiostatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onuseraudiostatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* onuseraudiostatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onuseraudiostatuschangedparam_);
  }
  _impl_.onuseraudiostatuschangedparam_ = onuseraudiostatuschangedparam;
  if (onuseraudiostatuschangedparam) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* CallbackBody::release_onuseraudiostatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* temp = _impl_.onuseraudiostatuschangedparam_;
  _impl_.onuseraudiostatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* CallbackBody::unsafe_arena_release_onuseraudiostatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* temp = _impl_.onuseraudiostatuschangedparam_;
  _impl_.onuseraudiostatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* CallbackBody::_internal_mutable_onuseraudiostatuschangedparam() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.onuseraudiostatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams>(GetArenaForAllocation());
    _impl_.onuseraudiostatuschangedparam_ = p;
  }
  return _impl_.onuseraudiostatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* CallbackBody::mutable_onuseraudiostatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* _msg = _internal_mutable_onuseraudiostatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onuseraudiostatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams* onuseraudiostatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onuseraudiostatuschangedparam_;
  }
  if (onuseraudiostatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onuseraudiostatuschangedparam);
    if (message_arena != submessage_arena) {
      onuseraudiostatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuseraudiostatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.onuseraudiostatuschangedparam_ = onuseraudiostatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams onUserShareStatusChangedParam = 7;
inline bool CallbackBody::has_onusersharestatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onusersharestatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onusersharestatuschangedparam() {
  if (_impl_.onusersharestatuschangedparam_ != nullptr) _impl_.onusersharestatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams& CallbackBody::_internal_onusersharestatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* p = _impl_.onusersharestatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserShareStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams& CallbackBody::onusersharestatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParam)
  return _internal_onusersharestatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onusersharestatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* onusersharestatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onusersharestatuschangedparam_);
  }
  _impl_.onusersharestatuschangedparam_ = onusersharestatuschangedparam;
  if (onusersharestatuschangedparam) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* CallbackBody::release_onusersharestatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* temp = _impl_.onusersharestatuschangedparam_;
  _impl_.onusersharestatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* CallbackBody::unsafe_arena_release_onusersharestatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* temp = _impl_.onusersharestatuschangedparam_;
  _impl_.onusersharestatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* CallbackBody::_internal_mutable_onusersharestatuschangedparam() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.onusersharestatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams>(GetArenaForAllocation());
    _impl_.onusersharestatuschangedparam_ = p;
  }
  return _impl_.onusersharestatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* CallbackBody::mutable_onusersharestatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* _msg = _internal_mutable_onusersharestatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onusersharestatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams* onusersharestatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onusersharestatuschangedparam_;
  }
  if (onusersharestatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onusersharestatuschangedparam);
    if (message_arena != submessage_arena) {
      onusersharestatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onusersharestatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.onusersharestatuschangedparam_ = onusersharestatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams onLiveStreamStatusChangedParam = 8;
inline bool CallbackBody::has_onlivestreamstatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onlivestreamstatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onlivestreamstatuschangedparam() {
  if (_impl_.onlivestreamstatuschangedparam_ != nullptr) _impl_.onlivestreamstatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams& CallbackBody::_internal_onlivestreamstatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* p = _impl_.onlivestreamstatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onLiveStreamStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams& CallbackBody::onlivestreamstatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParam)
  return _internal_onlivestreamstatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onlivestreamstatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* onlivestreamstatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onlivestreamstatuschangedparam_);
  }
  _impl_.onlivestreamstatuschangedparam_ = onlivestreamstatuschangedparam;
  if (onlivestreamstatuschangedparam) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* CallbackBody::release_onlivestreamstatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* temp = _impl_.onlivestreamstatuschangedparam_;
  _impl_.onlivestreamstatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* CallbackBody::unsafe_arena_release_onlivestreamstatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* temp = _impl_.onlivestreamstatuschangedparam_;
  _impl_.onlivestreamstatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* CallbackBody::_internal_mutable_onlivestreamstatuschangedparam() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.onlivestreamstatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams>(GetArenaForAllocation());
    _impl_.onlivestreamstatuschangedparam_ = p;
  }
  return _impl_.onlivestreamstatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* CallbackBody::mutable_onlivestreamstatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* _msg = _internal_mutable_onlivestreamstatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onlivestreamstatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams* onlivestreamstatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onlivestreamstatuschangedparam_;
  }
  if (onlivestreamstatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onlivestreamstatuschangedparam);
    if (message_arena != submessage_arena) {
      onlivestreamstatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onlivestreamstatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.onlivestreamstatuschangedparam_ = onlivestreamstatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams onUserHostChangedParam = 9;
inline bool CallbackBody::has_onuserhostchangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onuserhostchangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onuserhostchangedparam() {
  if (_impl_.onuserhostchangedparam_ != nullptr) _impl_.onuserhostchangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams& CallbackBody::_internal_onuserhostchangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* p = _impl_.onuserhostchangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserHostChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams& CallbackBody::onuserhostchangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParam)
  return _internal_onuserhostchangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onuserhostchangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* onuserhostchangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onuserhostchangedparam_);
  }
  _impl_.onuserhostchangedparam_ = onuserhostchangedparam;
  if (onuserhostchangedparam) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* CallbackBody::release_onuserhostchangedparam() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* temp = _impl_.onuserhostchangedparam_;
  _impl_.onuserhostchangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* CallbackBody::unsafe_arena_release_onuserhostchangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParam)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* temp = _impl_.onuserhostchangedparam_;
  _impl_.onuserhostchangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* CallbackBody::_internal_mutable_onuserhostchangedparam() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.onuserhostchangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams>(GetArenaForAllocation());
    _impl_.onuserhostchangedparam_ = p;
  }
  return _impl_.onuserhostchangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* CallbackBody::mutable_onuserhostchangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* _msg = _internal_mutable_onuserhostchangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onuserhostchangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams* onuserhostchangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onuserhostchangedparam_;
  }
  if (onuserhostchangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onuserhostchangedparam);
    if (message_arena != submessage_arena) {
      onuserhostchangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuserhostchangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.onuserhostchangedparam_ = onuserhostchangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams onUserActiveAudioChangedParam = 10;
inline bool CallbackBody::has_onuseractiveaudiochangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onuseractiveaudiochangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onuseractiveaudiochangedparam() {
  if (_impl_.onuseractiveaudiochangedparam_ != nullptr) _impl_.onuseractiveaudiochangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams& CallbackBody::_internal_onuseractiveaudiochangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* p = _impl_.onuseractiveaudiochangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserActiveAudioChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams& CallbackBody::onuseractiveaudiochangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParam)
  return _internal_onuseractiveaudiochangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onuseractiveaudiochangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* onuseractiveaudiochangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onuseractiveaudiochangedparam_);
  }
  _impl_.onuseractiveaudiochangedparam_ = onuseractiveaudiochangedparam;
  if (onuseractiveaudiochangedparam) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* CallbackBody::release_onuseractiveaudiochangedparam() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* temp = _impl_.onuseractiveaudiochangedparam_;
  _impl_.onuseractiveaudiochangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* CallbackBody::unsafe_arena_release_onuseractiveaudiochangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParam)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* temp = _impl_.onuseractiveaudiochangedparam_;
  _impl_.onuseractiveaudiochangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* CallbackBody::_internal_mutable_onuseractiveaudiochangedparam() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.onuseractiveaudiochangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams>(GetArenaForAllocation());
    _impl_.onuseractiveaudiochangedparam_ = p;
  }
  return _impl_.onuseractiveaudiochangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* CallbackBody::mutable_onuseractiveaudiochangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* _msg = _internal_mutable_onuseractiveaudiochangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onuseractiveaudiochangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams* onuseractiveaudiochangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onuseractiveaudiochangedparam_;
  }
  if (onuseractiveaudiochangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onuseractiveaudiochangedparam);
    if (message_arena != submessage_arena) {
      onuseractiveaudiochangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onuseractiveaudiochangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.onuseractiveaudiochangedparam_ = onuseractiveaudiochangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams onChatNewMessageNotifyParam = 11;
inline bool CallbackBody::has_onchatnewmessagenotifyparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onchatnewmessagenotifyparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onchatnewmessagenotifyparam() {
  if (_impl_.onchatnewmessagenotifyparam_ != nullptr) _impl_.onchatnewmessagenotifyparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams& CallbackBody::_internal_onchatnewmessagenotifyparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* p = _impl_.onchatnewmessagenotifyparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onChatNewMessageNotifyParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams& CallbackBody::onchatnewmessagenotifyparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParam)
  return _internal_onchatnewmessagenotifyparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onchatnewmessagenotifyparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* onchatnewmessagenotifyparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onchatnewmessagenotifyparam_);
  }
  _impl_.onchatnewmessagenotifyparam_ = onchatnewmessagenotifyparam;
  if (onchatnewmessagenotifyparam) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* CallbackBody::release_onchatnewmessagenotifyparam() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* temp = _impl_.onchatnewmessagenotifyparam_;
  _impl_.onchatnewmessagenotifyparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* CallbackBody::unsafe_arena_release_onchatnewmessagenotifyparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParam)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* temp = _impl_.onchatnewmessagenotifyparam_;
  _impl_.onchatnewmessagenotifyparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* CallbackBody::_internal_mutable_onchatnewmessagenotifyparam() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.onchatnewmessagenotifyparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams>(GetArenaForAllocation());
    _impl_.onchatnewmessagenotifyparam_ = p;
  }
  return _impl_.onchatnewmessagenotifyparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* CallbackBody::mutable_onchatnewmessagenotifyparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* _msg = _internal_mutable_onchatnewmessagenotifyparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onchatnewmessagenotifyparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams* onchatnewmessagenotifyparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onchatnewmessagenotifyparam_;
  }
  if (onchatnewmessagenotifyparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onchatnewmessagenotifyparam);
    if (message_arena != submessage_arena) {
      onchatnewmessagenotifyparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onchatnewmessagenotifyparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.onchatnewmessagenotifyparam_ = onchatnewmessagenotifyparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams onVideoSourceInitializeParam = 12;
inline bool CallbackBody::has_onvideosourceinitializeparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onvideosourceinitializeparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onvideosourceinitializeparam() {
  if (_impl_.onvideosourceinitializeparam_ != nullptr) _impl_.onvideosourceinitializeparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams& CallbackBody::_internal_onvideosourceinitializeparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* p = _impl_.onvideosourceinitializeparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onVideoSourceInitializeParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams& CallbackBody::onvideosourceinitializeparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParam)
  return _internal_onvideosourceinitializeparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onvideosourceinitializeparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* onvideosourceinitializeparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onvideosourceinitializeparam_);
  }
  _impl_.onvideosourceinitializeparam_ = onvideosourceinitializeparam;
  if (onvideosourceinitializeparam) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* CallbackBody::release_onvideosourceinitializeparam() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* temp = _impl_.onvideosourceinitializeparam_;
  _impl_.onvideosourceinitializeparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* CallbackBody::unsafe_arena_release_onvideosourceinitializeparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParam)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* temp = _impl_.onvideosourceinitializeparam_;
  _impl_.onvideosourceinitializeparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* CallbackBody::_internal_mutable_onvideosourceinitializeparam() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.onvideosourceinitializeparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams>(GetArenaForAllocation());
    _impl_.onvideosourceinitializeparam_ = p;
  }
  return _impl_.onvideosourceinitializeparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* CallbackBody::mutable_onvideosourceinitializeparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* _msg = _internal_mutable_onvideosourceinitializeparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onvideosourceinitializeparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams* onvideosourceinitializeparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onvideosourceinitializeparam_;
  }
  if (onvideosourceinitializeparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onvideosourceinitializeparam);
    if (message_arena != submessage_arena) {
      onvideosourceinitializeparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onvideosourceinitializeparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.onvideosourceinitializeparam_ = onvideosourceinitializeparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams onPropertyChangeParam = 13;
inline bool CallbackBody::has_onpropertychangeparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onpropertychangeparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onpropertychangeparam() {
  if (_impl_.onpropertychangeparam_ != nullptr) _impl_.onpropertychangeparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams& CallbackBody::_internal_onpropertychangeparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* p = _impl_.onpropertychangeparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onPropertyChangeParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams& CallbackBody::onpropertychangeparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParam)
  return _internal_onpropertychangeparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onpropertychangeparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* onpropertychangeparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onpropertychangeparam_);
  }
  _impl_.onpropertychangeparam_ = onpropertychangeparam;
  if (onpropertychangeparam) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* CallbackBody::release_onpropertychangeparam() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* temp = _impl_.onpropertychangeparam_;
  _impl_.onpropertychangeparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* CallbackBody::unsafe_arena_release_onpropertychangeparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParam)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* temp = _impl_.onpropertychangeparam_;
  _impl_.onpropertychangeparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* CallbackBody::_internal_mutable_onpropertychangeparam() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.onpropertychangeparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams>(GetArenaForAllocation());
    _impl_.onpropertychangeparam_ = p;
  }
  return _impl_.onpropertychangeparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* CallbackBody::mutable_onpropertychangeparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* _msg = _internal_mutable_onpropertychangeparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onpropertychangeparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams* onpropertychangeparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onpropertychangeparam_;
  }
  if (onpropertychangeparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onpropertychangeparam);
    if (message_arena != submessage_arena) {
      onpropertychangeparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onpropertychangeparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.onpropertychangeparam_ = onpropertychangeparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams onRawDataStatusChangedParam = 14;
inline bool CallbackBody::has_onrawdatastatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onrawdatastatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onrawdatastatuschangedparam() {
  if (_impl_.onrawdatastatuschangedparam_ != nullptr) _impl_.onrawdatastatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams& CallbackBody::_internal_onrawdatastatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* p = _impl_.onrawdatastatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onRawDataStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams& CallbackBody::onrawdatastatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParam)
  return _internal_onrawdatastatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onrawdatastatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* onrawdatastatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onrawdatastatuschangedparam_);
  }
  _impl_.onrawdatastatuschangedparam_ = onrawdatastatuschangedparam;
  if (onrawdatastatuschangedparam) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* CallbackBody::release_onrawdatastatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* temp = _impl_.onrawdatastatuschangedparam_;
  _impl_.onrawdatastatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* CallbackBody::unsafe_arena_release_onrawdatastatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* temp = _impl_.onrawdatastatuschangedparam_;
  _impl_.onrawdatastatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* CallbackBody::_internal_mutable_onrawdatastatuschangedparam() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.onrawdatastatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams>(GetArenaForAllocation());
    _impl_.onrawdatastatuschangedparam_ = p;
  }
  return _impl_.onrawdatastatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* CallbackBody::mutable_onrawdatastatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* _msg = _internal_mutable_onrawdatastatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onrawdatastatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams* onrawdatastatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onrawdatastatuschangedparam_;
  }
  if (onrawdatastatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onrawdatastatuschangedparam);
    if (message_arena != submessage_arena) {
      onrawdatastatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onrawdatastatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.onrawdatastatuschangedparam_ = onrawdatastatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams onUserManagerChangedParam = 15;
inline bool CallbackBody::has_onusermanagerchangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onusermanagerchangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onusermanagerchangedparam() {
  if (_impl_.onusermanagerchangedparam_ != nullptr) _impl_.onusermanagerchangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams& CallbackBody::_internal_onusermanagerchangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* p = _impl_.onusermanagerchangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserManagerChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams& CallbackBody::onusermanagerchangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParam)
  return _internal_onusermanagerchangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onusermanagerchangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* onusermanagerchangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onusermanagerchangedparam_);
  }
  _impl_.onusermanagerchangedparam_ = onusermanagerchangedparam;
  if (onusermanagerchangedparam) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* CallbackBody::release_onusermanagerchangedparam() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* temp = _impl_.onusermanagerchangedparam_;
  _impl_.onusermanagerchangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* CallbackBody::unsafe_arena_release_onusermanagerchangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParam)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* temp = _impl_.onusermanagerchangedparam_;
  _impl_.onusermanagerchangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* CallbackBody::_internal_mutable_onusermanagerchangedparam() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.onusermanagerchangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams>(GetArenaForAllocation());
    _impl_.onusermanagerchangedparam_ = p;
  }
  return _impl_.onusermanagerchangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* CallbackBody::mutable_onusermanagerchangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* _msg = _internal_mutable_onusermanagerchangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onusermanagerchangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams* onusermanagerchangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onusermanagerchangedparam_;
  }
  if (onusermanagerchangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onusermanagerchangedparam);
    if (message_arena != submessage_arena) {
      onusermanagerchangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onusermanagerchangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.onusermanagerchangedparam_ = onusermanagerchangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams onUserNameChangedParam = 16;
inline bool CallbackBody::has_onusernamechangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onusernamechangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onusernamechangedparam() {
  if (_impl_.onusernamechangedparam_ != nullptr) _impl_.onusernamechangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams& CallbackBody::_internal_onusernamechangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* p = _impl_.onusernamechangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUserNameChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams& CallbackBody::onusernamechangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParam)
  return _internal_onusernamechangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onusernamechangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* onusernamechangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onusernamechangedparam_);
  }
  _impl_.onusernamechangedparam_ = onusernamechangedparam;
  if (onusernamechangedparam) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* CallbackBody::release_onusernamechangedparam() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* temp = _impl_.onusernamechangedparam_;
  _impl_.onusernamechangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* CallbackBody::unsafe_arena_release_onusernamechangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParam)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* temp = _impl_.onusernamechangedparam_;
  _impl_.onusernamechangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* CallbackBody::_internal_mutable_onusernamechangedparam() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.onusernamechangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams>(GetArenaForAllocation());
    _impl_.onusernamechangedparam_ = p;
  }
  return _impl_.onusernamechangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* CallbackBody::mutable_onusernamechangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* _msg = _internal_mutable_onusernamechangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onusernamechangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams* onusernamechangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onusernamechangedparam_;
  }
  if (onusernamechangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onusernamechangedparam);
    if (message_arena != submessage_arena) {
      onusernamechangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onusernamechangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.onusernamechangedparam_ = onusernamechangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams onCommandReceivedParam = 17;
inline bool CallbackBody::has_oncommandreceivedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oncommandreceivedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oncommandreceivedparam() {
  if (_impl_.oncommandreceivedparam_ != nullptr) _impl_.oncommandreceivedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams& CallbackBody::_internal_oncommandreceivedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* p = _impl_.oncommandreceivedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onCommandReceivedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams& CallbackBody::oncommandreceivedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParam)
  return _internal_oncommandreceivedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oncommandreceivedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* oncommandreceivedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oncommandreceivedparam_);
  }
  _impl_.oncommandreceivedparam_ = oncommandreceivedparam;
  if (oncommandreceivedparam) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* CallbackBody::release_oncommandreceivedparam() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* temp = _impl_.oncommandreceivedparam_;
  _impl_.oncommandreceivedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* CallbackBody::unsafe_arena_release_oncommandreceivedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParam)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* temp = _impl_.oncommandreceivedparam_;
  _impl_.oncommandreceivedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* CallbackBody::_internal_mutable_oncommandreceivedparam() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.oncommandreceivedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams>(GetArenaForAllocation());
    _impl_.oncommandreceivedparam_ = p;
  }
  return _impl_.oncommandreceivedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* CallbackBody::mutable_oncommandreceivedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* _msg = _internal_mutable_oncommandreceivedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oncommandreceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams* oncommandreceivedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oncommandreceivedparam_;
  }
  if (oncommandreceivedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oncommandreceivedparam);
    if (message_arena != submessage_arena) {
      oncommandreceivedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oncommandreceivedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.oncommandreceivedparam_ = oncommandreceivedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams onCloudRecordingStatusParam = 18;
inline bool CallbackBody::has_oncloudrecordingstatusparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oncloudrecordingstatusparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oncloudrecordingstatusparam() {
  if (_impl_.oncloudrecordingstatusparam_ != nullptr) _impl_.oncloudrecordingstatusparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams& CallbackBody::_internal_oncloudrecordingstatusparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* p = _impl_.oncloudrecordingstatusparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onCloudRecordingStatusParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams& CallbackBody::oncloudrecordingstatusparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParam)
  return _internal_oncloudrecordingstatusparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oncloudrecordingstatusparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* oncloudrecordingstatusparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oncloudrecordingstatusparam_);
  }
  _impl_.oncloudrecordingstatusparam_ = oncloudrecordingstatusparam;
  if (oncloudrecordingstatusparam) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* CallbackBody::release_oncloudrecordingstatusparam() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* temp = _impl_.oncloudrecordingstatusparam_;
  _impl_.oncloudrecordingstatusparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* CallbackBody::unsafe_arena_release_oncloudrecordingstatusparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParam)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* temp = _impl_.oncloudrecordingstatusparam_;
  _impl_.oncloudrecordingstatusparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* CallbackBody::_internal_mutable_oncloudrecordingstatusparam() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.oncloudrecordingstatusparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams>(GetArenaForAllocation());
    _impl_.oncloudrecordingstatusparam_ = p;
  }
  return _impl_.oncloudrecordingstatusparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* CallbackBody::mutable_oncloudrecordingstatusparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* _msg = _internal_mutable_oncloudrecordingstatusparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oncloudrecordingstatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams* oncloudrecordingstatusparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oncloudrecordingstatusparam_;
  }
  if (oncloudrecordingstatusparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oncloudrecordingstatusparam);
    if (message_arena != submessage_arena) {
      oncloudrecordingstatusparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oncloudrecordingstatusparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.oncloudrecordingstatusparam_ = oncloudrecordingstatusparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams onCameraControlRequestResultParam = 19;
inline bool CallbackBody::has_oncameracontrolrequestresultparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oncameracontrolrequestresultparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oncameracontrolrequestresultparam() {
  if (_impl_.oncameracontrolrequestresultparam_ != nullptr) _impl_.oncameracontrolrequestresultparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams& CallbackBody::_internal_oncameracontrolrequestresultparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* p = _impl_.oncameracontrolrequestresultparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onCameraControlRequestResultParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams& CallbackBody::oncameracontrolrequestresultparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParam)
  return _internal_oncameracontrolrequestresultparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oncameracontrolrequestresultparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* oncameracontrolrequestresultparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oncameracontrolrequestresultparam_);
  }
  _impl_.oncameracontrolrequestresultparam_ = oncameracontrolrequestresultparam;
  if (oncameracontrolrequestresultparam) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* CallbackBody::release_oncameracontrolrequestresultparam() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* temp = _impl_.oncameracontrolrequestresultparam_;
  _impl_.oncameracontrolrequestresultparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* CallbackBody::unsafe_arena_release_oncameracontrolrequestresultparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParam)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* temp = _impl_.oncameracontrolrequestresultparam_;
  _impl_.oncameracontrolrequestresultparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* CallbackBody::_internal_mutable_oncameracontrolrequestresultparam() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.oncameracontrolrequestresultparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams>(GetArenaForAllocation());
    _impl_.oncameracontrolrequestresultparam_ = p;
  }
  return _impl_.oncameracontrolrequestresultparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* CallbackBody::mutable_oncameracontrolrequestresultparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* _msg = _internal_mutable_oncameracontrolrequestresultparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oncameracontrolrequestresultparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams* oncameracontrolrequestresultparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oncameracontrolrequestresultparam_;
  }
  if (oncameracontrolrequestresultparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oncameracontrolrequestresultparam);
    if (message_arena != submessage_arena) {
      oncameracontrolrequestresultparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oncameracontrolrequestresultparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.oncameracontrolrequestresultparam_ = oncameracontrolrequestresultparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams onCameraControlRequestReceivedParam = 20;
inline bool CallbackBody::has_oncameracontrolrequestreceivedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oncameracontrolrequestreceivedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oncameracontrolrequestreceivedparam() {
  if (_impl_.oncameracontrolrequestreceivedparam_ != nullptr) _impl_.oncameracontrolrequestreceivedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams& CallbackBody::_internal_oncameracontrolrequestreceivedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* p = _impl_.oncameracontrolrequestreceivedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onCameraControlRequestReceivedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams& CallbackBody::oncameracontrolrequestreceivedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParam)
  return _internal_oncameracontrolrequestreceivedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oncameracontrolrequestreceivedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* oncameracontrolrequestreceivedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oncameracontrolrequestreceivedparam_);
  }
  _impl_.oncameracontrolrequestreceivedparam_ = oncameracontrolrequestreceivedparam;
  if (oncameracontrolrequestreceivedparam) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* CallbackBody::release_oncameracontrolrequestreceivedparam() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* temp = _impl_.oncameracontrolrequestreceivedparam_;
  _impl_.oncameracontrolrequestreceivedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* CallbackBody::unsafe_arena_release_oncameracontrolrequestreceivedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParam)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* temp = _impl_.oncameracontrolrequestreceivedparam_;
  _impl_.oncameracontrolrequestreceivedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* CallbackBody::_internal_mutable_oncameracontrolrequestreceivedparam() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.oncameracontrolrequestreceivedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams>(GetArenaForAllocation());
    _impl_.oncameracontrolrequestreceivedparam_ = p;
  }
  return _impl_.oncameracontrolrequestreceivedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* CallbackBody::mutable_oncameracontrolrequestreceivedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* _msg = _internal_mutable_oncameracontrolrequestreceivedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oncameracontrolrequestreceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams* oncameracontrolrequestreceivedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oncameracontrolrequestreceivedparam_;
  }
  if (oncameracontrolrequestreceivedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oncameracontrolrequestreceivedparam);
    if (message_arena != submessage_arena) {
      oncameracontrolrequestreceivedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oncameracontrolrequestreceivedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.oncameracontrolrequestreceivedparam_ = oncameracontrolrequestreceivedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams onCommandChannelConnectResultParam = 21;
inline bool CallbackBody::has_oncommandchannelconnectresultparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oncommandchannelconnectresultparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oncommandchannelconnectresultparam() {
  if (_impl_.oncommandchannelconnectresultparam_ != nullptr) _impl_.oncommandchannelconnectresultparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams& CallbackBody::_internal_oncommandchannelconnectresultparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* p = _impl_.oncommandchannelconnectresultparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onCommandChannelConnectResultParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams& CallbackBody::oncommandchannelconnectresultparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParam)
  return _internal_oncommandchannelconnectresultparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oncommandchannelconnectresultparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* oncommandchannelconnectresultparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oncommandchannelconnectresultparam_);
  }
  _impl_.oncommandchannelconnectresultparam_ = oncommandchannelconnectresultparam;
  if (oncommandchannelconnectresultparam) {
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* CallbackBody::release_oncommandchannelconnectresultparam() {
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* temp = _impl_.oncommandchannelconnectresultparam_;
  _impl_.oncommandchannelconnectresultparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* CallbackBody::unsafe_arena_release_oncommandchannelconnectresultparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParam)
  _impl_._has_bits_[0] &= ~0x00080000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* temp = _impl_.oncommandchannelconnectresultparam_;
  _impl_.oncommandchannelconnectresultparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* CallbackBody::_internal_mutable_oncommandchannelconnectresultparam() {
  _impl_._has_bits_[0] |= 0x00080000u;
  if (_impl_.oncommandchannelconnectresultparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams>(GetArenaForAllocation());
    _impl_.oncommandchannelconnectresultparam_ = p;
  }
  return _impl_.oncommandchannelconnectresultparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* CallbackBody::mutable_oncommandchannelconnectresultparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* _msg = _internal_mutable_oncommandchannelconnectresultparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oncommandchannelconnectresultparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams* oncommandchannelconnectresultparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oncommandchannelconnectresultparam_;
  }
  if (oncommandchannelconnectresultparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oncommandchannelconnectresultparam);
    if (message_arena != submessage_arena) {
      oncommandchannelconnectresultparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oncommandchannelconnectresultparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00080000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00080000u;
  }
  _impl_.oncommandchannelconnectresultparam_ = oncommandchannelconnectresultparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams onHostAskUnmuteParam = 22;
inline bool CallbackBody::has_onhostaskunmuteparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onhostaskunmuteparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onhostaskunmuteparam() {
  if (_impl_.onhostaskunmuteparam_ != nullptr) _impl_.onhostaskunmuteparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams& CallbackBody::_internal_onhostaskunmuteparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* p = _impl_.onhostaskunmuteparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onHostAskUnmuteParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams& CallbackBody::onhostaskunmuteparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParam)
  return _internal_onhostaskunmuteparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onhostaskunmuteparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* onhostaskunmuteparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onhostaskunmuteparam_);
  }
  _impl_.onhostaskunmuteparam_ = onhostaskunmuteparam;
  if (onhostaskunmuteparam) {
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* CallbackBody::release_onhostaskunmuteparam() {
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* temp = _impl_.onhostaskunmuteparam_;
  _impl_.onhostaskunmuteparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* CallbackBody::unsafe_arena_release_onhostaskunmuteparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParam)
  _impl_._has_bits_[0] &= ~0x00100000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* temp = _impl_.onhostaskunmuteparam_;
  _impl_.onhostaskunmuteparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* CallbackBody::_internal_mutable_onhostaskunmuteparam() {
  _impl_._has_bits_[0] |= 0x00100000u;
  if (_impl_.onhostaskunmuteparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams>(GetArenaForAllocation());
    _impl_.onhostaskunmuteparam_ = p;
  }
  return _impl_.onhostaskunmuteparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* CallbackBody::mutable_onhostaskunmuteparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* _msg = _internal_mutable_onhostaskunmuteparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onhostaskunmuteparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams* onhostaskunmuteparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onhostaskunmuteparam_;
  }
  if (onhostaskunmuteparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onhostaskunmuteparam);
    if (message_arena != submessage_arena) {
      onhostaskunmuteparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onhostaskunmuteparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00100000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00100000u;
  }
  _impl_.onhostaskunmuteparam_ = onhostaskunmuteparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams onInviteByPhoneStatusParam = 23;
inline bool CallbackBody::has_oninvitebyphonestatusparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oninvitebyphonestatusparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oninvitebyphonestatusparam() {
  if (_impl_.oninvitebyphonestatusparam_ != nullptr) _impl_.oninvitebyphonestatusparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams& CallbackBody::_internal_oninvitebyphonestatusparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* p = _impl_.oninvitebyphonestatusparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onInviteByPhoneStatusParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams& CallbackBody::oninvitebyphonestatusparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParam)
  return _internal_oninvitebyphonestatusparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oninvitebyphonestatusparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* oninvitebyphonestatusparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oninvitebyphonestatusparam_);
  }
  _impl_.oninvitebyphonestatusparam_ = oninvitebyphonestatusparam;
  if (oninvitebyphonestatusparam) {
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* CallbackBody::release_oninvitebyphonestatusparam() {
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* temp = _impl_.oninvitebyphonestatusparam_;
  _impl_.oninvitebyphonestatusparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* CallbackBody::unsafe_arena_release_oninvitebyphonestatusparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParam)
  _impl_._has_bits_[0] &= ~0x00200000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* temp = _impl_.oninvitebyphonestatusparam_;
  _impl_.oninvitebyphonestatusparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* CallbackBody::_internal_mutable_oninvitebyphonestatusparam() {
  _impl_._has_bits_[0] |= 0x00200000u;
  if (_impl_.oninvitebyphonestatusparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams>(GetArenaForAllocation());
    _impl_.oninvitebyphonestatusparam_ = p;
  }
  return _impl_.oninvitebyphonestatusparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* CallbackBody::mutable_oninvitebyphonestatusparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* _msg = _internal_mutable_oninvitebyphonestatusparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oninvitebyphonestatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams* oninvitebyphonestatusparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oninvitebyphonestatusparam_;
  }
  if (oninvitebyphonestatusparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oninvitebyphonestatusparam);
    if (message_arena != submessage_arena) {
      oninvitebyphonestatusparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oninvitebyphonestatusparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00200000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00200000u;
  }
  _impl_.oninvitebyphonestatusparam_ = oninvitebyphonestatusparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParam = 24;
inline bool CallbackBody::has_onmulticamerastreamstatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onmulticamerastreamstatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onmulticamerastreamstatuschangedparam() {
  if (_impl_.onmulticamerastreamstatuschangedparam_ != nullptr) _impl_.onmulticamerastreamstatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams& CallbackBody::_internal_onmulticamerastreamstatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* p = _impl_.onmulticamerastreamstatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onMultiCameraStreamStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams& CallbackBody::onmulticamerastreamstatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParam)
  return _internal_onmulticamerastreamstatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onmulticamerastreamstatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* onmulticamerastreamstatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onmulticamerastreamstatuschangedparam_);
  }
  _impl_.onmulticamerastreamstatuschangedparam_ = onmulticamerastreamstatuschangedparam;
  if (onmulticamerastreamstatuschangedparam) {
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* CallbackBody::release_onmulticamerastreamstatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* temp = _impl_.onmulticamerastreamstatuschangedparam_;
  _impl_.onmulticamerastreamstatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* CallbackBody::unsafe_arena_release_onmulticamerastreamstatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x00400000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* temp = _impl_.onmulticamerastreamstatuschangedparam_;
  _impl_.onmulticamerastreamstatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* CallbackBody::_internal_mutable_onmulticamerastreamstatuschangedparam() {
  _impl_._has_bits_[0] |= 0x00400000u;
  if (_impl_.onmulticamerastreamstatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams>(GetArenaForAllocation());
    _impl_.onmulticamerastreamstatuschangedparam_ = p;
  }
  return _impl_.onmulticamerastreamstatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* CallbackBody::mutable_onmulticamerastreamstatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* _msg = _internal_mutable_onmulticamerastreamstatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onmulticamerastreamstatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams* onmulticamerastreamstatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onmulticamerastreamstatuschangedparam_;
  }
  if (onmulticamerastreamstatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onmulticamerastreamstatuschangedparam);
    if (message_arena != submessage_arena) {
      onmulticamerastreamstatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onmulticamerastreamstatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00400000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00400000u;
  }
  _impl_.onmulticamerastreamstatuschangedparam_ = onmulticamerastreamstatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParam = 25;
inline bool CallbackBody::has_onmicspeakervolumechangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onmicspeakervolumechangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onmicspeakervolumechangedparam() {
  if (_impl_.onmicspeakervolumechangedparam_ != nullptr) _impl_.onmicspeakervolumechangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams& CallbackBody::_internal_onmicspeakervolumechangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* p = _impl_.onmicspeakervolumechangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onMicSpeakerVolumeChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams& CallbackBody::onmicspeakervolumechangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParam)
  return _internal_onmicspeakervolumechangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onmicspeakervolumechangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* onmicspeakervolumechangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onmicspeakervolumechangedparam_);
  }
  _impl_.onmicspeakervolumechangedparam_ = onmicspeakervolumechangedparam;
  if (onmicspeakervolumechangedparam) {
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* CallbackBody::release_onmicspeakervolumechangedparam() {
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* temp = _impl_.onmicspeakervolumechangedparam_;
  _impl_.onmicspeakervolumechangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* CallbackBody::unsafe_arena_release_onmicspeakervolumechangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParam)
  _impl_._has_bits_[0] &= ~0x00800000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* temp = _impl_.onmicspeakervolumechangedparam_;
  _impl_.onmicspeakervolumechangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* CallbackBody::_internal_mutable_onmicspeakervolumechangedparam() {
  _impl_._has_bits_[0] |= 0x00800000u;
  if (_impl_.onmicspeakervolumechangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams>(GetArenaForAllocation());
    _impl_.onmicspeakervolumechangedparam_ = p;
  }
  return _impl_.onmicspeakervolumechangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* CallbackBody::mutable_onmicspeakervolumechangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* _msg = _internal_mutable_onmicspeakervolumechangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onmicspeakervolumechangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams* onmicspeakervolumechangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onmicspeakervolumechangedparam_;
  }
  if (onmicspeakervolumechangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onmicspeakervolumechangedparam);
    if (message_arena != submessage_arena) {
      onmicspeakervolumechangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onmicspeakervolumechangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00800000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00800000u;
  }
  _impl_.onmicspeakervolumechangedparam_ = onmicspeakervolumechangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParam = 26;
inline bool CallbackBody::has_onaudiodevicestatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onaudiodevicestatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onaudiodevicestatuschangedparam() {
  if (_impl_.onaudiodevicestatuschangedparam_ != nullptr) _impl_.onaudiodevicestatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams& CallbackBody::_internal_onaudiodevicestatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* p = _impl_.onaudiodevicestatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onAudioDeviceStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams& CallbackBody::onaudiodevicestatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParam)
  return _internal_onaudiodevicestatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onaudiodevicestatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* onaudiodevicestatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onaudiodevicestatuschangedparam_);
  }
  _impl_.onaudiodevicestatuschangedparam_ = onaudiodevicestatuschangedparam;
  if (onaudiodevicestatuschangedparam) {
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* CallbackBody::release_onaudiodevicestatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* temp = _impl_.onaudiodevicestatuschangedparam_;
  _impl_.onaudiodevicestatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* CallbackBody::unsafe_arena_release_onaudiodevicestatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x01000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* temp = _impl_.onaudiodevicestatuschangedparam_;
  _impl_.onaudiodevicestatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* CallbackBody::_internal_mutable_onaudiodevicestatuschangedparam() {
  _impl_._has_bits_[0] |= 0x01000000u;
  if (_impl_.onaudiodevicestatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams>(GetArenaForAllocation());
    _impl_.onaudiodevicestatuschangedparam_ = p;
  }
  return _impl_.onaudiodevicestatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* CallbackBody::mutable_onaudiodevicestatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* _msg = _internal_mutable_onaudiodevicestatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onaudiodevicestatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams* onaudiodevicestatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onaudiodevicestatuschangedparam_;
  }
  if (onaudiodevicestatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onaudiodevicestatuschangedparam);
    if (message_arena != submessage_arena) {
      onaudiodevicestatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onaudiodevicestatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x01000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x01000000u;
  }
  _impl_.onaudiodevicestatuschangedparam_ = onaudiodevicestatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams onTestMicStatusChangedParam = 27;
inline bool CallbackBody::has_ontestmicstatuschangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ontestmicstatuschangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_ontestmicstatuschangedparam() {
  if (_impl_.ontestmicstatuschangedparam_ != nullptr) _impl_.ontestmicstatuschangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams& CallbackBody::_internal_ontestmicstatuschangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* p = _impl_.ontestmicstatuschangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onTestMicStatusChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams& CallbackBody::ontestmicstatuschangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParam)
  return _internal_ontestmicstatuschangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_ontestmicstatuschangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* ontestmicstatuschangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ontestmicstatuschangedparam_);
  }
  _impl_.ontestmicstatuschangedparam_ = ontestmicstatuschangedparam;
  if (ontestmicstatuschangedparam) {
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* CallbackBody::release_ontestmicstatuschangedparam() {
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* temp = _impl_.ontestmicstatuschangedparam_;
  _impl_.ontestmicstatuschangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* CallbackBody::unsafe_arena_release_ontestmicstatuschangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParam)
  _impl_._has_bits_[0] &= ~0x02000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* temp = _impl_.ontestmicstatuschangedparam_;
  _impl_.ontestmicstatuschangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* CallbackBody::_internal_mutable_ontestmicstatuschangedparam() {
  _impl_._has_bits_[0] |= 0x02000000u;
  if (_impl_.ontestmicstatuschangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams>(GetArenaForAllocation());
    _impl_.ontestmicstatuschangedparam_ = p;
  }
  return _impl_.ontestmicstatuschangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* CallbackBody::mutable_ontestmicstatuschangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* _msg = _internal_mutable_ontestmicstatuschangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_ontestmicstatuschangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams* ontestmicstatuschangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ontestmicstatuschangedparam_;
  }
  if (ontestmicstatuschangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ontestmicstatuschangedparam);
    if (message_arena != submessage_arena) {
      ontestmicstatuschangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ontestmicstatuschangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x02000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x02000000u;
  }
  _impl_.ontestmicstatuschangedparam_ = ontestmicstatuschangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParam = 28;
inline bool CallbackBody::has_onselectedaudiodevicechangedparam() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onselectedaudiodevicechangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onselectedaudiodevicechangedparam() {
  if (_impl_.onselectedaudiodevicechangedparam_ != nullptr) _impl_.onselectedaudiodevicechangedparam_->Clear();
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams& CallbackBody::_internal_onselectedaudiodevicechangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* p = _impl_.onselectedaudiodevicechangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onSelectedAudioDeviceChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams& CallbackBody::onselectedaudiodevicechangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParam)
  return _internal_onselectedaudiodevicechangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onselectedaudiodevicechangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* onselectedaudiodevicechangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onselectedaudiodevicechangedparam_);
  }
  _impl_.onselectedaudiodevicechangedparam_ = onselectedaudiodevicechangedparam;
  if (onselectedaudiodevicechangedparam) {
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* CallbackBody::release_onselectedaudiodevicechangedparam() {
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* temp = _impl_.onselectedaudiodevicechangedparam_;
  _impl_.onselectedaudiodevicechangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* CallbackBody::unsafe_arena_release_onselectedaudiodevicechangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParam)
  _impl_._has_bits_[0] &= ~0x04000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* temp = _impl_.onselectedaudiodevicechangedparam_;
  _impl_.onselectedaudiodevicechangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* CallbackBody::_internal_mutable_onselectedaudiodevicechangedparam() {
  _impl_._has_bits_[0] |= 0x04000000u;
  if (_impl_.onselectedaudiodevicechangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams>(GetArenaForAllocation());
    _impl_.onselectedaudiodevicechangedparam_ = p;
  }
  return _impl_.onselectedaudiodevicechangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* CallbackBody::mutable_onselectedaudiodevicechangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* _msg = _internal_mutable_onselectedaudiodevicechangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onselectedaudiodevicechangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams* onselectedaudiodevicechangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onselectedaudiodevicechangedparam_;
  }
  if (onselectedaudiodevicechangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onselectedaudiodevicechangedparam);
    if (message_arena != submessage_arena) {
      onselectedaudiodevicechangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onselectedaudiodevicechangedparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x04000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x04000000u;
  }
  _impl_.onselectedaudiodevicechangedparam_ = onselectedaudiodevicechangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams onLiveTranscriptionStatusParam = 29;
inline bool CallbackBody::has_onlivetranscriptionstatusparam() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onlivetranscriptionstatusparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onlivetranscriptionstatusparam() {
  if (_impl_.onlivetranscriptionstatusparam_ != nullptr) _impl_.onlivetranscriptionstatusparam_->Clear();
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams& CallbackBody::_internal_onlivetranscriptionstatusparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* p = _impl_.onlivetranscriptionstatusparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onLiveTranscriptionStatusParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams& CallbackBody::onlivetranscriptionstatusparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParam)
  return _internal_onlivetranscriptionstatusparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onlivetranscriptionstatusparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* onlivetranscriptionstatusparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onlivetranscriptionstatusparam_);
  }
  _impl_.onlivetranscriptionstatusparam_ = onlivetranscriptionstatusparam;
  if (onlivetranscriptionstatusparam) {
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* CallbackBody::release_onlivetranscriptionstatusparam() {
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* temp = _impl_.onlivetranscriptionstatusparam_;
  _impl_.onlivetranscriptionstatusparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* CallbackBody::unsafe_arena_release_onlivetranscriptionstatusparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParam)
  _impl_._has_bits_[0] &= ~0x08000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* temp = _impl_.onlivetranscriptionstatusparam_;
  _impl_.onlivetranscriptionstatusparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* CallbackBody::_internal_mutable_onlivetranscriptionstatusparam() {
  _impl_._has_bits_[0] |= 0x08000000u;
  if (_impl_.onlivetranscriptionstatusparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams>(GetArenaForAllocation());
    _impl_.onlivetranscriptionstatusparam_ = p;
  }
  return _impl_.onlivetranscriptionstatusparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* CallbackBody::mutable_onlivetranscriptionstatusparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* _msg = _internal_mutable_onlivetranscriptionstatusparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onlivetranscriptionstatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams* onlivetranscriptionstatusparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onlivetranscriptionstatusparam_;
  }
  if (onlivetranscriptionstatusparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onlivetranscriptionstatusparam);
    if (message_arena != submessage_arena) {
      onlivetranscriptionstatusparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onlivetranscriptionstatusparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x08000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x08000000u;
  }
  _impl_.onlivetranscriptionstatusparam_ = onlivetranscriptionstatusparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParam = 31;
inline bool CallbackBody::has_onlivetranscriptionmsgerrorparam() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onlivetranscriptionmsgerrorparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onlivetranscriptionmsgerrorparam() {
  if (_impl_.onlivetranscriptionmsgerrorparam_ != nullptr) _impl_.onlivetranscriptionmsgerrorparam_->Clear();
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams& CallbackBody::_internal_onlivetranscriptionmsgerrorparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* p = _impl_.onlivetranscriptionmsgerrorparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onLiveTranscriptionMsgErrorParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams& CallbackBody::onlivetranscriptionmsgerrorparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParam)
  return _internal_onlivetranscriptionmsgerrorparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onlivetranscriptionmsgerrorparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* onlivetranscriptionmsgerrorparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onlivetranscriptionmsgerrorparam_);
  }
  _impl_.onlivetranscriptionmsgerrorparam_ = onlivetranscriptionmsgerrorparam;
  if (onlivetranscriptionmsgerrorparam) {
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* CallbackBody::release_onlivetranscriptionmsgerrorparam() {
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* temp = _impl_.onlivetranscriptionmsgerrorparam_;
  _impl_.onlivetranscriptionmsgerrorparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* CallbackBody::unsafe_arena_release_onlivetranscriptionmsgerrorparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParam)
  _impl_._has_bits_[0] &= ~0x10000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* temp = _impl_.onlivetranscriptionmsgerrorparam_;
  _impl_.onlivetranscriptionmsgerrorparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* CallbackBody::_internal_mutable_onlivetranscriptionmsgerrorparam() {
  _impl_._has_bits_[0] |= 0x10000000u;
  if (_impl_.onlivetranscriptionmsgerrorparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams>(GetArenaForAllocation());
    _impl_.onlivetranscriptionmsgerrorparam_ = p;
  }
  return _impl_.onlivetranscriptionmsgerrorparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* CallbackBody::mutable_onlivetranscriptionmsgerrorparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* _msg = _internal_mutable_onlivetranscriptionmsgerrorparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onlivetranscriptionmsgerrorparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams* onlivetranscriptionmsgerrorparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onlivetranscriptionmsgerrorparam_;
  }
  if (onlivetranscriptionmsgerrorparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onlivetranscriptionmsgerrorparam);
    if (message_arena != submessage_arena) {
      onlivetranscriptionmsgerrorparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onlivetranscriptionmsgerrorparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x10000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x10000000u;
  }
  _impl_.onlivetranscriptionmsgerrorparam_ = onlivetranscriptionmsgerrorparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParam = 32;
inline bool CallbackBody::has_onchatmsgdeletenotificationparam() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onchatmsgdeletenotificationparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onchatmsgdeletenotificationparam() {
  if (_impl_.onchatmsgdeletenotificationparam_ != nullptr) _impl_.onchatmsgdeletenotificationparam_->Clear();
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams& CallbackBody::_internal_onchatmsgdeletenotificationparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* p = _impl_.onchatmsgdeletenotificationparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onChatMsgDeleteNotificationParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams& CallbackBody::onchatmsgdeletenotificationparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParam)
  return _internal_onchatmsgdeletenotificationparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onchatmsgdeletenotificationparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* onchatmsgdeletenotificationparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onchatmsgdeletenotificationparam_);
  }
  _impl_.onchatmsgdeletenotificationparam_ = onchatmsgdeletenotificationparam;
  if (onchatmsgdeletenotificationparam) {
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* CallbackBody::release_onchatmsgdeletenotificationparam() {
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* temp = _impl_.onchatmsgdeletenotificationparam_;
  _impl_.onchatmsgdeletenotificationparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* CallbackBody::unsafe_arena_release_onchatmsgdeletenotificationparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParam)
  _impl_._has_bits_[0] &= ~0x20000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* temp = _impl_.onchatmsgdeletenotificationparam_;
  _impl_.onchatmsgdeletenotificationparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* CallbackBody::_internal_mutable_onchatmsgdeletenotificationparam() {
  _impl_._has_bits_[0] |= 0x20000000u;
  if (_impl_.onchatmsgdeletenotificationparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams>(GetArenaForAllocation());
    _impl_.onchatmsgdeletenotificationparam_ = p;
  }
  return _impl_.onchatmsgdeletenotificationparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* CallbackBody::mutable_onchatmsgdeletenotificationparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* _msg = _internal_mutable_onchatmsgdeletenotificationparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onchatmsgdeletenotificationparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams* onchatmsgdeletenotificationparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onchatmsgdeletenotificationparam_;
  }
  if (onchatmsgdeletenotificationparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onchatmsgdeletenotificationparam);
    if (message_arena != submessage_arena) {
      onchatmsgdeletenotificationparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onchatmsgdeletenotificationparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x20000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x20000000u;
  }
  _impl_.onchatmsgdeletenotificationparam_ = onchatmsgdeletenotificationparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParam = 33;
inline bool CallbackBody::has_livetranscriptionmsginfoparam() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.livetranscriptionmsginfoparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_livetranscriptionmsginfoparam() {
  if (_impl_.livetranscriptionmsginfoparam_ != nullptr) _impl_.livetranscriptionmsginfoparam_->Clear();
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams& CallbackBody::_internal_livetranscriptionmsginfoparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* p = _impl_.livetranscriptionmsginfoparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_liveTranscriptionMsgInfoParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams& CallbackBody::livetranscriptionmsginfoparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParam)
  return _internal_livetranscriptionmsginfoparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_livetranscriptionmsginfoparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* livetranscriptionmsginfoparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.livetranscriptionmsginfoparam_);
  }
  _impl_.livetranscriptionmsginfoparam_ = livetranscriptionmsginfoparam;
  if (livetranscriptionmsginfoparam) {
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* CallbackBody::release_livetranscriptionmsginfoparam() {
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* temp = _impl_.livetranscriptionmsginfoparam_;
  _impl_.livetranscriptionmsginfoparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* CallbackBody::unsafe_arena_release_livetranscriptionmsginfoparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParam)
  _impl_._has_bits_[0] &= ~0x40000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* temp = _impl_.livetranscriptionmsginfoparam_;
  _impl_.livetranscriptionmsginfoparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* CallbackBody::_internal_mutable_livetranscriptionmsginfoparam() {
  _impl_._has_bits_[0] |= 0x40000000u;
  if (_impl_.livetranscriptionmsginfoparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams>(GetArenaForAllocation());
    _impl_.livetranscriptionmsginfoparam_ = p;
  }
  return _impl_.livetranscriptionmsginfoparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* CallbackBody::mutable_livetranscriptionmsginfoparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* _msg = _internal_mutable_livetranscriptionmsginfoparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParam)
  return _msg;
}
inline void CallbackBody::set_allocated_livetranscriptionmsginfoparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams* livetranscriptionmsginfoparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.livetranscriptionmsginfoparam_;
  }
  if (livetranscriptionmsginfoparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(livetranscriptionmsginfoparam);
    if (message_arena != submessage_arena) {
      livetranscriptionmsginfoparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, livetranscriptionmsginfoparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x40000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x40000000u;
  }
  _impl_.livetranscriptionmsginfoparam_ = livetranscriptionmsginfoparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams onCalloutJoinSuccessParam = 34;
inline bool CallbackBody::has_oncalloutjoinsuccessparam() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.oncalloutjoinsuccessparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_oncalloutjoinsuccessparam() {
  if (_impl_.oncalloutjoinsuccessparam_ != nullptr) _impl_.oncalloutjoinsuccessparam_->Clear();
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams& CallbackBody::_internal_oncalloutjoinsuccessparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* p = _impl_.oncalloutjoinsuccessparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onCalloutJoinSuccessParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams& CallbackBody::oncalloutjoinsuccessparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParam)
  return _internal_oncalloutjoinsuccessparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_oncalloutjoinsuccessparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* oncalloutjoinsuccessparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.oncalloutjoinsuccessparam_);
  }
  _impl_.oncalloutjoinsuccessparam_ = oncalloutjoinsuccessparam;
  if (oncalloutjoinsuccessparam) {
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* CallbackBody::release_oncalloutjoinsuccessparam() {
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* temp = _impl_.oncalloutjoinsuccessparam_;
  _impl_.oncalloutjoinsuccessparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* CallbackBody::unsafe_arena_release_oncalloutjoinsuccessparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParam)
  _impl_._has_bits_[0] &= ~0x80000000u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* temp = _impl_.oncalloutjoinsuccessparam_;
  _impl_.oncalloutjoinsuccessparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* CallbackBody::_internal_mutable_oncalloutjoinsuccessparam() {
  _impl_._has_bits_[0] |= 0x80000000u;
  if (_impl_.oncalloutjoinsuccessparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams>(GetArenaForAllocation());
    _impl_.oncalloutjoinsuccessparam_ = p;
  }
  return _impl_.oncalloutjoinsuccessparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* CallbackBody::mutable_oncalloutjoinsuccessparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* _msg = _internal_mutable_oncalloutjoinsuccessparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParam)
  return _msg;
}
inline void CallbackBody::set_allocated_oncalloutjoinsuccessparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams* oncalloutjoinsuccessparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.oncalloutjoinsuccessparam_;
  }
  if (oncalloutjoinsuccessparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(oncalloutjoinsuccessparam);
    if (message_arena != submessage_arena) {
      oncalloutjoinsuccessparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oncalloutjoinsuccessparam, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x80000000u;
  } else {
    _impl_._has_bits_[0] &= ~0x80000000u;
  }
  _impl_.oncalloutjoinsuccessparam_ = oncalloutjoinsuccessparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams onSessionLeaveParam = 35;
inline bool CallbackBody::has_onsessionleaveparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onsessionleaveparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onsessionleaveparam() {
  if (_impl_.onsessionleaveparam_ != nullptr) _impl_.onsessionleaveparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams& CallbackBody::_internal_onsessionleaveparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* p = _impl_.onsessionleaveparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onSessionLeaveParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams& CallbackBody::onsessionleaveparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParam)
  return _internal_onsessionleaveparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onsessionleaveparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* onsessionleaveparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onsessionleaveparam_);
  }
  _impl_.onsessionleaveparam_ = onsessionleaveparam;
  if (onsessionleaveparam) {
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* CallbackBody::release_onsessionleaveparam() {
  _impl_._has_bits_[1] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* temp = _impl_.onsessionleaveparam_;
  _impl_.onsessionleaveparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* CallbackBody::unsafe_arena_release_onsessionleaveparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParam)
  _impl_._has_bits_[1] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* temp = _impl_.onsessionleaveparam_;
  _impl_.onsessionleaveparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* CallbackBody::_internal_mutable_onsessionleaveparam() {
  _impl_._has_bits_[1] |= 0x00000001u;
  if (_impl_.onsessionleaveparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams>(GetArenaForAllocation());
    _impl_.onsessionleaveparam_ = p;
  }
  return _impl_.onsessionleaveparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* CallbackBody::mutable_onsessionleaveparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* _msg = _internal_mutable_onsessionleaveparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onsessionleaveparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams* onsessionleaveparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onsessionleaveparam_;
  }
  if (onsessionleaveparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onsessionleaveparam);
    if (message_arena != submessage_arena) {
      onsessionleaveparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onsessionleaveparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000001u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000001u;
  }
  _impl_.onsessionleaveparam_ = onsessionleaveparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams onShareCursorDataReceivedParam = 36;
inline bool CallbackBody::has_onsharecursordatareceivedparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onsharecursordatareceivedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onsharecursordatareceivedparam() {
  if (_impl_.onsharecursordatareceivedparam_ != nullptr) _impl_.onsharecursordatareceivedparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams& CallbackBody::_internal_onsharecursordatareceivedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* p = _impl_.onsharecursordatareceivedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onShareCursorDataReceivedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams& CallbackBody::onsharecursordatareceivedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParam)
  return _internal_onsharecursordatareceivedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onsharecursordatareceivedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* onsharecursordatareceivedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onsharecursordatareceivedparam_);
  }
  _impl_.onsharecursordatareceivedparam_ = onsharecursordatareceivedparam;
  if (onsharecursordatareceivedparam) {
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* CallbackBody::release_onsharecursordatareceivedparam() {
  _impl_._has_bits_[1] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* temp = _impl_.onsharecursordatareceivedparam_;
  _impl_.onsharecursordatareceivedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* CallbackBody::unsafe_arena_release_onsharecursordatareceivedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParam)
  _impl_._has_bits_[1] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* temp = _impl_.onsharecursordatareceivedparam_;
  _impl_.onsharecursordatareceivedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* CallbackBody::_internal_mutable_onsharecursordatareceivedparam() {
  _impl_._has_bits_[1] |= 0x00000002u;
  if (_impl_.onsharecursordatareceivedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams>(GetArenaForAllocation());
    _impl_.onsharecursordatareceivedparam_ = p;
  }
  return _impl_.onsharecursordatareceivedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* CallbackBody::mutable_onsharecursordatareceivedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* _msg = _internal_mutable_onsharecursordatareceivedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onsharecursordatareceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams* onsharecursordatareceivedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onsharecursordatareceivedparam_;
  }
  if (onsharecursordatareceivedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onsharecursordatareceivedparam);
    if (message_arena != submessage_arena) {
      onsharecursordatareceivedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onsharecursordatareceivedparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000002u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000002u;
  }
  _impl_.onsharecursordatareceivedparam_ = onsharecursordatareceivedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams onRemoteControlStatusParam = 37;
inline bool CallbackBody::has_onremotecontrolstatusparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onremotecontrolstatusparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onremotecontrolstatusparam() {
  if (_impl_.onremotecontrolstatusparam_ != nullptr) _impl_.onremotecontrolstatusparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams& CallbackBody::_internal_onremotecontrolstatusparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* p = _impl_.onremotecontrolstatusparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onRemoteControlStatusParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams& CallbackBody::onremotecontrolstatusparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParam)
  return _internal_onremotecontrolstatusparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onremotecontrolstatusparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* onremotecontrolstatusparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onremotecontrolstatusparam_);
  }
  _impl_.onremotecontrolstatusparam_ = onremotecontrolstatusparam;
  if (onremotecontrolstatusparam) {
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* CallbackBody::release_onremotecontrolstatusparam() {
  _impl_._has_bits_[1] &= ~0x00000004u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* temp = _impl_.onremotecontrolstatusparam_;
  _impl_.onremotecontrolstatusparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* CallbackBody::unsafe_arena_release_onremotecontrolstatusparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParam)
  _impl_._has_bits_[1] &= ~0x00000004u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* temp = _impl_.onremotecontrolstatusparam_;
  _impl_.onremotecontrolstatusparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* CallbackBody::_internal_mutable_onremotecontrolstatusparam() {
  _impl_._has_bits_[1] |= 0x00000004u;
  if (_impl_.onremotecontrolstatusparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams>(GetArenaForAllocation());
    _impl_.onremotecontrolstatusparam_ = p;
  }
  return _impl_.onremotecontrolstatusparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* CallbackBody::mutable_onremotecontrolstatusparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* _msg = _internal_mutable_onremotecontrolstatusparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onremotecontrolstatusparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams* onremotecontrolstatusparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onremotecontrolstatusparam_;
  }
  if (onremotecontrolstatusparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onremotecontrolstatusparam);
    if (message_arena != submessage_arena) {
      onremotecontrolstatusparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onremotecontrolstatusparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000004u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000004u;
  }
  _impl_.onremotecontrolstatusparam_ = onremotecontrolstatusparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParam = 38;
inline bool CallbackBody::has_onremotecontrolrequestreceivedparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onremotecontrolrequestreceivedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onremotecontrolrequestreceivedparam() {
  if (_impl_.onremotecontrolrequestreceivedparam_ != nullptr) _impl_.onremotecontrolrequestreceivedparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams& CallbackBody::_internal_onremotecontrolrequestreceivedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* p = _impl_.onremotecontrolrequestreceivedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onRemoteControlRequestReceivedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams& CallbackBody::onremotecontrolrequestreceivedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParam)
  return _internal_onremotecontrolrequestreceivedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onremotecontrolrequestreceivedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* onremotecontrolrequestreceivedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onremotecontrolrequestreceivedparam_);
  }
  _impl_.onremotecontrolrequestreceivedparam_ = onremotecontrolrequestreceivedparam;
  if (onremotecontrolrequestreceivedparam) {
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* CallbackBody::release_onremotecontrolrequestreceivedparam() {
  _impl_._has_bits_[1] &= ~0x00000008u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* temp = _impl_.onremotecontrolrequestreceivedparam_;
  _impl_.onremotecontrolrequestreceivedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* CallbackBody::unsafe_arena_release_onremotecontrolrequestreceivedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParam)
  _impl_._has_bits_[1] &= ~0x00000008u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* temp = _impl_.onremotecontrolrequestreceivedparam_;
  _impl_.onremotecontrolrequestreceivedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* CallbackBody::_internal_mutable_onremotecontrolrequestreceivedparam() {
  _impl_._has_bits_[1] |= 0x00000008u;
  if (_impl_.onremotecontrolrequestreceivedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams>(GetArenaForAllocation());
    _impl_.onremotecontrolrequestreceivedparam_ = p;
  }
  return _impl_.onremotecontrolrequestreceivedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* CallbackBody::mutable_onremotecontrolrequestreceivedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* _msg = _internal_mutable_onremotecontrolrequestreceivedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onremotecontrolrequestreceivedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams* onremotecontrolrequestreceivedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onremotecontrolrequestreceivedparam_;
  }
  if (onremotecontrolrequestreceivedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onremotecontrolrequestreceivedparam);
    if (message_arena != submessage_arena) {
      onremotecontrolrequestreceivedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onremotecontrolrequestreceivedparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000008u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000008u;
  }
  _impl_.onremotecontrolrequestreceivedparam_ = onremotecontrolrequestreceivedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParam = 39;
inline bool CallbackBody::has_onremotecontrolserviceinstallresultparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onremotecontrolserviceinstallresultparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onremotecontrolserviceinstallresultparam() {
  if (_impl_.onremotecontrolserviceinstallresultparam_ != nullptr) _impl_.onremotecontrolserviceinstallresultparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000010u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams& CallbackBody::_internal_onremotecontrolserviceinstallresultparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* p = _impl_.onremotecontrolserviceinstallresultparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onRemoteControlServiceInstallResultParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams& CallbackBody::onremotecontrolserviceinstallresultparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParam)
  return _internal_onremotecontrolserviceinstallresultparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onremotecontrolserviceinstallresultparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* onremotecontrolserviceinstallresultparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onremotecontrolserviceinstallresultparam_);
  }
  _impl_.onremotecontrolserviceinstallresultparam_ = onremotecontrolserviceinstallresultparam;
  if (onremotecontrolserviceinstallresultparam) {
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* CallbackBody::release_onremotecontrolserviceinstallresultparam() {
  _impl_._has_bits_[1] &= ~0x00000010u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* temp = _impl_.onremotecontrolserviceinstallresultparam_;
  _impl_.onremotecontrolserviceinstallresultparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* CallbackBody::unsafe_arena_release_onremotecontrolserviceinstallresultparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParam)
  _impl_._has_bits_[1] &= ~0x00000010u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* temp = _impl_.onremotecontrolserviceinstallresultparam_;
  _impl_.onremotecontrolserviceinstallresultparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* CallbackBody::_internal_mutable_onremotecontrolserviceinstallresultparam() {
  _impl_._has_bits_[1] |= 0x00000010u;
  if (_impl_.onremotecontrolserviceinstallresultparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams>(GetArenaForAllocation());
    _impl_.onremotecontrolserviceinstallresultparam_ = p;
  }
  return _impl_.onremotecontrolserviceinstallresultparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* CallbackBody::mutable_onremotecontrolserviceinstallresultparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* _msg = _internal_mutable_onremotecontrolserviceinstallresultparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onremotecontrolserviceinstallresultparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams* onremotecontrolserviceinstallresultparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onremotecontrolserviceinstallresultparam_;
  }
  if (onremotecontrolserviceinstallresultparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onremotecontrolserviceinstallresultparam);
    if (message_arena != submessage_arena) {
      onremotecontrolserviceinstallresultparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onremotecontrolserviceinstallresultparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000010u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000010u;
  }
  _impl_.onremotecontrolserviceinstallresultparam_ = onremotecontrolserviceinstallresultparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams onSpotlightVideoChangedParam = 40;
inline bool CallbackBody::has_onspotlightvideochangedparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onspotlightvideochangedparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onspotlightvideochangedparam() {
  if (_impl_.onspotlightvideochangedparam_ != nullptr) _impl_.onspotlightvideochangedparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000020u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams& CallbackBody::_internal_onspotlightvideochangedparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* p = _impl_.onspotlightvideochangedparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onSpotlightVideoChangedParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams& CallbackBody::onspotlightvideochangedparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParam)
  return _internal_onspotlightvideochangedparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onspotlightvideochangedparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* onspotlightvideochangedparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onspotlightvideochangedparam_);
  }
  _impl_.onspotlightvideochangedparam_ = onspotlightvideochangedparam;
  if (onspotlightvideochangedparam) {
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* CallbackBody::release_onspotlightvideochangedparam() {
  _impl_._has_bits_[1] &= ~0x00000020u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* temp = _impl_.onspotlightvideochangedparam_;
  _impl_.onspotlightvideochangedparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* CallbackBody::unsafe_arena_release_onspotlightvideochangedparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParam)
  _impl_._has_bits_[1] &= ~0x00000020u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* temp = _impl_.onspotlightvideochangedparam_;
  _impl_.onspotlightvideochangedparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* CallbackBody::_internal_mutable_onspotlightvideochangedparam() {
  _impl_._has_bits_[1] |= 0x00000020u;
  if (_impl_.onspotlightvideochangedparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams>(GetArenaForAllocation());
    _impl_.onspotlightvideochangedparam_ = p;
  }
  return _impl_.onspotlightvideochangedparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* CallbackBody::mutable_onspotlightvideochangedparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* _msg = _internal_mutable_onspotlightvideochangedparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onspotlightvideochangedparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams* onspotlightvideochangedparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onspotlightvideochangedparam_;
  }
  if (onspotlightvideochangedparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onspotlightvideochangedparam);
    if (message_arena != submessage_arena) {
      onspotlightvideochangedparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onspotlightvideochangedparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000020u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000020u;
  }
  _impl_.onspotlightvideochangedparam_ = onspotlightvideochangedparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParam = 41;
inline bool CallbackBody::has_onbindincominglivestreamresponseparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onbindincominglivestreamresponseparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onbindincominglivestreamresponseparam() {
  if (_impl_.onbindincominglivestreamresponseparam_ != nullptr) _impl_.onbindincominglivestreamresponseparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000040u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams& CallbackBody::_internal_onbindincominglivestreamresponseparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* p = _impl_.onbindincominglivestreamresponseparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onBindIncomingLiveStreamResponseParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams& CallbackBody::onbindincominglivestreamresponseparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParam)
  return _internal_onbindincominglivestreamresponseparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onbindincominglivestreamresponseparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* onbindincominglivestreamresponseparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onbindincominglivestreamresponseparam_);
  }
  _impl_.onbindincominglivestreamresponseparam_ = onbindincominglivestreamresponseparam;
  if (onbindincominglivestreamresponseparam) {
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* CallbackBody::release_onbindincominglivestreamresponseparam() {
  _impl_._has_bits_[1] &= ~0x00000040u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* temp = _impl_.onbindincominglivestreamresponseparam_;
  _impl_.onbindincominglivestreamresponseparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* CallbackBody::unsafe_arena_release_onbindincominglivestreamresponseparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParam)
  _impl_._has_bits_[1] &= ~0x00000040u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* temp = _impl_.onbindincominglivestreamresponseparam_;
  _impl_.onbindincominglivestreamresponseparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* CallbackBody::_internal_mutable_onbindincominglivestreamresponseparam() {
  _impl_._has_bits_[1] |= 0x00000040u;
  if (_impl_.onbindincominglivestreamresponseparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams>(GetArenaForAllocation());
    _impl_.onbindincominglivestreamresponseparam_ = p;
  }
  return _impl_.onbindincominglivestreamresponseparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* CallbackBody::mutable_onbindincominglivestreamresponseparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* _msg = _internal_mutable_onbindincominglivestreamresponseparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onbindincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams* onbindincominglivestreamresponseparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onbindincominglivestreamresponseparam_;
  }
  if (onbindincominglivestreamresponseparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onbindincominglivestreamresponseparam);
    if (message_arena != submessage_arena) {
      onbindincominglivestreamresponseparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onbindincominglivestreamresponseparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000040u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000040u;
  }
  _impl_.onbindincominglivestreamresponseparam_ = onbindincominglivestreamresponseparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParam = 42;
inline bool CallbackBody::has_onunbindincominglivestreamresponseparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onunbindincominglivestreamresponseparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onunbindincominglivestreamresponseparam() {
  if (_impl_.onunbindincominglivestreamresponseparam_ != nullptr) _impl_.onunbindincominglivestreamresponseparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000080u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams& CallbackBody::_internal_onunbindincominglivestreamresponseparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* p = _impl_.onunbindincominglivestreamresponseparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onUnbindIncomingLiveStreamResponseParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams& CallbackBody::onunbindincominglivestreamresponseparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParam)
  return _internal_onunbindincominglivestreamresponseparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onunbindincominglivestreamresponseparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* onunbindincominglivestreamresponseparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onunbindincominglivestreamresponseparam_);
  }
  _impl_.onunbindincominglivestreamresponseparam_ = onunbindincominglivestreamresponseparam;
  if (onunbindincominglivestreamresponseparam) {
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* CallbackBody::release_onunbindincominglivestreamresponseparam() {
  _impl_._has_bits_[1] &= ~0x00000080u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* temp = _impl_.onunbindincominglivestreamresponseparam_;
  _impl_.onunbindincominglivestreamresponseparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* CallbackBody::unsafe_arena_release_onunbindincominglivestreamresponseparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParam)
  _impl_._has_bits_[1] &= ~0x00000080u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* temp = _impl_.onunbindincominglivestreamresponseparam_;
  _impl_.onunbindincominglivestreamresponseparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* CallbackBody::_internal_mutable_onunbindincominglivestreamresponseparam() {
  _impl_._has_bits_[1] |= 0x00000080u;
  if (_impl_.onunbindincominglivestreamresponseparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams>(GetArenaForAllocation());
    _impl_.onunbindincominglivestreamresponseparam_ = p;
  }
  return _impl_.onunbindincominglivestreamresponseparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* CallbackBody::mutable_onunbindincominglivestreamresponseparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* _msg = _internal_mutable_onunbindincominglivestreamresponseparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onunbindincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams* onunbindincominglivestreamresponseparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onunbindincominglivestreamresponseparam_;
  }
  if (onunbindincominglivestreamresponseparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onunbindincominglivestreamresponseparam);
    if (message_arena != submessage_arena) {
      onunbindincominglivestreamresponseparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onunbindincominglivestreamresponseparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000080u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000080u;
  }
  _impl_.onunbindincominglivestreamresponseparam_ = onunbindincominglivestreamresponseparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParam = 43;
inline bool CallbackBody::has_onincominglivestreamstatusresponseparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onincominglivestreamstatusresponseparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onincominglivestreamstatusresponseparam() {
  if (_impl_.onincominglivestreamstatusresponseparam_ != nullptr) _impl_.onincominglivestreamstatusresponseparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000100u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams& CallbackBody::_internal_onincominglivestreamstatusresponseparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* p = _impl_.onincominglivestreamstatusresponseparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onIncomingLiveStreamStatusResponseParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams& CallbackBody::onincominglivestreamstatusresponseparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParam)
  return _internal_onincominglivestreamstatusresponseparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onincominglivestreamstatusresponseparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* onincominglivestreamstatusresponseparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onincominglivestreamstatusresponseparam_);
  }
  _impl_.onincominglivestreamstatusresponseparam_ = onincominglivestreamstatusresponseparam;
  if (onincominglivestreamstatusresponseparam) {
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* CallbackBody::release_onincominglivestreamstatusresponseparam() {
  _impl_._has_bits_[1] &= ~0x00000100u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* temp = _impl_.onincominglivestreamstatusresponseparam_;
  _impl_.onincominglivestreamstatusresponseparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* CallbackBody::unsafe_arena_release_onincominglivestreamstatusresponseparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParam)
  _impl_._has_bits_[1] &= ~0x00000100u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* temp = _impl_.onincominglivestreamstatusresponseparam_;
  _impl_.onincominglivestreamstatusresponseparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* CallbackBody::_internal_mutable_onincominglivestreamstatusresponseparam() {
  _impl_._has_bits_[1] |= 0x00000100u;
  if (_impl_.onincominglivestreamstatusresponseparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams>(GetArenaForAllocation());
    _impl_.onincominglivestreamstatusresponseparam_ = p;
  }
  return _impl_.onincominglivestreamstatusresponseparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* CallbackBody::mutable_onincominglivestreamstatusresponseparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* _msg = _internal_mutable_onincominglivestreamstatusresponseparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onincominglivestreamstatusresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams* onincominglivestreamstatusresponseparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onincominglivestreamstatusresponseparam_;
  }
  if (onincominglivestreamstatusresponseparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onincominglivestreamstatusresponseparam);
    if (message_arena != submessage_arena) {
      onincominglivestreamstatusresponseparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onincominglivestreamstatusresponseparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000100u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000100u;
  }
  _impl_.onincominglivestreamstatusresponseparam_ = onincominglivestreamstatusresponseparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParam = 44;
inline bool CallbackBody::has_onstartincominglivestreamresponseparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onstartincominglivestreamresponseparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onstartincominglivestreamresponseparam() {
  if (_impl_.onstartincominglivestreamresponseparam_ != nullptr) _impl_.onstartincominglivestreamresponseparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000200u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams& CallbackBody::_internal_onstartincominglivestreamresponseparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* p = _impl_.onstartincominglivestreamresponseparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onStartIncomingLiveStreamResponseParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams& CallbackBody::onstartincominglivestreamresponseparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParam)
  return _internal_onstartincominglivestreamresponseparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onstartincominglivestreamresponseparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* onstartincominglivestreamresponseparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onstartincominglivestreamresponseparam_);
  }
  _impl_.onstartincominglivestreamresponseparam_ = onstartincominglivestreamresponseparam;
  if (onstartincominglivestreamresponseparam) {
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* CallbackBody::release_onstartincominglivestreamresponseparam() {
  _impl_._has_bits_[1] &= ~0x00000200u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* temp = _impl_.onstartincominglivestreamresponseparam_;
  _impl_.onstartincominglivestreamresponseparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* CallbackBody::unsafe_arena_release_onstartincominglivestreamresponseparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParam)
  _impl_._has_bits_[1] &= ~0x00000200u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* temp = _impl_.onstartincominglivestreamresponseparam_;
  _impl_.onstartincominglivestreamresponseparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* CallbackBody::_internal_mutable_onstartincominglivestreamresponseparam() {
  _impl_._has_bits_[1] |= 0x00000200u;
  if (_impl_.onstartincominglivestreamresponseparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams>(GetArenaForAllocation());
    _impl_.onstartincominglivestreamresponseparam_ = p;
  }
  return _impl_.onstartincominglivestreamresponseparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* CallbackBody::mutable_onstartincominglivestreamresponseparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* _msg = _internal_mutable_onstartincominglivestreamresponseparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onstartincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams* onstartincominglivestreamresponseparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onstartincominglivestreamresponseparam_;
  }
  if (onstartincominglivestreamresponseparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onstartincominglivestreamresponseparam);
    if (message_arena != submessage_arena) {
      onstartincominglivestreamresponseparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onstartincominglivestreamresponseparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000200u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000200u;
  }
  _impl_.onstartincominglivestreamresponseparam_ = onstartincominglivestreamresponseparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParam = 45;
inline bool CallbackBody::has_onstopincominglivestreamresponseparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onstopincominglivestreamresponseparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onstopincominglivestreamresponseparam() {
  if (_impl_.onstopincominglivestreamresponseparam_ != nullptr) _impl_.onstopincominglivestreamresponseparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000400u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams& CallbackBody::_internal_onstopincominglivestreamresponseparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* p = _impl_.onstopincominglivestreamresponseparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onStopIncomingLiveStreamResponseParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams& CallbackBody::onstopincominglivestreamresponseparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParam)
  return _internal_onstopincominglivestreamresponseparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onstopincominglivestreamresponseparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* onstopincominglivestreamresponseparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onstopincominglivestreamresponseparam_);
  }
  _impl_.onstopincominglivestreamresponseparam_ = onstopincominglivestreamresponseparam;
  if (onstopincominglivestreamresponseparam) {
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* CallbackBody::release_onstopincominglivestreamresponseparam() {
  _impl_._has_bits_[1] &= ~0x00000400u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* temp = _impl_.onstopincominglivestreamresponseparam_;
  _impl_.onstopincominglivestreamresponseparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* CallbackBody::unsafe_arena_release_onstopincominglivestreamresponseparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParam)
  _impl_._has_bits_[1] &= ~0x00000400u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* temp = _impl_.onstopincominglivestreamresponseparam_;
  _impl_.onstopincominglivestreamresponseparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* CallbackBody::_internal_mutable_onstopincominglivestreamresponseparam() {
  _impl_._has_bits_[1] |= 0x00000400u;
  if (_impl_.onstopincominglivestreamresponseparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams>(GetArenaForAllocation());
    _impl_.onstopincominglivestreamresponseparam_ = p;
  }
  return _impl_.onstopincominglivestreamresponseparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* CallbackBody::mutable_onstopincominglivestreamresponseparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* _msg = _internal_mutable_onstopincominglivestreamresponseparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onstopincominglivestreamresponseparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams* onstopincominglivestreamresponseparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onstopincominglivestreamresponseparam_;
  }
  if (onstopincominglivestreamresponseparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onstopincominglivestreamresponseparam);
    if (message_arena != submessage_arena) {
      onstopincominglivestreamresponseparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onstopincominglivestreamresponseparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000400u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000400u;
  }
  _impl_.onstopincominglivestreamresponseparam_ = onstopincominglivestreamresponseparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParam)
}

// optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams onFailedToStartShareParam = 46;
inline bool CallbackBody::has_onfailedtostartshareparam() const {
  bool value = (_impl_._has_bits_[1] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.onfailedtostartshareparam_ != nullptr);
  return value;
}
inline void CallbackBody::clear_onfailedtostartshareparam() {
  if (_impl_.onfailedtostartshareparam_ != nullptr) _impl_.onfailedtostartshareparam_->Clear();
  _impl_._has_bits_[1] &= ~0x00000800u;
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams& CallbackBody::_internal_onfailedtostartshareparam() const {
  const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* p = _impl_.onfailedtostartshareparam_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams&>(
      ::com::electron::zoomvideo::sdk::proto::_CallbackBody_onFailedToStartShareParams_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams& CallbackBody::onfailedtostartshareparam() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParam)
  return _internal_onfailedtostartshareparam();
}
inline void CallbackBody::unsafe_arena_set_allocated_onfailedtostartshareparam(
    ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* onfailedtostartshareparam) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.onfailedtostartshareparam_);
  }
  _impl_.onfailedtostartshareparam_ = onfailedtostartshareparam;
  if (onfailedtostartshareparam) {
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParam)
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* CallbackBody::release_onfailedtostartshareparam() {
  _impl_._has_bits_[1] &= ~0x00000800u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* temp = _impl_.onfailedtostartshareparam_;
  _impl_.onfailedtostartshareparam_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* CallbackBody::unsafe_arena_release_onfailedtostartshareparam() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParam)
  _impl_._has_bits_[1] &= ~0x00000800u;
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* temp = _impl_.onfailedtostartshareparam_;
  _impl_.onfailedtostartshareparam_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* CallbackBody::_internal_mutable_onfailedtostartshareparam() {
  _impl_._has_bits_[1] |= 0x00000800u;
  if (_impl_.onfailedtostartshareparam_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams>(GetArenaForAllocation());
    _impl_.onfailedtostartshareparam_ = p;
  }
  return _impl_.onfailedtostartshareparam_;
}
inline ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* CallbackBody::mutable_onfailedtostartshareparam() {
  ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* _msg = _internal_mutable_onfailedtostartshareparam();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParam)
  return _msg;
}
inline void CallbackBody::set_allocated_onfailedtostartshareparam(::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams* onfailedtostartshareparam) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.onfailedtostartshareparam_;
  }
  if (onfailedtostartshareparam) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(onfailedtostartshareparam);
    if (message_arena != submessage_arena) {
      onfailedtostartshareparam = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, onfailedtostartshareparam, submessage_arena);
    }
    _impl_._has_bits_[1] |= 0x00000800u;
  } else {
    _impl_._has_bits_[1] &= ~0x00000800u;
  }
  _impl_.onfailedtostartshareparam_ = onfailedtostartshareparam;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParam)
}

// -------------------------------------------------------------------

// CreateVideoSDKObjParam

// optional string path = 1;
inline bool CreateVideoSDKObjParam::has_path() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateVideoSDKObjParam::clear_path() {
  _impl_.path_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CreateVideoSDKObjParam::path() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.path)
  return _internal_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CreateVideoSDKObjParam::set_path(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.path_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.path)
}
inline std::string* CreateVideoSDKObjParam::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.path)
  return _s;
}
inline const std::string& CreateVideoSDKObjParam::_internal_path() const {
  return _impl_.path_.Get();
}
inline void CreateVideoSDKObjParam::_internal_set_path(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.path_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateVideoSDKObjParam::_internal_mutable_path() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.path_.Mutable( GetArenaForAllocation());
}
inline std::string* CreateVideoSDKObjParam::release_path() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.path)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.path_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CreateVideoSDKObjParam::set_allocated_path(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.path_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.path_.IsDefault()) {
          _impl_.path_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.path)
}

// -------------------------------------------------------------------

// VideoSDKInitParams

// optional string domain = 1;
inline bool VideoSDKInitParams::has_domain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_domain() {
  _impl_.domain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VideoSDKInitParams::domain() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.domain)
  return _internal_domain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKInitParams::set_domain(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.domain_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.domain)
}
inline std::string* VideoSDKInitParams::mutable_domain() {
  std::string* _s = _internal_mutable_domain();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.domain)
  return _s;
}
inline const std::string& VideoSDKInitParams::_internal_domain() const {
  return _impl_.domain_.Get();
}
inline void VideoSDKInitParams::_internal_set_domain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.domain_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKInitParams::_internal_mutable_domain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.domain_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKInitParams::release_domain() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.domain)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.domain_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKInitParams::set_allocated_domain(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.domain_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.domain_.IsDefault()) {
          _impl_.domain_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.domain)
}

// optional string logFilePrefix = 2;
inline bool VideoSDKInitParams::has_logfileprefix() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_logfileprefix() {
  _impl_.logfileprefix_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VideoSDKInitParams::logfileprefix() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.logFilePrefix)
  return _internal_logfileprefix();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKInitParams::set_logfileprefix(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.logfileprefix_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.logFilePrefix)
}
inline std::string* VideoSDKInitParams::mutable_logfileprefix() {
  std::string* _s = _internal_mutable_logfileprefix();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.logFilePrefix)
  return _s;
}
inline const std::string& VideoSDKInitParams::_internal_logfileprefix() const {
  return _impl_.logfileprefix_.Get();
}
inline void VideoSDKInitParams::_internal_set_logfileprefix(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.logfileprefix_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKInitParams::_internal_mutable_logfileprefix() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.logfileprefix_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKInitParams::release_logfileprefix() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.logFilePrefix)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.logfileprefix_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logfileprefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKInitParams::set_allocated_logfileprefix(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.logfileprefix_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.logfileprefix_.IsDefault()) {
          _impl_.logfileprefix_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.logFilePrefix)
}

// optional bool enableLog = 3;
inline bool VideoSDKInitParams::has_enablelog() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_enablelog() {
  _impl_.enablelog_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool VideoSDKInitParams::enablelog() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.enableLog)
  return _internal_enablelog();
}
inline void VideoSDKInitParams::set_enablelog(bool value) {
  _internal_set_enablelog(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.enableLog)
}
inline bool VideoSDKInitParams::_internal_enablelog() const {
  return _impl_.enablelog_;
}
inline void VideoSDKInitParams::_internal_set_enablelog(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.enablelog_ = value;
}

// optional int32 audioRawDataMemoryMode = 4;
inline bool VideoSDKInitParams::has_audiorawdatamemorymode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_audiorawdatamemorymode() {
  _impl_.audiorawdatamemorymode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t VideoSDKInitParams::audiorawdatamemorymode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.audioRawDataMemoryMode)
  return _internal_audiorawdatamemorymode();
}
inline void VideoSDKInitParams::set_audiorawdatamemorymode(::int32_t value) {
  _internal_set_audiorawdatamemorymode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.audioRawDataMemoryMode)
}
inline ::int32_t VideoSDKInitParams::_internal_audiorawdatamemorymode() const {
  return _impl_.audiorawdatamemorymode_;
}
inline void VideoSDKInitParams::_internal_set_audiorawdatamemorymode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.audiorawdatamemorymode_ = value;
}

// optional int32 zn_videoRawDataMemoryMode = 5;
inline bool VideoSDKInitParams::has_zn_videorawdatamemorymode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_zn_videorawdatamemorymode() {
  _impl_.zn_videorawdatamemorymode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t VideoSDKInitParams::zn_videorawdatamemorymode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.zn_videoRawDataMemoryMode)
  return _internal_zn_videorawdatamemorymode();
}
inline void VideoSDKInitParams::set_zn_videorawdatamemorymode(::int32_t value) {
  _internal_set_zn_videorawdatamemorymode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.zn_videoRawDataMemoryMode)
}
inline ::int32_t VideoSDKInitParams::_internal_zn_videorawdatamemorymode() const {
  return _impl_.zn_videorawdatamemorymode_;
}
inline void VideoSDKInitParams::_internal_set_zn_videorawdatamemorymode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.zn_videorawdatamemorymode_ = value;
}

// optional int32 zn_shareRawDataMemoryMode = 6;
inline bool VideoSDKInitParams::has_zn_sharerawdatamemorymode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_zn_sharerawdatamemorymode() {
  _impl_.zn_sharerawdatamemorymode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t VideoSDKInitParams::zn_sharerawdatamemorymode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.zn_shareRawDataMemoryMode)
  return _internal_zn_sharerawdatamemorymode();
}
inline void VideoSDKInitParams::set_zn_sharerawdatamemorymode(::int32_t value) {
  _internal_set_zn_sharerawdatamemorymode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.zn_shareRawDataMemoryMode)
}
inline ::int32_t VideoSDKInitParams::_internal_zn_sharerawdatamemorymode() const {
  return _impl_.zn_sharerawdatamemorymode_;
}
inline void VideoSDKInitParams::_internal_set_zn_sharerawdatamemorymode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.zn_sharerawdatamemorymode_ = value;
}

// optional string speakerTestFilePath = 7;
inline bool VideoSDKInitParams::has_speakertestfilepath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VideoSDKInitParams::clear_speakertestfilepath() {
  _impl_.speakertestfilepath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VideoSDKInitParams::speakertestfilepath() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.speakerTestFilePath)
  return _internal_speakertestfilepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKInitParams::set_speakertestfilepath(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.speakertestfilepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.speakerTestFilePath)
}
inline std::string* VideoSDKInitParams::mutable_speakertestfilepath() {
  std::string* _s = _internal_mutable_speakertestfilepath();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.speakerTestFilePath)
  return _s;
}
inline const std::string& VideoSDKInitParams::_internal_speakertestfilepath() const {
  return _impl_.speakertestfilepath_.Get();
}
inline void VideoSDKInitParams::_internal_set_speakertestfilepath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.speakertestfilepath_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKInitParams::_internal_mutable_speakertestfilepath() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.speakertestfilepath_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKInitParams::release_speakertestfilepath() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.speakerTestFilePath)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.speakertestfilepath_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.speakertestfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKInitParams::set_allocated_speakertestfilepath(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.speakertestfilepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.speakertestfilepath_.IsDefault()) {
          _impl_.speakertestfilepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.speakerTestFilePath)
}

// -------------------------------------------------------------------

// VideoSDKSessionContext

// optional string sessionName = 1;
inline bool VideoSDKSessionContext::has_sessionname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_sessionname() {
  _impl_.sessionname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VideoSDKSessionContext::sessionname() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionName)
  return _internal_sessionname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKSessionContext::set_sessionname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.sessionname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionName)
}
inline std::string* VideoSDKSessionContext::mutable_sessionname() {
  std::string* _s = _internal_mutable_sessionname();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionName)
  return _s;
}
inline const std::string& VideoSDKSessionContext::_internal_sessionname() const {
  return _impl_.sessionname_.Get();
}
inline void VideoSDKSessionContext::_internal_set_sessionname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.sessionname_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::_internal_mutable_sessionname() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.sessionname_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::release_sessionname() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionName)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.sessionname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKSessionContext::set_allocated_sessionname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.sessionname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionname_.IsDefault()) {
          _impl_.sessionname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionName)
}

// optional string sessionPassword = 2;
inline bool VideoSDKSessionContext::has_sessionpassword() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_sessionpassword() {
  _impl_.sessionpassword_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VideoSDKSessionContext::sessionpassword() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionPassword)
  return _internal_sessionpassword();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKSessionContext::set_sessionpassword(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sessionpassword_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionPassword)
}
inline std::string* VideoSDKSessionContext::mutable_sessionpassword() {
  std::string* _s = _internal_mutable_sessionpassword();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionPassword)
  return _s;
}
inline const std::string& VideoSDKSessionContext::_internal_sessionpassword() const {
  return _impl_.sessionpassword_.Get();
}
inline void VideoSDKSessionContext::_internal_set_sessionpassword(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.sessionpassword_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::_internal_mutable_sessionpassword() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.sessionpassword_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::release_sessionpassword() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionPassword)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.sessionpassword_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionpassword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKSessionContext::set_allocated_sessionpassword(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sessionpassword_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.sessionpassword_.IsDefault()) {
          _impl_.sessionpassword_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionPassword)
}

// optional string token = 3;
inline bool VideoSDKSessionContext::has_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_token() {
  _impl_.token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VideoSDKSessionContext::token() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.token)
  return _internal_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKSessionContext::set_token(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.token)
}
inline std::string* VideoSDKSessionContext::mutable_token() {
  std::string* _s = _internal_mutable_token();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.token)
  return _s;
}
inline const std::string& VideoSDKSessionContext::_internal_token() const {
  return _impl_.token_.Get();
}
inline void VideoSDKSessionContext::_internal_set_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.token_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::_internal_mutable_token() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.token_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::release_token() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.token)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKSessionContext::set_allocated_token(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.token_.IsDefault()) {
          _impl_.token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.token)
}

// optional string userName = 4;
inline bool VideoSDKSessionContext::has_username() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_username() {
  _impl_.username_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VideoSDKSessionContext::username() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.userName)
  return _internal_username();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VideoSDKSessionContext::set_username(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.username_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.userName)
}
inline std::string* VideoSDKSessionContext::mutable_username() {
  std::string* _s = _internal_mutable_username();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.userName)
  return _s;
}
inline const std::string& VideoSDKSessionContext::_internal_username() const {
  return _impl_.username_.Get();
}
inline void VideoSDKSessionContext::_internal_set_username(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.username_.Set(value, GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::_internal_mutable_username() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.username_.Mutable( GetArenaForAllocation());
}
inline std::string* VideoSDKSessionContext::release_username() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.userName)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.username_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VideoSDKSessionContext::set_allocated_username(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.username_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.username_.IsDefault()) {
          _impl_.username_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.userName)
}

// optional bool localVideoOn = 5;
inline bool VideoSDKSessionContext::has_localvideoon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_localvideoon() {
  _impl_.localvideoon_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool VideoSDKSessionContext::localvideoon() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.localVideoOn)
  return _internal_localvideoon();
}
inline void VideoSDKSessionContext::set_localvideoon(bool value) {
  _internal_set_localvideoon(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.localVideoOn)
}
inline bool VideoSDKSessionContext::_internal_localvideoon() const {
  return _impl_.localvideoon_;
}
inline void VideoSDKSessionContext::_internal_set_localvideoon(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.localvideoon_ = value;
}

// optional bool connect = 6;
inline bool VideoSDKSessionContext::has_connect() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_connect() {
  _impl_.connect_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool VideoSDKSessionContext::connect() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.connect)
  return _internal_connect();
}
inline void VideoSDKSessionContext::set_connect(bool value) {
  _internal_set_connect(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.connect)
}
inline bool VideoSDKSessionContext::_internal_connect() const {
  return _impl_.connect_;
}
inline void VideoSDKSessionContext::_internal_set_connect(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.connect_ = value;
}

// optional bool mute = 7;
inline bool VideoSDKSessionContext::has_mute() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_mute() {
  _impl_.mute_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool VideoSDKSessionContext::mute() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.mute)
  return _internal_mute();
}
inline void VideoSDKSessionContext::set_mute(bool value) {
  _internal_set_mute(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.mute)
}
inline bool VideoSDKSessionContext::_internal_mute() const {
  return _impl_.mute_;
}
inline void VideoSDKSessionContext::_internal_set_mute(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.mute_ = value;
}

// optional bool preProcessor = 8;
inline bool VideoSDKSessionContext::has_preprocessor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_preprocessor() {
  _impl_.preprocessor_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool VideoSDKSessionContext::preprocessor() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.preProcessor)
  return _internal_preprocessor();
}
inline void VideoSDKSessionContext::set_preprocessor(bool value) {
  _internal_set_preprocessor(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.preProcessor)
}
inline bool VideoSDKSessionContext::_internal_preprocessor() const {
  return _impl_.preprocessor_;
}
inline void VideoSDKSessionContext::_internal_set_preprocessor(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.preprocessor_ = value;
}

// optional bool externalVideoSource = 9;
inline bool VideoSDKSessionContext::has_externalvideosource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_externalvideosource() {
  _impl_.externalvideosource_ = false;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline bool VideoSDKSessionContext::externalvideosource() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.externalVideoSource)
  return _internal_externalvideosource();
}
inline void VideoSDKSessionContext::set_externalvideosource(bool value) {
  _internal_set_externalvideosource(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.externalVideoSource)
}
inline bool VideoSDKSessionContext::_internal_externalvideosource() const {
  return _impl_.externalvideosource_;
}
inline void VideoSDKSessionContext::_internal_set_externalvideosource(bool value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.externalvideosource_ = value;
}

// optional uint32 sessionIdleTimeoutMins = 10;
inline bool VideoSDKSessionContext::has_sessionidletimeoutmins() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void VideoSDKSessionContext::clear_sessionidletimeoutmins() {
  _impl_.sessionidletimeoutmins_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::uint32_t VideoSDKSessionContext::sessionidletimeoutmins() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionIdleTimeoutMins)
  return _internal_sessionidletimeoutmins();
}
inline void VideoSDKSessionContext::set_sessionidletimeoutmins(::uint32_t value) {
  _internal_set_sessionidletimeoutmins(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.sessionIdleTimeoutMins)
}
inline ::uint32_t VideoSDKSessionContext::_internal_sessionidletimeoutmins() const {
  return _impl_.sessionidletimeoutmins_;
}
inline void VideoSDKSessionContext::_internal_set_sessionidletimeoutmins(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.sessionidletimeoutmins_ = value;
}

// -------------------------------------------------------------------

// LeaveSessionParams

// optional bool zn_bEnd = 1;
inline bool LeaveSessionParams::has_zn_bend() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LeaveSessionParams::clear_zn_bend() {
  _impl_.zn_bend_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool LeaveSessionParams::zn_bend() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LeaveSessionParams.zn_bEnd)
  return _internal_zn_bend();
}
inline void LeaveSessionParams::set_zn_bend(bool value) {
  _internal_set_zn_bend(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LeaveSessionParams.zn_bEnd)
}
inline bool LeaveSessionParams::_internal_zn_bend() const {
  return _impl_.zn_bend_;
}
inline void LeaveSessionParams::_internal_set_zn_bend(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_bend_ = value;
}

// -------------------------------------------------------------------

// SessionPasswordParams

// optional string zn_password = 1;
inline bool SessionPasswordParams::has_zn_password() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SessionPasswordParams::clear_zn_password() {
  _impl_.zn_password_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SessionPasswordParams::zn_password() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SessionPasswordParams.zn_password)
  return _internal_zn_password();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SessionPasswordParams::set_zn_password(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_password_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SessionPasswordParams.zn_password)
}
inline std::string* SessionPasswordParams::mutable_zn_password() {
  std::string* _s = _internal_mutable_zn_password();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SessionPasswordParams.zn_password)
  return _s;
}
inline const std::string& SessionPasswordParams::_internal_zn_password() const {
  return _impl_.zn_password_.Get();
}
inline void SessionPasswordParams::_internal_set_zn_password(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_password_.Set(value, GetArenaForAllocation());
}
inline std::string* SessionPasswordParams::_internal_mutable_zn_password() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_password_.Mutable( GetArenaForAllocation());
}
inline std::string* SessionPasswordParams::release_zn_password() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SessionPasswordParams.zn_password)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_password_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SessionPasswordParams::set_allocated_zn_password(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_password_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_password_.IsDefault()) {
          _impl_.zn_password_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SessionPasswordParams.zn_password)
}

// -------------------------------------------------------------------

// MuteAudioParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool MuteAudioParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void MuteAudioParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& MuteAudioParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& MuteAudioParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MuteAudioParams.user)
  return _internal_user();
}
inline void MuteAudioParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.MuteAudioParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MuteAudioParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MuteAudioParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.MuteAudioParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MuteAudioParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MuteAudioParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MuteAudioParams.user)
  return _msg;
}
inline void MuteAudioParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.MuteAudioParams.user)
}

// -------------------------------------------------------------------

// UnMuteAudioParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool UnMuteAudioParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void UnMuteAudioParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnMuteAudioParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnMuteAudioParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.user)
  return _internal_user();
}
inline void UnMuteAudioParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnMuteAudioParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnMuteAudioParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnMuteAudioParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnMuteAudioParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.user)
  return _msg;
}
inline void UnMuteAudioParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.user)
}

// -------------------------------------------------------------------

// SetSpeakerParams

// optional bool zn_speaker = 1;
inline bool SetSpeakerParams::has_zn_speaker() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetSpeakerParams::clear_zn_speaker() {
  _impl_.zn_speaker_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool SetSpeakerParams::zn_speaker() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetSpeakerParams.zn_speaker)
  return _internal_zn_speaker();
}
inline void SetSpeakerParams::set_zn_speaker(bool value) {
  _internal_set_zn_speaker(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetSpeakerParams.zn_speaker)
}
inline bool SetSpeakerParams::_internal_zn_speaker() const {
  return _impl_.zn_speaker_;
}
inline void SetSpeakerParams::_internal_set_zn_speaker(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_speaker_ = value;
}

// -------------------------------------------------------------------

// SelectSpeakerParams

// optional string zn_deviceid = 1;
inline bool SelectSpeakerParams::has_zn_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelectSpeakerParams::clear_zn_deviceid() {
  _impl_.zn_deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectSpeakerParams::zn_deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_deviceid)
  return _internal_zn_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectSpeakerParams::set_zn_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_deviceid)
}
inline std::string* SelectSpeakerParams::mutable_zn_deviceid() {
  std::string* _s = _internal_mutable_zn_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_deviceid)
  return _s;
}
inline const std::string& SelectSpeakerParams::_internal_zn_deviceid() const {
  return _impl_.zn_deviceid_.Get();
}
inline void SelectSpeakerParams::_internal_set_zn_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::_internal_mutable_zn_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::release_zn_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_deviceid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectSpeakerParams::set_allocated_zn_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_deviceid_.IsDefault()) {
          _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_deviceid)
}

// optional string zn_devicename = 2;
inline bool SelectSpeakerParams::has_zn_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SelectSpeakerParams::clear_zn_devicename() {
  _impl_.zn_devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SelectSpeakerParams::zn_devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_devicename)
  return _internal_zn_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectSpeakerParams::set_zn_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_devicename)
}
inline std::string* SelectSpeakerParams::mutable_zn_devicename() {
  std::string* _s = _internal_mutable_zn_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_devicename)
  return _s;
}
inline const std::string& SelectSpeakerParams::_internal_zn_devicename() const {
  return _impl_.zn_devicename_.Get();
}
inline void SelectSpeakerParams::_internal_set_zn_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.zn_devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::_internal_mutable_zn_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.zn_devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectSpeakerParams::release_zn_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_devicename)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.zn_devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectSpeakerParams::set_allocated_zn_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.zn_devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_devicename_.IsDefault()) {
          _impl_.zn_devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.zn_devicename)
}

// -------------------------------------------------------------------

// SelectMicParams

// optional string zn_deviceid = 1;
inline bool SelectMicParams::has_zn_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelectMicParams::clear_zn_deviceid() {
  _impl_.zn_deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectMicParams::zn_deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_deviceid)
  return _internal_zn_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectMicParams::set_zn_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_deviceid)
}
inline std::string* SelectMicParams::mutable_zn_deviceid() {
  std::string* _s = _internal_mutable_zn_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_deviceid)
  return _s;
}
inline const std::string& SelectMicParams::_internal_zn_deviceid() const {
  return _impl_.zn_deviceid_.Get();
}
inline void SelectMicParams::_internal_set_zn_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectMicParams::_internal_mutable_zn_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectMicParams::release_zn_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_deviceid)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectMicParams::set_allocated_zn_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_deviceid_.IsDefault()) {
          _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_deviceid)
}

// optional string zn_devicename = 2;
inline bool SelectMicParams::has_zn_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SelectMicParams::clear_zn_devicename() {
  _impl_.zn_devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SelectMicParams::zn_devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_devicename)
  return _internal_zn_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectMicParams::set_zn_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_devicename)
}
inline std::string* SelectMicParams::mutable_zn_devicename() {
  std::string* _s = _internal_mutable_zn_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_devicename)
  return _s;
}
inline const std::string& SelectMicParams::_internal_zn_devicename() const {
  return _impl_.zn_devicename_.Get();
}
inline void SelectMicParams::_internal_set_zn_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.zn_devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectMicParams::_internal_mutable_zn_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.zn_devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectMicParams::release_zn_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_devicename)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.zn_devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectMicParams::set_allocated_zn_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.zn_devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_devicename_.IsDefault()) {
          _impl_.zn_devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SelectMicParams.zn_devicename)
}

// -------------------------------------------------------------------

// SendChatToUserParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool SendChatToUserParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void SendChatToUserParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SendChatToUserParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SendChatToUserParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.user)
  return _internal_user();
}
inline void SendChatToUserParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendChatToUserParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendChatToUserParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendChatToUserParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendChatToUserParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.user)
  return _msg;
}
inline void SendChatToUserParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.user)
}

// optional string zn_msgContent = 2;
inline bool SendChatToUserParams::has_zn_msgcontent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendChatToUserParams::clear_zn_msgcontent() {
  _impl_.zn_msgcontent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendChatToUserParams::zn_msgcontent() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.zn_msgContent)
  return _internal_zn_msgcontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatToUserParams::set_zn_msgcontent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_msgcontent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.zn_msgContent)
}
inline std::string* SendChatToUserParams::mutable_zn_msgcontent() {
  std::string* _s = _internal_mutable_zn_msgcontent();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.zn_msgContent)
  return _s;
}
inline const std::string& SendChatToUserParams::_internal_zn_msgcontent() const {
  return _impl_.zn_msgcontent_.Get();
}
inline void SendChatToUserParams::_internal_set_zn_msgcontent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_msgcontent_.Set(value, GetArenaForAllocation());
}
inline std::string* SendChatToUserParams::_internal_mutable_zn_msgcontent() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_msgcontent_.Mutable( GetArenaForAllocation());
}
inline std::string* SendChatToUserParams::release_zn_msgcontent() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.zn_msgContent)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_msgcontent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SendChatToUserParams::set_allocated_zn_msgcontent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_msgcontent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_msgcontent_.IsDefault()) {
          _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SendChatToUserParams.zn_msgContent)
}

// -------------------------------------------------------------------

// SendChatToAllParams

// optional string zn_msgContent = 1;
inline bool SendChatToAllParams::has_zn_msgcontent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendChatToAllParams::clear_zn_msgcontent() {
  _impl_.zn_msgcontent_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendChatToAllParams::zn_msgcontent() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SendChatToAllParams.zn_msgContent)
  return _internal_zn_msgcontent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendChatToAllParams::set_zn_msgcontent(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_msgcontent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SendChatToAllParams.zn_msgContent)
}
inline std::string* SendChatToAllParams::mutable_zn_msgcontent() {
  std::string* _s = _internal_mutable_zn_msgcontent();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SendChatToAllParams.zn_msgContent)
  return _s;
}
inline const std::string& SendChatToAllParams::_internal_zn_msgcontent() const {
  return _impl_.zn_msgcontent_.Get();
}
inline void SendChatToAllParams::_internal_set_zn_msgcontent(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_msgcontent_.Set(value, GetArenaForAllocation());
}
inline std::string* SendChatToAllParams::_internal_mutable_zn_msgcontent() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_msgcontent_.Mutable( GetArenaForAllocation());
}
inline std::string* SendChatToAllParams::release_zn_msgcontent() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SendChatToAllParams.zn_msgContent)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_msgcontent_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SendChatToAllParams::set_allocated_zn_msgcontent(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_msgcontent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_msgcontent_.IsDefault()) {
          _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SendChatToAllParams.zn_msgContent)
}

// -------------------------------------------------------------------

// StartLiveStreamParams

// optional string zn_streamUrl = 1;
inline bool StartLiveStreamParams::has_zn_streamurl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartLiveStreamParams::clear_zn_streamurl() {
  _impl_.zn_streamurl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartLiveStreamParams::zn_streamurl() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_streamUrl)
  return _internal_zn_streamurl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartLiveStreamParams::set_zn_streamurl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_streamurl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_streamUrl)
}
inline std::string* StartLiveStreamParams::mutable_zn_streamurl() {
  std::string* _s = _internal_mutable_zn_streamurl();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_streamUrl)
  return _s;
}
inline const std::string& StartLiveStreamParams::_internal_zn_streamurl() const {
  return _impl_.zn_streamurl_.Get();
}
inline void StartLiveStreamParams::_internal_set_zn_streamurl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_streamurl_.Set(value, GetArenaForAllocation());
}
inline std::string* StartLiveStreamParams::_internal_mutable_zn_streamurl() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_streamurl_.Mutable( GetArenaForAllocation());
}
inline std::string* StartLiveStreamParams::release_zn_streamurl() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_streamUrl)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_streamurl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_streamurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartLiveStreamParams::set_allocated_zn_streamurl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_streamurl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_streamurl_.IsDefault()) {
          _impl_.zn_streamurl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_streamUrl)
}

// optional string zn_key = 2;
inline bool StartLiveStreamParams::has_zn_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartLiveStreamParams::clear_zn_key() {
  _impl_.zn_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& StartLiveStreamParams::zn_key() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_key)
  return _internal_zn_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartLiveStreamParams::set_zn_key(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_key_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_key)
}
inline std::string* StartLiveStreamParams::mutable_zn_key() {
  std::string* _s = _internal_mutable_zn_key();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_key)
  return _s;
}
inline const std::string& StartLiveStreamParams::_internal_zn_key() const {
  return _impl_.zn_key_.Get();
}
inline void StartLiveStreamParams::_internal_set_zn_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.zn_key_.Set(value, GetArenaForAllocation());
}
inline std::string* StartLiveStreamParams::_internal_mutable_zn_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.zn_key_.Mutable( GetArenaForAllocation());
}
inline std::string* StartLiveStreamParams::release_zn_key() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.zn_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartLiveStreamParams::set_allocated_zn_key(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.zn_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_key_.IsDefault()) {
          _impl_.zn_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_key)
}

// optional string zn_broadcastUrl = 3;
inline bool StartLiveStreamParams::has_zn_broadcasturl() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartLiveStreamParams::clear_zn_broadcasturl() {
  _impl_.zn_broadcasturl_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& StartLiveStreamParams::zn_broadcasturl() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_broadcastUrl)
  return _internal_zn_broadcasturl();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartLiveStreamParams::set_zn_broadcasturl(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zn_broadcasturl_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_broadcastUrl)
}
inline std::string* StartLiveStreamParams::mutable_zn_broadcasturl() {
  std::string* _s = _internal_mutable_zn_broadcasturl();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_broadcastUrl)
  return _s;
}
inline const std::string& StartLiveStreamParams::_internal_zn_broadcasturl() const {
  return _impl_.zn_broadcasturl_.Get();
}
inline void StartLiveStreamParams::_internal_set_zn_broadcasturl(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.zn_broadcasturl_.Set(value, GetArenaForAllocation());
}
inline std::string* StartLiveStreamParams::_internal_mutable_zn_broadcasturl() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.zn_broadcasturl_.Mutable( GetArenaForAllocation());
}
inline std::string* StartLiveStreamParams::release_zn_broadcasturl() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_broadcastUrl)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.zn_broadcasturl_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartLiveStreamParams::set_allocated_zn_broadcasturl(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.zn_broadcasturl_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_broadcasturl_.IsDefault()) {
          _impl_.zn_broadcasturl_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.zn_broadcastUrl)
}

// -------------------------------------------------------------------

// IncomingLiveStreamParams

// optional string strStreamKeyID = 1;
inline bool IncomingLiveStreamParams::has_strstreamkeyid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IncomingLiveStreamParams::clear_strstreamkeyid() {
  _impl_.strstreamkeyid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IncomingLiveStreamParams::strstreamkeyid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.strStreamKeyID)
  return _internal_strstreamkeyid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IncomingLiveStreamParams::set_strstreamkeyid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strstreamkeyid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.strStreamKeyID)
}
inline std::string* IncomingLiveStreamParams::mutable_strstreamkeyid() {
  std::string* _s = _internal_mutable_strstreamkeyid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.strStreamKeyID)
  return _s;
}
inline const std::string& IncomingLiveStreamParams::_internal_strstreamkeyid() const {
  return _impl_.strstreamkeyid_.Get();
}
inline void IncomingLiveStreamParams::_internal_set_strstreamkeyid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strstreamkeyid_.Set(value, GetArenaForAllocation());
}
inline std::string* IncomingLiveStreamParams::_internal_mutable_strstreamkeyid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strstreamkeyid_.Mutable( GetArenaForAllocation());
}
inline std::string* IncomingLiveStreamParams::release_strstreamkeyid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.strStreamKeyID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strstreamkeyid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void IncomingLiveStreamParams::set_allocated_strstreamkeyid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strstreamkeyid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strstreamkeyid_.IsDefault()) {
          _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.strStreamKeyID)
}

// -------------------------------------------------------------------

// StartShareViewParams

// optional string zn_handle = 1;
inline bool StartShareViewParams::has_zn_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartShareViewParams::clear_zn_handle() {
  _impl_.zn_handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartShareViewParams::zn_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShareViewParams.zn_handle)
  return _internal_zn_handle();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartShareViewParams::set_zn_handle(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_handle_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShareViewParams.zn_handle)
}
inline std::string* StartShareViewParams::mutable_zn_handle() {
  std::string* _s = _internal_mutable_zn_handle();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartShareViewParams.zn_handle)
  return _s;
}
inline const std::string& StartShareViewParams::_internal_zn_handle() const {
  return _impl_.zn_handle_.Get();
}
inline void StartShareViewParams::_internal_set_zn_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* StartShareViewParams::_internal_mutable_zn_handle() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_handle_.Mutable( GetArenaForAllocation());
}
inline std::string* StartShareViewParams::release_zn_handle() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartShareViewParams.zn_handle)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_handle_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_handle_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartShareViewParams::set_allocated_zn_handle(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_handle_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_handle_.IsDefault()) {
          _impl_.zn_handle_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartShareViewParams.zn_handle)
}

// optional bool isWithDeviceAudio = 2;
inline bool StartShareViewParams::has_iswithdeviceaudio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartShareViewParams::clear_iswithdeviceaudio() {
  _impl_.iswithdeviceaudio_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool StartShareViewParams::iswithdeviceaudio() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShareViewParams.isWithDeviceAudio)
  return _internal_iswithdeviceaudio();
}
inline void StartShareViewParams::set_iswithdeviceaudio(bool value) {
  _internal_set_iswithdeviceaudio(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShareViewParams.isWithDeviceAudio)
}
inline bool StartShareViewParams::_internal_iswithdeviceaudio() const {
  return _impl_.iswithdeviceaudio_;
}
inline void StartShareViewParams::_internal_set_iswithdeviceaudio(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iswithdeviceaudio_ = value;
}

// optional bool isOptimizeForSharedVideo = 3;
inline bool StartShareViewParams::has_isoptimizeforsharedvideo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartShareViewParams::clear_isoptimizeforsharedvideo() {
  _impl_.isoptimizeforsharedvideo_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool StartShareViewParams::isoptimizeforsharedvideo() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShareViewParams.isOptimizeForSharedVideo)
  return _internal_isoptimizeforsharedvideo();
}
inline void StartShareViewParams::set_isoptimizeforsharedvideo(bool value) {
  _internal_set_isoptimizeforsharedvideo(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShareViewParams.isOptimizeForSharedVideo)
}
inline bool StartShareViewParams::_internal_isoptimizeforsharedvideo() const {
  return _impl_.isoptimizeforsharedvideo_;
}
inline void StartShareViewParams::_internal_set_isoptimizeforsharedvideo(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isoptimizeforsharedvideo_ = value;
}

// -------------------------------------------------------------------

// StartShareScreenParams

// optional string zn_monitorID = 1;
inline bool StartShareScreenParams::has_zn_monitorid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartShareScreenParams::clear_zn_monitorid() {
  _impl_.zn_monitorid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartShareScreenParams::zn_monitorid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.zn_monitorID)
  return _internal_zn_monitorid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartShareScreenParams::set_zn_monitorid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_monitorid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.zn_monitorID)
}
inline std::string* StartShareScreenParams::mutable_zn_monitorid() {
  std::string* _s = _internal_mutable_zn_monitorid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.zn_monitorID)
  return _s;
}
inline const std::string& StartShareScreenParams::_internal_zn_monitorid() const {
  return _impl_.zn_monitorid_.Get();
}
inline void StartShareScreenParams::_internal_set_zn_monitorid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_monitorid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartShareScreenParams::_internal_mutable_zn_monitorid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_monitorid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartShareScreenParams::release_zn_monitorid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.zn_monitorID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_monitorid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartShareScreenParams::set_allocated_zn_monitorid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_monitorid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_monitorid_.IsDefault()) {
          _impl_.zn_monitorid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.zn_monitorID)
}

// optional bool isWithDeviceAudio = 2;
inline bool StartShareScreenParams::has_iswithdeviceaudio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartShareScreenParams::clear_iswithdeviceaudio() {
  _impl_.iswithdeviceaudio_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool StartShareScreenParams::iswithdeviceaudio() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.isWithDeviceAudio)
  return _internal_iswithdeviceaudio();
}
inline void StartShareScreenParams::set_iswithdeviceaudio(bool value) {
  _internal_set_iswithdeviceaudio(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.isWithDeviceAudio)
}
inline bool StartShareScreenParams::_internal_iswithdeviceaudio() const {
  return _impl_.iswithdeviceaudio_;
}
inline void StartShareScreenParams::_internal_set_iswithdeviceaudio(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.iswithdeviceaudio_ = value;
}

// optional bool isOptimizeForSharedVideo = 3;
inline bool StartShareScreenParams::has_isoptimizeforsharedvideo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void StartShareScreenParams::clear_isoptimizeforsharedvideo() {
  _impl_.isoptimizeforsharedvideo_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool StartShareScreenParams::isoptimizeforsharedvideo() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.isOptimizeForSharedVideo)
  return _internal_isoptimizeforsharedvideo();
}
inline void StartShareScreenParams::set_isoptimizeforsharedvideo(bool value) {
  _internal_set_isoptimizeforsharedvideo(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShareScreenParams.isOptimizeForSharedVideo)
}
inline bool StartShareScreenParams::_internal_isoptimizeforsharedvideo() const {
  return _impl_.isoptimizeforsharedvideo_;
}
inline void StartShareScreenParams::_internal_set_isoptimizeforsharedvideo(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isoptimizeforsharedvideo_ = value;
}

// -------------------------------------------------------------------

// LockShareParams

// optional bool zn_bLock = 1;
inline bool LockShareParams::has_zn_block() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LockShareParams::clear_zn_block() {
  _impl_.zn_block_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool LockShareParams::zn_block() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LockShareParams.zn_bLock)
  return _internal_zn_block();
}
inline void LockShareParams::set_zn_block(bool value) {
  _internal_set_zn_block(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LockShareParams.zn_bLock)
}
inline bool LockShareParams::_internal_zn_block() const {
  return _impl_.zn_block_;
}
inline void LockShareParams::_internal_set_zn_block(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_block_ = value;
}

// -------------------------------------------------------------------

// EnableShareDeviceAudioParams

// optional bool enable = 1;
inline bool EnableShareDeviceAudioParams::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableShareDeviceAudioParams::clear_enable() {
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableShareDeviceAudioParams::enable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.enable)
  return _internal_enable();
}
inline void EnableShareDeviceAudioParams::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.enable)
}
inline bool EnableShareDeviceAudioParams::_internal_enable() const {
  return _impl_.enable_;
}
inline void EnableShareDeviceAudioParams::_internal_set_enable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_ = value;
}

// -------------------------------------------------------------------

// EnableOptimizeForSharedVideoParams

// optional bool enable = 1;
inline bool EnableOptimizeForSharedVideoParams::has_enable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableOptimizeForSharedVideoParams::clear_enable() {
  _impl_.enable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableOptimizeForSharedVideoParams::enable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.enable)
  return _internal_enable();
}
inline void EnableOptimizeForSharedVideoParams::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.enable)
}
inline bool EnableOptimizeForSharedVideoParams::_internal_enable() const {
  return _impl_.enable_;
}
inline void EnableOptimizeForSharedVideoParams::_internal_set_enable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.enable_ = value;
}

// -------------------------------------------------------------------

// StartShare2ndCameraParams

// optional string zn_cameraID = 1;
inline bool StartShare2ndCameraParams::has_zn_cameraid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartShare2ndCameraParams::clear_zn_cameraid() {
  _impl_.zn_cameraid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartShare2ndCameraParams::zn_cameraid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.zn_cameraID)
  return _internal_zn_cameraid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartShare2ndCameraParams::set_zn_cameraid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_cameraid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.zn_cameraID)
}
inline std::string* StartShare2ndCameraParams::mutable_zn_cameraid() {
  std::string* _s = _internal_mutable_zn_cameraid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.zn_cameraID)
  return _s;
}
inline const std::string& StartShare2ndCameraParams::_internal_zn_cameraid() const {
  return _impl_.zn_cameraid_.Get();
}
inline void StartShare2ndCameraParams::_internal_set_zn_cameraid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_cameraid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartShare2ndCameraParams::_internal_mutable_zn_cameraid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_cameraid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartShare2ndCameraParams::release_zn_cameraid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.zn_cameraID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_cameraid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartShare2ndCameraParams::set_allocated_zn_cameraid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_cameraid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_cameraid_.IsDefault()) {
          _impl_.zn_cameraid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.zn_cameraID)
}

// -------------------------------------------------------------------

// GetRemoteUsersParams

// optional int64 zn_options = 1;
inline bool GetRemoteUsersParams::has_zn_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetRemoteUsersParams::clear_zn_options() {
  _impl_.zn_options_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t GetRemoteUsersParams::zn_options() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.zn_options)
  return _internal_zn_options();
}
inline void GetRemoteUsersParams::set_zn_options(::int64_t value) {
  _internal_set_zn_options(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.zn_options)
}
inline ::int64_t GetRemoteUsersParams::_internal_zn_options() const {
  return _impl_.zn_options_;
}
inline void GetRemoteUsersParams::_internal_set_zn_options(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_options_ = value;
}

// -------------------------------------------------------------------

// GetMyInfoParams

// optional int64 zn_options = 1;
inline bool GetMyInfoParams::has_zn_options() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetMyInfoParams::clear_zn_options() {
  _impl_.zn_options_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t GetMyInfoParams::zn_options() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetMyInfoParams.zn_options)
  return _internal_zn_options();
}
inline void GetMyInfoParams::set_zn_options(::int64_t value) {
  _internal_set_zn_options(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.GetMyInfoParams.zn_options)
}
inline ::int64_t GetMyInfoParams::_internal_zn_options() const {
  return _impl_.zn_options_;
}
inline void GetMyInfoParams::_internal_set_zn_options(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_options_ = value;
}

// -------------------------------------------------------------------

// ChangeNameParams

// optional string zn_name = 1;
inline bool ChangeNameParams::has_zn_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ChangeNameParams::clear_zn_name() {
  _impl_.zn_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ChangeNameParams::zn_name() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ChangeNameParams.zn_name)
  return _internal_zn_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ChangeNameParams::set_zn_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.ChangeNameParams.zn_name)
}
inline std::string* ChangeNameParams::mutable_zn_name() {
  std::string* _s = _internal_mutable_zn_name();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.ChangeNameParams.zn_name)
  return _s;
}
inline const std::string& ChangeNameParams::_internal_zn_name() const {
  return _impl_.zn_name_.Get();
}
inline void ChangeNameParams::_internal_set_zn_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChangeNameParams::_internal_mutable_zn_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_name_.Mutable( GetArenaForAllocation());
}
inline std::string* ChangeNameParams::release_zn_name() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.ChangeNameParams.zn_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ChangeNameParams::set_allocated_zn_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_name_.IsDefault()) {
          _impl_.zn_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.ChangeNameParams.zn_name)
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool ChangeNameParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void ChangeNameParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& ChangeNameParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& ChangeNameParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.ChangeNameParams.user)
  return _internal_user();
}
inline void ChangeNameParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.ChangeNameParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* ChangeNameParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* ChangeNameParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.ChangeNameParams.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* ChangeNameParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* ChangeNameParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.ChangeNameParams.user)
  return _msg;
}
inline void ChangeNameParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.ChangeNameParams.user)
}

// -------------------------------------------------------------------

// MakeHostParams

// optional string zn_name = 1;
inline bool MakeHostParams::has_zn_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MakeHostParams::clear_zn_name() {
  _impl_.zn_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MakeHostParams::zn_name() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MakeHostParams.zn_name)
  return _internal_zn_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MakeHostParams::set_zn_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.MakeHostParams.zn_name)
}
inline std::string* MakeHostParams::mutable_zn_name() {
  std::string* _s = _internal_mutable_zn_name();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MakeHostParams.zn_name)
  return _s;
}
inline const std::string& MakeHostParams::_internal_zn_name() const {
  return _impl_.zn_name_.Get();
}
inline void MakeHostParams::_internal_set_zn_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_name_.Set(value, GetArenaForAllocation());
}
inline std::string* MakeHostParams::_internal_mutable_zn_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_name_.Mutable( GetArenaForAllocation());
}
inline std::string* MakeHostParams::release_zn_name() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.MakeHostParams.zn_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MakeHostParams::set_allocated_zn_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_name_.IsDefault()) {
          _impl_.zn_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.MakeHostParams.zn_name)
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool MakeHostParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void MakeHostParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& MakeHostParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& MakeHostParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MakeHostParams.user)
  return _internal_user();
}
inline void MakeHostParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.MakeHostParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeHostParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeHostParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.MakeHostParams.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeHostParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeHostParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MakeHostParams.user)
  return _msg;
}
inline void MakeHostParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.MakeHostParams.user)
}

// -------------------------------------------------------------------

// MakeManagerParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool MakeManagerParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void MakeManagerParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& MakeManagerParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& MakeManagerParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MakeManagerParams.user)
  return _internal_user();
}
inline void MakeManagerParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.MakeManagerParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeManagerParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeManagerParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.MakeManagerParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeManagerParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* MakeManagerParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MakeManagerParams.user)
  return _msg;
}
inline void MakeManagerParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.MakeManagerParams.user)
}

// -------------------------------------------------------------------

// RevokeManagerParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool RevokeManagerParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RevokeManagerParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RevokeManagerParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RevokeManagerParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RevokeManagerParams.user)
  return _internal_user();
}
inline void RevokeManagerParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RevokeManagerParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RevokeManagerParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RevokeManagerParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RevokeManagerParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RevokeManagerParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RevokeManagerParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RevokeManagerParams.user)
  return _msg;
}
inline void RevokeManagerParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RevokeManagerParams.user)
}

// -------------------------------------------------------------------

// RemoveUserParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool RemoveUserParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoveUserParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoveUserParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoveUserParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoveUserParams.user)
  return _internal_user();
}
inline void RemoveUserParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoveUserParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoveUserParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoveUserParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoveUserParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoveUserParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoveUserParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoveUserParams.user)
  return _msg;
}
inline void RemoveUserParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoveUserParams.user)
}

// -------------------------------------------------------------------

// RotateMyVideoParams

// optional int32 zn_rotation = 1;
inline bool RotateMyVideoParams::has_zn_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RotateMyVideoParams::clear_zn_rotation() {
  _impl_.zn_rotation_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t RotateMyVideoParams::zn_rotation() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.zn_rotation)
  return _internal_zn_rotation();
}
inline void RotateMyVideoParams::set_zn_rotation(::int32_t value) {
  _internal_set_zn_rotation(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.zn_rotation)
}
inline ::int32_t RotateMyVideoParams::_internal_zn_rotation() const {
  return _impl_.zn_rotation_;
}
inline void RotateMyVideoParams::_internal_set_zn_rotation(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_rotation_ = value;
}

// -------------------------------------------------------------------

// SelectCameraParams

// optional string zn_deviceID = 1;
inline bool SelectCameraParams::has_zn_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SelectCameraParams::clear_zn_deviceid() {
  _impl_.zn_deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SelectCameraParams::zn_deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SelectCameraParams.zn_deviceID)
  return _internal_zn_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SelectCameraParams::set_zn_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SelectCameraParams.zn_deviceID)
}
inline std::string* SelectCameraParams::mutable_zn_deviceid() {
  std::string* _s = _internal_mutable_zn_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SelectCameraParams.zn_deviceID)
  return _s;
}
inline const std::string& SelectCameraParams::_internal_zn_deviceid() const {
  return _impl_.zn_deviceid_.Get();
}
inline void SelectCameraParams::_internal_set_zn_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.zn_deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SelectCameraParams::_internal_mutable_zn_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zn_deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SelectCameraParams::release_zn_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SelectCameraParams.zn_deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zn_deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SelectCameraParams::set_allocated_zn_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zn_deviceid_.IsDefault()) {
          _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SelectCameraParams.zn_deviceID)
}

// -------------------------------------------------------------------

// CreateRenderParams

// optional int64 zn_recv_handle = 1;
inline bool CreateRenderParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CreateRenderParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t CreateRenderParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CreateRenderParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void CreateRenderParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CreateRenderParams.zn_recv_handle)
}
inline ::int64_t CreateRenderParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void CreateRenderParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_recv_handle_ = value;
}

// -------------------------------------------------------------------

// DestroyRendererParams

// optional int64 zn_recv_handle = 1;
inline bool DestroyRendererParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DestroyRendererParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t DestroyRendererParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.DestroyRendererParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void DestroyRendererParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.DestroyRendererParams.zn_recv_handle)
}
inline ::int64_t DestroyRendererParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void DestroyRendererParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_recv_handle_ = value;
}

// -------------------------------------------------------------------

// SubscribeParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
inline bool SubscribeParams::has_zn_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_user_ != nullptr);
  return value;
}
inline void SubscribeParams::clear_zn_user() {
  if (_impl_.zn_user_ != nullptr) _impl_.zn_user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SubscribeParams::_internal_zn_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.zn_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SubscribeParams::zn_user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_user)
  return _internal_zn_user();
}
inline void SubscribeParams::unsafe_arena_set_allocated_zn_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_user_);
  }
  _impl_.zn_user_ = zn_user;
  if (zn_user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeParams::release_zn_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeParams::unsafe_arena_release_zn_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeParams::_internal_mutable_zn_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.zn_user_ = p;
  }
  return _impl_.zn_user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeParams::mutable_zn_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_zn_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_user)
  return _msg;
}
inline void SubscribeParams::set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_user_;
  }
  if (zn_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_user);
    if (message_arena != submessage_arena) {
      zn_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_user_ = zn_user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_user)
}

// optional int32 zn_type = 2;
inline bool SubscribeParams::has_zn_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SubscribeParams::clear_zn_type() {
  _impl_.zn_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t SubscribeParams::zn_type() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_type)
  return _internal_zn_type();
}
inline void SubscribeParams::set_zn_type(::int32_t value) {
  _internal_set_zn_type(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_type)
}
inline ::int32_t SubscribeParams::_internal_zn_type() const {
  return _impl_.zn_type_;
}
inline void SubscribeParams::_internal_set_zn_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zn_type_ = value;
}

// optional int64 zn_recv_handle = 3;
inline bool SubscribeParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SubscribeParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t SubscribeParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void SubscribeParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_recv_handle)
}
inline ::int64_t SubscribeParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void SubscribeParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_recv_handle_ = value;
}

// optional int32 zn_resolution = 4;
inline bool SubscribeParams::has_zn_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SubscribeParams::clear_zn_resolution() {
  _impl_.zn_resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SubscribeParams::zn_resolution() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_resolution)
  return _internal_zn_resolution();
}
inline void SubscribeParams::set_zn_resolution(::int32_t value) {
  _internal_set_zn_resolution(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SubscribeParams.zn_resolution)
}
inline ::int32_t SubscribeParams::_internal_zn_resolution() const {
  return _impl_.zn_resolution_;
}
inline void SubscribeParams::_internal_set_zn_resolution(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.zn_resolution_ = value;
}

// -------------------------------------------------------------------

// UnSubscribeParams

// optional int64 zn_recv_handle = 1;
inline bool UnSubscribeParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UnSubscribeParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t UnSubscribeParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void UnSubscribeParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_recv_handle)
}
inline ::int64_t UnSubscribeParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void UnSubscribeParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_recv_handle_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
inline bool UnSubscribeParams::has_zn_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_user_ != nullptr);
  return value;
}
inline void UnSubscribeParams::clear_zn_user() {
  if (_impl_.zn_user_ != nullptr) _impl_.zn_user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnSubscribeParams::_internal_zn_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.zn_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnSubscribeParams::zn_user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_user)
  return _internal_zn_user();
}
inline void UnSubscribeParams::unsafe_arena_set_allocated_zn_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_user_);
  }
  _impl_.zn_user_ = zn_user;
  if (zn_user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeParams::release_zn_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeParams::unsafe_arena_release_zn_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeParams::_internal_mutable_zn_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.zn_user_ = p;
  }
  return _impl_.zn_user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeParams::mutable_zn_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_zn_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_user)
  return _msg;
}
inline void UnSubscribeParams::set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_user_;
  }
  if (zn_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_user);
    if (message_arena != submessage_arena) {
      zn_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_user_ = zn_user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_user)
}

// optional int32 zn_type = 3;
inline bool UnSubscribeParams::has_zn_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UnSubscribeParams::clear_zn_type() {
  _impl_.zn_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t UnSubscribeParams::zn_type() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_type)
  return _internal_zn_type();
}
inline void UnSubscribeParams::set_zn_type(::int32_t value) {
  _internal_set_zn_type(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.UnSubscribeParams.zn_type)
}
inline ::int32_t UnSubscribeParams::_internal_zn_type() const {
  return _impl_.zn_type_;
}
inline void UnSubscribeParams::_internal_set_zn_type(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zn_type_ = value;
}

// -------------------------------------------------------------------

// SubscribeMultiCameraStreamParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
inline bool SubscribeMultiCameraStreamParams::has_zn_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_user_ != nullptr);
  return value;
}
inline void SubscribeMultiCameraStreamParams::clear_zn_user() {
  if (_impl_.zn_user_ != nullptr) _impl_.zn_user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SubscribeMultiCameraStreamParams::_internal_zn_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.zn_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SubscribeMultiCameraStreamParams::zn_user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_user)
  return _internal_zn_user();
}
inline void SubscribeMultiCameraStreamParams::unsafe_arena_set_allocated_zn_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_user_);
  }
  _impl_.zn_user_ = zn_user;
  if (zn_user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeMultiCameraStreamParams::release_zn_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeMultiCameraStreamParams::unsafe_arena_release_zn_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeMultiCameraStreamParams::_internal_mutable_zn_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.zn_user_ = p;
  }
  return _impl_.zn_user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SubscribeMultiCameraStreamParams::mutable_zn_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_zn_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_user)
  return _msg;
}
inline void SubscribeMultiCameraStreamParams::set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_user_;
  }
  if (zn_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_user);
    if (message_arena != submessage_arena) {
      zn_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_user_ = zn_user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_user)
}

// optional int64 cameraStreamID = 2;
inline bool SubscribeMultiCameraStreamParams::has_camerastreamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SubscribeMultiCameraStreamParams::clear_camerastreamid() {
  _impl_.camerastreamid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t SubscribeMultiCameraStreamParams::camerastreamid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.cameraStreamID)
  return _internal_camerastreamid();
}
inline void SubscribeMultiCameraStreamParams::set_camerastreamid(::int64_t value) {
  _internal_set_camerastreamid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.cameraStreamID)
}
inline ::int64_t SubscribeMultiCameraStreamParams::_internal_camerastreamid() const {
  return _impl_.camerastreamid_;
}
inline void SubscribeMultiCameraStreamParams::_internal_set_camerastreamid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.camerastreamid_ = value;
}

// optional int64 zn_recv_handle = 3;
inline bool SubscribeMultiCameraStreamParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SubscribeMultiCameraStreamParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t SubscribeMultiCameraStreamParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void SubscribeMultiCameraStreamParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_recv_handle)
}
inline ::int64_t SubscribeMultiCameraStreamParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void SubscribeMultiCameraStreamParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.zn_recv_handle_ = value;
}

// optional int32 zn_resolution = 4;
inline bool SubscribeMultiCameraStreamParams::has_zn_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SubscribeMultiCameraStreamParams::clear_zn_resolution() {
  _impl_.zn_resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SubscribeMultiCameraStreamParams::zn_resolution() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_resolution)
  return _internal_zn_resolution();
}
inline void SubscribeMultiCameraStreamParams::set_zn_resolution(::int32_t value) {
  _internal_set_zn_resolution(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.zn_resolution)
}
inline ::int32_t SubscribeMultiCameraStreamParams::_internal_zn_resolution() const {
  return _impl_.zn_resolution_;
}
inline void SubscribeMultiCameraStreamParams::_internal_set_zn_resolution(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.zn_resolution_ = value;
}

// -------------------------------------------------------------------

// UnSubscribeMultiCameraStreamParams

// optional int64 zn_recv_handle = 1;
inline bool UnSubscribeMultiCameraStreamParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UnSubscribeMultiCameraStreamParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t UnSubscribeMultiCameraStreamParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void UnSubscribeMultiCameraStreamParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_recv_handle)
}
inline ::int64_t UnSubscribeMultiCameraStreamParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void UnSubscribeMultiCameraStreamParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_recv_handle_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
inline bool UnSubscribeMultiCameraStreamParams::has_zn_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.zn_user_ != nullptr);
  return value;
}
inline void UnSubscribeMultiCameraStreamParams::clear_zn_user() {
  if (_impl_.zn_user_ != nullptr) _impl_.zn_user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnSubscribeMultiCameraStreamParams::_internal_zn_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.zn_user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnSubscribeMultiCameraStreamParams::zn_user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_user)
  return _internal_zn_user();
}
inline void UnSubscribeMultiCameraStreamParams::unsafe_arena_set_allocated_zn_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.zn_user_);
  }
  _impl_.zn_user_ = zn_user;
  if (zn_user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeMultiCameraStreamParams::release_zn_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeMultiCameraStreamParams::unsafe_arena_release_zn_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.zn_user_;
  _impl_.zn_user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeMultiCameraStreamParams::_internal_mutable_zn_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.zn_user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.zn_user_ = p;
  }
  return _impl_.zn_user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSubscribeMultiCameraStreamParams::mutable_zn_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_zn_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_user)
  return _msg;
}
inline void UnSubscribeMultiCameraStreamParams::set_allocated_zn_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* zn_user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.zn_user_;
  }
  if (zn_user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(zn_user);
    if (message_arena != submessage_arena) {
      zn_user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zn_user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zn_user_ = zn_user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.zn_user)
}

// optional int64 cameraStreamID = 3;
inline bool UnSubscribeMultiCameraStreamParams::has_camerastreamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UnSubscribeMultiCameraStreamParams::clear_camerastreamid() {
  _impl_.camerastreamid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t UnSubscribeMultiCameraStreamParams::camerastreamid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.cameraStreamID)
  return _internal_camerastreamid();
}
inline void UnSubscribeMultiCameraStreamParams::set_camerastreamid(::int64_t value) {
  _internal_set_camerastreamid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.cameraStreamID)
}
inline ::int64_t UnSubscribeMultiCameraStreamParams::_internal_camerastreamid() const {
  return _impl_.camerastreamid_;
}
inline void UnSubscribeMultiCameraStreamParams::_internal_set_camerastreamid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.camerastreamid_ = value;
}

// -------------------------------------------------------------------

// SetRawDataResolutionParams

// optional int32 zn_resolution = 1;
inline bool SetRawDataResolutionParams::has_zn_resolution() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetRawDataResolutionParams::clear_zn_resolution() {
  _impl_.zn_resolution_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SetRawDataResolutionParams::zn_resolution() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.zn_resolution)
  return _internal_zn_resolution();
}
inline void SetRawDataResolutionParams::set_zn_resolution(::int32_t value) {
  _internal_set_zn_resolution(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.zn_resolution)
}
inline ::int32_t SetRawDataResolutionParams::_internal_zn_resolution() const {
  return _impl_.zn_resolution_;
}
inline void SetRawDataResolutionParams::_internal_set_zn_resolution(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_resolution_ = value;
}

// optional int64 zn_recv_handle = 2;
inline bool SetRawDataResolutionParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetRawDataResolutionParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t SetRawDataResolutionParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void SetRawDataResolutionParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.zn_recv_handle)
}
inline ::int64_t SetRawDataResolutionParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void SetRawDataResolutionParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_recv_handle_ = value;
}

// -------------------------------------------------------------------

// GetResolutionParams

// optional int64 zn_recv_handle = 1;
inline bool GetResolutionParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetResolutionParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t GetResolutionParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetResolutionParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void GetResolutionParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.GetResolutionParams.zn_recv_handle)
}
inline ::int64_t GetResolutionParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void GetResolutionParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_recv_handle_ = value;
}

// -------------------------------------------------------------------

// GetRawDataTypeParams

// optional int64 zn_recv_handle = 1;
inline bool GetRawDataTypeParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetRawDataTypeParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t GetRawDataTypeParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void GetRawDataTypeParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.zn_recv_handle)
}
inline ::int64_t GetRawDataTypeParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void GetRawDataTypeParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_recv_handle_ = value;
}

// -------------------------------------------------------------------

// CameraInfos

// optional string deviceID = 1;
inline bool CameraInfos::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CameraInfos::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CameraInfos::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraInfos::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceID)
}
inline std::string* CameraInfos::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceID)
  return _s;
}
inline const std::string& CameraInfos::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void CameraInfos::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraInfos::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraInfos::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraInfos::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceID)
}

// optional string deviceName = 2;
inline bool CameraInfos::has_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CameraInfos::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& CameraInfos::devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraInfos::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceName)
}
inline std::string* CameraInfos::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceName)
  return _s;
}
inline const std::string& CameraInfos::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void CameraInfos::_internal_set_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* CameraInfos::_internal_mutable_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* CameraInfos::release_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CameraInfos::set_allocated_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicename_.IsDefault()) {
          _impl_.devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CameraInfos.deviceName)
}

// optional bool isSelectedDevice = 3;
inline bool CameraInfos::has_isselecteddevice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CameraInfos::clear_isselecteddevice() {
  _impl_.isselecteddevice_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool CameraInfos::isselecteddevice() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CameraInfos.isSelectedDevice)
  return _internal_isselecteddevice();
}
inline void CameraInfos::set_isselecteddevice(bool value) {
  _internal_set_isselecteddevice(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CameraInfos.isSelectedDevice)
}
inline bool CameraInfos::_internal_isselecteddevice() const {
  return _impl_.isselecteddevice_;
}
inline void CameraInfos::_internal_set_isselecteddevice(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isselecteddevice_ = value;
}

// optional bool isSelectedAsMultiCamera = 4;
inline bool CameraInfos::has_isselectedasmulticamera() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CameraInfos::clear_isselectedasmulticamera() {
  _impl_.isselectedasmulticamera_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool CameraInfos::isselectedasmulticamera() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CameraInfos.isSelectedAsMultiCamera)
  return _internal_isselectedasmulticamera();
}
inline void CameraInfos::set_isselectedasmulticamera(bool value) {
  _internal_set_isselectedasmulticamera(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CameraInfos.isSelectedAsMultiCamera)
}
inline bool CameraInfos::_internal_isselectedasmulticamera() const {
  return _impl_.isselectedasmulticamera_;
}
inline void CameraInfos::_internal_set_isselectedasmulticamera(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.isselectedasmulticamera_ = value;
}

// optional bool isRunningAsMultiCamera = 5;
inline bool CameraInfos::has_isrunningasmulticamera() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CameraInfos::clear_isrunningasmulticamera() {
  _impl_.isrunningasmulticamera_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool CameraInfos::isrunningasmulticamera() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CameraInfos.isRunningAsMultiCamera)
  return _internal_isrunningasmulticamera();
}
inline void CameraInfos::set_isrunningasmulticamera(bool value) {
  _internal_set_isrunningasmulticamera(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CameraInfos.isRunningAsMultiCamera)
}
inline bool CameraInfos::_internal_isrunningasmulticamera() const {
  return _impl_.isrunningasmulticamera_;
}
inline void CameraInfos::_internal_set_isrunningasmulticamera(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.isrunningasmulticamera_ = value;
}

// -------------------------------------------------------------------

// GetCameraList

// repeated .com.electron.zoomvideo.sdk.proto.CameraInfos CameraInfo = 1;
inline int GetCameraList::_internal_camerainfo_size() const {
  return _impl_.camerainfo_.size();
}
inline int GetCameraList::camerainfo_size() const {
  return _internal_camerainfo_size();
}
inline void GetCameraList::clear_camerainfo() {
  _impl_.camerainfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::CameraInfos* GetCameraList::mutable_camerainfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.GetCameraList.CameraInfo)
  return _impl_.camerainfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::CameraInfos >*
GetCameraList::mutable_camerainfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.GetCameraList.CameraInfo)
  return &_impl_.camerainfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::CameraInfos& GetCameraList::_internal_camerainfo(int index) const {
  return _impl_.camerainfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::CameraInfos& GetCameraList::camerainfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetCameraList.CameraInfo)
  return _internal_camerainfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::CameraInfos* GetCameraList::_internal_add_camerainfo() {
  return _impl_.camerainfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::CameraInfos* GetCameraList::add_camerainfo() {
  ::com::electron::zoomvideo::sdk::proto::CameraInfos* _add = _internal_add_camerainfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.GetCameraList.CameraInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::CameraInfos >&
GetCameraList::camerainfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.GetCameraList.CameraInfo)
  return _impl_.camerainfo_;
}

// -------------------------------------------------------------------

// MultiCameraStreamInfos

// optional int64 cameraStreamID = 1;
inline bool MultiCameraStreamInfos::has_camerastreamid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MultiCameraStreamInfos::clear_camerastreamid() {
  _impl_.camerastreamid_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t MultiCameraStreamInfos::camerastreamid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.cameraStreamID)
  return _internal_camerastreamid();
}
inline void MultiCameraStreamInfos::set_camerastreamid(::int64_t value) {
  _internal_set_camerastreamid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.cameraStreamID)
}
inline ::int64_t MultiCameraStreamInfos::_internal_camerastreamid() const {
  return _impl_.camerastreamid_;
}
inline void MultiCameraStreamInfos::_internal_set_camerastreamid(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.camerastreamid_ = value;
}

// -------------------------------------------------------------------

// MultiCameraStreamList

// repeated .com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos CameraStreamInfo = 1;
inline int MultiCameraStreamList::_internal_camerastreaminfo_size() const {
  return _impl_.camerastreaminfo_.size();
}
inline int MultiCameraStreamList::camerastreaminfo_size() const {
  return _internal_camerastreaminfo_size();
}
inline void MultiCameraStreamList::clear_camerastreaminfo() {
  _impl_.camerastreaminfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* MultiCameraStreamList::mutable_camerastreaminfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.CameraStreamInfo)
  return _impl_.camerastreaminfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos >*
MultiCameraStreamList::mutable_camerastreaminfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.CameraStreamInfo)
  return &_impl_.camerastreaminfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos& MultiCameraStreamList::_internal_camerastreaminfo(int index) const {
  return _impl_.camerastreaminfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos& MultiCameraStreamList::camerastreaminfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.CameraStreamInfo)
  return _internal_camerastreaminfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* MultiCameraStreamList::_internal_add_camerastreaminfo() {
  return _impl_.camerastreaminfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* MultiCameraStreamList::add_camerastreaminfo() {
  ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos* _add = _internal_add_camerastreaminfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.CameraStreamInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos >&
MultiCameraStreamList::camerastreaminfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.CameraStreamInfo)
  return _impl_.camerastreaminfo_;
}

// -------------------------------------------------------------------

// GetMultiCameraStreamList

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool GetMultiCameraStreamList::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void GetMultiCameraStreamList::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& GetMultiCameraStreamList::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& GetMultiCameraStreamList::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.user)
  return _internal_user();
}
inline void GetMultiCameraStreamList::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GetMultiCameraStreamList::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GetMultiCameraStreamList::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GetMultiCameraStreamList::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GetMultiCameraStreamList::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.user)
  return _msg;
}
inline void GetMultiCameraStreamList::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.user)
}

// -------------------------------------------------------------------

// MicInfos

// optional string deviceID = 1;
inline bool MicInfos::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void MicInfos::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MicInfos::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MicInfos.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MicInfos::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.MicInfos.deviceID)
}
inline std::string* MicInfos::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MicInfos.deviceID)
  return _s;
}
inline const std::string& MicInfos::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void MicInfos::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* MicInfos::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* MicInfos::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.MicInfos.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MicInfos::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.MicInfos.deviceID)
}

// optional string deviceName = 2;
inline bool MicInfos::has_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void MicInfos::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& MicInfos::devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MicInfos.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void MicInfos::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.MicInfos.deviceName)
}
inline std::string* MicInfos::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.MicInfos.deviceName)
  return _s;
}
inline const std::string& MicInfos::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void MicInfos::_internal_set_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* MicInfos::_internal_mutable_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* MicInfos::release_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.MicInfos.deviceName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void MicInfos::set_allocated_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicename_.IsDefault()) {
          _impl_.devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.MicInfos.deviceName)
}

// optional bool isSelectedDevice = 3;
inline bool MicInfos::has_isselecteddevice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void MicInfos::clear_isselecteddevice() {
  _impl_.isselecteddevice_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool MicInfos::isselecteddevice() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.MicInfos.isSelectedDevice)
  return _internal_isselecteddevice();
}
inline void MicInfos::set_isselecteddevice(bool value) {
  _internal_set_isselecteddevice(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.MicInfos.isSelectedDevice)
}
inline bool MicInfos::_internal_isselecteddevice() const {
  return _impl_.isselecteddevice_;
}
inline void MicInfos::_internal_set_isselecteddevice(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isselecteddevice_ = value;
}

// -------------------------------------------------------------------

// GetMicList

// repeated .com.electron.zoomvideo.sdk.proto.MicInfos MicInfo = 1;
inline int GetMicList::_internal_micinfo_size() const {
  return _impl_.micinfo_.size();
}
inline int GetMicList::micinfo_size() const {
  return _internal_micinfo_size();
}
inline void GetMicList::clear_micinfo() {
  _impl_.micinfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::MicInfos* GetMicList::mutable_micinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.GetMicList.MicInfo)
  return _impl_.micinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MicInfos >*
GetMicList::mutable_micinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.GetMicList.MicInfo)
  return &_impl_.micinfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::MicInfos& GetMicList::_internal_micinfo(int index) const {
  return _impl_.micinfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::MicInfos& GetMicList::micinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetMicList.MicInfo)
  return _internal_micinfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::MicInfos* GetMicList::_internal_add_micinfo() {
  return _impl_.micinfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::MicInfos* GetMicList::add_micinfo() {
  ::com::electron::zoomvideo::sdk::proto::MicInfos* _add = _internal_add_micinfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.GetMicList.MicInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::MicInfos >&
GetMicList::micinfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.GetMicList.MicInfo)
  return _impl_.micinfo_;
}

// -------------------------------------------------------------------

// SpeakerInfos

// optional string deviceID = 1;
inline bool SpeakerInfos::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SpeakerInfos::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpeakerInfos::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpeakerInfos::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceID)
}
inline std::string* SpeakerInfos::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceID)
  return _s;
}
inline const std::string& SpeakerInfos::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void SpeakerInfos::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeakerInfos::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* SpeakerInfos::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SpeakerInfos::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceID)
}

// optional string deviceName = 2;
inline bool SpeakerInfos::has_devicename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SpeakerInfos::clear_devicename() {
  _impl_.devicename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpeakerInfos::devicename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceName)
  return _internal_devicename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpeakerInfos::set_devicename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.devicename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceName)
}
inline std::string* SpeakerInfos::mutable_devicename() {
  std::string* _s = _internal_mutable_devicename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceName)
  return _s;
}
inline const std::string& SpeakerInfos::_internal_devicename() const {
  return _impl_.devicename_.Get();
}
inline void SpeakerInfos::_internal_set_devicename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.devicename_.Set(value, GetArenaForAllocation());
}
inline std::string* SpeakerInfos::_internal_mutable_devicename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.devicename_.Mutable( GetArenaForAllocation());
}
inline std::string* SpeakerInfos::release_devicename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.devicename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SpeakerInfos::set_allocated_devicename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.devicename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.devicename_.IsDefault()) {
          _impl_.devicename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SpeakerInfos.deviceName)
}

// optional bool isSelectedDevice = 3;
inline bool SpeakerInfos::has_isselecteddevice() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SpeakerInfos::clear_isselecteddevice() {
  _impl_.isselecteddevice_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool SpeakerInfos::isselecteddevice() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SpeakerInfos.isSelectedDevice)
  return _internal_isselecteddevice();
}
inline void SpeakerInfos::set_isselecteddevice(bool value) {
  _internal_set_isselecteddevice(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SpeakerInfos.isSelectedDevice)
}
inline bool SpeakerInfos::_internal_isselecteddevice() const {
  return _impl_.isselecteddevice_;
}
inline void SpeakerInfos::_internal_set_isselecteddevice(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isselecteddevice_ = value;
}

// -------------------------------------------------------------------

// GetSpeakerList

// repeated .com.electron.zoomvideo.sdk.proto.SpeakerInfos SpeakerInfo = 1;
inline int GetSpeakerList::_internal_speakerinfo_size() const {
  return _impl_.speakerinfo_.size();
}
inline int GetSpeakerList::speakerinfo_size() const {
  return _internal_speakerinfo_size();
}
inline void GetSpeakerList::clear_speakerinfo() {
  _impl_.speakerinfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* GetSpeakerList::mutable_speakerinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.GetSpeakerList.SpeakerInfo)
  return _impl_.speakerinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos >*
GetSpeakerList::mutable_speakerinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.GetSpeakerList.SpeakerInfo)
  return &_impl_.speakerinfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::SpeakerInfos& GetSpeakerList::_internal_speakerinfo(int index) const {
  return _impl_.speakerinfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::SpeakerInfos& GetSpeakerList::speakerinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetSpeakerList.SpeakerInfo)
  return _internal_speakerinfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* GetSpeakerList::_internal_add_speakerinfo() {
  return _impl_.speakerinfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* GetSpeakerList::add_speakerinfo() {
  ::com::electron::zoomvideo::sdk::proto::SpeakerInfos* _add = _internal_add_speakerinfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.GetSpeakerList.SpeakerInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos >&
GetSpeakerList::speakerinfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.GetSpeakerList.SpeakerInfo)
  return _impl_.speakerinfo_;
}

// -------------------------------------------------------------------

// SendCommandParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool SendCommandParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void SendCommandParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SendCommandParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SendCommandParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SendCommandParams.user)
  return _internal_user();
}
inline void SendCommandParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.SendCommandParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendCommandParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendCommandParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SendCommandParams.user)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendCommandParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SendCommandParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SendCommandParams.user)
  return _msg;
}
inline void SendCommandParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SendCommandParams.user)
}

// optional string strCmd = 2;
inline bool SendCommandParams::has_strcmd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SendCommandParams::clear_strcmd() {
  _impl_.strcmd_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SendCommandParams::strcmd() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SendCommandParams.strCmd)
  return _internal_strcmd();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SendCommandParams::set_strcmd(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strcmd_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SendCommandParams.strCmd)
}
inline std::string* SendCommandParams::mutable_strcmd() {
  std::string* _s = _internal_mutable_strcmd();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SendCommandParams.strCmd)
  return _s;
}
inline const std::string& SendCommandParams::_internal_strcmd() const {
  return _impl_.strcmd_.Get();
}
inline void SendCommandParams::_internal_set_strcmd(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.strcmd_.Set(value, GetArenaForAllocation());
}
inline std::string* SendCommandParams::_internal_mutable_strcmd() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strcmd_.Mutable( GetArenaForAllocation());
}
inline std::string* SendCommandParams::release_strcmd() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SendCommandParams.strCmd)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strcmd_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.strcmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SendCommandParams::set_allocated_strcmd(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strcmd_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.strcmd_.IsDefault()) {
          _impl_.strcmd_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SendCommandParams.strCmd)
}

// -------------------------------------------------------------------

// PhoneSupportCountryInfos

// optional string countryID = 1;
inline bool PhoneSupportCountryInfos::has_countryid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PhoneSupportCountryInfos::clear_countryid() {
  _impl_.countryid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PhoneSupportCountryInfos::countryid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryID)
  return _internal_countryid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneSupportCountryInfos::set_countryid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.countryid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryID)
}
inline std::string* PhoneSupportCountryInfos::mutable_countryid() {
  std::string* _s = _internal_mutable_countryid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryID)
  return _s;
}
inline const std::string& PhoneSupportCountryInfos::_internal_countryid() const {
  return _impl_.countryid_.Get();
}
inline void PhoneSupportCountryInfos::_internal_set_countryid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.countryid_.Set(value, GetArenaForAllocation());
}
inline std::string* PhoneSupportCountryInfos::_internal_mutable_countryid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.countryid_.Mutable( GetArenaForAllocation());
}
inline std::string* PhoneSupportCountryInfos::release_countryid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.countryid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countryid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneSupportCountryInfos::set_allocated_countryid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.countryid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countryid_.IsDefault()) {
          _impl_.countryid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryID)
}

// optional string countryName = 2;
inline bool PhoneSupportCountryInfos::has_countryname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PhoneSupportCountryInfos::clear_countryname() {
  _impl_.countryname_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PhoneSupportCountryInfos::countryname() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryName)
  return _internal_countryname();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneSupportCountryInfos::set_countryname(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.countryname_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryName)
}
inline std::string* PhoneSupportCountryInfos::mutable_countryname() {
  std::string* _s = _internal_mutable_countryname();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryName)
  return _s;
}
inline const std::string& PhoneSupportCountryInfos::_internal_countryname() const {
  return _impl_.countryname_.Get();
}
inline void PhoneSupportCountryInfos::_internal_set_countryname(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.countryname_.Set(value, GetArenaForAllocation());
}
inline std::string* PhoneSupportCountryInfos::_internal_mutable_countryname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.countryname_.Mutable( GetArenaForAllocation());
}
inline std::string* PhoneSupportCountryInfos::release_countryname() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.countryname_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countryname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneSupportCountryInfos::set_allocated_countryname(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.countryname_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countryname_.IsDefault()) {
          _impl_.countryname_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryName)
}

// optional string countryCode = 3;
inline bool PhoneSupportCountryInfos::has_countrycode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void PhoneSupportCountryInfos::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PhoneSupportCountryInfos::countrycode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryCode)
  return _internal_countrycode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PhoneSupportCountryInfos::set_countrycode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.countrycode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryCode)
}
inline std::string* PhoneSupportCountryInfos::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryCode)
  return _s;
}
inline const std::string& PhoneSupportCountryInfos::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void PhoneSupportCountryInfos::_internal_set_countrycode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* PhoneSupportCountryInfos::_internal_mutable_countrycode() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.countrycode_.Mutable( GetArenaForAllocation());
}
inline std::string* PhoneSupportCountryInfos::release_countrycode() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryCode)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.countrycode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PhoneSupportCountryInfos::set_allocated_countrycode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.countrycode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countrycode_.IsDefault()) {
          _impl_.countrycode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.countryCode)
}

// -------------------------------------------------------------------

// GetPhoneSupportCountryList

// repeated .com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos PhoneSupportCountryInfo = 1;
inline int GetPhoneSupportCountryList::_internal_phonesupportcountryinfo_size() const {
  return _impl_.phonesupportcountryinfo_.size();
}
inline int GetPhoneSupportCountryList::phonesupportcountryinfo_size() const {
  return _internal_phonesupportcountryinfo_size();
}
inline void GetPhoneSupportCountryList::clear_phonesupportcountryinfo() {
  _impl_.phonesupportcountryinfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* GetPhoneSupportCountryList::mutable_phonesupportcountryinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.PhoneSupportCountryInfo)
  return _impl_.phonesupportcountryinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos >*
GetPhoneSupportCountryList::mutable_phonesupportcountryinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.PhoneSupportCountryInfo)
  return &_impl_.phonesupportcountryinfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos& GetPhoneSupportCountryList::_internal_phonesupportcountryinfo(int index) const {
  return _impl_.phonesupportcountryinfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos& GetPhoneSupportCountryList::phonesupportcountryinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.PhoneSupportCountryInfo)
  return _internal_phonesupportcountryinfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* GetPhoneSupportCountryList::_internal_add_phonesupportcountryinfo() {
  return _impl_.phonesupportcountryinfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* GetPhoneSupportCountryList::add_phonesupportcountryinfo() {
  ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos* _add = _internal_add_phonesupportcountryinfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.PhoneSupportCountryInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos >&
GetPhoneSupportCountryList::phonesupportcountryinfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.PhoneSupportCountryInfo)
  return _impl_.phonesupportcountryinfo_;
}

// -------------------------------------------------------------------

// InviteByPhoneParams

// optional string countryCode = 1;
inline bool InviteByPhoneParams::has_countrycode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InviteByPhoneParams::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InviteByPhoneParams::countrycode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.countryCode)
  return _internal_countrycode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InviteByPhoneParams::set_countrycode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.countrycode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.countryCode)
}
inline std::string* InviteByPhoneParams::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.countryCode)
  return _s;
}
inline const std::string& InviteByPhoneParams::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void InviteByPhoneParams::_internal_set_countrycode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteByPhoneParams::_internal_mutable_countrycode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.countrycode_.Mutable( GetArenaForAllocation());
}
inline std::string* InviteByPhoneParams::release_countrycode() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.countryCode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.countrycode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InviteByPhoneParams::set_allocated_countrycode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.countrycode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countrycode_.IsDefault()) {
          _impl_.countrycode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.countryCode)
}

// optional string phoneNumber = 2;
inline bool InviteByPhoneParams::has_phonenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InviteByPhoneParams::clear_phonenumber() {
  _impl_.phonenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InviteByPhoneParams::phonenumber() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.phoneNumber)
  return _internal_phonenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InviteByPhoneParams::set_phonenumber(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phonenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.phoneNumber)
}
inline std::string* InviteByPhoneParams::mutable_phonenumber() {
  std::string* _s = _internal_mutable_phonenumber();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.phoneNumber)
  return _s;
}
inline const std::string& InviteByPhoneParams::_internal_phonenumber() const {
  return _impl_.phonenumber_.Get();
}
inline void InviteByPhoneParams::_internal_set_phonenumber(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.phonenumber_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteByPhoneParams::_internal_mutable_phonenumber() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.phonenumber_.Mutable( GetArenaForAllocation());
}
inline std::string* InviteByPhoneParams::release_phonenumber() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.phoneNumber)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.phonenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InviteByPhoneParams::set_allocated_phonenumber(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.phonenumber_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenumber_.IsDefault()) {
          _impl_.phonenumber_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.phoneNumber)
}

// optional string name = 3;
inline bool InviteByPhoneParams::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InviteByPhoneParams::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InviteByPhoneParams::name() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InviteByPhoneParams::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.name)
}
inline std::string* InviteByPhoneParams::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.name)
  return _s;
}
inline const std::string& InviteByPhoneParams::_internal_name() const {
  return _impl_.name_.Get();
}
inline void InviteByPhoneParams::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* InviteByPhoneParams::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* InviteByPhoneParams::release_name() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InviteByPhoneParams::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.name)
}

// -------------------------------------------------------------------

// InvitePhoneUserParams

// optional string countryCode = 1;
inline bool InvitePhoneUserParams::has_countrycode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void InvitePhoneUserParams::clear_countrycode() {
  _impl_.countrycode_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InvitePhoneUserParams::countrycode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.countryCode)
  return _internal_countrycode();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InvitePhoneUserParams::set_countrycode(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.countrycode_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.countryCode)
}
inline std::string* InvitePhoneUserParams::mutable_countrycode() {
  std::string* _s = _internal_mutable_countrycode();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.countryCode)
  return _s;
}
inline const std::string& InvitePhoneUserParams::_internal_countrycode() const {
  return _impl_.countrycode_.Get();
}
inline void InvitePhoneUserParams::_internal_set_countrycode(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.countrycode_.Set(value, GetArenaForAllocation());
}
inline std::string* InvitePhoneUserParams::_internal_mutable_countrycode() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.countrycode_.Mutable( GetArenaForAllocation());
}
inline std::string* InvitePhoneUserParams::release_countrycode() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.countryCode)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.countrycode_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InvitePhoneUserParams::set_allocated_countrycode(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.countrycode_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.countrycode_.IsDefault()) {
          _impl_.countrycode_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.countryCode)
}

// optional string phoneNumber = 2;
inline bool InvitePhoneUserParams::has_phonenumber() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InvitePhoneUserParams::clear_phonenumber() {
  _impl_.phonenumber_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& InvitePhoneUserParams::phonenumber() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.phoneNumber)
  return _internal_phonenumber();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InvitePhoneUserParams::set_phonenumber(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.phonenumber_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.phoneNumber)
}
inline std::string* InvitePhoneUserParams::mutable_phonenumber() {
  std::string* _s = _internal_mutable_phonenumber();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.phoneNumber)
  return _s;
}
inline const std::string& InvitePhoneUserParams::_internal_phonenumber() const {
  return _impl_.phonenumber_.Get();
}
inline void InvitePhoneUserParams::_internal_set_phonenumber(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.phonenumber_.Set(value, GetArenaForAllocation());
}
inline std::string* InvitePhoneUserParams::_internal_mutable_phonenumber() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.phonenumber_.Mutable( GetArenaForAllocation());
}
inline std::string* InvitePhoneUserParams::release_phonenumber() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.phoneNumber)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.phonenumber_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InvitePhoneUserParams::set_allocated_phonenumber(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.phonenumber_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.phonenumber_.IsDefault()) {
          _impl_.phonenumber_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.phoneNumber)
}

// optional string name = 3;
inline bool InvitePhoneUserParams::has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void InvitePhoneUserParams::clear_name() {
  _impl_.name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& InvitePhoneUserParams::name() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InvitePhoneUserParams::set_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.name)
}
inline std::string* InvitePhoneUserParams::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.name)
  return _s;
}
inline const std::string& InvitePhoneUserParams::_internal_name() const {
  return _impl_.name_.Get();
}
inline void InvitePhoneUserParams::_internal_set_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* InvitePhoneUserParams::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.name_.Mutable( GetArenaForAllocation());
}
inline std::string* InvitePhoneUserParams::release_name() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.name)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void InvitePhoneUserParams::set_allocated_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.name)
}

// optional bool bPressOne = 4;
inline bool InvitePhoneUserParams::has_bpressone() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void InvitePhoneUserParams::clear_bpressone() {
  _impl_.bpressone_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool InvitePhoneUserParams::bpressone() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.bPressOne)
  return _internal_bpressone();
}
inline void InvitePhoneUserParams::set_bpressone(bool value) {
  _internal_set_bpressone(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.bPressOne)
}
inline bool InvitePhoneUserParams::_internal_bpressone() const {
  return _impl_.bpressone_;
}
inline void InvitePhoneUserParams::_internal_set_bpressone(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bpressone_ = value;
}

// optional bool bGreeting = 5;
inline bool InvitePhoneUserParams::has_bgreeting() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void InvitePhoneUserParams::clear_bgreeting() {
  _impl_.bgreeting_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool InvitePhoneUserParams::bgreeting() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.bGreeting)
  return _internal_bgreeting();
}
inline void InvitePhoneUserParams::set_bgreeting(bool value) {
  _internal_set_bgreeting(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.bGreeting)
}
inline bool InvitePhoneUserParams::_internal_bgreeting() const {
  return _impl_.bgreeting_;
}
inline void InvitePhoneUserParams::_internal_set_bgreeting(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.bgreeting_ = value;
}

// -------------------------------------------------------------------

// LocalCameraCtrlTurnLeftParams

// optional uint32 range = 1;
inline bool LocalCameraCtrlTurnLeftParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalCameraCtrlTurnLeftParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalCameraCtrlTurnLeftParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.range)
  return _internal_range();
}
inline void LocalCameraCtrlTurnLeftParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.range)
}
inline ::uint32_t LocalCameraCtrlTurnLeftParams::_internal_range() const {
  return _impl_.range_;
}
inline void LocalCameraCtrlTurnLeftParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.range_ = value;
}

// -------------------------------------------------------------------

// LocalCameraCtrlTurnRightParams

// optional uint32 range = 1;
inline bool LocalCameraCtrlTurnRightParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalCameraCtrlTurnRightParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalCameraCtrlTurnRightParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.range)
  return _internal_range();
}
inline void LocalCameraCtrlTurnRightParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.range)
}
inline ::uint32_t LocalCameraCtrlTurnRightParams::_internal_range() const {
  return _impl_.range_;
}
inline void LocalCameraCtrlTurnRightParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.range_ = value;
}

// -------------------------------------------------------------------

// LocalCameraCtrlTurnUpParams

// optional uint32 range = 1;
inline bool LocalCameraCtrlTurnUpParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalCameraCtrlTurnUpParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalCameraCtrlTurnUpParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.range)
  return _internal_range();
}
inline void LocalCameraCtrlTurnUpParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.range)
}
inline ::uint32_t LocalCameraCtrlTurnUpParams::_internal_range() const {
  return _impl_.range_;
}
inline void LocalCameraCtrlTurnUpParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.range_ = value;
}

// -------------------------------------------------------------------

// LocalCameraCtrlTurnDownParams

// optional uint32 range = 1;
inline bool LocalCameraCtrlTurnDownParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalCameraCtrlTurnDownParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalCameraCtrlTurnDownParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.range)
  return _internal_range();
}
inline void LocalCameraCtrlTurnDownParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.range)
}
inline ::uint32_t LocalCameraCtrlTurnDownParams::_internal_range() const {
  return _impl_.range_;
}
inline void LocalCameraCtrlTurnDownParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.range_ = value;
}

// -------------------------------------------------------------------

// LocalCameraCtrlZoomInParams

// optional uint32 range = 1;
inline bool LocalCameraCtrlZoomInParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalCameraCtrlZoomInParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalCameraCtrlZoomInParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.range)
  return _internal_range();
}
inline void LocalCameraCtrlZoomInParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.range)
}
inline ::uint32_t LocalCameraCtrlZoomInParams::_internal_range() const {
  return _impl_.range_;
}
inline void LocalCameraCtrlZoomInParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.range_ = value;
}

// -------------------------------------------------------------------

// LocalCameraCtrlZoomOutParams

// optional uint32 range = 1;
inline bool LocalCameraCtrlZoomOutParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LocalCameraCtrlZoomOutParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t LocalCameraCtrlZoomOutParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.range)
  return _internal_range();
}
inline void LocalCameraCtrlZoomOutParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.range)
}
inline ::uint32_t LocalCameraCtrlZoomOutParams::_internal_range() const {
  return _impl_.range_;
}
inline void LocalCameraCtrlZoomOutParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.range_ = value;
}

// -------------------------------------------------------------------

// RequestControlRemoteCameraParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool RequestControlRemoteCameraParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RequestControlRemoteCameraParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RequestControlRemoteCameraParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RequestControlRemoteCameraParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.user)
  return _internal_user();
}
inline void RequestControlRemoteCameraParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RequestControlRemoteCameraParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RequestControlRemoteCameraParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RequestControlRemoteCameraParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RequestControlRemoteCameraParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.user)
  return _msg;
}
inline void RequestControlRemoteCameraParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.user)
}

// -------------------------------------------------------------------

// GiveUpControlRemoteCameraParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool GiveUpControlRemoteCameraParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void GiveUpControlRemoteCameraParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& GiveUpControlRemoteCameraParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& GiveUpControlRemoteCameraParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.user)
  return _internal_user();
}
inline void GiveUpControlRemoteCameraParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GiveUpControlRemoteCameraParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GiveUpControlRemoteCameraParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GiveUpControlRemoteCameraParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* GiveUpControlRemoteCameraParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.user)
  return _msg;
}
inline void GiveUpControlRemoteCameraParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.user)
}

// -------------------------------------------------------------------

// RemoteCameraCtrlTurnLeftParams

// optional uint32 range = 1;
inline bool RemoteCameraCtrlTurnLeftParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteCameraCtrlTurnLeftParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteCameraCtrlTurnLeftParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.range)
  return _internal_range();
}
inline void RemoteCameraCtrlTurnLeftParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.range)
}
inline ::uint32_t RemoteCameraCtrlTurnLeftParams::_internal_range() const {
  return _impl_.range_;
}
inline void RemoteCameraCtrlTurnLeftParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool RemoteCameraCtrlTurnLeftParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoteCameraCtrlTurnLeftParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnLeftParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnLeftParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.user)
  return _internal_user();
}
inline void RemoteCameraCtrlTurnLeftParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnLeftParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnLeftParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnLeftParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnLeftParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.user)
  return _msg;
}
inline void RemoteCameraCtrlTurnLeftParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.user)
}

// -------------------------------------------------------------------

// RemoteCameraCtrlTurnRightParams

// optional uint32 range = 1;
inline bool RemoteCameraCtrlTurnRightParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteCameraCtrlTurnRightParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteCameraCtrlTurnRightParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.range)
  return _internal_range();
}
inline void RemoteCameraCtrlTurnRightParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.range)
}
inline ::uint32_t RemoteCameraCtrlTurnRightParams::_internal_range() const {
  return _impl_.range_;
}
inline void RemoteCameraCtrlTurnRightParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool RemoteCameraCtrlTurnRightParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoteCameraCtrlTurnRightParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnRightParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnRightParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.user)
  return _internal_user();
}
inline void RemoteCameraCtrlTurnRightParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnRightParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnRightParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnRightParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnRightParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.user)
  return _msg;
}
inline void RemoteCameraCtrlTurnRightParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.user)
}

// -------------------------------------------------------------------

// RemoteCameraCtrlTurnUpParams

// optional uint32 range = 1;
inline bool RemoteCameraCtrlTurnUpParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteCameraCtrlTurnUpParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteCameraCtrlTurnUpParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.range)
  return _internal_range();
}
inline void RemoteCameraCtrlTurnUpParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.range)
}
inline ::uint32_t RemoteCameraCtrlTurnUpParams::_internal_range() const {
  return _impl_.range_;
}
inline void RemoteCameraCtrlTurnUpParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool RemoteCameraCtrlTurnUpParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoteCameraCtrlTurnUpParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnUpParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnUpParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.user)
  return _internal_user();
}
inline void RemoteCameraCtrlTurnUpParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnUpParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnUpParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnUpParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnUpParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.user)
  return _msg;
}
inline void RemoteCameraCtrlTurnUpParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.user)
}

// -------------------------------------------------------------------

// RemoteCameraCtrlTurnDownParams

// optional uint32 range = 1;
inline bool RemoteCameraCtrlTurnDownParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteCameraCtrlTurnDownParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteCameraCtrlTurnDownParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.range)
  return _internal_range();
}
inline void RemoteCameraCtrlTurnDownParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.range)
}
inline ::uint32_t RemoteCameraCtrlTurnDownParams::_internal_range() const {
  return _impl_.range_;
}
inline void RemoteCameraCtrlTurnDownParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool RemoteCameraCtrlTurnDownParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoteCameraCtrlTurnDownParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnDownParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlTurnDownParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.user)
  return _internal_user();
}
inline void RemoteCameraCtrlTurnDownParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnDownParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnDownParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnDownParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlTurnDownParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.user)
  return _msg;
}
inline void RemoteCameraCtrlTurnDownParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.user)
}

// -------------------------------------------------------------------

// RemoteCameraCtrlZoomInParams

// optional uint32 range = 1;
inline bool RemoteCameraCtrlZoomInParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteCameraCtrlZoomInParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteCameraCtrlZoomInParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.range)
  return _internal_range();
}
inline void RemoteCameraCtrlZoomInParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.range)
}
inline ::uint32_t RemoteCameraCtrlZoomInParams::_internal_range() const {
  return _impl_.range_;
}
inline void RemoteCameraCtrlZoomInParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool RemoteCameraCtrlZoomInParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoteCameraCtrlZoomInParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlZoomInParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlZoomInParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.user)
  return _internal_user();
}
inline void RemoteCameraCtrlZoomInParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomInParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomInParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomInParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomInParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.user)
  return _msg;
}
inline void RemoteCameraCtrlZoomInParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.user)
}

// -------------------------------------------------------------------

// RemoteCameraCtrlZoomOutParams

// optional uint32 range = 1;
inline bool RemoteCameraCtrlZoomOutParams::has_range() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void RemoteCameraCtrlZoomOutParams::clear_range() {
  _impl_.range_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t RemoteCameraCtrlZoomOutParams::range() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.range)
  return _internal_range();
}
inline void RemoteCameraCtrlZoomOutParams::set_range(::uint32_t value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.range)
}
inline ::uint32_t RemoteCameraCtrlZoomOutParams::_internal_range() const {
  return _impl_.range_;
}
inline void RemoteCameraCtrlZoomOutParams::_internal_set_range(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.range_ = value;
}

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
inline bool RemoteCameraCtrlZoomOutParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void RemoteCameraCtrlZoomOutParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlZoomOutParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& RemoteCameraCtrlZoomOutParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.user)
  return _internal_user();
}
inline void RemoteCameraCtrlZoomOutParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomOutParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomOutParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomOutParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* RemoteCameraCtrlZoomOutParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.user)
  return _msg;
}
inline void RemoteCameraCtrlZoomOutParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.user)
}

// -------------------------------------------------------------------

// SetVideoQualityPreferenceParams

// optional int32 mode = 1;
inline bool SetVideoQualityPreferenceParams::has_mode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetVideoQualityPreferenceParams::clear_mode() {
  _impl_.mode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetVideoQualityPreferenceParams::mode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.mode)
  return _internal_mode();
}
inline void SetVideoQualityPreferenceParams::set_mode(::int32_t value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.mode)
}
inline ::int32_t SetVideoQualityPreferenceParams::_internal_mode() const {
  return _impl_.mode_;
}
inline void SetVideoQualityPreferenceParams::_internal_set_mode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.mode_ = value;
}

// optional uint32 minimum_frame_rate = 2;
inline bool SetVideoQualityPreferenceParams::has_minimum_frame_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SetVideoQualityPreferenceParams::clear_minimum_frame_rate() {
  _impl_.minimum_frame_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SetVideoQualityPreferenceParams::minimum_frame_rate() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.minimum_frame_rate)
  return _internal_minimum_frame_rate();
}
inline void SetVideoQualityPreferenceParams::set_minimum_frame_rate(::uint32_t value) {
  _internal_set_minimum_frame_rate(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.minimum_frame_rate)
}
inline ::uint32_t SetVideoQualityPreferenceParams::_internal_minimum_frame_rate() const {
  return _impl_.minimum_frame_rate_;
}
inline void SetVideoQualityPreferenceParams::_internal_set_minimum_frame_rate(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.minimum_frame_rate_ = value;
}

// optional uint32 maximum_frame_rate = 3;
inline bool SetVideoQualityPreferenceParams::has_maximum_frame_rate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void SetVideoQualityPreferenceParams::clear_maximum_frame_rate() {
  _impl_.maximum_frame_rate_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t SetVideoQualityPreferenceParams::maximum_frame_rate() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.maximum_frame_rate)
  return _internal_maximum_frame_rate();
}
inline void SetVideoQualityPreferenceParams::set_maximum_frame_rate(::uint32_t value) {
  _internal_set_maximum_frame_rate(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.maximum_frame_rate)
}
inline ::uint32_t SetVideoQualityPreferenceParams::_internal_maximum_frame_rate() const {
  return _impl_.maximum_frame_rate_;
}
inline void SetVideoQualityPreferenceParams::_internal_set_maximum_frame_rate(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.maximum_frame_rate_ = value;
}

// -------------------------------------------------------------------

// SetSuppressBackgroundNoiseLevelParams

// optional int32 level = 1;
inline bool SetSuppressBackgroundNoiseLevelParams::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetSuppressBackgroundNoiseLevelParams::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetSuppressBackgroundNoiseLevelParams::level() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.level)
  return _internal_level();
}
inline void SetSuppressBackgroundNoiseLevelParams::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.level)
}
inline ::int32_t SetSuppressBackgroundNoiseLevelParams::_internal_level() const {
  return _impl_.level_;
}
inline void SetSuppressBackgroundNoiseLevelParams::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// SetEchoCancellationLevelParams

// optional int32 level = 1;
inline bool SetEchoCancellationLevelParams::has_level() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetEchoCancellationLevelParams::clear_level() {
  _impl_.level_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetEchoCancellationLevelParams::level() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.level)
  return _internal_level();
}
inline void SetEchoCancellationLevelParams::set_level(::int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.level)
}
inline ::int32_t SetEchoCancellationLevelParams::_internal_level() const {
  return _impl_.level_;
}
inline void SetEchoCancellationLevelParams::_internal_set_level(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.level_ = value;
}

// -------------------------------------------------------------------

// EnableMicOriginalInputParams

// optional bool bEnable = 1;
inline bool EnableMicOriginalInputParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableMicOriginalInputParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableMicOriginalInputParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.bEnable)
  return _internal_benable();
}
inline void EnableMicOriginalInputParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.bEnable)
}
inline bool EnableMicOriginalInputParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableMicOriginalInputParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableHighFidelityMusicModeParams

// optional bool bEnable = 1;
inline bool EnableHighFidelityMusicModeParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableHighFidelityMusicModeParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableHighFidelityMusicModeParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.bEnable)
  return _internal_benable();
}
inline void EnableHighFidelityMusicModeParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.bEnable)
}
inline bool EnableHighFidelityMusicModeParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableHighFidelityMusicModeParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableEchoCancellationParams

// optional bool bEnable = 1;
inline bool EnableEchoCancellationParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableEchoCancellationParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableEchoCancellationParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.bEnable)
  return _internal_benable();
}
inline void EnableEchoCancellationParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.bEnable)
}
inline bool EnableEchoCancellationParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableEchoCancellationParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableStereoAudioParams

// optional bool bEnable = 1;
inline bool EnableStereoAudioParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableStereoAudioParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableStereoAudioParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.bEnable)
  return _internal_benable();
}
inline void EnableStereoAudioParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.bEnable)
}
inline bool EnableStereoAudioParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableStereoAudioParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// StartMicTestRecordingParams

// optional string deviceID = 1;
inline bool StartMicTestRecordingParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartMicTestRecordingParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartMicTestRecordingParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartMicTestRecordingParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deviceID)
}
inline std::string* StartMicTestRecordingParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deviceID)
  return _s;
}
inline const std::string& StartMicTestRecordingParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void StartMicTestRecordingParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartMicTestRecordingParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartMicTestRecordingParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartMicTestRecordingParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deviceID)
}

// -------------------------------------------------------------------

// StartSpeakerTestParams

// optional string deviceID = 1;
inline bool StartSpeakerTestParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartSpeakerTestParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartSpeakerTestParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartSpeakerTestParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deviceID)
}
inline std::string* StartSpeakerTestParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deviceID)
  return _s;
}
inline const std::string& StartSpeakerTestParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void StartSpeakerTestParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartSpeakerTestParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartSpeakerTestParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartSpeakerTestParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deviceID)
}

// -------------------------------------------------------------------

// SetTimerIntervalParams

// optional uint32 timerInterval = 1;
inline bool SetTimerIntervalParams::has_timerinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetTimerIntervalParams::clear_timerinterval() {
  _impl_.timerinterval_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t SetTimerIntervalParams::timerinterval() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.timerInterval)
  return _internal_timerinterval();
}
inline void SetTimerIntervalParams::set_timerinterval(::uint32_t value) {
  _internal_set_timerinterval(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.timerInterval)
}
inline ::uint32_t SetTimerIntervalParams::_internal_timerinterval() const {
  return _impl_.timerinterval_;
}
inline void SetTimerIntervalParams::_internal_set_timerinterval(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.timerinterval_ = value;
}

// -------------------------------------------------------------------

// EnableMultiStreamVideoParams

// optional string deviceID = 1;
inline bool EnableMultiStreamVideoParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableMultiStreamVideoParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EnableMultiStreamVideoParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EnableMultiStreamVideoParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deviceID)
}
inline std::string* EnableMultiStreamVideoParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deviceID)
  return _s;
}
inline const std::string& EnableMultiStreamVideoParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void EnableMultiStreamVideoParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* EnableMultiStreamVideoParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* EnableMultiStreamVideoParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EnableMultiStreamVideoParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deviceID)
}

// -------------------------------------------------------------------

// DisableMultiStreamVideoParams

// optional string deviceID = 1;
inline bool DisableMultiStreamVideoParams::has_deviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisableMultiStreamVideoParams::clear_deviceid() {
  _impl_.deviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisableMultiStreamVideoParams::deviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deviceID)
  return _internal_deviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DisableMultiStreamVideoParams::set_deviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.deviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deviceID)
}
inline std::string* DisableMultiStreamVideoParams::mutable_deviceid() {
  std::string* _s = _internal_mutable_deviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deviceID)
  return _s;
}
inline const std::string& DisableMultiStreamVideoParams::_internal_deviceid() const {
  return _impl_.deviceid_.Get();
}
inline void DisableMultiStreamVideoParams::_internal_set_deviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.deviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* DisableMultiStreamVideoParams::_internal_mutable_deviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.deviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* DisableMultiStreamVideoParams::release_deviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.deviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DisableMultiStreamVideoParams::set_allocated_deviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.deviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.deviceid_.IsDefault()) {
          _impl_.deviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deviceID)
}

// -------------------------------------------------------------------

// StartVideoPreviewParams

// optional int64 zn_recv_handle = 1;
inline bool StartVideoPreviewParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void StartVideoPreviewParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int64_t StartVideoPreviewParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void StartVideoPreviewParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.zn_recv_handle)
}
inline ::int64_t StartVideoPreviewParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void StartVideoPreviewParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.zn_recv_handle_ = value;
}

// optional string cameraDeviceID = 2;
inline bool StartVideoPreviewParams::has_cameradeviceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StartVideoPreviewParams::clear_cameradeviceid() {
  _impl_.cameradeviceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& StartVideoPreviewParams::cameradeviceid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.cameraDeviceID)
  return _internal_cameradeviceid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void StartVideoPreviewParams::set_cameradeviceid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.cameradeviceid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.cameraDeviceID)
}
inline std::string* StartVideoPreviewParams::mutable_cameradeviceid() {
  std::string* _s = _internal_mutable_cameradeviceid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.cameraDeviceID)
  return _s;
}
inline const std::string& StartVideoPreviewParams::_internal_cameradeviceid() const {
  return _impl_.cameradeviceid_.Get();
}
inline void StartVideoPreviewParams::_internal_set_cameradeviceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.cameradeviceid_.Set(value, GetArenaForAllocation());
}
inline std::string* StartVideoPreviewParams::_internal_mutable_cameradeviceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.cameradeviceid_.Mutable( GetArenaForAllocation());
}
inline std::string* StartVideoPreviewParams::release_cameradeviceid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.cameraDeviceID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.cameradeviceid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cameradeviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void StartVideoPreviewParams::set_allocated_cameradeviceid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.cameradeviceid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.cameradeviceid_.IsDefault()) {
          _impl_.cameradeviceid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.cameraDeviceID)
}

// -------------------------------------------------------------------

// StopVideoPreviewParams

// optional int64 zn_recv_handle = 1;
inline bool StopVideoPreviewParams::has_zn_recv_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void StopVideoPreviewParams::clear_zn_recv_handle() {
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t StopVideoPreviewParams::zn_recv_handle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.zn_recv_handle)
  return _internal_zn_recv_handle();
}
inline void StopVideoPreviewParams::set_zn_recv_handle(::int64_t value) {
  _internal_set_zn_recv_handle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.zn_recv_handle)
}
inline ::int64_t StopVideoPreviewParams::_internal_zn_recv_handle() const {
  return _impl_.zn_recv_handle_;
}
inline void StopVideoPreviewParams::_internal_set_zn_recv_handle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zn_recv_handle_ = value;
}

// -------------------------------------------------------------------

// SpotLightVideoParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool SpotLightVideoParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void SpotLightVideoParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SpotLightVideoParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& SpotLightVideoParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.user)
  return _internal_user();
}
inline void SpotLightVideoParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SpotLightVideoParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SpotLightVideoParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SpotLightVideoParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* SpotLightVideoParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.user)
  return _msg;
}
inline void SpotLightVideoParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.user)
}

// -------------------------------------------------------------------

// UnSpotLightVideoParams

// optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
inline bool UnSpotLightVideoParams::has_user() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.user_ != nullptr);
  return value;
}
inline void UnSpotLightVideoParams::clear_user() {
  if (_impl_.user_ != nullptr) _impl_.user_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnSpotLightVideoParams::_internal_user() const {
  const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* p = _impl_.user_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&>(
      ::com::electron::zoomvideo::sdk::proto::_VideoSDKUser_default_instance_);
}
inline const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& UnSpotLightVideoParams::user() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.user)
  return _internal_user();
}
inline void UnSpotLightVideoParams::unsafe_arena_set_allocated_user(
    ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.user_);
  }
  _impl_.user_ = user;
  if (user) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.user)
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSpotLightVideoParams::release_user() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSpotLightVideoParams::unsafe_arena_release_user() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.user)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* temp = _impl_.user_;
  _impl_.user_ = nullptr;
  return temp;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSpotLightVideoParams::_internal_mutable_user() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.user_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::electron::zoomvideo::sdk::proto::VideoSDKUser>(GetArenaForAllocation());
    _impl_.user_ = p;
  }
  return _impl_.user_;
}
inline ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* UnSpotLightVideoParams::mutable_user() {
  ::com::electron::zoomvideo::sdk::proto::VideoSDKUser* _msg = _internal_mutable_user();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.user)
  return _msg;
}
inline void UnSpotLightVideoParams::set_allocated_user(::com::electron::zoomvideo::sdk::proto::VideoSDKUser* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.user_;
  }
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_ = user;
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.user)
}

// -------------------------------------------------------------------

// SetSpokenLanguageParams

// optional int32 languageID = 1;
inline bool SetSpokenLanguageParams::has_languageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetSpokenLanguageParams::clear_languageid() {
  _impl_.languageid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetSpokenLanguageParams::languageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.languageID)
  return _internal_languageid();
}
inline void SetSpokenLanguageParams::set_languageid(::int32_t value) {
  _internal_set_languageid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.languageID)
}
inline ::int32_t SetSpokenLanguageParams::_internal_languageid() const {
  return _impl_.languageid_;
}
inline void SetSpokenLanguageParams::_internal_set_languageid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.languageid_ = value;
}

// -------------------------------------------------------------------

// LTTLanguagesList

// repeated .com.electron.zoomvideo.sdk.proto.LTTLanguage lttLanguageInfo = 1;
inline int LTTLanguagesList::_internal_lttlanguageinfo_size() const {
  return _impl_.lttlanguageinfo_.size();
}
inline int LTTLanguagesList::lttlanguageinfo_size() const {
  return _internal_lttlanguageinfo_size();
}
inline void LTTLanguagesList::clear_lttlanguageinfo() {
  _impl_.lttlanguageinfo_.Clear();
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* LTTLanguagesList::mutable_lttlanguageinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.LTTLanguagesList.lttLanguageInfo)
  return _impl_.lttlanguageinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::LTTLanguage >*
LTTLanguagesList::mutable_lttlanguageinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.LTTLanguagesList.lttLanguageInfo)
  return &_impl_.lttlanguageinfo_;
}
inline const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& LTTLanguagesList::_internal_lttlanguageinfo(int index) const {
  return _impl_.lttlanguageinfo_.Get(index);
}
inline const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& LTTLanguagesList::lttlanguageinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.LTTLanguagesList.lttLanguageInfo)
  return _internal_lttlanguageinfo(index);
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* LTTLanguagesList::_internal_add_lttlanguageinfo() {
  return _impl_.lttlanguageinfo_.Add();
}
inline ::com::electron::zoomvideo::sdk::proto::LTTLanguage* LTTLanguagesList::add_lttlanguageinfo() {
  ::com::electron::zoomvideo::sdk::proto::LTTLanguage* _add = _internal_add_lttlanguageinfo();
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.LTTLanguagesList.lttLanguageInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::electron::zoomvideo::sdk::proto::LTTLanguage >&
LTTLanguagesList::lttlanguageinfo() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.LTTLanguagesList.lttLanguageInfo)
  return _impl_.lttlanguageinfo_;
}

// -------------------------------------------------------------------

// SetTranslationLanguageParams

// optional int32 languageID = 1;
inline bool SetTranslationLanguageParams::has_languageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetTranslationLanguageParams::clear_languageid() {
  _impl_.languageid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetTranslationLanguageParams::languageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.languageID)
  return _internal_languageid();
}
inline void SetTranslationLanguageParams::set_languageid(::int32_t value) {
  _internal_set_languageid(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.languageID)
}
inline ::int32_t SetTranslationLanguageParams::_internal_languageid() const {
  return _impl_.languageid_;
}
inline void SetTranslationLanguageParams::_internal_set_languageid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.languageid_ = value;
}

// -------------------------------------------------------------------

// CanChatMessageBeDeletedParams

// optional string messageID = 1;
inline bool CanChatMessageBeDeletedParams::has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CanChatMessageBeDeletedParams::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CanChatMessageBeDeletedParams::messageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.messageID)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CanChatMessageBeDeletedParams::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.messageID)
}
inline std::string* CanChatMessageBeDeletedParams::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.messageID)
  return _s;
}
inline const std::string& CanChatMessageBeDeletedParams::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void CanChatMessageBeDeletedParams::_internal_set_messageid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* CanChatMessageBeDeletedParams::_internal_mutable_messageid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.messageid_.Mutable( GetArenaForAllocation());
}
inline std::string* CanChatMessageBeDeletedParams::release_messageid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.messageID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.messageid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CanChatMessageBeDeletedParams::set_allocated_messageid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.messageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.messageID)
}

// -------------------------------------------------------------------

// DeleteChatMessageParams

// optional string messageID = 1;
inline bool DeleteChatMessageParams::has_messageid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DeleteChatMessageParams::clear_messageid() {
  _impl_.messageid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeleteChatMessageParams::messageid() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.messageID)
  return _internal_messageid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeleteChatMessageParams::set_messageid(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.messageid_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.messageID)
}
inline std::string* DeleteChatMessageParams::mutable_messageid() {
  std::string* _s = _internal_mutable_messageid();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.messageID)
  return _s;
}
inline const std::string& DeleteChatMessageParams::_internal_messageid() const {
  return _impl_.messageid_.Get();
}
inline void DeleteChatMessageParams::_internal_set_messageid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.messageid_.Set(value, GetArenaForAllocation());
}
inline std::string* DeleteChatMessageParams::_internal_mutable_messageid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.messageid_.Mutable( GetArenaForAllocation());
}
inline std::string* DeleteChatMessageParams::release_messageid() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.messageID)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.messageid_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DeleteChatMessageParams::set_allocated_messageid(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.messageid_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.messageid_.IsDefault()) {
          _impl_.messageid_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.messageID)
}

// -------------------------------------------------------------------

// VBItemInfo

// optional string imageFilePath = 1;
inline bool VBItemInfo::has_imagefilepath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void VBItemInfo::clear_imagefilepath() {
  _impl_.imagefilepath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VBItemInfo::imagefilepath() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageFilePath)
  return _internal_imagefilepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VBItemInfo::set_imagefilepath(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.imagefilepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageFilePath)
}
inline std::string* VBItemInfo::mutable_imagefilepath() {
  std::string* _s = _internal_mutable_imagefilepath();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageFilePath)
  return _s;
}
inline const std::string& VBItemInfo::_internal_imagefilepath() const {
  return _impl_.imagefilepath_.Get();
}
inline void VBItemInfo::_internal_set_imagefilepath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.imagefilepath_.Set(value, GetArenaForAllocation());
}
inline std::string* VBItemInfo::_internal_mutable_imagefilepath() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.imagefilepath_.Mutable( GetArenaForAllocation());
}
inline std::string* VBItemInfo::release_imagefilepath() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageFilePath)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.imagefilepath_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imagefilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VBItemInfo::set_allocated_imagefilepath(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.imagefilepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imagefilepath_.IsDefault()) {
          _impl_.imagefilepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageFilePath)
}

// optional string imageName = 2;
inline bool VBItemInfo::has_imagename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void VBItemInfo::clear_imagename() {
  _impl_.imagename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VBItemInfo::imagename() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageName)
  return _internal_imagename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void VBItemInfo::set_imagename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.imagename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageName)
}
inline std::string* VBItemInfo::mutable_imagename() {
  std::string* _s = _internal_mutable_imagename();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageName)
  return _s;
}
inline const std::string& VBItemInfo::_internal_imagename() const {
  return _impl_.imagename_.Get();
}
inline void VBItemInfo::_internal_set_imagename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.imagename_.Set(value, GetArenaForAllocation());
}
inline std::string* VBItemInfo::_internal_mutable_imagename() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.imagename_.Mutable( GetArenaForAllocation());
}
inline std::string* VBItemInfo::release_imagename() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageName)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.imagename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void VBItemInfo::set_allocated_imagename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.imagename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imagename_.IsDefault()) {
          _impl_.imagename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.VBItemInfo.imageName)
}

// optional int32 vbType = 3;
inline bool VBItemInfo::has_vbtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void VBItemInfo::clear_vbtype() {
  _impl_.vbtype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t VBItemInfo::vbtype() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VBItemInfo.vbType)
  return _internal_vbtype();
}
inline void VBItemInfo::set_vbtype(::int32_t value) {
  _internal_set_vbtype(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VBItemInfo.vbType)
}
inline ::int32_t VBItemInfo::_internal_vbtype() const {
  return _impl_.vbtype_;
}
inline void VBItemInfo::_internal_set_vbtype(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.vbtype_ = value;
}

// optional bool canBeDeleted = 4;
inline bool VBItemInfo::has_canbedeleted() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void VBItemInfo::clear_canbedeleted() {
  _impl_.canbedeleted_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool VBItemInfo::canbedeleted() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VBItemInfo.canBeDeleted)
  return _internal_canbedeleted();
}
inline void VBItemInfo::set_canbedeleted(bool value) {
  _internal_set_canbedeleted(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VBItemInfo.canBeDeleted)
}
inline bool VBItemInfo::_internal_canbedeleted() const {
  return _impl_.canbedeleted_;
}
inline void VBItemInfo::_internal_set_canbedeleted(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.canbedeleted_ = value;
}

// -------------------------------------------------------------------

// VBItemHandleList

// repeated int64 vbItemHandle = 1;
inline int VBItemHandleList::_internal_vbitemhandle_size() const {
  return _impl_.vbitemhandle_.size();
}
inline int VBItemHandleList::vbitemhandle_size() const {
  return _internal_vbitemhandle_size();
}
inline void VBItemHandleList::clear_vbitemhandle() {
  _impl_.vbitemhandle_.Clear();
}
inline ::int64_t VBItemHandleList::vbitemhandle(int index) const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.VBItemHandleList.vbItemHandle)
  return _internal_vbitemhandle(index);
}
inline void VBItemHandleList::set_vbitemhandle(int index, ::int64_t value) {
  _impl_.vbitemhandle_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.VBItemHandleList.vbItemHandle)
}
inline void VBItemHandleList::add_vbitemhandle(::int64_t value) {
  _internal_add_vbitemhandle(value);
  // @@protoc_insertion_point(field_add:com.electron.zoomvideo.sdk.proto.VBItemHandleList.vbItemHandle)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& VBItemHandleList::vbitemhandle() const {
  // @@protoc_insertion_point(field_list:com.electron.zoomvideo.sdk.proto.VBItemHandleList.vbItemHandle)
  return _internal_vbitemhandle();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* VBItemHandleList::mutable_vbitemhandle() {
  // @@protoc_insertion_point(field_mutable_list:com.electron.zoomvideo.sdk.proto.VBItemHandleList.vbItemHandle)
  return _internal_mutable_vbitemhandle();
}

inline ::int64_t VBItemHandleList::_internal_vbitemhandle(int index) const {
  return _impl_.vbitemhandle_.Get(index);
}
inline void VBItemHandleList::_internal_add_vbitemhandle(::int64_t value) { _impl_.vbitemhandle_.Add(value); }
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>& VBItemHandleList::_internal_vbitemhandle() const {
  return _impl_.vbitemhandle_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<::int64_t>* VBItemHandleList::_internal_mutable_vbitemhandle() {
  return &_impl_.vbitemhandle_;
}

// -------------------------------------------------------------------

// AddVirtualBackgroundItemParams

// optional string imagePath = 1;
inline bool AddVirtualBackgroundItemParams::has_imagepath() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AddVirtualBackgroundItemParams::clear_imagepath() {
  _impl_.imagepath_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AddVirtualBackgroundItemParams::imagepath() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.imagePath)
  return _internal_imagepath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AddVirtualBackgroundItemParams::set_imagepath(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.imagepath_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.imagePath)
}
inline std::string* AddVirtualBackgroundItemParams::mutable_imagepath() {
  std::string* _s = _internal_mutable_imagepath();
  // @@protoc_insertion_point(field_mutable:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.imagePath)
  return _s;
}
inline const std::string& AddVirtualBackgroundItemParams::_internal_imagepath() const {
  return _impl_.imagepath_.Get();
}
inline void AddVirtualBackgroundItemParams::_internal_set_imagepath(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.imagepath_.Set(value, GetArenaForAllocation());
}
inline std::string* AddVirtualBackgroundItemParams::_internal_mutable_imagepath() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.imagepath_.Mutable( GetArenaForAllocation());
}
inline std::string* AddVirtualBackgroundItemParams::release_imagepath() {
  // @@protoc_insertion_point(field_release:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.imagePath)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.imagepath_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imagepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AddVirtualBackgroundItemParams::set_allocated_imagepath(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.imagepath_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.imagepath_.IsDefault()) {
          _impl_.imagepath_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.imagePath)
}

// -------------------------------------------------------------------

// RemoveVirtualBackgroundItemParams

// optional int64 vbItemHandle = 1;
inline bool RemoveVirtualBackgroundItemParams::has_vbitemhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void RemoveVirtualBackgroundItemParams::clear_vbitemhandle() {
  _impl_.vbitemhandle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t RemoveVirtualBackgroundItemParams::vbitemhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.vbItemHandle)
  return _internal_vbitemhandle();
}
inline void RemoveVirtualBackgroundItemParams::set_vbitemhandle(::int64_t value) {
  _internal_set_vbitemhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.vbItemHandle)
}
inline ::int64_t RemoveVirtualBackgroundItemParams::_internal_vbitemhandle() const {
  return _impl_.vbitemhandle_;
}
inline void RemoveVirtualBackgroundItemParams::_internal_set_vbitemhandle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vbitemhandle_ = value;
}

// -------------------------------------------------------------------

// SetVirtualBackgroundItemParams

// optional int64 vbItemHandle = 1;
inline bool SetVirtualBackgroundItemParams::has_vbitemhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetVirtualBackgroundItemParams::clear_vbitemhandle() {
  _impl_.vbitemhandle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t SetVirtualBackgroundItemParams::vbitemhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.vbItemHandle)
  return _internal_vbitemhandle();
}
inline void SetVirtualBackgroundItemParams::set_vbitemhandle(::int64_t value) {
  _internal_set_vbitemhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.vbItemHandle)
}
inline ::int64_t SetVirtualBackgroundItemParams::_internal_vbitemhandle() const {
  return _impl_.vbitemhandle_;
}
inline void SetVirtualBackgroundItemParams::_internal_set_vbitemhandle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vbitemhandle_ = value;
}

// -------------------------------------------------------------------

// GetVirtualBackgroundItemInfoParams

// optional int64 vbItemHandle = 1;
inline bool GetVirtualBackgroundItemInfoParams::has_vbitemhandle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetVirtualBackgroundItemInfoParams::clear_vbitemhandle() {
  _impl_.vbitemhandle_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int64_t GetVirtualBackgroundItemInfoParams::vbitemhandle() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.vbItemHandle)
  return _internal_vbitemhandle();
}
inline void GetVirtualBackgroundItemInfoParams::set_vbitemhandle(::int64_t value) {
  _internal_set_vbitemhandle(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.vbItemHandle)
}
inline ::int64_t GetVirtualBackgroundItemInfoParams::_internal_vbitemhandle() const {
  return _impl_.vbitemhandle_;
}
inline void GetVirtualBackgroundItemInfoParams::_internal_set_vbitemhandle(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.vbitemhandle_ = value;
}

// -------------------------------------------------------------------

// SetScreenCaptureModeParams

// optional int32 captureMode = 1;
inline bool SetScreenCaptureModeParams::has_capturemode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SetScreenCaptureModeParams::clear_capturemode() {
  _impl_.capturemode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t SetScreenCaptureModeParams::capturemode() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.captureMode)
  return _internal_capturemode();
}
inline void SetScreenCaptureModeParams::set_capturemode(::int32_t value) {
  _internal_set_capturemode(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.captureMode)
}
inline ::int32_t SetScreenCaptureModeParams::_internal_capturemode() const {
  return _impl_.capturemode_;
}
inline void SetScreenCaptureModeParams::_internal_set_capturemode(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.capturemode_ = value;
}

// -------------------------------------------------------------------

// EnableGreenBorderParams

// optional bool bEnable = 1;
inline bool EnableGreenBorderParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableGreenBorderParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableGreenBorderParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.bEnable)
  return _internal_benable();
}
inline void EnableGreenBorderParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.bEnable)
}
inline bool EnableGreenBorderParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableGreenBorderParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

// -------------------------------------------------------------------

// EnableAdminRemoteControlParams

// optional bool bEnable = 1;
inline bool EnableAdminRemoteControlParams::has_benable() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EnableAdminRemoteControlParams::clear_benable() {
  _impl_.benable_ = false;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline bool EnableAdminRemoteControlParams::benable() const {
  // @@protoc_insertion_point(field_get:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.bEnable)
  return _internal_benable();
}
inline void EnableAdminRemoteControlParams::set_benable(bool value) {
  _internal_set_benable(value);
  // @@protoc_insertion_point(field_set:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.bEnable)
}
inline bool EnableAdminRemoteControlParams::_internal_benable() const {
  return _impl_.benable_;
}
inline void EnableAdminRemoteControlParams::_internal_set_benable(bool value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.benable_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sdk
}  // namespace zoomvideo
}  // namespace electron
}  // namespace com


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_electron_5fzoomvideosdk_2eproto_2epb_2eh
