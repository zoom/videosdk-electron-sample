// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: electron_zoomvideosdk.proto

#include "electron_zoomvideosdk.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace com {
namespace electron {
namespace zoomvideo {
namespace sdk {
namespace proto {
PROTOBUF_CONSTEXPR VideoSDKUser::VideoSDKUser(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.custom_identity_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.userreference_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zn_shareactionlist_)*/nullptr
  , /*decltype(_impl_.p_user_)*/ ::int64_t{0}

  , /*decltype(_impl_.audiotype_)*/ 0

  , /*decltype(_impl_.ishasvideodevice_)*/ false

  , /*decltype(_impl_.isvideoon_)*/ false

  , /*decltype(_impl_.isaudiomuted_)*/ false

  , /*decltype(_impl_.isaudiotalking_)*/ false

  , /*decltype(_impl_.videostatisticinfo_width_)*/ 0

  , /*decltype(_impl_.videostatisticinfo_height_)*/ 0

  , /*decltype(_impl_.videostatisticinfo_fps_)*/ 0

  , /*decltype(_impl_.videostatisticinfo_bpf_)*/ 0

  , /*decltype(_impl_.sharestatisticinfo_width_)*/ 0

  , /*decltype(_impl_.ishost_)*/ false

  , /*decltype(_impl_.ismanager_)*/ false

  , /*decltype(_impl_.isvideospotlighted_)*/ false

  , /*decltype(_impl_.isincominglivestreamuser_)*/ false

  , /*decltype(_impl_.sharestatisticinfo_height_)*/ 0

  , /*decltype(_impl_.sharestatisticinfo_fps_)*/ 0

  , /*decltype(_impl_.sharestatisticinfo_bpf_)*/ 0
} {}
struct VideoSDKUserDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKUserDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKUserDefaultTypeInternal() {}
  union {
    VideoSDKUser _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKUserDefaultTypeInternal _VideoSDKUser_default_instance_;
PROTOBUF_CONSTEXPR UserList::UserList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UserListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UserListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UserListDefaultTypeInternal() {}
  union {
    UserList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UserListDefaultTypeInternal _UserList_default_instance_;
PROTOBUF_CONSTEXPR ShareAction::ShareAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sharesourceid_)*/ 0

  , /*decltype(_impl_.sharestatus_)*/ 0

  , /*decltype(_impl_.subscribefailreason_)*/ 0

  , /*decltype(_impl_.isannotationprivilegeenabled_)*/ false

  , /*decltype(_impl_.sharetype_)*/ 0
} {}
struct ShareActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareActionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareActionDefaultTypeInternal() {}
  union {
    ShareAction _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareActionDefaultTypeInternal _ShareAction_default_instance_;
PROTOBUF_CONSTEXPR ShareActionList::ShareActionList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shareaction_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShareActionListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareActionListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareActionListDefaultTypeInternal() {}
  union {
    ShareActionList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareActionListDefaultTypeInternal _ShareActionList_default_instance_;
PROTOBUF_CONSTEXPR VideoSDKSessionAudioStatisticInfo::VideoSDKSessionAudioStatisticInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frequency_)*/ ::int64_t{0}

  , /*decltype(_impl_.latency_)*/ ::int64_t{0}

  , /*decltype(_impl_.jitter_)*/ ::int64_t{0}

  , /*decltype(_impl_.packetlossavg_)*/ 0

  , /*decltype(_impl_.packetlossmax_)*/ 0
} {}
struct VideoSDKSessionAudioStatisticInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKSessionAudioStatisticInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKSessionAudioStatisticInfoDefaultTypeInternal() {}
  union {
    VideoSDKSessionAudioStatisticInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKSessionAudioStatisticInfoDefaultTypeInternal _VideoSDKSessionAudioStatisticInfo_default_instance_;
PROTOBUF_CONSTEXPR VideoSDKSessionAudioStatisticInfoList::VideoSDKSessionAudioStatisticInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.audiostatisticinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoSDKSessionAudioStatisticInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKSessionAudioStatisticInfoListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKSessionAudioStatisticInfoListDefaultTypeInternal() {}
  union {
    VideoSDKSessionAudioStatisticInfoList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKSessionAudioStatisticInfoListDefaultTypeInternal _VideoSDKSessionAudioStatisticInfoList_default_instance_;
PROTOBUF_CONSTEXPR VideoSDKSessionASVStatisticInfo::VideoSDKSessionASVStatisticInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.frame_width_)*/ ::int64_t{0}

  , /*decltype(_impl_.frame_height_)*/ ::int64_t{0}

  , /*decltype(_impl_.fps_)*/ ::int64_t{0}

  , /*decltype(_impl_.latency_)*/ ::int64_t{0}

  , /*decltype(_impl_.jitter_)*/ ::int64_t{0}

  , /*decltype(_impl_.packetlossavg_)*/ 0

  , /*decltype(_impl_.packetlossmax_)*/ 0
} {}
struct VideoSDKSessionASVStatisticInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKSessionASVStatisticInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKSessionASVStatisticInfoDefaultTypeInternal() {}
  union {
    VideoSDKSessionASVStatisticInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKSessionASVStatisticInfoDefaultTypeInternal _VideoSDKSessionASVStatisticInfo_default_instance_;
PROTOBUF_CONSTEXPR VideoSDKSessionASVStatisticInfoList::VideoSDKSessionASVStatisticInfoList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.asvstatisticinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VideoSDKSessionASVStatisticInfoListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKSessionASVStatisticInfoListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKSessionASVStatisticInfoListDefaultTypeInternal() {}
  union {
    VideoSDKSessionASVStatisticInfoList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKSessionASVStatisticInfoListDefaultTypeInternal _VideoSDKSessionASVStatisticInfoList_default_instance_;
PROTOBUF_CONSTEXPR SDKVideoCapability::SDKVideoCapability(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.iseffective_)*/ false

  , /*decltype(_impl_.width_)*/ 0

  , /*decltype(_impl_.height_)*/ 0

  , /*decltype(_impl_.frame_)*/ 0
} {}
struct SDKVideoCapabilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKVideoCapabilityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKVideoCapabilityDefaultTypeInternal() {}
  union {
    SDKVideoCapability _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKVideoCapabilityDefaultTypeInternal _SDKVideoCapability_default_instance_;
PROTOBUF_CONSTEXPR SDKVideoCapabilityList::SDKVideoCapabilityList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.videocapability_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SDKVideoCapabilityListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SDKVideoCapabilityListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SDKVideoCapabilityListDefaultTypeInternal() {}
  union {
    SDKVideoCapabilityList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SDKVideoCapabilityListDefaultTypeInternal _SDKVideoCapabilityList_default_instance_;
PROTOBUF_CONSTEXPR LTTLanguage::LTTLanguage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.lttlanguagename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.lttlanguageid_)*/ 0
} {}
struct LTTLanguageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LTTLanguageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LTTLanguageDefaultTypeInternal() {}
  union {
    LTTLanguage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LTTLanguageDefaultTypeInternal _LTTLanguage_default_instance_;
PROTOBUF_CONSTEXPR ZoomVideoSDKShareCursorData::ZoomVideoSDKShareCursorData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.source_id_)*/ 0u

  , /*decltype(_impl_.x_)*/ 0

  , /*decltype(_impl_.y_)*/ 0
} {}
struct ZoomVideoSDKShareCursorDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ZoomVideoSDKShareCursorDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ZoomVideoSDKShareCursorDataDefaultTypeInternal() {}
  union {
    ZoomVideoSDKShareCursorData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ZoomVideoSDKShareCursorDataDefaultTypeInternal _ZoomVideoSDKShareCursorData_default_instance_;
PROTOBUF_CONSTEXPR IncomingLiveStreamStatus::IncomingLiveStreamStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strstreamkeyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isrtmpconnected_)*/ false

  , /*decltype(_impl_.isstreampushed_)*/ false
} {}
struct IncomingLiveStreamStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncomingLiveStreamStatusDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncomingLiveStreamStatusDefaultTypeInternal() {}
  union {
    IncomingLiveStreamStatus _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncomingLiveStreamStatusDefaultTypeInternal _IncomingLiveStreamStatus_default_instance_;
PROTOBUF_CONSTEXPR IncomingLiveStreamStatusList::IncomingLiveStreamStatusList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.status_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IncomingLiveStreamStatusListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncomingLiveStreamStatusListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncomingLiveStreamStatusListDefaultTypeInternal() {}
  union {
    IncomingLiveStreamStatusList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncomingLiveStreamStatusListDefaultTypeInternal _IncomingLiveStreamStatusList_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onErrorParams::CallbackBody_onErrorParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.errorcode_)*/ 0

  , /*decltype(_impl_.detailerrorcode_)*/ 0
} {}
struct CallbackBody_onErrorParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onErrorParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onErrorParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onErrorParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onErrorParamsDefaultTypeInternal _CallbackBody_onErrorParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserJoinParams::CallbackBody_onUserJoinParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_userlist_)*/nullptr} {}
struct CallbackBody_onUserJoinParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserJoinParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserJoinParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserJoinParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserJoinParamsDefaultTypeInternal _CallbackBody_onUserJoinParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserLeaveParams::CallbackBody_onUserLeaveParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_userlist_)*/nullptr} {}
struct CallbackBody_onUserLeaveParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserLeaveParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserLeaveParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserLeaveParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserLeaveParamsDefaultTypeInternal _CallbackBody_onUserLeaveParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserVideoStatusChangedParams::CallbackBody_onUserVideoStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_userlist_)*/nullptr} {}
struct CallbackBody_onUserVideoStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserVideoStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserVideoStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserVideoStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserVideoStatusChangedParamsDefaultTypeInternal _CallbackBody_onUserVideoStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserAudioStatusChangedParams::CallbackBody_onUserAudioStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_userlist_)*/nullptr} {}
struct CallbackBody_onUserAudioStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserAudioStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserAudioStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserAudioStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserAudioStatusChangedParamsDefaultTypeInternal _CallbackBody_onUserAudioStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserShareStatusChangedParams::CallbackBody_onUserShareStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.shareaction_)*/nullptr} {}
struct CallbackBody_onUserShareStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserShareStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserShareStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserShareStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserShareStatusChangedParamsDefaultTypeInternal _CallbackBody_onUserShareStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onFailedToStartShareParams::CallbackBody_onFailedToStartShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct CallbackBody_onFailedToStartShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onFailedToStartShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onFailedToStartShareParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onFailedToStartShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onFailedToStartShareParamsDefaultTypeInternal _CallbackBody_onFailedToStartShareParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onLiveStreamStatusChangedParams::CallbackBody_onLiveStreamStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onLiveStreamStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onLiveStreamStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onLiveStreamStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onLiveStreamStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onLiveStreamStatusChangedParamsDefaultTypeInternal _CallbackBody_onLiveStreamStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserHostChangedParams::CallbackBody_onUserHostChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct CallbackBody_onUserHostChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserHostChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserHostChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserHostChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserHostChangedParamsDefaultTypeInternal _CallbackBody_onUserHostChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserNameChangedParams::CallbackBody_onUserNameChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct CallbackBody_onUserNameChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserNameChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserNameChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserNameChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserNameChangedParamsDefaultTypeInternal _CallbackBody_onUserNameChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserManagerChangedParams::CallbackBody_onUserManagerChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct CallbackBody_onUserManagerChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserManagerChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserManagerChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserManagerChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserManagerChangedParamsDefaultTypeInternal _CallbackBody_onUserManagerChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUserActiveAudioChangedParams::CallbackBody_onUserActiveAudioChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_userlist_)*/nullptr} {}
struct CallbackBody_onUserActiveAudioChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUserActiveAudioChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUserActiveAudioChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUserActiveAudioChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUserActiveAudioChangedParamsDefaultTypeInternal _CallbackBody_onUserActiveAudioChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onChatNewMessageNotifyParams::CallbackBody_onChatNewMessageNotifyParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sendername_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.receivername_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messagecontent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.psender_)*/ ::int64_t{0}

  , /*decltype(_impl_.preceiver_)*/ ::int64_t{0}

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.ischattoall_)*/ false

  , /*decltype(_impl_.isselfsend_)*/ false
} {}
struct CallbackBody_onChatNewMessageNotifyParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onChatNewMessageNotifyParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onChatNewMessageNotifyParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onChatNewMessageNotifyParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onChatNewMessageNotifyParamsDefaultTypeInternal _CallbackBody_onChatNewMessageNotifyParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onChatMsgDeleteNotificationParams::CallbackBody_onChatMsgDeleteNotificationParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.deleteby_)*/ 0
} {}
struct CallbackBody_onChatMsgDeleteNotificationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onChatMsgDeleteNotificationParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onChatMsgDeleteNotificationParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onChatMsgDeleteNotificationParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onChatMsgDeleteNotificationParamsDefaultTypeInternal _CallbackBody_onChatMsgDeleteNotificationParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onVideoSourceInitializeParams::CallbackBody_onVideoSourceInitializeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.videocapabilitylist_)*/nullptr} {}
struct CallbackBody_onVideoSourceInitializeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onVideoSourceInitializeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onVideoSourceInitializeParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onVideoSourceInitializeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onVideoSourceInitializeParamsDefaultTypeInternal _CallbackBody_onVideoSourceInitializeParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onPropertyChangeParams::CallbackBody_onPropertyChangeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.videocapability_)*/nullptr} {}
struct CallbackBody_onPropertyChangeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onPropertyChangeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onPropertyChangeParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onPropertyChangeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onPropertyChangeParamsDefaultTypeInternal _CallbackBody_onPropertyChangeParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onRawDataStatusChangedParams::CallbackBody_onRawDataStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.recv_handle_)*/ ::int64_t{0}

  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onRawDataStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onRawDataStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onRawDataStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onRawDataStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onRawDataStatusChangedParamsDefaultTypeInternal _CallbackBody_onRawDataStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onCommandReceivedParams::CallbackBody_onCommandReceivedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strcmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.psender_)*/nullptr} {}
struct CallbackBody_onCommandReceivedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onCommandReceivedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onCommandReceivedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onCommandReceivedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onCommandReceivedParamsDefaultTypeInternal _CallbackBody_onCommandReceivedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onCommandChannelConnectResultParams::CallbackBody_onCommandChannelConnectResultParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.issuccess_)*/ false
} {}
struct CallbackBody_onCommandChannelConnectResultParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onCommandChannelConnectResultParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onCommandChannelConnectResultParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onCommandChannelConnectResultParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onCommandChannelConnectResultParamsDefaultTypeInternal _CallbackBody_onCommandChannelConnectResultParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onInviteByPhoneStatusParams::CallbackBody_onInviteByPhoneStatusParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/ 0

  , /*decltype(_impl_.reason_)*/ 0
} {}
struct CallbackBody_onInviteByPhoneStatusParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onInviteByPhoneStatusParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onInviteByPhoneStatusParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onInviteByPhoneStatusParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onInviteByPhoneStatusParamsDefaultTypeInternal _CallbackBody_onInviteByPhoneStatusParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onCloudRecordingStatusParams::CallbackBody_onCloudRecordingStatusParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onCloudRecordingStatusParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onCloudRecordingStatusParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onCloudRecordingStatusParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onCloudRecordingStatusParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onCloudRecordingStatusParamsDefaultTypeInternal _CallbackBody_onCloudRecordingStatusParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onCameraControlRequestResultParams::CallbackBody_onCameraControlRequestResultParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.puser_)*/nullptr
  , /*decltype(_impl_.isapproved_)*/ false
} {}
struct CallbackBody_onCameraControlRequestResultParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onCameraControlRequestResultParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onCameraControlRequestResultParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onCameraControlRequestResultParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onCameraControlRequestResultParamsDefaultTypeInternal _CallbackBody_onCameraControlRequestResultParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onCameraControlRequestReceivedParams::CallbackBody_onCameraControlRequestReceivedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.puser_)*/nullptr
  , /*decltype(_impl_.requesttype_)*/ 0
} {}
struct CallbackBody_onCameraControlRequestReceivedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onCameraControlRequestReceivedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onCameraControlRequestReceivedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onCameraControlRequestReceivedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onCameraControlRequestReceivedParamsDefaultTypeInternal _CallbackBody_onCameraControlRequestReceivedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlStatusParams::CallbackBody_onRemoteControlStatusParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.puser_)*/nullptr
  , /*decltype(_impl_.shareaction_)*/nullptr
  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onRemoteControlStatusParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlStatusParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onRemoteControlStatusParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onRemoteControlStatusParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onRemoteControlStatusParamsDefaultTypeInternal _CallbackBody_onRemoteControlStatusParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlRequestReceivedParams::CallbackBody_onRemoteControlRequestReceivedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.puser_)*/nullptr
  , /*decltype(_impl_.shareaction_)*/nullptr} {}
struct CallbackBody_onRemoteControlRequestReceivedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlRequestReceivedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onRemoteControlRequestReceivedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onRemoteControlRequestReceivedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onRemoteControlRequestReceivedParamsDefaultTypeInternal _CallbackBody_onRemoteControlRequestReceivedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlServiceInstallResultParams::CallbackBody_onRemoteControlServiceInstallResultParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bsuccess_)*/ false
} {}
struct CallbackBody_onRemoteControlServiceInstallResultParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onRemoteControlServiceInstallResultParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onRemoteControlServiceInstallResultParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onRemoteControlServiceInstallResultParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onRemoteControlServiceInstallResultParamsDefaultTypeInternal _CallbackBody_onRemoteControlServiceInstallResultParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onHostAskUnmuteParams::CallbackBody_onHostAskUnmuteParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackBody_onHostAskUnmuteParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onHostAskUnmuteParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onHostAskUnmuteParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onHostAskUnmuteParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onHostAskUnmuteParamsDefaultTypeInternal _CallbackBody_onHostAskUnmuteParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onMultiCameraStreamStatusChangedParams::CallbackBody_onMultiCameraStreamStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.camerastreamid_)*/ ::int64_t{0}

  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onMultiCameraStreamStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onMultiCameraStreamStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onMultiCameraStreamStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onMultiCameraStreamStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onMultiCameraStreamStatusChangedParamsDefaultTypeInternal _CallbackBody_onMultiCameraStreamStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onMicSpeakerVolumeChangedParams::CallbackBody_onMicSpeakerVolumeChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.micvolume_)*/ 0u

  , /*decltype(_impl_.speakervolume_)*/ 0u
} {}
struct CallbackBody_onMicSpeakerVolumeChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onMicSpeakerVolumeChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onMicSpeakerVolumeChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onMicSpeakerVolumeChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onMicSpeakerVolumeChangedParamsDefaultTypeInternal _CallbackBody_onMicSpeakerVolumeChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onAudioDeviceStatusChangedParams::CallbackBody_onAudioDeviceStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onAudioDeviceStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onAudioDeviceStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onAudioDeviceStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onAudioDeviceStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onAudioDeviceStatusChangedParamsDefaultTypeInternal _CallbackBody_onAudioDeviceStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onTestMicStatusChangedParams::CallbackBody_onTestMicStatusChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onTestMicStatusChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onTestMicStatusChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onTestMicStatusChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onTestMicStatusChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onTestMicStatusChangedParamsDefaultTypeInternal _CallbackBody_onTestMicStatusChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onSelectedAudioDeviceChangedParams::CallbackBody_onSelectedAudioDeviceChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._cached_size_)*/{}} {}
struct CallbackBody_onSelectedAudioDeviceChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onSelectedAudioDeviceChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onSelectedAudioDeviceChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onSelectedAudioDeviceChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onSelectedAudioDeviceChangedParamsDefaultTypeInternal _CallbackBody_onSelectedAudioDeviceChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onLiveTranscriptionStatusParams::CallbackBody_onLiveTranscriptionStatusParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.status_)*/ 0
} {}
struct CallbackBody_onLiveTranscriptionStatusParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onLiveTranscriptionStatusParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onLiveTranscriptionStatusParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onLiveTranscriptionStatusParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onLiveTranscriptionStatusParamsDefaultTypeInternal _CallbackBody_onLiveTranscriptionStatusParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onLiveTranscriptionMsgErrorParams::CallbackBody_onLiveTranscriptionMsgErrorParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.spokenlanguage_)*/nullptr
  , /*decltype(_impl_.transcriptlanguage_)*/nullptr} {}
struct CallbackBody_onLiveTranscriptionMsgErrorParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onLiveTranscriptionMsgErrorParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onLiveTranscriptionMsgErrorParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onLiveTranscriptionMsgErrorParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onLiveTranscriptionMsgErrorParamsDefaultTypeInternal _CallbackBody_onLiveTranscriptionMsgErrorParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_liveTranscriptionMsgInfoParams::CallbackBody_liveTranscriptionMsgInfoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.messagecontent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.speakername_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.speakerid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.timestamp_)*/ ::int64_t{0}

  , /*decltype(_impl_.messagetype_)*/ 0
} {}
struct CallbackBody_liveTranscriptionMsgInfoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_liveTranscriptionMsgInfoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_liveTranscriptionMsgInfoParamsDefaultTypeInternal() {}
  union {
    CallbackBody_liveTranscriptionMsgInfoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_liveTranscriptionMsgInfoParamsDefaultTypeInternal _CallbackBody_liveTranscriptionMsgInfoParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onCalloutJoinSuccessParams::CallbackBody_onCalloutJoinSuccessParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.phonenumber_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/nullptr} {}
struct CallbackBody_onCalloutJoinSuccessParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onCalloutJoinSuccessParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onCalloutJoinSuccessParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onCalloutJoinSuccessParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onCalloutJoinSuccessParamsDefaultTypeInternal _CallbackBody_onCalloutJoinSuccessParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onSessionLeaveParams::CallbackBody_onSessionLeaveParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ereason_)*/ 0
} {}
struct CallbackBody_onSessionLeaveParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onSessionLeaveParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onSessionLeaveParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onSessionLeaveParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onSessionLeaveParamsDefaultTypeInternal _CallbackBody_onSessionLeaveParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onShareCursorDataReceivedParams::CallbackBody_onShareCursorDataReceivedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.info_)*/nullptr} {}
struct CallbackBody_onShareCursorDataReceivedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onShareCursorDataReceivedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onShareCursorDataReceivedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onShareCursorDataReceivedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onShareCursorDataReceivedParamsDefaultTypeInternal _CallbackBody_onShareCursorDataReceivedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onSpotlightVideoChangedParams::CallbackBody_onSpotlightVideoChangedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_userlist_)*/nullptr} {}
struct CallbackBody_onSpotlightVideoChangedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onSpotlightVideoChangedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onSpotlightVideoChangedParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onSpotlightVideoChangedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onSpotlightVideoChangedParamsDefaultTypeInternal _CallbackBody_onSpotlightVideoChangedParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onBindIncomingLiveStreamResponseParams::CallbackBody_onBindIncomingLiveStreamResponseParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strstreamkeyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bsuccess_)*/ false
} {}
struct CallbackBody_onBindIncomingLiveStreamResponseParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onBindIncomingLiveStreamResponseParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onBindIncomingLiveStreamResponseParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onBindIncomingLiveStreamResponseParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onBindIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onBindIncomingLiveStreamResponseParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onUnbindIncomingLiveStreamResponseParams::CallbackBody_onUnbindIncomingLiveStreamResponseParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strstreamkeyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bsuccess_)*/ false
} {}
struct CallbackBody_onUnbindIncomingLiveStreamResponseParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onUnbindIncomingLiveStreamResponseParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onUnbindIncomingLiveStreamResponseParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onUnbindIncomingLiveStreamResponseParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onUnbindIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onUnbindIncomingLiveStreamResponseParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onIncomingLiveStreamStatusResponseParams::CallbackBody_onIncomingLiveStreamStatusResponseParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.pstreamsstatuslist_)*/nullptr
  , /*decltype(_impl_.bsuccess_)*/ false
} {}
struct CallbackBody_onIncomingLiveStreamStatusResponseParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onIncomingLiveStreamStatusResponseParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onIncomingLiveStreamStatusResponseParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onIncomingLiveStreamStatusResponseParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onIncomingLiveStreamStatusResponseParamsDefaultTypeInternal _CallbackBody_onIncomingLiveStreamStatusResponseParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onStartIncomingLiveStreamResponseParams::CallbackBody_onStartIncomingLiveStreamResponseParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strstreamkeyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bsuccess_)*/ false
} {}
struct CallbackBody_onStartIncomingLiveStreamResponseParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onStartIncomingLiveStreamResponseParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onStartIncomingLiveStreamResponseParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onStartIncomingLiveStreamResponseParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onStartIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onStartIncomingLiveStreamResponseParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody_onStopIncomingLiveStreamResponseParams::CallbackBody_onStopIncomingLiveStreamResponseParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strstreamkeyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bsuccess_)*/ false
} {}
struct CallbackBody_onStopIncomingLiveStreamResponseParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBody_onStopIncomingLiveStreamResponseParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBody_onStopIncomingLiveStreamResponseParamsDefaultTypeInternal() {}
  union {
    CallbackBody_onStopIncomingLiveStreamResponseParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBody_onStopIncomingLiveStreamResponseParamsDefaultTypeInternal _CallbackBody_onStopIncomingLiveStreamResponseParams_default_instance_;
PROTOBUF_CONSTEXPR CallbackBody::CallbackBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.onerrorparam_)*/nullptr
  , /*decltype(_impl_.onuserjoinparam_)*/nullptr
  , /*decltype(_impl_.onuserleaveparam_)*/nullptr
  , /*decltype(_impl_.onuservideostatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onuseraudiostatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onusersharestatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onlivestreamstatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onuserhostchangedparam_)*/nullptr
  , /*decltype(_impl_.onuseractiveaudiochangedparam_)*/nullptr
  , /*decltype(_impl_.onchatnewmessagenotifyparam_)*/nullptr
  , /*decltype(_impl_.onvideosourceinitializeparam_)*/nullptr
  , /*decltype(_impl_.onpropertychangeparam_)*/nullptr
  , /*decltype(_impl_.onrawdatastatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onusermanagerchangedparam_)*/nullptr
  , /*decltype(_impl_.onusernamechangedparam_)*/nullptr
  , /*decltype(_impl_.oncommandreceivedparam_)*/nullptr
  , /*decltype(_impl_.oncloudrecordingstatusparam_)*/nullptr
  , /*decltype(_impl_.oncameracontrolrequestresultparam_)*/nullptr
  , /*decltype(_impl_.oncameracontrolrequestreceivedparam_)*/nullptr
  , /*decltype(_impl_.oncommandchannelconnectresultparam_)*/nullptr
  , /*decltype(_impl_.onhostaskunmuteparam_)*/nullptr
  , /*decltype(_impl_.oninvitebyphonestatusparam_)*/nullptr
  , /*decltype(_impl_.onmulticamerastreamstatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onmicspeakervolumechangedparam_)*/nullptr
  , /*decltype(_impl_.onaudiodevicestatuschangedparam_)*/nullptr
  , /*decltype(_impl_.ontestmicstatuschangedparam_)*/nullptr
  , /*decltype(_impl_.onselectedaudiodevicechangedparam_)*/nullptr
  , /*decltype(_impl_.onlivetranscriptionstatusparam_)*/nullptr
  , /*decltype(_impl_.onlivetranscriptionmsgerrorparam_)*/nullptr
  , /*decltype(_impl_.onchatmsgdeletenotificationparam_)*/nullptr
  , /*decltype(_impl_.livetranscriptionmsginfoparam_)*/nullptr
  , /*decltype(_impl_.oncalloutjoinsuccessparam_)*/nullptr
  , /*decltype(_impl_.onsessionleaveparam_)*/nullptr
  , /*decltype(_impl_.onsharecursordatareceivedparam_)*/nullptr
  , /*decltype(_impl_.onremotecontrolstatusparam_)*/nullptr
  , /*decltype(_impl_.onremotecontrolrequestreceivedparam_)*/nullptr
  , /*decltype(_impl_.onremotecontrolserviceinstallresultparam_)*/nullptr
  , /*decltype(_impl_.onspotlightvideochangedparam_)*/nullptr
  , /*decltype(_impl_.onbindincominglivestreamresponseparam_)*/nullptr
  , /*decltype(_impl_.onunbindincominglivestreamresponseparam_)*/nullptr
  , /*decltype(_impl_.onincominglivestreamstatusresponseparam_)*/nullptr
  , /*decltype(_impl_.onstartincominglivestreamresponseparam_)*/nullptr
  , /*decltype(_impl_.onstopincominglivestreamresponseparam_)*/nullptr
  , /*decltype(_impl_.onfailedtostartshareparam_)*/nullptr
  , /*decltype(_impl_.msgtype_)*/ 0
} {}
struct CallbackBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CallbackBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CallbackBodyDefaultTypeInternal() {}
  union {
    CallbackBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CallbackBodyDefaultTypeInternal _CallbackBody_default_instance_;
PROTOBUF_CONSTEXPR CreateVideoSDKObjParam::CreateVideoSDKObjParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.path_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct CreateVideoSDKObjParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateVideoSDKObjParamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateVideoSDKObjParamDefaultTypeInternal() {}
  union {
    CreateVideoSDKObjParam _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateVideoSDKObjParamDefaultTypeInternal _CreateVideoSDKObjParam_default_instance_;
PROTOBUF_CONSTEXPR VideoSDKInitParams::VideoSDKInitParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.domain_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.logfileprefix_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.speakertestfilepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.enablelog_)*/ false

  , /*decltype(_impl_.audiorawdatamemorymode_)*/ 0

  , /*decltype(_impl_.zn_videorawdatamemorymode_)*/ 0

  , /*decltype(_impl_.zn_sharerawdatamemorymode_)*/ 0
} {}
struct VideoSDKInitParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKInitParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKInitParamsDefaultTypeInternal() {}
  union {
    VideoSDKInitParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKInitParamsDefaultTypeInternal _VideoSDKInitParams_default_instance_;
PROTOBUF_CONSTEXPR VideoSDKSessionContext::VideoSDKSessionContext(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.sessionname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sessionpassword_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.username_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.localvideoon_)*/ false

  , /*decltype(_impl_.connect_)*/ false

  , /*decltype(_impl_.mute_)*/ false

  , /*decltype(_impl_.preprocessor_)*/ false

  , /*decltype(_impl_.externalvideosource_)*/ false

  , /*decltype(_impl_.sessionidletimeoutmins_)*/ 0u
} {}
struct VideoSDKSessionContextDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VideoSDKSessionContextDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VideoSDKSessionContextDefaultTypeInternal() {}
  union {
    VideoSDKSessionContext _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VideoSDKSessionContextDefaultTypeInternal _VideoSDKSessionContext_default_instance_;
PROTOBUF_CONSTEXPR LeaveSessionParams::LeaveSessionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_bend_)*/ false
} {}
struct LeaveSessionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LeaveSessionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LeaveSessionParamsDefaultTypeInternal() {}
  union {
    LeaveSessionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LeaveSessionParamsDefaultTypeInternal _LeaveSessionParams_default_instance_;
PROTOBUF_CONSTEXPR SessionPasswordParams::SessionPasswordParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_password_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SessionPasswordParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionPasswordParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionPasswordParamsDefaultTypeInternal() {}
  union {
    SessionPasswordParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionPasswordParamsDefaultTypeInternal _SessionPasswordParams_default_instance_;
PROTOBUF_CONSTEXPR MuteAudioParams::MuteAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct MuteAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MuteAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MuteAudioParamsDefaultTypeInternal() {}
  union {
    MuteAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MuteAudioParamsDefaultTypeInternal _MuteAudioParams_default_instance_;
PROTOBUF_CONSTEXPR UnMuteAudioParams::UnMuteAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct UnMuteAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnMuteAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnMuteAudioParamsDefaultTypeInternal() {}
  union {
    UnMuteAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnMuteAudioParamsDefaultTypeInternal _UnMuteAudioParams_default_instance_;
PROTOBUF_CONSTEXPR SetSpeakerParams::SetSpeakerParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_speaker_)*/ false
} {}
struct SetSpeakerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSpeakerParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSpeakerParamsDefaultTypeInternal() {}
  union {
    SetSpeakerParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSpeakerParamsDefaultTypeInternal _SetSpeakerParams_default_instance_;
PROTOBUF_CONSTEXPR SelectSpeakerParams::SelectSpeakerParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zn_devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelectSpeakerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectSpeakerParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectSpeakerParamsDefaultTypeInternal() {}
  union {
    SelectSpeakerParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectSpeakerParamsDefaultTypeInternal _SelectSpeakerParams_default_instance_;
PROTOBUF_CONSTEXPR SelectMicParams::SelectMicParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zn_devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelectMicParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectMicParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectMicParamsDefaultTypeInternal() {}
  union {
    SelectMicParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectMicParamsDefaultTypeInternal _SelectMicParams_default_instance_;
PROTOBUF_CONSTEXPR SendChatToUserParams::SendChatToUserParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_msgcontent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/nullptr} {}
struct SendChatToUserParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatToUserParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatToUserParamsDefaultTypeInternal() {}
  union {
    SendChatToUserParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatToUserParamsDefaultTypeInternal _SendChatToUserParams_default_instance_;
PROTOBUF_CONSTEXPR SendChatToAllParams::SendChatToAllParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_msgcontent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SendChatToAllParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendChatToAllParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendChatToAllParamsDefaultTypeInternal() {}
  union {
    SendChatToAllParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendChatToAllParamsDefaultTypeInternal _SendChatToAllParams_default_instance_;
PROTOBUF_CONSTEXPR StartLiveStreamParams::StartLiveStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_streamurl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zn_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zn_broadcasturl_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartLiveStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartLiveStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartLiveStreamParamsDefaultTypeInternal() {}
  union {
    StartLiveStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartLiveStreamParamsDefaultTypeInternal _StartLiveStreamParams_default_instance_;
PROTOBUF_CONSTEXPR IncomingLiveStreamParams::IncomingLiveStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strstreamkeyid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct IncomingLiveStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IncomingLiveStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IncomingLiveStreamParamsDefaultTypeInternal() {}
  union {
    IncomingLiveStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IncomingLiveStreamParamsDefaultTypeInternal _IncomingLiveStreamParams_default_instance_;
PROTOBUF_CONSTEXPR StartShareViewParams::StartShareViewParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_handle_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iswithdeviceaudio_)*/ false

  , /*decltype(_impl_.isoptimizeforsharedvideo_)*/ false
} {}
struct StartShareViewParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartShareViewParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartShareViewParamsDefaultTypeInternal() {}
  union {
    StartShareViewParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartShareViewParamsDefaultTypeInternal _StartShareViewParams_default_instance_;
PROTOBUF_CONSTEXPR StartShareScreenParams::StartShareScreenParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_monitorid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iswithdeviceaudio_)*/ false

  , /*decltype(_impl_.isoptimizeforsharedvideo_)*/ false
} {}
struct StartShareScreenParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartShareScreenParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartShareScreenParamsDefaultTypeInternal() {}
  union {
    StartShareScreenParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartShareScreenParamsDefaultTypeInternal _StartShareScreenParams_default_instance_;
PROTOBUF_CONSTEXPR LockShareParams::LockShareParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_block_)*/ false
} {}
struct LockShareParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LockShareParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LockShareParamsDefaultTypeInternal() {}
  union {
    LockShareParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LockShareParamsDefaultTypeInternal _LockShareParams_default_instance_;
PROTOBUF_CONSTEXPR EnableShareDeviceAudioParams::EnableShareDeviceAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_)*/ false
} {}
struct EnableShareDeviceAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableShareDeviceAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableShareDeviceAudioParamsDefaultTypeInternal() {}
  union {
    EnableShareDeviceAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableShareDeviceAudioParamsDefaultTypeInternal _EnableShareDeviceAudioParams_default_instance_;
PROTOBUF_CONSTEXPR EnableOptimizeForSharedVideoParams::EnableOptimizeForSharedVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.enable_)*/ false
} {}
struct EnableOptimizeForSharedVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableOptimizeForSharedVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableOptimizeForSharedVideoParamsDefaultTypeInternal() {}
  union {
    EnableOptimizeForSharedVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableOptimizeForSharedVideoParamsDefaultTypeInternal _EnableOptimizeForSharedVideoParams_default_instance_;
PROTOBUF_CONSTEXPR StartShare2ndCameraParams::StartShare2ndCameraParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_cameraid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartShare2ndCameraParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartShare2ndCameraParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartShare2ndCameraParamsDefaultTypeInternal() {}
  union {
    StartShare2ndCameraParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartShare2ndCameraParamsDefaultTypeInternal _StartShare2ndCameraParams_default_instance_;
PROTOBUF_CONSTEXPR GetRemoteUsersParams::GetRemoteUsersParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_options_)*/ ::int64_t{0}
} {}
struct GetRemoteUsersParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRemoteUsersParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRemoteUsersParamsDefaultTypeInternal() {}
  union {
    GetRemoteUsersParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRemoteUsersParamsDefaultTypeInternal _GetRemoteUsersParams_default_instance_;
PROTOBUF_CONSTEXPR GetMyInfoParams::GetMyInfoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_options_)*/ ::int64_t{0}
} {}
struct GetMyInfoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMyInfoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMyInfoParamsDefaultTypeInternal() {}
  union {
    GetMyInfoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMyInfoParamsDefaultTypeInternal _GetMyInfoParams_default_instance_;
PROTOBUF_CONSTEXPR ChangeNameParams::ChangeNameParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/nullptr} {}
struct ChangeNameParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChangeNameParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChangeNameParamsDefaultTypeInternal() {}
  union {
    ChangeNameParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChangeNameParamsDefaultTypeInternal _ChangeNameParams_default_instance_;
PROTOBUF_CONSTEXPR MakeHostParams::MakeHostParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/nullptr} {}
struct MakeHostParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeHostParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeHostParamsDefaultTypeInternal() {}
  union {
    MakeHostParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeHostParamsDefaultTypeInternal _MakeHostParams_default_instance_;
PROTOBUF_CONSTEXPR MakeManagerParams::MakeManagerParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct MakeManagerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeManagerParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeManagerParamsDefaultTypeInternal() {}
  union {
    MakeManagerParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeManagerParamsDefaultTypeInternal _MakeManagerParams_default_instance_;
PROTOBUF_CONSTEXPR RevokeManagerParams::RevokeManagerParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct RevokeManagerParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RevokeManagerParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RevokeManagerParamsDefaultTypeInternal() {}
  union {
    RevokeManagerParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RevokeManagerParamsDefaultTypeInternal _RevokeManagerParams_default_instance_;
PROTOBUF_CONSTEXPR RemoveUserParams::RemoveUserParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct RemoveUserParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveUserParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveUserParamsDefaultTypeInternal() {}
  union {
    RemoveUserParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveUserParamsDefaultTypeInternal _RemoveUserParams_default_instance_;
PROTOBUF_CONSTEXPR RotateMyVideoParams::RotateMyVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_rotation_)*/ 0
} {}
struct RotateMyVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RotateMyVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RotateMyVideoParamsDefaultTypeInternal() {}
  union {
    RotateMyVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RotateMyVideoParamsDefaultTypeInternal _RotateMyVideoParams_default_instance_;
PROTOBUF_CONSTEXPR SelectCameraParams::SelectCameraParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SelectCameraParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SelectCameraParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SelectCameraParamsDefaultTypeInternal() {}
  union {
    SelectCameraParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SelectCameraParamsDefaultTypeInternal _SelectCameraParams_default_instance_;
PROTOBUF_CONSTEXPR CreateRenderParams::CreateRenderParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}
} {}
struct CreateRenderParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateRenderParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateRenderParamsDefaultTypeInternal() {}
  union {
    CreateRenderParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateRenderParamsDefaultTypeInternal _CreateRenderParams_default_instance_;
PROTOBUF_CONSTEXPR DestroyRendererParams::DestroyRendererParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}
} {}
struct DestroyRendererParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DestroyRendererParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DestroyRendererParamsDefaultTypeInternal() {}
  union {
    DestroyRendererParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DestroyRendererParamsDefaultTypeInternal _DestroyRendererParams_default_instance_;
PROTOBUF_CONSTEXPR SubscribeParams::SubscribeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_user_)*/nullptr
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}

  , /*decltype(_impl_.zn_type_)*/ 0

  , /*decltype(_impl_.zn_resolution_)*/ 0
} {}
struct SubscribeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeParamsDefaultTypeInternal() {}
  union {
    SubscribeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeParamsDefaultTypeInternal _SubscribeParams_default_instance_;
PROTOBUF_CONSTEXPR UnSubscribeParams::UnSubscribeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_user_)*/nullptr
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}

  , /*decltype(_impl_.zn_type_)*/ 0
} {}
struct UnSubscribeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnSubscribeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnSubscribeParamsDefaultTypeInternal() {}
  union {
    UnSubscribeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnSubscribeParamsDefaultTypeInternal _UnSubscribeParams_default_instance_;
PROTOBUF_CONSTEXPR SubscribeMultiCameraStreamParams::SubscribeMultiCameraStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_user_)*/nullptr
  , /*decltype(_impl_.camerastreamid_)*/ ::int64_t{0}

  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}

  , /*decltype(_impl_.zn_resolution_)*/ 0
} {}
struct SubscribeMultiCameraStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SubscribeMultiCameraStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SubscribeMultiCameraStreamParamsDefaultTypeInternal() {}
  union {
    SubscribeMultiCameraStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SubscribeMultiCameraStreamParamsDefaultTypeInternal _SubscribeMultiCameraStreamParams_default_instance_;
PROTOBUF_CONSTEXPR UnSubscribeMultiCameraStreamParams::UnSubscribeMultiCameraStreamParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_user_)*/nullptr
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}

  , /*decltype(_impl_.camerastreamid_)*/ ::int64_t{0}
} {}
struct UnSubscribeMultiCameraStreamParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnSubscribeMultiCameraStreamParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnSubscribeMultiCameraStreamParamsDefaultTypeInternal() {}
  union {
    UnSubscribeMultiCameraStreamParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnSubscribeMultiCameraStreamParamsDefaultTypeInternal _UnSubscribeMultiCameraStreamParams_default_instance_;
PROTOBUF_CONSTEXPR SetRawDataResolutionParams::SetRawDataResolutionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}

  , /*decltype(_impl_.zn_resolution_)*/ 0
} {}
struct SetRawDataResolutionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetRawDataResolutionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetRawDataResolutionParamsDefaultTypeInternal() {}
  union {
    SetRawDataResolutionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetRawDataResolutionParamsDefaultTypeInternal _SetRawDataResolutionParams_default_instance_;
PROTOBUF_CONSTEXPR GetResolutionParams::GetResolutionParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}
} {}
struct GetResolutionParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetResolutionParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetResolutionParamsDefaultTypeInternal() {}
  union {
    GetResolutionParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetResolutionParamsDefaultTypeInternal _GetResolutionParams_default_instance_;
PROTOBUF_CONSTEXPR GetRawDataTypeParams::GetRawDataTypeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}
} {}
struct GetRawDataTypeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetRawDataTypeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetRawDataTypeParamsDefaultTypeInternal() {}
  union {
    GetRawDataTypeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetRawDataTypeParamsDefaultTypeInternal _GetRawDataTypeParams_default_instance_;
PROTOBUF_CONSTEXPR CameraInfos::CameraInfos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isselecteddevice_)*/ false

  , /*decltype(_impl_.isselectedasmulticamera_)*/ false

  , /*decltype(_impl_.isrunningasmulticamera_)*/ false
} {}
struct CameraInfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CameraInfosDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CameraInfosDefaultTypeInternal() {}
  union {
    CameraInfos _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CameraInfosDefaultTypeInternal _CameraInfos_default_instance_;
PROTOBUF_CONSTEXPR GetCameraList::GetCameraList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camerainfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetCameraListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCameraListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCameraListDefaultTypeInternal() {}
  union {
    GetCameraList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCameraListDefaultTypeInternal _GetCameraList_default_instance_;
PROTOBUF_CONSTEXPR MultiCameraStreamInfos::MultiCameraStreamInfos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.camerastreamid_)*/ ::int64_t{0}
} {}
struct MultiCameraStreamInfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiCameraStreamInfosDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiCameraStreamInfosDefaultTypeInternal() {}
  union {
    MultiCameraStreamInfos _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiCameraStreamInfosDefaultTypeInternal _MultiCameraStreamInfos_default_instance_;
PROTOBUF_CONSTEXPR MultiCameraStreamList::MultiCameraStreamList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camerastreaminfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MultiCameraStreamListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MultiCameraStreamListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MultiCameraStreamListDefaultTypeInternal() {}
  union {
    MultiCameraStreamList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MultiCameraStreamListDefaultTypeInternal _MultiCameraStreamList_default_instance_;
PROTOBUF_CONSTEXPR GetMultiCameraStreamList::GetMultiCameraStreamList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct GetMultiCameraStreamListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMultiCameraStreamListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMultiCameraStreamListDefaultTypeInternal() {}
  union {
    GetMultiCameraStreamList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMultiCameraStreamListDefaultTypeInternal _GetMultiCameraStreamList_default_instance_;
PROTOBUF_CONSTEXPR MicInfos::MicInfos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isselecteddevice_)*/ false
} {}
struct MicInfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MicInfosDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MicInfosDefaultTypeInternal() {}
  union {
    MicInfos _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MicInfosDefaultTypeInternal _MicInfos_default_instance_;
PROTOBUF_CONSTEXPR GetMicList::GetMicList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.micinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetMicListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetMicListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetMicListDefaultTypeInternal() {}
  union {
    GetMicList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetMicListDefaultTypeInternal _GetMicList_default_instance_;
PROTOBUF_CONSTEXPR SpeakerInfos::SpeakerInfos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.devicename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.isselecteddevice_)*/ false
} {}
struct SpeakerInfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpeakerInfosDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpeakerInfosDefaultTypeInternal() {}
  union {
    SpeakerInfos _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpeakerInfosDefaultTypeInternal _SpeakerInfos_default_instance_;
PROTOBUF_CONSTEXPR GetSpeakerList::GetSpeakerList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.speakerinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetSpeakerListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetSpeakerListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetSpeakerListDefaultTypeInternal() {}
  union {
    GetSpeakerList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetSpeakerListDefaultTypeInternal _GetSpeakerList_default_instance_;
PROTOBUF_CONSTEXPR SendCommandParams::SendCommandParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.strcmd_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_)*/nullptr} {}
struct SendCommandParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendCommandParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendCommandParamsDefaultTypeInternal() {}
  union {
    SendCommandParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendCommandParamsDefaultTypeInternal _SendCommandParams_default_instance_;
PROTOBUF_CONSTEXPR PhoneSupportCountryInfos::PhoneSupportCountryInfos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.countryid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.countryname_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.countrycode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct PhoneSupportCountryInfosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PhoneSupportCountryInfosDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PhoneSupportCountryInfosDefaultTypeInternal() {}
  union {
    PhoneSupportCountryInfos _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PhoneSupportCountryInfosDefaultTypeInternal _PhoneSupportCountryInfos_default_instance_;
PROTOBUF_CONSTEXPR GetPhoneSupportCountryList::GetPhoneSupportCountryList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.phonesupportcountryinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetPhoneSupportCountryListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPhoneSupportCountryListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPhoneSupportCountryListDefaultTypeInternal() {}
  union {
    GetPhoneSupportCountryList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPhoneSupportCountryListDefaultTypeInternal _GetPhoneSupportCountryList_default_instance_;
PROTOBUF_CONSTEXPR InviteByPhoneParams::InviteByPhoneParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.countrycode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.phonenumber_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct InviteByPhoneParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InviteByPhoneParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InviteByPhoneParamsDefaultTypeInternal() {}
  union {
    InviteByPhoneParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InviteByPhoneParamsDefaultTypeInternal _InviteByPhoneParams_default_instance_;
PROTOBUF_CONSTEXPR InvitePhoneUserParams::InvitePhoneUserParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.countrycode_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.phonenumber_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bpressone_)*/ false

  , /*decltype(_impl_.bgreeting_)*/ false
} {}
struct InvitePhoneUserParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InvitePhoneUserParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InvitePhoneUserParamsDefaultTypeInternal() {}
  union {
    InvitePhoneUserParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InvitePhoneUserParamsDefaultTypeInternal _InvitePhoneUserParams_default_instance_;
PROTOBUF_CONSTEXPR LocalCameraCtrlTurnLeftParams::LocalCameraCtrlTurnLeftParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct LocalCameraCtrlTurnLeftParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCameraCtrlTurnLeftParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCameraCtrlTurnLeftParamsDefaultTypeInternal() {}
  union {
    LocalCameraCtrlTurnLeftParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCameraCtrlTurnLeftParamsDefaultTypeInternal _LocalCameraCtrlTurnLeftParams_default_instance_;
PROTOBUF_CONSTEXPR LocalCameraCtrlTurnRightParams::LocalCameraCtrlTurnRightParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct LocalCameraCtrlTurnRightParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCameraCtrlTurnRightParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCameraCtrlTurnRightParamsDefaultTypeInternal() {}
  union {
    LocalCameraCtrlTurnRightParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCameraCtrlTurnRightParamsDefaultTypeInternal _LocalCameraCtrlTurnRightParams_default_instance_;
PROTOBUF_CONSTEXPR LocalCameraCtrlTurnUpParams::LocalCameraCtrlTurnUpParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct LocalCameraCtrlTurnUpParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCameraCtrlTurnUpParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCameraCtrlTurnUpParamsDefaultTypeInternal() {}
  union {
    LocalCameraCtrlTurnUpParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCameraCtrlTurnUpParamsDefaultTypeInternal _LocalCameraCtrlTurnUpParams_default_instance_;
PROTOBUF_CONSTEXPR LocalCameraCtrlTurnDownParams::LocalCameraCtrlTurnDownParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct LocalCameraCtrlTurnDownParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCameraCtrlTurnDownParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCameraCtrlTurnDownParamsDefaultTypeInternal() {}
  union {
    LocalCameraCtrlTurnDownParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCameraCtrlTurnDownParamsDefaultTypeInternal _LocalCameraCtrlTurnDownParams_default_instance_;
PROTOBUF_CONSTEXPR LocalCameraCtrlZoomInParams::LocalCameraCtrlZoomInParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct LocalCameraCtrlZoomInParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCameraCtrlZoomInParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCameraCtrlZoomInParamsDefaultTypeInternal() {}
  union {
    LocalCameraCtrlZoomInParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCameraCtrlZoomInParamsDefaultTypeInternal _LocalCameraCtrlZoomInParams_default_instance_;
PROTOBUF_CONSTEXPR LocalCameraCtrlZoomOutParams::LocalCameraCtrlZoomOutParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct LocalCameraCtrlZoomOutParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCameraCtrlZoomOutParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCameraCtrlZoomOutParamsDefaultTypeInternal() {}
  union {
    LocalCameraCtrlZoomOutParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCameraCtrlZoomOutParamsDefaultTypeInternal _LocalCameraCtrlZoomOutParams_default_instance_;
PROTOBUF_CONSTEXPR RequestControlRemoteCameraParams::RequestControlRemoteCameraParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct RequestControlRemoteCameraParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestControlRemoteCameraParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestControlRemoteCameraParamsDefaultTypeInternal() {}
  union {
    RequestControlRemoteCameraParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestControlRemoteCameraParamsDefaultTypeInternal _RequestControlRemoteCameraParams_default_instance_;
PROTOBUF_CONSTEXPR GiveUpControlRemoteCameraParams::GiveUpControlRemoteCameraParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct GiveUpControlRemoteCameraParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GiveUpControlRemoteCameraParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GiveUpControlRemoteCameraParamsDefaultTypeInternal() {}
  union {
    GiveUpControlRemoteCameraParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GiveUpControlRemoteCameraParamsDefaultTypeInternal _GiveUpControlRemoteCameraParams_default_instance_;
PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnLeftParams::RemoteCameraCtrlTurnLeftParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct RemoteCameraCtrlTurnLeftParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnLeftParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteCameraCtrlTurnLeftParamsDefaultTypeInternal() {}
  union {
    RemoteCameraCtrlTurnLeftParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteCameraCtrlTurnLeftParamsDefaultTypeInternal _RemoteCameraCtrlTurnLeftParams_default_instance_;
PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnRightParams::RemoteCameraCtrlTurnRightParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct RemoteCameraCtrlTurnRightParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnRightParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteCameraCtrlTurnRightParamsDefaultTypeInternal() {}
  union {
    RemoteCameraCtrlTurnRightParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteCameraCtrlTurnRightParamsDefaultTypeInternal _RemoteCameraCtrlTurnRightParams_default_instance_;
PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnUpParams::RemoteCameraCtrlTurnUpParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct RemoteCameraCtrlTurnUpParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnUpParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteCameraCtrlTurnUpParamsDefaultTypeInternal() {}
  union {
    RemoteCameraCtrlTurnUpParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteCameraCtrlTurnUpParamsDefaultTypeInternal _RemoteCameraCtrlTurnUpParams_default_instance_;
PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnDownParams::RemoteCameraCtrlTurnDownParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct RemoteCameraCtrlTurnDownParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteCameraCtrlTurnDownParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteCameraCtrlTurnDownParamsDefaultTypeInternal() {}
  union {
    RemoteCameraCtrlTurnDownParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteCameraCtrlTurnDownParamsDefaultTypeInternal _RemoteCameraCtrlTurnDownParams_default_instance_;
PROTOBUF_CONSTEXPR RemoteCameraCtrlZoomInParams::RemoteCameraCtrlZoomInParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct RemoteCameraCtrlZoomInParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteCameraCtrlZoomInParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteCameraCtrlZoomInParamsDefaultTypeInternal() {}
  union {
    RemoteCameraCtrlZoomInParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteCameraCtrlZoomInParamsDefaultTypeInternal _RemoteCameraCtrlZoomInParams_default_instance_;
PROTOBUF_CONSTEXPR RemoteCameraCtrlZoomOutParams::RemoteCameraCtrlZoomOutParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr
  , /*decltype(_impl_.range_)*/ 0u
} {}
struct RemoteCameraCtrlZoomOutParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteCameraCtrlZoomOutParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteCameraCtrlZoomOutParamsDefaultTypeInternal() {}
  union {
    RemoteCameraCtrlZoomOutParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteCameraCtrlZoomOutParamsDefaultTypeInternal _RemoteCameraCtrlZoomOutParams_default_instance_;
PROTOBUF_CONSTEXPR SetVideoQualityPreferenceParams::SetVideoQualityPreferenceParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.mode_)*/ 0

  , /*decltype(_impl_.minimum_frame_rate_)*/ 0u

  , /*decltype(_impl_.maximum_frame_rate_)*/ 0u
} {}
struct SetVideoQualityPreferenceParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVideoQualityPreferenceParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVideoQualityPreferenceParamsDefaultTypeInternal() {}
  union {
    SetVideoQualityPreferenceParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVideoQualityPreferenceParamsDefaultTypeInternal _SetVideoQualityPreferenceParams_default_instance_;
PROTOBUF_CONSTEXPR SetSuppressBackgroundNoiseLevelParams::SetSuppressBackgroundNoiseLevelParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.level_)*/ 0
} {}
struct SetSuppressBackgroundNoiseLevelParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSuppressBackgroundNoiseLevelParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSuppressBackgroundNoiseLevelParamsDefaultTypeInternal() {}
  union {
    SetSuppressBackgroundNoiseLevelParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSuppressBackgroundNoiseLevelParamsDefaultTypeInternal _SetSuppressBackgroundNoiseLevelParams_default_instance_;
PROTOBUF_CONSTEXPR SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.level_)*/ 0
} {}
struct SetEchoCancellationLevelParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetEchoCancellationLevelParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetEchoCancellationLevelParamsDefaultTypeInternal() {}
  union {
    SetEchoCancellationLevelParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetEchoCancellationLevelParamsDefaultTypeInternal _SetEchoCancellationLevelParams_default_instance_;
PROTOBUF_CONSTEXPR EnableMicOriginalInputParams::EnableMicOriginalInputParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableMicOriginalInputParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableMicOriginalInputParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableMicOriginalInputParamsDefaultTypeInternal() {}
  union {
    EnableMicOriginalInputParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableMicOriginalInputParamsDefaultTypeInternal _EnableMicOriginalInputParams_default_instance_;
PROTOBUF_CONSTEXPR EnableHighFidelityMusicModeParams::EnableHighFidelityMusicModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableHighFidelityMusicModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableHighFidelityMusicModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableHighFidelityMusicModeParamsDefaultTypeInternal() {}
  union {
    EnableHighFidelityMusicModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableHighFidelityMusicModeParamsDefaultTypeInternal _EnableHighFidelityMusicModeParams_default_instance_;
PROTOBUF_CONSTEXPR EnableEchoCancellationParams::EnableEchoCancellationParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableEchoCancellationParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableEchoCancellationParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableEchoCancellationParamsDefaultTypeInternal() {}
  union {
    EnableEchoCancellationParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableEchoCancellationParamsDefaultTypeInternal _EnableEchoCancellationParams_default_instance_;
PROTOBUF_CONSTEXPR EnableStereoAudioParams::EnableStereoAudioParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableStereoAudioParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableStereoAudioParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableStereoAudioParamsDefaultTypeInternal() {}
  union {
    EnableStereoAudioParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableStereoAudioParamsDefaultTypeInternal _EnableStereoAudioParams_default_instance_;
PROTOBUF_CONSTEXPR StartMicTestRecordingParams::StartMicTestRecordingParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartMicTestRecordingParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartMicTestRecordingParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartMicTestRecordingParamsDefaultTypeInternal() {}
  union {
    StartMicTestRecordingParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartMicTestRecordingParamsDefaultTypeInternal _StartMicTestRecordingParams_default_instance_;
PROTOBUF_CONSTEXPR StartSpeakerTestParams::StartSpeakerTestParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct StartSpeakerTestParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartSpeakerTestParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartSpeakerTestParamsDefaultTypeInternal() {}
  union {
    StartSpeakerTestParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartSpeakerTestParamsDefaultTypeInternal _StartSpeakerTestParams_default_instance_;
PROTOBUF_CONSTEXPR SetTimerIntervalParams::SetTimerIntervalParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.timerinterval_)*/ 0u
} {}
struct SetTimerIntervalParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTimerIntervalParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTimerIntervalParamsDefaultTypeInternal() {}
  union {
    SetTimerIntervalParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTimerIntervalParamsDefaultTypeInternal _SetTimerIntervalParams_default_instance_;
PROTOBUF_CONSTEXPR EnableMultiStreamVideoParams::EnableMultiStreamVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct EnableMultiStreamVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableMultiStreamVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableMultiStreamVideoParamsDefaultTypeInternal() {}
  union {
    EnableMultiStreamVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableMultiStreamVideoParamsDefaultTypeInternal _EnableMultiStreamVideoParams_default_instance_;
PROTOBUF_CONSTEXPR DisableMultiStreamVideoParams::DisableMultiStreamVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.deviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct DisableMultiStreamVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisableMultiStreamVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisableMultiStreamVideoParamsDefaultTypeInternal() {}
  union {
    DisableMultiStreamVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisableMultiStreamVideoParamsDefaultTypeInternal _DisableMultiStreamVideoParams_default_instance_;
PROTOBUF_CONSTEXPR StartVideoPreviewParams::StartVideoPreviewParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cameradeviceid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}
} {}
struct StartVideoPreviewParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartVideoPreviewParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartVideoPreviewParamsDefaultTypeInternal() {}
  union {
    StartVideoPreviewParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartVideoPreviewParamsDefaultTypeInternal _StartVideoPreviewParams_default_instance_;
PROTOBUF_CONSTEXPR StopVideoPreviewParams::StopVideoPreviewParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.zn_recv_handle_)*/ ::int64_t{0}
} {}
struct StopVideoPreviewParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopVideoPreviewParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopVideoPreviewParamsDefaultTypeInternal() {}
  union {
    StopVideoPreviewParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopVideoPreviewParamsDefaultTypeInternal _StopVideoPreviewParams_default_instance_;
PROTOBUF_CONSTEXPR SpotLightVideoParams::SpotLightVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct SpotLightVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpotLightVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpotLightVideoParamsDefaultTypeInternal() {}
  union {
    SpotLightVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpotLightVideoParamsDefaultTypeInternal _SpotLightVideoParams_default_instance_;
PROTOBUF_CONSTEXPR UnSpotLightVideoParams::UnSpotLightVideoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.user_)*/nullptr} {}
struct UnSpotLightVideoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UnSpotLightVideoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UnSpotLightVideoParamsDefaultTypeInternal() {}
  union {
    UnSpotLightVideoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UnSpotLightVideoParamsDefaultTypeInternal _UnSpotLightVideoParams_default_instance_;
PROTOBUF_CONSTEXPR SetSpokenLanguageParams::SetSpokenLanguageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.languageid_)*/ 0
} {}
struct SetSpokenLanguageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetSpokenLanguageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetSpokenLanguageParamsDefaultTypeInternal() {}
  union {
    SetSpokenLanguageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetSpokenLanguageParamsDefaultTypeInternal _SetSpokenLanguageParams_default_instance_;
PROTOBUF_CONSTEXPR LTTLanguagesList::LTTLanguagesList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lttlanguageinfo_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LTTLanguagesListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LTTLanguagesListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LTTLanguagesListDefaultTypeInternal() {}
  union {
    LTTLanguagesList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LTTLanguagesListDefaultTypeInternal _LTTLanguagesList_default_instance_;
PROTOBUF_CONSTEXPR SetTranslationLanguageParams::SetTranslationLanguageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.languageid_)*/ 0
} {}
struct SetTranslationLanguageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetTranslationLanguageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetTranslationLanguageParamsDefaultTypeInternal() {}
  union {
    SetTranslationLanguageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetTranslationLanguageParamsDefaultTypeInternal _SetTranslationLanguageParams_default_instance_;
PROTOBUF_CONSTEXPR CanChatMessageBeDeletedParams::CanChatMessageBeDeletedParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct CanChatMessageBeDeletedParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CanChatMessageBeDeletedParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CanChatMessageBeDeletedParamsDefaultTypeInternal() {}
  union {
    CanChatMessageBeDeletedParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CanChatMessageBeDeletedParamsDefaultTypeInternal _CanChatMessageBeDeletedParams_default_instance_;
PROTOBUF_CONSTEXPR DeleteChatMessageParams::DeleteChatMessageParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.messageid_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct DeleteChatMessageParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteChatMessageParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteChatMessageParamsDefaultTypeInternal() {}
  union {
    DeleteChatMessageParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteChatMessageParamsDefaultTypeInternal _DeleteChatMessageParams_default_instance_;
PROTOBUF_CONSTEXPR VBItemInfo::VBItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imagefilepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.imagename_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.vbtype_)*/ 0

  , /*decltype(_impl_.canbedeleted_)*/ false
} {}
struct VBItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VBItemInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VBItemInfoDefaultTypeInternal() {}
  union {
    VBItemInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VBItemInfoDefaultTypeInternal _VBItemInfo_default_instance_;
PROTOBUF_CONSTEXPR VBItemHandleList::VBItemHandleList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vbitemhandle_)*/ {}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VBItemHandleListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VBItemHandleListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~VBItemHandleListDefaultTypeInternal() {}
  union {
    VBItemHandleList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VBItemHandleListDefaultTypeInternal _VBItemHandleList_default_instance_;
PROTOBUF_CONSTEXPR AddVirtualBackgroundItemParams::AddVirtualBackgroundItemParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.imagepath_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct AddVirtualBackgroundItemParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AddVirtualBackgroundItemParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AddVirtualBackgroundItemParamsDefaultTypeInternal() {}
  union {
    AddVirtualBackgroundItemParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AddVirtualBackgroundItemParamsDefaultTypeInternal _AddVirtualBackgroundItemParams_default_instance_;
PROTOBUF_CONSTEXPR RemoveVirtualBackgroundItemParams::RemoveVirtualBackgroundItemParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vbitemhandle_)*/ ::int64_t{0}
} {}
struct RemoveVirtualBackgroundItemParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveVirtualBackgroundItemParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveVirtualBackgroundItemParamsDefaultTypeInternal() {}
  union {
    RemoveVirtualBackgroundItemParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveVirtualBackgroundItemParamsDefaultTypeInternal _RemoveVirtualBackgroundItemParams_default_instance_;
PROTOBUF_CONSTEXPR SetVirtualBackgroundItemParams::SetVirtualBackgroundItemParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vbitemhandle_)*/ ::int64_t{0}
} {}
struct SetVirtualBackgroundItemParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVirtualBackgroundItemParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVirtualBackgroundItemParamsDefaultTypeInternal() {}
  union {
    SetVirtualBackgroundItemParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVirtualBackgroundItemParamsDefaultTypeInternal _SetVirtualBackgroundItemParams_default_instance_;
PROTOBUF_CONSTEXPR GetVirtualBackgroundItemInfoParams::GetVirtualBackgroundItemInfoParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.vbitemhandle_)*/ ::int64_t{0}
} {}
struct GetVirtualBackgroundItemInfoParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetVirtualBackgroundItemInfoParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetVirtualBackgroundItemInfoParamsDefaultTypeInternal() {}
  union {
    GetVirtualBackgroundItemInfoParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetVirtualBackgroundItemInfoParamsDefaultTypeInternal _GetVirtualBackgroundItemInfoParams_default_instance_;
PROTOBUF_CONSTEXPR SetScreenCaptureModeParams::SetScreenCaptureModeParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.capturemode_)*/ 0
} {}
struct SetScreenCaptureModeParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetScreenCaptureModeParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetScreenCaptureModeParamsDefaultTypeInternal() {}
  union {
    SetScreenCaptureModeParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetScreenCaptureModeParamsDefaultTypeInternal _SetScreenCaptureModeParams_default_instance_;
PROTOBUF_CONSTEXPR EnableGreenBorderParams::EnableGreenBorderParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableGreenBorderParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableGreenBorderParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableGreenBorderParamsDefaultTypeInternal() {}
  union {
    EnableGreenBorderParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableGreenBorderParamsDefaultTypeInternal _EnableGreenBorderParams_default_instance_;
PROTOBUF_CONSTEXPR EnableAdminRemoteControlParams::EnableAdminRemoteControlParams(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.benable_)*/ false
} {}
struct EnableAdminRemoteControlParamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnableAdminRemoteControlParamsDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnableAdminRemoteControlParamsDefaultTypeInternal() {}
  union {
    EnableAdminRemoteControlParams _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnableAdminRemoteControlParamsDefaultTypeInternal _EnableAdminRemoteControlParams_default_instance_;
}  // namespace proto
}  // namespace sdk
}  // namespace zoomvideo
}  // namespace electron
}  // namespace com
namespace com {
namespace electron {
namespace zoomvideo {
namespace sdk {
namespace proto {
// ===================================================================

class VideoSDKUser::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSDKUser>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSDKUser, _impl_._has_bits_);
  static void set_has_p_user(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_custom_identity(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ishasvideodevice(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isvideoon(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_audiotype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_isaudiomuted(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_isaudiotalking(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::ShareActionList& zn_shareactionlist(const VideoSDKUser* msg);
  static void set_has_zn_shareactionlist(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ishost(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_ismanager(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_videostatisticinfo_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_videostatisticinfo_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_videostatisticinfo_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_videostatisticinfo_bpf(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sharestatisticinfo_width(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sharestatisticinfo_height(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_sharestatisticinfo_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_sharestatisticinfo_bpf(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_userreference(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isvideospotlighted(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_isincominglivestreamuser(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::ShareActionList&
VideoSDKUser::_Internal::zn_shareactionlist(const VideoSDKUser* msg) {
  return *msg->_impl_.zn_shareactionlist_;
}
VideoSDKUser::VideoSDKUser(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
}
VideoSDKUser::VideoSDKUser(const VideoSDKUser& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoSDKUser* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_identity_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.userid_) {}

    , decltype(_impl_.userreference_) {}

    , decltype(_impl_.zn_shareactionlist_){nullptr}
    , decltype(_impl_.p_user_) {}

    , decltype(_impl_.audiotype_) {}

    , decltype(_impl_.ishasvideodevice_) {}

    , decltype(_impl_.isvideoon_) {}

    , decltype(_impl_.isaudiomuted_) {}

    , decltype(_impl_.isaudiotalking_) {}

    , decltype(_impl_.videostatisticinfo_width_) {}

    , decltype(_impl_.videostatisticinfo_height_) {}

    , decltype(_impl_.videostatisticinfo_fps_) {}

    , decltype(_impl_.videostatisticinfo_bpf_) {}

    , decltype(_impl_.sharestatisticinfo_width_) {}

    , decltype(_impl_.ishost_) {}

    , decltype(_impl_.ismanager_) {}

    , decltype(_impl_.isvideospotlighted_) {}

    , decltype(_impl_.isincominglivestreamuser_) {}

    , decltype(_impl_.sharestatisticinfo_height_) {}

    , decltype(_impl_.sharestatisticinfo_fps_) {}

    , decltype(_impl_.sharestatisticinfo_bpf_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.custom_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.custom_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.custom_identity_.Set(from._internal_custom_identity(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.userid_.Set(from._internal_userid(), _this->GetArenaForAllocation());
  }
  _impl_.userreference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userreference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.userreference_.Set(from._internal_userreference(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.zn_shareactionlist_ = new ::com::electron::zoomvideo::sdk::proto::ShareActionList(*from._impl_.zn_shareactionlist_);
  }
  ::memcpy(&_impl_.p_user_, &from._impl_.p_user_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sharestatisticinfo_bpf_) -
    reinterpret_cast<char*>(&_impl_.p_user_)) + sizeof(_impl_.sharestatisticinfo_bpf_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
}

inline void VideoSDKUser::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.custom_identity_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.userid_) {}

    , decltype(_impl_.userreference_) {}

    , decltype(_impl_.zn_shareactionlist_){nullptr}
    , decltype(_impl_.p_user_) { ::int64_t{0} }

    , decltype(_impl_.audiotype_) { 0 }

    , decltype(_impl_.ishasvideodevice_) { false }

    , decltype(_impl_.isvideoon_) { false }

    , decltype(_impl_.isaudiomuted_) { false }

    , decltype(_impl_.isaudiotalking_) { false }

    , decltype(_impl_.videostatisticinfo_width_) { 0 }

    , decltype(_impl_.videostatisticinfo_height_) { 0 }

    , decltype(_impl_.videostatisticinfo_fps_) { 0 }

    , decltype(_impl_.videostatisticinfo_bpf_) { 0 }

    , decltype(_impl_.sharestatisticinfo_width_) { 0 }

    , decltype(_impl_.ishost_) { false }

    , decltype(_impl_.ismanager_) { false }

    , decltype(_impl_.isvideospotlighted_) { false }

    , decltype(_impl_.isincominglivestreamuser_) { false }

    , decltype(_impl_.sharestatisticinfo_height_) { 0 }

    , decltype(_impl_.sharestatisticinfo_fps_) { 0 }

    , decltype(_impl_.sharestatisticinfo_bpf_) { 0 }

  };
  _impl_.custom_identity_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.custom_identity_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.userreference_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.userreference_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoSDKUser::~VideoSDKUser() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKUser::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.custom_identity_.Destroy();
  _impl_.username_.Destroy();
  _impl_.userid_.Destroy();
  _impl_.userreference_.Destroy();
  if (this != internal_default_instance()) delete _impl_.zn_shareactionlist_;
}

void VideoSDKUser::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKUser::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.custom_identity_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.userid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.userreference_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.zn_shareactionlist_ != nullptr);
      _impl_.zn_shareactionlist_->Clear();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&_impl_.p_user_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ishasvideodevice_) -
        reinterpret_cast<char*>(&_impl_.p_user_)) + sizeof(_impl_.ishasvideodevice_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&_impl_.isvideoon_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sharestatisticinfo_width_) -
        reinterpret_cast<char*>(&_impl_.isvideoon_)) + sizeof(_impl_.sharestatisticinfo_width_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&_impl_.ishost_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sharestatisticinfo_bpf_) -
        reinterpret_cast<char*>(&_impl_.ishost_)) + sizeof(_impl_.sharestatisticinfo_bpf_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKUser::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 p_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_p_user(&has_bits);
          _impl_.p_user_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string custom_identity = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_custom_identity();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string username = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isHasVideoDevice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_ishasvideodevice(&has_bits);
          _impl_.ishasvideodevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isVideoOn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_isvideoon(&has_bits);
          _impl_.isvideoon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 audioType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_audiotype(&has_bits);
          _impl_.audiotype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAudioMuted = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_isaudiomuted(&has_bits);
          _impl_.isaudiomuted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAudioTalking = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_isaudiotalking(&has_bits);
          _impl_.isaudiotalking_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.ShareActionList zn_shareActionList = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_shareactionlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isHost = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_ishost(&has_bits);
          _impl_.ishost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isManager = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _Internal::set_has_ismanager(&has_bits);
          _impl_.ismanager_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 VideoStatisticInfo_width = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 96)) {
          _Internal::set_has_videostatisticinfo_width(&has_bits);
          _impl_.videostatisticinfo_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 VideoStatisticInfo_height = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 104)) {
          _Internal::set_has_videostatisticinfo_height(&has_bits);
          _impl_.videostatisticinfo_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 VideoStatisticInfo_fps = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _Internal::set_has_videostatisticinfo_fps(&has_bits);
          _impl_.videostatisticinfo_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 VideoStatisticInfo_bpf = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 120)) {
          _Internal::set_has_videostatisticinfo_bpf(&has_bits);
          _impl_.videostatisticinfo_bpf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ShareStatisticInfo_width = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 128)) {
          _Internal::set_has_sharestatisticinfo_width(&has_bits);
          _impl_.sharestatisticinfo_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ShareStatisticInfo_height = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 136)) {
          _Internal::set_has_sharestatisticinfo_height(&has_bits);
          _impl_.sharestatisticinfo_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ShareStatisticInfo_fps = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 144)) {
          _Internal::set_has_sharestatisticinfo_fps(&has_bits);
          _impl_.sharestatisticinfo_fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 ShareStatisticInfo_bpf = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 152)) {
          _Internal::set_has_sharestatisticinfo_bpf(&has_bits);
          _impl_.sharestatisticinfo_bpf_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          auto str = _internal_mutable_userid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userReference = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          auto str = _internal_mutable_userreference();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isVideoSpotLighted = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 176)) {
          _Internal::set_has_isvideospotlighted(&has_bits);
          _impl_.isvideospotlighted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isIncomingLiveStreamUser = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 184)) {
          _Internal::set_has_isincominglivestreamuser(&has_bits);
          _impl_.isincominglivestreamuser_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKUser::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 p_user = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_p_user(), target);
  }

  // optional string custom_identity = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_custom_identity();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string username = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_username();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool isHasVideoDevice = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_ishasvideodevice(), target);
  }

  // optional bool isVideoOn = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_isvideoon(), target);
  }

  // optional int32 audioType = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_audiotype(), target);
  }

  // optional bool isAudioMuted = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_isaudiomuted(), target);
  }

  // optional bool isAudioTalking = 8;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_isaudiotalking(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.ShareActionList zn_shareActionList = 9;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::zn_shareactionlist(this),
        _Internal::zn_shareactionlist(this).GetCachedSize(), target, stream);
  }

  // optional bool isHost = 10;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_ishost(), target);
  }

  // optional bool isManager = 11;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        11, this->_internal_ismanager(), target);
  }

  // optional int32 VideoStatisticInfo_width = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        12, this->_internal_videostatisticinfo_width(), target);
  }

  // optional int32 VideoStatisticInfo_height = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        13, this->_internal_videostatisticinfo_height(), target);
  }

  // optional int32 VideoStatisticInfo_fps = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        14, this->_internal_videostatisticinfo_fps(), target);
  }

  // optional int32 VideoStatisticInfo_bpf = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        15, this->_internal_videostatisticinfo_bpf(), target);
  }

  // optional int32 ShareStatisticInfo_width = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        16, this->_internal_sharestatisticinfo_width(), target);
  }

  // optional int32 ShareStatisticInfo_height = 17;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        17, this->_internal_sharestatisticinfo_height(), target);
  }

  // optional int32 ShareStatisticInfo_fps = 18;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        18, this->_internal_sharestatisticinfo_fps(), target);
  }

  // optional int32 ShareStatisticInfo_bpf = 19;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        19, this->_internal_sharestatisticinfo_bpf(), target);
  }

  // optional string userid = 20;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_userid();
    target = stream->WriteStringMaybeAliased(20, _s, target);
  }

  // optional string userReference = 21;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_userreference();
    target = stream->WriteStringMaybeAliased(21, _s, target);
  }

  // optional bool isVideoSpotLighted = 22;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        22, this->_internal_isvideospotlighted(), target);
  }

  // optional bool isIncomingLiveStreamUser = 23;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        23, this->_internal_isincominglivestreamuser(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  return target;
}

::size_t VideoSDKUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string custom_identity = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_custom_identity());
    }

    // optional string username = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

    // optional string userid = 20;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_userid());
    }

    // optional string userReference = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_userreference());
    }

    // optional .com.electron.zoomvideo.sdk.proto.ShareActionList zn_shareActionList = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.zn_shareactionlist_);
    }

    // optional int64 p_user = 1;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_p_user());
    }

    // optional int32 audioType = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_audiotype());
    }

    // optional bool isHasVideoDevice = 4;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional bool isVideoOn = 5;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional bool isAudioMuted = 7;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2;
    }

    // optional bool isAudioTalking = 8;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2;
    }

    // optional int32 VideoStatisticInfo_width = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_videostatisticinfo_width());
    }

    // optional int32 VideoStatisticInfo_height = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_videostatisticinfo_height());
    }

    // optional int32 VideoStatisticInfo_fps = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_videostatisticinfo_fps());
    }

    // optional int32 VideoStatisticInfo_bpf = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_videostatisticinfo_bpf());
    }

    // optional int32 ShareStatisticInfo_width = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_sharestatisticinfo_width());
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional bool isHost = 10;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2;
    }

    // optional bool isManager = 11;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2;
    }

    // optional bool isVideoSpotLighted = 22;
    if (cached_has_bits & 0x00040000u) {
      total_size += 3;
    }

    // optional bool isIncomingLiveStreamUser = 23;
    if (cached_has_bits & 0x00080000u) {
      total_size += 3;
    }

    // optional int32 ShareStatisticInfo_height = 17;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_sharestatisticinfo_height());
    }

    // optional int32 ShareStatisticInfo_fps = 18;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_sharestatisticinfo_fps());
    }

    // optional int32 ShareStatisticInfo_bpf = 19;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                      this->_internal_sharestatisticinfo_bpf());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKUser::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKUser*>(
      &from));
}

void VideoSDKUser::MergeFrom(const VideoSDKUser& from) {
  VideoSDKUser* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_custom_identity(from._internal_custom_identity());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_userid(from._internal_userid());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_userreference(from._internal_userreference());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_zn_shareactionlist()->::com::electron::zoomvideo::sdk::proto::ShareActionList::MergeFrom(
          from._internal_zn_shareactionlist());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.p_user_ = from._impl_.p_user_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.audiotype_ = from._impl_.audiotype_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ishasvideodevice_ = from._impl_.ishasvideodevice_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.isvideoon_ = from._impl_.isvideoon_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.isaudiomuted_ = from._impl_.isaudiomuted_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.isaudiotalking_ = from._impl_.isaudiotalking_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.videostatisticinfo_width_ = from._impl_.videostatisticinfo_width_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.videostatisticinfo_height_ = from._impl_.videostatisticinfo_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.videostatisticinfo_fps_ = from._impl_.videostatisticinfo_fps_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.videostatisticinfo_bpf_ = from._impl_.videostatisticinfo_bpf_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.sharestatisticinfo_width_ = from._impl_.sharestatisticinfo_width_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.ishost_ = from._impl_.ishost_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.ismanager_ = from._impl_.ismanager_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.isvideospotlighted_ = from._impl_.isvideospotlighted_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.isincominglivestreamuser_ = from._impl_.isincominglivestreamuser_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.sharestatisticinfo_height_ = from._impl_.sharestatisticinfo_height_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.sharestatisticinfo_fps_ = from._impl_.sharestatisticinfo_fps_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.sharestatisticinfo_bpf_ = from._impl_.sharestatisticinfo_bpf_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKUser::CopyFrom(const VideoSDKUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKUser::IsInitialized() const {
  return true;
}

void VideoSDKUser::InternalSwap(VideoSDKUser* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.custom_identity_, lhs_arena,
                                       &other->_impl_.custom_identity_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userid_, lhs_arena,
                                       &other->_impl_.userid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.userreference_, lhs_arena,
                                       &other->_impl_.userreference_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSDKUser, _impl_.sharestatisticinfo_bpf_)
      + sizeof(VideoSDKUser::_impl_.sharestatisticinfo_bpf_)
      - PROTOBUF_FIELD_OFFSET(VideoSDKUser, _impl_.zn_shareactionlist_)>(
          reinterpret_cast<char*>(&_impl_.zn_shareactionlist_),
          reinterpret_cast<char*>(&other->_impl_.zn_shareactionlist_));
}

std::string VideoSDKUser::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKUser";
}

// ===================================================================

class UserList::_Internal {
 public:
};

UserList::UserList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.UserList)
}
UserList::UserList(const UserList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UserList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){from._impl_.user_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.UserList)
}

inline void UserList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.user_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.UserList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UserList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.user_.~RepeatedPtrField();
}

void UserList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.UserList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.user_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UserList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UserList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.UserList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_user_size()); i < n; i++) {
    const auto& repfield = this->_internal_user(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.UserList)
  return target;
}

::size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.UserList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->_impl_.user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UserList*>(
      &from));
}

void UserList::MergeFrom(const UserList& from) {
  UserList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.UserList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.user_.MergeFrom(from._impl_.user_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::InternalSwap(UserList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.user_.InternalSwap(&other->_impl_.user_);
}

std::string UserList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.UserList";
}

// ===================================================================

class ShareAction::_Internal {
 public:
  using HasBits = decltype(std::declval<ShareAction>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ShareAction, _impl_._has_bits_);
  static void set_has_sharesourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sharestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_subscribefailreason(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isannotationprivilegeenabled(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sharetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ShareAction::ShareAction(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.ShareAction)
}
ShareAction::ShareAction(const ShareAction& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.ShareAction)
}

inline void ShareAction::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sharesourceid_) { 0 }

    , decltype(_impl_.sharestatus_) { 0 }

    , decltype(_impl_.subscribefailreason_) { 0 }

    , decltype(_impl_.isannotationprivilegeenabled_) { false }

    , decltype(_impl_.sharetype_) { 0 }

  };
}

ShareAction::~ShareAction() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.ShareAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareAction::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ShareAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShareAction::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.ShareAction)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.sharesourceid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sharetype_) -
        reinterpret_cast<char*>(&_impl_.sharesourceid_)) + sizeof(_impl_.sharetype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 shareSourceId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_sharesourceid(&has_bits);
          _impl_.sharesourceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 shareStatus = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sharestatus(&has_bits);
          _impl_.sharestatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 subscribeFailReason = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_subscribefailreason(&has_bits);
          _impl_.subscribefailreason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isAnnotationPrivilegeEnabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_isannotationprivilegeenabled(&has_bits);
          _impl_.isannotationprivilegeenabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 shareType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_sharetype(&has_bits);
          _impl_.sharetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShareAction::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.ShareAction)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 shareSourceId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_sharesourceid(), target);
  }

  // optional int32 shareStatus = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_sharestatus(), target);
  }

  // optional int32 subscribeFailReason = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_subscribefailreason(), target);
  }

  // optional bool isAnnotationPrivilegeEnabled = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_isannotationprivilegeenabled(), target);
  }

  // optional int32 shareType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_sharetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.ShareAction)
  return target;
}

::size_t ShareAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.ShareAction)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 shareSourceId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sharesourceid());
    }

    // optional int32 shareStatus = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sharestatus());
    }

    // optional int32 subscribeFailReason = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_subscribefailreason());
    }

    // optional bool isAnnotationPrivilegeEnabled = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional int32 shareType = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sharetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareAction::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareAction*>(
      &from));
}

void ShareAction::MergeFrom(const ShareAction& from) {
  ShareAction* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.ShareAction)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.sharesourceid_ = from._impl_.sharesourceid_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sharestatus_ = from._impl_.sharestatus_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.subscribefailreason_ = from._impl_.subscribefailreason_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.isannotationprivilegeenabled_ = from._impl_.isannotationprivilegeenabled_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.sharetype_ = from._impl_.sharetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareAction::CopyFrom(const ShareAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.ShareAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareAction::IsInitialized() const {
  return true;
}

void ShareAction::InternalSwap(ShareAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShareAction, _impl_.sharetype_)
      + sizeof(ShareAction::_impl_.sharetype_)
      - PROTOBUF_FIELD_OFFSET(ShareAction, _impl_.sharesourceid_)>(
          reinterpret_cast<char*>(&_impl_.sharesourceid_),
          reinterpret_cast<char*>(&other->_impl_.sharesourceid_));
}

std::string ShareAction::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.ShareAction";
}

// ===================================================================

class ShareActionList::_Internal {
 public:
};

ShareActionList::ShareActionList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.ShareActionList)
}
ShareActionList::ShareActionList(const ShareActionList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShareActionList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shareaction_){from._impl_.shareaction_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.ShareActionList)
}

inline void ShareActionList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.shareaction_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShareActionList::~ShareActionList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.ShareActionList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareActionList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shareaction_.~RepeatedPtrField();
}

void ShareActionList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShareActionList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.ShareActionList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shareaction_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareActionList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shareaction(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShareActionList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.ShareActionList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shareaction_size()); i < n; i++) {
    const auto& repfield = this->_internal_shareaction(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.ShareActionList)
  return target;
}

::size_t ShareActionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.ShareActionList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 1;
  total_size += 1UL * this->_internal_shareaction_size();
  for (const auto& msg : this->_impl_.shareaction_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareActionList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareActionList*>(
      &from));
}

void ShareActionList::MergeFrom(const ShareActionList& from) {
  ShareActionList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.ShareActionList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shareaction_.MergeFrom(from._impl_.shareaction_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareActionList::CopyFrom(const ShareActionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.ShareActionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareActionList::IsInitialized() const {
  return true;
}

void ShareActionList::InternalSwap(ShareActionList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shareaction_.InternalSwap(&other->_impl_.shareaction_);
}

std::string ShareActionList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.ShareActionList";
}

// ===================================================================

class VideoSDKSessionAudioStatisticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSDKSessionAudioStatisticInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSDKSessionAudioStatisticInfo, _impl_._has_bits_);
  static void set_has_frequency(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_packetlossavg(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_packetlossmax(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

VideoSDKSessionAudioStatisticInfo::VideoSDKSessionAudioStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
}
VideoSDKSessionAudioStatisticInfo::VideoSDKSessionAudioStatisticInfo(const VideoSDKSessionAudioStatisticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
}

inline void VideoSDKSessionAudioStatisticInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frequency_) { ::int64_t{0} }

    , decltype(_impl_.latency_) { ::int64_t{0} }

    , decltype(_impl_.jitter_) { ::int64_t{0} }

    , decltype(_impl_.packetlossavg_) { 0 }

    , decltype(_impl_.packetlossmax_) { 0 }

  };
}

VideoSDKSessionAudioStatisticInfo::~VideoSDKSessionAudioStatisticInfo() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKSessionAudioStatisticInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoSDKSessionAudioStatisticInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKSessionAudioStatisticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.frequency_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.packetlossmax_) -
        reinterpret_cast<char*>(&_impl_.frequency_)) + sizeof(_impl_.packetlossmax_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKSessionAudioStatisticInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 frequency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_frequency(&has_bits);
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 latency = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_latency(&has_bits);
          _impl_.latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 Jitter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_jitter(&has_bits);
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float packetLossAvg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 37)) {
          _Internal::set_has_packetlossavg(&has_bits);
          _impl_.packetlossavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float packetLossMax = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 45)) {
          _Internal::set_has_packetlossmax(&has_bits);
          _impl_.packetlossmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKSessionAudioStatisticInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 frequency = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_frequency(), target);
  }

  // optional int64 latency = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_latency(), target);
  }

  // optional int64 Jitter = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_jitter(), target);
  }

  // optional float packetLossAvg = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        4, this->_internal_packetlossavg(), target);
  }

  // optional float packetLossMax = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        5, this->_internal_packetlossmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  return target;
}

::size_t VideoSDKSessionAudioStatisticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int64 frequency = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_frequency());
    }

    // optional int64 latency = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_latency());
    }

    // optional int64 Jitter = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_jitter());
    }

    // optional float packetLossAvg = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 5;
    }

    // optional float packetLossMax = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKSessionAudioStatisticInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKSessionAudioStatisticInfo*>(
      &from));
}

void VideoSDKSessionAudioStatisticInfo::MergeFrom(const VideoSDKSessionAudioStatisticInfo& from) {
  VideoSDKSessionAudioStatisticInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.frequency_ = from._impl_.frequency_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.latency_ = from._impl_.latency_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.jitter_ = from._impl_.jitter_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.packetlossavg_ = from._impl_.packetlossavg_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.packetlossmax_ = from._impl_.packetlossmax_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKSessionAudioStatisticInfo::CopyFrom(const VideoSDKSessionAudioStatisticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKSessionAudioStatisticInfo::IsInitialized() const {
  return true;
}

void VideoSDKSessionAudioStatisticInfo::InternalSwap(VideoSDKSessionAudioStatisticInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSDKSessionAudioStatisticInfo, _impl_.packetlossmax_)
      + sizeof(VideoSDKSessionAudioStatisticInfo::_impl_.packetlossmax_)
      - PROTOBUF_FIELD_OFFSET(VideoSDKSessionAudioStatisticInfo, _impl_.frequency_)>(
          reinterpret_cast<char*>(&_impl_.frequency_),
          reinterpret_cast<char*>(&other->_impl_.frequency_));
}

std::string VideoSDKSessionAudioStatisticInfo::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo";
}

// ===================================================================

class VideoSDKSessionAudioStatisticInfoList::_Internal {
 public:
};

VideoSDKSessionAudioStatisticInfoList::VideoSDKSessionAudioStatisticInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
}
VideoSDKSessionAudioStatisticInfoList::VideoSDKSessionAudioStatisticInfoList(const VideoSDKSessionAudioStatisticInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoSDKSessionAudioStatisticInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.audiostatisticinfo_){from._impl_.audiostatisticinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
}

inline void VideoSDKSessionAudioStatisticInfoList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.audiostatisticinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoSDKSessionAudioStatisticInfoList::~VideoSDKSessionAudioStatisticInfoList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKSessionAudioStatisticInfoList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.audiostatisticinfo_.~RepeatedPtrField();
}

void VideoSDKSessionAudioStatisticInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKSessionAudioStatisticInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.audiostatisticinfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKSessionAudioStatisticInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo audioStatisticInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_audiostatisticinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKSessionAudioStatisticInfoList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo audioStatisticInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_audiostatisticinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_audiostatisticinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  return target;
}

::size_t VideoSDKSessionAudioStatisticInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo audioStatisticInfo = 1;
  total_size += 1UL * this->_internal_audiostatisticinfo_size();
  for (const auto& msg : this->_impl_.audiostatisticinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKSessionAudioStatisticInfoList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKSessionAudioStatisticInfoList*>(
      &from));
}

void VideoSDKSessionAudioStatisticInfoList::MergeFrom(const VideoSDKSessionAudioStatisticInfoList& from) {
  VideoSDKSessionAudioStatisticInfoList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.audiostatisticinfo_.MergeFrom(from._impl_.audiostatisticinfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKSessionAudioStatisticInfoList::CopyFrom(const VideoSDKSessionAudioStatisticInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKSessionAudioStatisticInfoList::IsInitialized() const {
  return true;
}

void VideoSDKSessionAudioStatisticInfoList::InternalSwap(VideoSDKSessionAudioStatisticInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.audiostatisticinfo_.InternalSwap(&other->_impl_.audiostatisticinfo_);
}

std::string VideoSDKSessionAudioStatisticInfoList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList";
}

// ===================================================================

class VideoSDKSessionASVStatisticInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSDKSessionASVStatisticInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSDKSessionASVStatisticInfo, _impl_._has_bits_);
  static void set_has_frame_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_frame_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_fps(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_latency(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_jitter(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packetlossavg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packetlossmax(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

VideoSDKSessionASVStatisticInfo::VideoSDKSessionASVStatisticInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
}
VideoSDKSessionASVStatisticInfo::VideoSDKSessionASVStatisticInfo(const VideoSDKSessionASVStatisticInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
}

inline void VideoSDKSessionASVStatisticInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.frame_width_) { ::int64_t{0} }

    , decltype(_impl_.frame_height_) { ::int64_t{0} }

    , decltype(_impl_.fps_) { ::int64_t{0} }

    , decltype(_impl_.latency_) { ::int64_t{0} }

    , decltype(_impl_.jitter_) { ::int64_t{0} }

    , decltype(_impl_.packetlossavg_) { 0 }

    , decltype(_impl_.packetlossmax_) { 0 }

  };
}

VideoSDKSessionASVStatisticInfo::~VideoSDKSessionASVStatisticInfo() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKSessionASVStatisticInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void VideoSDKSessionASVStatisticInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKSessionASVStatisticInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&_impl_.frame_width_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.packetlossmax_) -
        reinterpret_cast<char*>(&_impl_.frame_width_)) + sizeof(_impl_.packetlossmax_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKSessionASVStatisticInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 frame_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_frame_width(&has_bits);
          _impl_.frame_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 frame_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_frame_height(&has_bits);
          _impl_.frame_height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 fps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_fps(&has_bits);
          _impl_.fps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 latency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_latency(&has_bits);
          _impl_.latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 Jitter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_jitter(&has_bits);
          _impl_.jitter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float packetLossAvg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 53)) {
          _Internal::set_has_packetlossavg(&has_bits);
          _impl_.packetlossavg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional float packetLossMax = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 61)) {
          _Internal::set_has_packetlossmax(&has_bits);
          _impl_.packetlossmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKSessionASVStatisticInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 frame_width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_frame_width(), target);
  }

  // optional int64 frame_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_frame_height(), target);
  }

  // optional int64 fps = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_fps(), target);
  }

  // optional int64 latency = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_latency(), target);
  }

  // optional int64 Jitter = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        5, this->_internal_jitter(), target);
  }

  // optional float packetLossAvg = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        6, this->_internal_packetlossavg(), target);
  }

  // optional float packetLossMax = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(
        7, this->_internal_packetlossmax(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  return target;
}

::size_t VideoSDKSessionASVStatisticInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional int64 frame_width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_frame_width());
    }

    // optional int64 frame_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_frame_height());
    }

    // optional int64 fps = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_fps());
    }

    // optional int64 latency = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_latency());
    }

    // optional int64 Jitter = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_jitter());
    }

    // optional float packetLossAvg = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 5;
    }

    // optional float packetLossMax = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 5;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKSessionASVStatisticInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKSessionASVStatisticInfo*>(
      &from));
}

void VideoSDKSessionASVStatisticInfo::MergeFrom(const VideoSDKSessionASVStatisticInfo& from) {
  VideoSDKSessionASVStatisticInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.frame_width_ = from._impl_.frame_width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.frame_height_ = from._impl_.frame_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.fps_ = from._impl_.fps_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.latency_ = from._impl_.latency_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.jitter_ = from._impl_.jitter_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.packetlossavg_ = from._impl_.packetlossavg_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.packetlossmax_ = from._impl_.packetlossmax_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKSessionASVStatisticInfo::CopyFrom(const VideoSDKSessionASVStatisticInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKSessionASVStatisticInfo::IsInitialized() const {
  return true;
}

void VideoSDKSessionASVStatisticInfo::InternalSwap(VideoSDKSessionASVStatisticInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSDKSessionASVStatisticInfo, _impl_.packetlossmax_)
      + sizeof(VideoSDKSessionASVStatisticInfo::_impl_.packetlossmax_)
      - PROTOBUF_FIELD_OFFSET(VideoSDKSessionASVStatisticInfo, _impl_.frame_width_)>(
          reinterpret_cast<char*>(&_impl_.frame_width_),
          reinterpret_cast<char*>(&other->_impl_.frame_width_));
}

std::string VideoSDKSessionASVStatisticInfo::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo";
}

// ===================================================================

class VideoSDKSessionASVStatisticInfoList::_Internal {
 public:
};

VideoSDKSessionASVStatisticInfoList::VideoSDKSessionASVStatisticInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
}
VideoSDKSessionASVStatisticInfoList::VideoSDKSessionASVStatisticInfoList(const VideoSDKSessionASVStatisticInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoSDKSessionASVStatisticInfoList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.asvstatisticinfo_){from._impl_.asvstatisticinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
}

inline void VideoSDKSessionASVStatisticInfoList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.asvstatisticinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VideoSDKSessionASVStatisticInfoList::~VideoSDKSessionASVStatisticInfoList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKSessionASVStatisticInfoList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asvstatisticinfo_.~RepeatedPtrField();
}

void VideoSDKSessionASVStatisticInfoList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKSessionASVStatisticInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asvstatisticinfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKSessionASVStatisticInfoList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo ASVStatisticInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_asvstatisticinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKSessionASVStatisticInfoList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo ASVStatisticInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_asvstatisticinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_asvstatisticinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  return target;
}

::size_t VideoSDKSessionASVStatisticInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo ASVStatisticInfo = 1;
  total_size += 1UL * this->_internal_asvstatisticinfo_size();
  for (const auto& msg : this->_impl_.asvstatisticinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKSessionASVStatisticInfoList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKSessionASVStatisticInfoList*>(
      &from));
}

void VideoSDKSessionASVStatisticInfoList::MergeFrom(const VideoSDKSessionASVStatisticInfoList& from) {
  VideoSDKSessionASVStatisticInfoList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.asvstatisticinfo_.MergeFrom(from._impl_.asvstatisticinfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKSessionASVStatisticInfoList::CopyFrom(const VideoSDKSessionASVStatisticInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKSessionASVStatisticInfoList::IsInitialized() const {
  return true;
}

void VideoSDKSessionASVStatisticInfoList::InternalSwap(VideoSDKSessionASVStatisticInfoList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.asvstatisticinfo_.InternalSwap(&other->_impl_.asvstatisticinfo_);
}

std::string VideoSDKSessionASVStatisticInfoList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList";
}

// ===================================================================

class SDKVideoCapability::_Internal {
 public:
  using HasBits = decltype(std::declval<SDKVideoCapability>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SDKVideoCapability, _impl_._has_bits_);
  static void set_has_iseffective(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_frame(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

SDKVideoCapability::SDKVideoCapability(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
}
SDKVideoCapability::SDKVideoCapability(const SDKVideoCapability& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
}

inline void SDKVideoCapability::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.iseffective_) { false }

    , decltype(_impl_.width_) { 0 }

    , decltype(_impl_.height_) { 0 }

    , decltype(_impl_.frame_) { 0 }

  };
}

SDKVideoCapability::~SDKVideoCapability() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKVideoCapability::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SDKVideoCapability::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKVideoCapability::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.iseffective_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frame_) -
        reinterpret_cast<char*>(&_impl_.iseffective_)) + sizeof(_impl_.frame_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SDKVideoCapability::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool isEffective = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_iseffective(&has_bits);
          _impl_.iseffective_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_width(&has_bits);
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_height(&has_bits);
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_frame(&has_bits);
          _impl_.frame_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SDKVideoCapability::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool isEffective = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_iseffective(), target);
  }

  // optional int32 width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_width(), target);
  }

  // optional int32 height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_height(), target);
  }

  // optional int32 frame = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_frame(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  return target;
}

::size_t SDKVideoCapability::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bool isEffective = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2;
    }

    // optional int32 width = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_width());
    }

    // optional int32 height = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_height());
    }

    // optional int32 frame = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frame());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKVideoCapability::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SDKVideoCapability*>(
      &from));
}

void SDKVideoCapability::MergeFrom(const SDKVideoCapability& from) {
  SDKVideoCapability* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.iseffective_ = from._impl_.iseffective_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.frame_ = from._impl_.frame_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SDKVideoCapability::CopyFrom(const SDKVideoCapability& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapability)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKVideoCapability::IsInitialized() const {
  return true;
}

void SDKVideoCapability::InternalSwap(SDKVideoCapability* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SDKVideoCapability, _impl_.frame_)
      + sizeof(SDKVideoCapability::_impl_.frame_)
      - PROTOBUF_FIELD_OFFSET(SDKVideoCapability, _impl_.iseffective_)>(
          reinterpret_cast<char*>(&_impl_.iseffective_),
          reinterpret_cast<char*>(&other->_impl_.iseffective_));
}

std::string SDKVideoCapability::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SDKVideoCapability";
}

// ===================================================================

class SDKVideoCapabilityList::_Internal {
 public:
};

SDKVideoCapabilityList::SDKVideoCapabilityList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
}
SDKVideoCapabilityList::SDKVideoCapabilityList(const SDKVideoCapabilityList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SDKVideoCapabilityList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.videocapability_){from._impl_.videocapability_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
}

inline void SDKVideoCapabilityList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.videocapability_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SDKVideoCapabilityList::~SDKVideoCapabilityList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SDKVideoCapabilityList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.videocapability_.~RepeatedPtrField();
}

void SDKVideoCapabilityList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SDKVideoCapabilityList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.videocapability_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SDKVideoCapabilityList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_videocapability(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SDKVideoCapabilityList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_videocapability_size()); i < n; i++) {
    const auto& repfield = this->_internal_videocapability(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  return target;
}

::size_t SDKVideoCapabilityList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
  total_size += 1UL * this->_internal_videocapability_size();
  for (const auto& msg : this->_impl_.videocapability_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SDKVideoCapabilityList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SDKVideoCapabilityList*>(
      &from));
}

void SDKVideoCapabilityList::MergeFrom(const SDKVideoCapabilityList& from) {
  SDKVideoCapabilityList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.videocapability_.MergeFrom(from._impl_.videocapability_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SDKVideoCapabilityList::CopyFrom(const SDKVideoCapabilityList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SDKVideoCapabilityList::IsInitialized() const {
  return true;
}

void SDKVideoCapabilityList::InternalSwap(SDKVideoCapabilityList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.videocapability_.InternalSwap(&other->_impl_.videocapability_);
}

std::string SDKVideoCapabilityList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList";
}

// ===================================================================

class LTTLanguage::_Internal {
 public:
  using HasBits = decltype(std::declval<LTTLanguage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LTTLanguage, _impl_._has_bits_);
  static void set_has_lttlanguageid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lttlanguagename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LTTLanguage::LTTLanguage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LTTLanguage)
}
LTTLanguage::LTTLanguage(const LTTLanguage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LTTLanguage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lttlanguagename_) {}

    , decltype(_impl_.lttlanguageid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.lttlanguagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.lttlanguagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.lttlanguagename_.Set(from._internal_lttlanguagename(), _this->GetArenaForAllocation());
  }
  _this->_impl_.lttlanguageid_ = from._impl_.lttlanguageid_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LTTLanguage)
}

inline void LTTLanguage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.lttlanguagename_) {}

    , decltype(_impl_.lttlanguageid_) { 0 }

  };
  _impl_.lttlanguagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.lttlanguagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LTTLanguage::~LTTLanguage() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LTTLanguage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lttlanguagename_.Destroy();
}

void LTTLanguage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LTTLanguage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.lttlanguagename_.ClearNonDefaultToEmpty();
  }
  _impl_.lttlanguageid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LTTLanguage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 lttLanguageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_lttlanguageid(&has_bits);
          _impl_.lttlanguageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string lttLanguageName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_lttlanguagename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LTTLanguage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 lttLanguageID = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_lttlanguageid(), target);
  }

  // optional string lttLanguageName = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_lttlanguagename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  return target;
}

::size_t LTTLanguage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string lttLanguageName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_lttlanguagename());
    }

    // optional int32 lttLanguageID = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_lttlanguageid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LTTLanguage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LTTLanguage*>(
      &from));
}

void LTTLanguage::MergeFrom(const LTTLanguage& from) {
  LTTLanguage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_lttlanguagename(from._internal_lttlanguagename());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.lttlanguageid_ = from._impl_.lttlanguageid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LTTLanguage::CopyFrom(const LTTLanguage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LTTLanguage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTTLanguage::IsInitialized() const {
  return true;
}

void LTTLanguage::InternalSwap(LTTLanguage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.lttlanguagename_, lhs_arena,
                                       &other->_impl_.lttlanguagename_, rhs_arena);

  swap(_impl_.lttlanguageid_, other->_impl_.lttlanguageid_);
}

std::string LTTLanguage::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LTTLanguage";
}

// ===================================================================

class ZoomVideoSDKShareCursorData::_Internal {
 public:
  using HasBits = decltype(std::declval<ZoomVideoSDKShareCursorData>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ZoomVideoSDKShareCursorData, _impl_._has_bits_);
  static void set_has_source_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ZoomVideoSDKShareCursorData::ZoomVideoSDKShareCursorData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
}
ZoomVideoSDKShareCursorData::ZoomVideoSDKShareCursorData(const ZoomVideoSDKShareCursorData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
}

inline void ZoomVideoSDKShareCursorData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.source_id_) { 0u }

    , decltype(_impl_.x_) { 0 }

    , decltype(_impl_.y_) { 0 }

  };
}

ZoomVideoSDKShareCursorData::~ZoomVideoSDKShareCursorData() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ZoomVideoSDKShareCursorData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void ZoomVideoSDKShareCursorData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ZoomVideoSDKShareCursorData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.source_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.y_) -
        reinterpret_cast<char*>(&_impl_.source_id_)) + sizeof(_impl_.y_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ZoomVideoSDKShareCursorData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 source_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_source_id(&has_bits);
          _impl_.source_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_x(&has_bits);
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_y(&has_bits);
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ZoomVideoSDKShareCursorData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 source_id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_source_id(), target);
  }

  // optional int32 x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_x(), target);
  }

  // optional int32 y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  return target;
}

::size_t ZoomVideoSDKShareCursorData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional uint32 source_id = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_source_id());
    }

    // optional int32 x = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_x());
    }

    // optional int32 y = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZoomVideoSDKShareCursorData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ZoomVideoSDKShareCursorData*>(
      &from));
}

void ZoomVideoSDKShareCursorData::MergeFrom(const ZoomVideoSDKShareCursorData& from) {
  ZoomVideoSDKShareCursorData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.source_id_ = from._impl_.source_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ZoomVideoSDKShareCursorData::CopyFrom(const ZoomVideoSDKShareCursorData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoomVideoSDKShareCursorData::IsInitialized() const {
  return true;
}

void ZoomVideoSDKShareCursorData::InternalSwap(ZoomVideoSDKShareCursorData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZoomVideoSDKShareCursorData, _impl_.y_)
      + sizeof(ZoomVideoSDKShareCursorData::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(ZoomVideoSDKShareCursorData, _impl_.source_id_)>(
          reinterpret_cast<char*>(&_impl_.source_id_),
          reinterpret_cast<char*>(&other->_impl_.source_id_));
}

std::string ZoomVideoSDKShareCursorData::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData";
}

// ===================================================================

class IncomingLiveStreamStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<IncomingLiveStreamStatus>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IncomingLiveStreamStatus, _impl_._has_bits_);
  static void set_has_strstreamkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isrtmpconnected(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isstreampushed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

IncomingLiveStreamStatus::IncomingLiveStreamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
}
IncomingLiveStreamStatus::IncomingLiveStreamStatus(const IncomingLiveStreamStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IncomingLiveStreamStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.isrtmpconnected_) {}

    , decltype(_impl_.isstreampushed_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strstreamkeyid_.Set(from._internal_strstreamkeyid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isrtmpconnected_, &from._impl_.isrtmpconnected_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isstreampushed_) -
    reinterpret_cast<char*>(&_impl_.isrtmpconnected_)) + sizeof(_impl_.isstreampushed_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
}

inline void IncomingLiveStreamStatus::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.isrtmpconnected_) { false }

    , decltype(_impl_.isstreampushed_) { false }

  };
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncomingLiveStreamStatus::~IncomingLiveStreamStatus() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncomingLiveStreamStatus::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strstreamkeyid_.Destroy();
}

void IncomingLiveStreamStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncomingLiveStreamStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strstreamkeyid_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.isrtmpconnected_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.isstreampushed_) -
      reinterpret_cast<char*>(&_impl_.isrtmpconnected_)) + sizeof(_impl_.isstreampushed_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IncomingLiveStreamStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string strStreamKeyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strstreamkeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isRTMPConnected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_isrtmpconnected(&has_bits);
          _impl_.isrtmpconnected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isStreamPushed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_isstreampushed(&has_bits);
          _impl_.isstreampushed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IncomingLiveStreamStatus::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string strStreamKeyID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strstreamkeyid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool isRTMPConnected = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_isrtmpconnected(), target);
  }

  // optional bool isStreamPushed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isstreampushed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  return target;
}

::size_t IncomingLiveStreamStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string strStreamKeyID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strstreamkeyid());
    }

    // optional bool isRTMPConnected = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool isStreamPushed = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingLiveStreamStatus::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IncomingLiveStreamStatus*>(
      &from));
}

void IncomingLiveStreamStatus::MergeFrom(const IncomingLiveStreamStatus& from) {
  IncomingLiveStreamStatus* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strstreamkeyid(from._internal_strstreamkeyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.isrtmpconnected_ = from._impl_.isrtmpconnected_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isstreampushed_ = from._impl_.isstreampushed_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncomingLiveStreamStatus::CopyFrom(const IncomingLiveStreamStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingLiveStreamStatus::IsInitialized() const {
  return true;
}

void IncomingLiveStreamStatus::InternalSwap(IncomingLiveStreamStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strstreamkeyid_, lhs_arena,
                                       &other->_impl_.strstreamkeyid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IncomingLiveStreamStatus, _impl_.isstreampushed_)
      + sizeof(IncomingLiveStreamStatus::_impl_.isstreampushed_)
      - PROTOBUF_FIELD_OFFSET(IncomingLiveStreamStatus, _impl_.isrtmpconnected_)>(
          reinterpret_cast<char*>(&_impl_.isrtmpconnected_),
          reinterpret_cast<char*>(&other->_impl_.isrtmpconnected_));
}

std::string IncomingLiveStreamStatus::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus";
}

// ===================================================================

class IncomingLiveStreamStatusList::_Internal {
 public:
};

IncomingLiveStreamStatusList::IncomingLiveStreamStatusList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
}
IncomingLiveStreamStatusList::IncomingLiveStreamStatusList(const IncomingLiveStreamStatusList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IncomingLiveStreamStatusList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){from._impl_.status_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
}

inline void IncomingLiveStreamStatusList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.status_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IncomingLiveStreamStatusList::~IncomingLiveStreamStatusList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncomingLiveStreamStatusList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.status_.~RepeatedPtrField();
}

void IncomingLiveStreamStatusList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncomingLiveStreamStatusList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IncomingLiveStreamStatusList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IncomingLiveStreamStatusList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus status = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_status_size()); i < n; i++) {
    const auto& repfield = this->_internal_status(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  return target;
}

::size_t IncomingLiveStreamStatusList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus status = 1;
  total_size += 1UL * this->_internal_status_size();
  for (const auto& msg : this->_impl_.status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingLiveStreamStatusList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IncomingLiveStreamStatusList*>(
      &from));
}

void IncomingLiveStreamStatusList::MergeFrom(const IncomingLiveStreamStatusList& from) {
  IncomingLiveStreamStatusList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.status_.MergeFrom(from._impl_.status_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncomingLiveStreamStatusList::CopyFrom(const IncomingLiveStreamStatusList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingLiveStreamStatusList::IsInitialized() const {
  return true;
}

void IncomingLiveStreamStatusList::InternalSwap(IncomingLiveStreamStatusList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.status_.InternalSwap(&other->_impl_.status_);
}

std::string IncomingLiveStreamStatusList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList";
}

// ===================================================================

class CallbackBody_onErrorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onErrorParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onErrorParams, _impl_._has_bits_);
  static void set_has_errorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_detailerrorcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallbackBody_onErrorParams::CallbackBody_onErrorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
}
CallbackBody_onErrorParams::CallbackBody_onErrorParams(const CallbackBody_onErrorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
}

inline void CallbackBody_onErrorParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.errorcode_) { 0 }

    , decltype(_impl_.detailerrorcode_) { 0 }

  };
}

CallbackBody_onErrorParams::~CallbackBody_onErrorParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onErrorParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onErrorParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onErrorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.errorcode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.detailerrorcode_) -
        reinterpret_cast<char*>(&_impl_.errorcode_)) + sizeof(_impl_.detailerrorcode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onErrorParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 errorCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_errorcode(&has_bits);
          _impl_.errorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 detailErrorCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_detailerrorcode(&has_bits);
          _impl_.detailerrorcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onErrorParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 errorCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_errorcode(), target);
  }

  // optional int32 detailErrorCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_detailerrorcode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  return target;
}

::size_t CallbackBody_onErrorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 errorCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_errorcode());
    }

    // optional int32 detailErrorCode = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_detailerrorcode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onErrorParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onErrorParams*>(
      &from));
}

void CallbackBody_onErrorParams::MergeFrom(const CallbackBody_onErrorParams& from) {
  CallbackBody_onErrorParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.errorcode_ = from._impl_.errorcode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.detailerrorcode_ = from._impl_.detailerrorcode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onErrorParams::CopyFrom(const CallbackBody_onErrorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onErrorParams::IsInitialized() const {
  return true;
}

void CallbackBody_onErrorParams::InternalSwap(CallbackBody_onErrorParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onErrorParams, _impl_.detailerrorcode_)
      + sizeof(CallbackBody_onErrorParams::_impl_.detailerrorcode_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onErrorParams, _impl_.errorcode_)>(
          reinterpret_cast<char*>(&_impl_.errorcode_),
          reinterpret_cast<char*>(&other->_impl_.errorcode_));
}

std::string CallbackBody_onErrorParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams";
}

// ===================================================================

class CallbackBody_onUserJoinParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserJoinParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserJoinParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist(const CallbackBody_onUserJoinParams* msg);
  static void set_has_zn_userlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::UserList&
CallbackBody_onUserJoinParams::_Internal::zn_userlist(const CallbackBody_onUserJoinParams* msg) {
  return *msg->_impl_.zn_userlist_;
}
CallbackBody_onUserJoinParams::CallbackBody_onUserJoinParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
}
CallbackBody_onUserJoinParams::CallbackBody_onUserJoinParams(const CallbackBody_onUserJoinParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserJoinParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_userlist_ = new ::com::electron::zoomvideo::sdk::proto::UserList(*from._impl_.zn_userlist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
}

inline void CallbackBody_onUserJoinParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}
  };
}

CallbackBody_onUserJoinParams::~CallbackBody_onUserJoinParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserJoinParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_userlist_;
}

void CallbackBody_onUserJoinParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserJoinParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_userlist_ != nullptr);
    _impl_.zn_userlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserJoinParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_userlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserJoinParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_userlist(this),
        _Internal::zn_userlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  return target;
}

::size_t CallbackBody_onUserJoinParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zn_userlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserJoinParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserJoinParams*>(
      &from));
}

void CallbackBody_onUserJoinParams::MergeFrom(const CallbackBody_onUserJoinParams& from) {
  CallbackBody_onUserJoinParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_zn_userlist()->::com::electron::zoomvideo::sdk::proto::UserList::MergeFrom(
        from._internal_zn_userlist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserJoinParams::CopyFrom(const CallbackBody_onUserJoinParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserJoinParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserJoinParams::InternalSwap(CallbackBody_onUserJoinParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.zn_userlist_, other->_impl_.zn_userlist_);
}

std::string CallbackBody_onUserJoinParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams";
}

// ===================================================================

class CallbackBody_onUserLeaveParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserLeaveParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserLeaveParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist(const CallbackBody_onUserLeaveParams* msg);
  static void set_has_zn_userlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::UserList&
CallbackBody_onUserLeaveParams::_Internal::zn_userlist(const CallbackBody_onUserLeaveParams* msg) {
  return *msg->_impl_.zn_userlist_;
}
CallbackBody_onUserLeaveParams::CallbackBody_onUserLeaveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
}
CallbackBody_onUserLeaveParams::CallbackBody_onUserLeaveParams(const CallbackBody_onUserLeaveParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserLeaveParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_userlist_ = new ::com::electron::zoomvideo::sdk::proto::UserList(*from._impl_.zn_userlist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
}

inline void CallbackBody_onUserLeaveParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}
  };
}

CallbackBody_onUserLeaveParams::~CallbackBody_onUserLeaveParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserLeaveParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_userlist_;
}

void CallbackBody_onUserLeaveParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserLeaveParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_userlist_ != nullptr);
    _impl_.zn_userlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserLeaveParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_userlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserLeaveParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_userlist(this),
        _Internal::zn_userlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  return target;
}

::size_t CallbackBody_onUserLeaveParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zn_userlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserLeaveParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserLeaveParams*>(
      &from));
}

void CallbackBody_onUserLeaveParams::MergeFrom(const CallbackBody_onUserLeaveParams& from) {
  CallbackBody_onUserLeaveParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_zn_userlist()->::com::electron::zoomvideo::sdk::proto::UserList::MergeFrom(
        from._internal_zn_userlist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserLeaveParams::CopyFrom(const CallbackBody_onUserLeaveParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserLeaveParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserLeaveParams::InternalSwap(CallbackBody_onUserLeaveParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.zn_userlist_, other->_impl_.zn_userlist_);
}

std::string CallbackBody_onUserLeaveParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams";
}

// ===================================================================

class CallbackBody_onUserVideoStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserVideoStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserVideoStatusChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist(const CallbackBody_onUserVideoStatusChangedParams* msg);
  static void set_has_zn_userlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::UserList&
CallbackBody_onUserVideoStatusChangedParams::_Internal::zn_userlist(const CallbackBody_onUserVideoStatusChangedParams* msg) {
  return *msg->_impl_.zn_userlist_;
}
CallbackBody_onUserVideoStatusChangedParams::CallbackBody_onUserVideoStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
}
CallbackBody_onUserVideoStatusChangedParams::CallbackBody_onUserVideoStatusChangedParams(const CallbackBody_onUserVideoStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserVideoStatusChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_userlist_ = new ::com::electron::zoomvideo::sdk::proto::UserList(*from._impl_.zn_userlist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
}

inline void CallbackBody_onUserVideoStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}
  };
}

CallbackBody_onUserVideoStatusChangedParams::~CallbackBody_onUserVideoStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserVideoStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_userlist_;
}

void CallbackBody_onUserVideoStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserVideoStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_userlist_ != nullptr);
    _impl_.zn_userlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserVideoStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_userlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserVideoStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_userlist(this),
        _Internal::zn_userlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  return target;
}

::size_t CallbackBody_onUserVideoStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zn_userlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserVideoStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserVideoStatusChangedParams*>(
      &from));
}

void CallbackBody_onUserVideoStatusChangedParams::MergeFrom(const CallbackBody_onUserVideoStatusChangedParams& from) {
  CallbackBody_onUserVideoStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_zn_userlist()->::com::electron::zoomvideo::sdk::proto::UserList::MergeFrom(
        from._internal_zn_userlist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserVideoStatusChangedParams::CopyFrom(const CallbackBody_onUserVideoStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserVideoStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserVideoStatusChangedParams::InternalSwap(CallbackBody_onUserVideoStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.zn_userlist_, other->_impl_.zn_userlist_);
}

std::string CallbackBody_onUserVideoStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams";
}

// ===================================================================

class CallbackBody_onUserAudioStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserAudioStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserAudioStatusChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist(const CallbackBody_onUserAudioStatusChangedParams* msg);
  static void set_has_zn_userlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::UserList&
CallbackBody_onUserAudioStatusChangedParams::_Internal::zn_userlist(const CallbackBody_onUserAudioStatusChangedParams* msg) {
  return *msg->_impl_.zn_userlist_;
}
CallbackBody_onUserAudioStatusChangedParams::CallbackBody_onUserAudioStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
}
CallbackBody_onUserAudioStatusChangedParams::CallbackBody_onUserAudioStatusChangedParams(const CallbackBody_onUserAudioStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserAudioStatusChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_userlist_ = new ::com::electron::zoomvideo::sdk::proto::UserList(*from._impl_.zn_userlist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
}

inline void CallbackBody_onUserAudioStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}
  };
}

CallbackBody_onUserAudioStatusChangedParams::~CallbackBody_onUserAudioStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserAudioStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_userlist_;
}

void CallbackBody_onUserAudioStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserAudioStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_userlist_ != nullptr);
    _impl_.zn_userlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserAudioStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_userlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserAudioStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_userlist(this),
        _Internal::zn_userlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  return target;
}

::size_t CallbackBody_onUserAudioStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zn_userlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserAudioStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserAudioStatusChangedParams*>(
      &from));
}

void CallbackBody_onUserAudioStatusChangedParams::MergeFrom(const CallbackBody_onUserAudioStatusChangedParams& from) {
  CallbackBody_onUserAudioStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_zn_userlist()->::com::electron::zoomvideo::sdk::proto::UserList::MergeFrom(
        from._internal_zn_userlist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserAudioStatusChangedParams::CopyFrom(const CallbackBody_onUserAudioStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserAudioStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserAudioStatusChangedParams::InternalSwap(CallbackBody_onUserAudioStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.zn_userlist_, other->_impl_.zn_userlist_);
}

std::string CallbackBody_onUserAudioStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams";
}

// ===================================================================

class CallbackBody_onUserShareStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserShareStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserShareStatusChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onUserShareStatusChangedParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction(const CallbackBody_onUserShareStatusChangedParams* msg);
  static void set_has_shareaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onUserShareStatusChangedParams::_Internal::user(const CallbackBody_onUserShareStatusChangedParams* msg) {
  return *msg->_impl_.user_;
}
const ::com::electron::zoomvideo::sdk::proto::ShareAction&
CallbackBody_onUserShareStatusChangedParams::_Internal::shareaction(const CallbackBody_onUserShareStatusChangedParams* msg) {
  return *msg->_impl_.shareaction_;
}
CallbackBody_onUserShareStatusChangedParams::CallbackBody_onUserShareStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
}
CallbackBody_onUserShareStatusChangedParams::CallbackBody_onUserShareStatusChangedParams(const CallbackBody_onUserShareStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserShareStatusChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.shareaction_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.shareaction_ = new ::com::electron::zoomvideo::sdk::proto::ShareAction(*from._impl_.shareaction_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
}

inline void CallbackBody_onUserShareStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.shareaction_){nullptr}
  };
}

CallbackBody_onUserShareStatusChangedParams::~CallbackBody_onUserShareStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserShareStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
  if (this != internal_default_instance()) delete _impl_.shareaction_;
}

void CallbackBody_onUserShareStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserShareStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.shareaction_ != nullptr);
      _impl_.shareaction_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserShareStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shareaction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserShareStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shareaction(this),
        _Internal::shareaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  return target;
}

::size_t CallbackBody_onUserShareStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shareaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserShareStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserShareStatusChangedParams*>(
      &from));
}

void CallbackBody_onUserShareStatusChangedParams::MergeFrom(const CallbackBody_onUserShareStatusChangedParams& from) {
  CallbackBody_onUserShareStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shareaction()->::com::electron::zoomvideo::sdk::proto::ShareAction::MergeFrom(
          from._internal_shareaction());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserShareStatusChangedParams::CopyFrom(const CallbackBody_onUserShareStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserShareStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserShareStatusChangedParams::InternalSwap(CallbackBody_onUserShareStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onUserShareStatusChangedParams, _impl_.shareaction_)
      + sizeof(CallbackBody_onUserShareStatusChangedParams::_impl_.shareaction_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onUserShareStatusChangedParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string CallbackBody_onUserShareStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams";
}

// ===================================================================

class CallbackBody_onFailedToStartShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onFailedToStartShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onFailedToStartShareParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onFailedToStartShareParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onFailedToStartShareParams::_Internal::user(const CallbackBody_onFailedToStartShareParams* msg) {
  return *msg->_impl_.user_;
}
CallbackBody_onFailedToStartShareParams::CallbackBody_onFailedToStartShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
}
CallbackBody_onFailedToStartShareParams::CallbackBody_onFailedToStartShareParams(const CallbackBody_onFailedToStartShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onFailedToStartShareParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
}

inline void CallbackBody_onFailedToStartShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

CallbackBody_onFailedToStartShareParams::~CallbackBody_onFailedToStartShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onFailedToStartShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CallbackBody_onFailedToStartShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onFailedToStartShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onFailedToStartShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onFailedToStartShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  return target;
}

::size_t CallbackBody_onFailedToStartShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onFailedToStartShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onFailedToStartShareParams*>(
      &from));
}

void CallbackBody_onFailedToStartShareParams::MergeFrom(const CallbackBody_onFailedToStartShareParams& from) {
  CallbackBody_onFailedToStartShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onFailedToStartShareParams::CopyFrom(const CallbackBody_onFailedToStartShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onFailedToStartShareParams::IsInitialized() const {
  return true;
}

void CallbackBody_onFailedToStartShareParams::InternalSwap(CallbackBody_onFailedToStartShareParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string CallbackBody_onFailedToStartShareParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams";
}

// ===================================================================

class CallbackBody_onLiveStreamStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onLiveStreamStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onLiveStreamStatusChangedParams, _impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onLiveStreamStatusChangedParams::CallbackBody_onLiveStreamStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
}
CallbackBody_onLiveStreamStatusChangedParams::CallbackBody_onLiveStreamStatusChangedParams(const CallbackBody_onLiveStreamStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
}

inline void CallbackBody_onLiveStreamStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onLiveStreamStatusChangedParams::~CallbackBody_onLiveStreamStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onLiveStreamStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onLiveStreamStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onLiveStreamStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onLiveStreamStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onLiveStreamStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  return target;
}

::size_t CallbackBody_onLiveStreamStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onLiveStreamStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onLiveStreamStatusChangedParams*>(
      &from));
}

void CallbackBody_onLiveStreamStatusChangedParams::MergeFrom(const CallbackBody_onLiveStreamStatusChangedParams& from) {
  CallbackBody_onLiveStreamStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onLiveStreamStatusChangedParams::CopyFrom(const CallbackBody_onLiveStreamStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onLiveStreamStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onLiveStreamStatusChangedParams::InternalSwap(CallbackBody_onLiveStreamStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.status_, other->_impl_.status_);
}

std::string CallbackBody_onLiveStreamStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams";
}

// ===================================================================

class CallbackBody_onUserHostChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserHostChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserHostChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onUserHostChangedParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onUserHostChangedParams::_Internal::user(const CallbackBody_onUserHostChangedParams* msg) {
  return *msg->_impl_.user_;
}
CallbackBody_onUserHostChangedParams::CallbackBody_onUserHostChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
}
CallbackBody_onUserHostChangedParams::CallbackBody_onUserHostChangedParams(const CallbackBody_onUserHostChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserHostChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
}

inline void CallbackBody_onUserHostChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

CallbackBody_onUserHostChangedParams::~CallbackBody_onUserHostChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserHostChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CallbackBody_onUserHostChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserHostChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserHostChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserHostChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  return target;
}

::size_t CallbackBody_onUserHostChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserHostChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserHostChangedParams*>(
      &from));
}

void CallbackBody_onUserHostChangedParams::MergeFrom(const CallbackBody_onUserHostChangedParams& from) {
  CallbackBody_onUserHostChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserHostChangedParams::CopyFrom(const CallbackBody_onUserHostChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserHostChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserHostChangedParams::InternalSwap(CallbackBody_onUserHostChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string CallbackBody_onUserHostChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams";
}

// ===================================================================

class CallbackBody_onUserNameChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserNameChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserNameChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onUserNameChangedParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onUserNameChangedParams::_Internal::user(const CallbackBody_onUserNameChangedParams* msg) {
  return *msg->_impl_.user_;
}
CallbackBody_onUserNameChangedParams::CallbackBody_onUserNameChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
}
CallbackBody_onUserNameChangedParams::CallbackBody_onUserNameChangedParams(const CallbackBody_onUserNameChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserNameChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
}

inline void CallbackBody_onUserNameChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

CallbackBody_onUserNameChangedParams::~CallbackBody_onUserNameChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserNameChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CallbackBody_onUserNameChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserNameChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserNameChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserNameChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  return target;
}

::size_t CallbackBody_onUserNameChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserNameChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserNameChangedParams*>(
      &from));
}

void CallbackBody_onUserNameChangedParams::MergeFrom(const CallbackBody_onUserNameChangedParams& from) {
  CallbackBody_onUserNameChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserNameChangedParams::CopyFrom(const CallbackBody_onUserNameChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserNameChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserNameChangedParams::InternalSwap(CallbackBody_onUserNameChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string CallbackBody_onUserNameChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams";
}

// ===================================================================

class CallbackBody_onUserManagerChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserManagerChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserManagerChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onUserManagerChangedParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onUserManagerChangedParams::_Internal::user(const CallbackBody_onUserManagerChangedParams* msg) {
  return *msg->_impl_.user_;
}
CallbackBody_onUserManagerChangedParams::CallbackBody_onUserManagerChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
}
CallbackBody_onUserManagerChangedParams::CallbackBody_onUserManagerChangedParams(const CallbackBody_onUserManagerChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserManagerChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
}

inline void CallbackBody_onUserManagerChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

CallbackBody_onUserManagerChangedParams::~CallbackBody_onUserManagerChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserManagerChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CallbackBody_onUserManagerChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserManagerChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserManagerChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserManagerChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  return target;
}

::size_t CallbackBody_onUserManagerChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserManagerChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserManagerChangedParams*>(
      &from));
}

void CallbackBody_onUserManagerChangedParams::MergeFrom(const CallbackBody_onUserManagerChangedParams& from) {
  CallbackBody_onUserManagerChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserManagerChangedParams::CopyFrom(const CallbackBody_onUserManagerChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserManagerChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserManagerChangedParams::InternalSwap(CallbackBody_onUserManagerChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string CallbackBody_onUserManagerChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams";
}

// ===================================================================

class CallbackBody_onUserActiveAudioChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUserActiveAudioChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUserActiveAudioChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist(const CallbackBody_onUserActiveAudioChangedParams* msg);
  static void set_has_zn_userlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::UserList&
CallbackBody_onUserActiveAudioChangedParams::_Internal::zn_userlist(const CallbackBody_onUserActiveAudioChangedParams* msg) {
  return *msg->_impl_.zn_userlist_;
}
CallbackBody_onUserActiveAudioChangedParams::CallbackBody_onUserActiveAudioChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
}
CallbackBody_onUserActiveAudioChangedParams::CallbackBody_onUserActiveAudioChangedParams(const CallbackBody_onUserActiveAudioChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUserActiveAudioChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_userlist_ = new ::com::electron::zoomvideo::sdk::proto::UserList(*from._impl_.zn_userlist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
}

inline void CallbackBody_onUserActiveAudioChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}
  };
}

CallbackBody_onUserActiveAudioChangedParams::~CallbackBody_onUserActiveAudioChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUserActiveAudioChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_userlist_;
}

void CallbackBody_onUserActiveAudioChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUserActiveAudioChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_userlist_ != nullptr);
    _impl_.zn_userlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUserActiveAudioChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_userlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUserActiveAudioChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_userlist(this),
        _Internal::zn_userlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  return target;
}

::size_t CallbackBody_onUserActiveAudioChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zn_userlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUserActiveAudioChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUserActiveAudioChangedParams*>(
      &from));
}

void CallbackBody_onUserActiveAudioChangedParams::MergeFrom(const CallbackBody_onUserActiveAudioChangedParams& from) {
  CallbackBody_onUserActiveAudioChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_zn_userlist()->::com::electron::zoomvideo::sdk::proto::UserList::MergeFrom(
        from._internal_zn_userlist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUserActiveAudioChangedParams::CopyFrom(const CallbackBody_onUserActiveAudioChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUserActiveAudioChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUserActiveAudioChangedParams::InternalSwap(CallbackBody_onUserActiveAudioChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.zn_userlist_, other->_impl_.zn_userlist_);
}

std::string CallbackBody_onUserActiveAudioChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams";
}

// ===================================================================

class CallbackBody_onChatNewMessageNotifyParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onChatNewMessageNotifyParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onChatNewMessageNotifyParams, _impl_._has_bits_);
  static void set_has_psender(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sendername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_preceiver(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_receivername(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messagecontent(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_ischattoall(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_isselfsend(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CallbackBody_onChatNewMessageNotifyParams::CallbackBody_onChatNewMessageNotifyParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
}
CallbackBody_onChatNewMessageNotifyParams::CallbackBody_onChatNewMessageNotifyParams(const CallbackBody_onChatNewMessageNotifyParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onChatNewMessageNotifyParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sendername_) {}

    , decltype(_impl_.receivername_) {}

    , decltype(_impl_.messagecontent_) {}

    , decltype(_impl_.messageid_) {}

    , decltype(_impl_.psender_) {}

    , decltype(_impl_.preceiver_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.ischattoall_) {}

    , decltype(_impl_.isselfsend_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sendername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sendername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.sendername_.Set(from._internal_sendername(), _this->GetArenaForAllocation());
  }
  _impl_.receivername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receivername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.receivername_.Set(from._internal_receivername(), _this->GetArenaForAllocation());
  }
  _impl_.messagecontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messagecontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.messagecontent_.Set(from._internal_messagecontent(), _this->GetArenaForAllocation());
  }
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.psender_, &from._impl_.psender_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isselfsend_) -
    reinterpret_cast<char*>(&_impl_.psender_)) + sizeof(_impl_.isselfsend_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
}

inline void CallbackBody_onChatNewMessageNotifyParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sendername_) {}

    , decltype(_impl_.receivername_) {}

    , decltype(_impl_.messagecontent_) {}

    , decltype(_impl_.messageid_) {}

    , decltype(_impl_.psender_) { ::int64_t{0} }

    , decltype(_impl_.preceiver_) { ::int64_t{0} }

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.ischattoall_) { false }

    , decltype(_impl_.isselfsend_) { false }

  };
  _impl_.sendername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sendername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.receivername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.receivername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messagecontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messagecontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onChatNewMessageNotifyParams::~CallbackBody_onChatNewMessageNotifyParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onChatNewMessageNotifyParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sendername_.Destroy();
  _impl_.receivername_.Destroy();
  _impl_.messagecontent_.Destroy();
  _impl_.messageid_.Destroy();
}

void CallbackBody_onChatNewMessageNotifyParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onChatNewMessageNotifyParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sendername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.receivername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.messagecontent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.messageid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.psender_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.ischattoall_) -
        reinterpret_cast<char*>(&_impl_.psender_)) + sizeof(_impl_.ischattoall_));
  }
  _impl_.isselfsend_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onChatNewMessageNotifyParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 pSender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_psender(&has_bits);
          _impl_.psender_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string senderName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sendername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 pReceiver = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_preceiver(&has_bits);
          _impl_.preceiver_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string receiverName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_receivername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string messageContent = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_messagecontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 timeStamp = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isChatToAll = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_ischattoall(&has_bits);
          _impl_.ischattoall_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isSelfSend = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_isselfsend(&has_bits);
          _impl_.isselfsend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string messageID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onChatNewMessageNotifyParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 pSender = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_psender(), target);
  }

  // optional string senderName = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_sendername();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int64 pReceiver = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_preceiver(), target);
  }

  // optional string receiverName = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_receivername();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string messageContent = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_messagecontent();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional int64 timeStamp = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        6, this->_internal_timestamp(), target);
  }

  // optional bool isChatToAll = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_ischattoall(), target);
  }

  // optional bool isSelfSend = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_isselfsend(), target);
  }

  // optional string messageID = 9;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_messageid();
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  return target;
}

::size_t CallbackBody_onChatNewMessageNotifyParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string senderName = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sendername());
    }

    // optional string receiverName = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_receivername());
    }

    // optional string messageContent = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_messagecontent());
    }

    // optional string messageID = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_messageid());
    }

    // optional int64 pSender = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_psender());
    }

    // optional int64 pReceiver = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_preceiver());
    }

    // optional int64 timeStamp = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional bool isChatToAll = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  // optional bool isSelfSend = 8;
  if (cached_has_bits & 0x00000100u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onChatNewMessageNotifyParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onChatNewMessageNotifyParams*>(
      &from));
}

void CallbackBody_onChatNewMessageNotifyParams::MergeFrom(const CallbackBody_onChatNewMessageNotifyParams& from) {
  CallbackBody_onChatNewMessageNotifyParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sendername(from._internal_sendername());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_receivername(from._internal_receivername());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_messagecontent(from._internal_messagecontent());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_messageid(from._internal_messageid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.psender_ = from._impl_.psender_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.preceiver_ = from._impl_.preceiver_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.ischattoall_ = from._impl_.ischattoall_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _this->_internal_set_isselfsend(from._internal_isselfsend());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onChatNewMessageNotifyParams::CopyFrom(const CallbackBody_onChatNewMessageNotifyParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onChatNewMessageNotifyParams::IsInitialized() const {
  return true;
}

void CallbackBody_onChatNewMessageNotifyParams::InternalSwap(CallbackBody_onChatNewMessageNotifyParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sendername_, lhs_arena,
                                       &other->_impl_.sendername_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.receivername_, lhs_arena,
                                       &other->_impl_.receivername_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messagecontent_, lhs_arena,
                                       &other->_impl_.messagecontent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messageid_, lhs_arena,
                                       &other->_impl_.messageid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onChatNewMessageNotifyParams, _impl_.isselfsend_)
      + sizeof(CallbackBody_onChatNewMessageNotifyParams::_impl_.isselfsend_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onChatNewMessageNotifyParams, _impl_.psender_)>(
          reinterpret_cast<char*>(&_impl_.psender_),
          reinterpret_cast<char*>(&other->_impl_.psender_));
}

std::string CallbackBody_onChatNewMessageNotifyParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams";
}

// ===================================================================

class CallbackBody_onChatMsgDeleteNotificationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onChatMsgDeleteNotificationParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onChatMsgDeleteNotificationParams, _impl_._has_bits_);
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deleteby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallbackBody_onChatMsgDeleteNotificationParams::CallbackBody_onChatMsgDeleteNotificationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
}
CallbackBody_onChatMsgDeleteNotificationParams::CallbackBody_onChatMsgDeleteNotificationParams(const CallbackBody_onChatMsgDeleteNotificationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onChatMsgDeleteNotificationParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}

    , decltype(_impl_.deleteby_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.deleteby_ = from._impl_.deleteby_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
}

inline void CallbackBody_onChatMsgDeleteNotificationParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}

    , decltype(_impl_.deleteby_) { 0 }

  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onChatMsgDeleteNotificationParams::~CallbackBody_onChatMsgDeleteNotificationParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onChatMsgDeleteNotificationParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messageid_.Destroy();
}

void CallbackBody_onChatMsgDeleteNotificationParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onChatMsgDeleteNotificationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.messageid_.ClearNonDefaultToEmpty();
  }
  _impl_.deleteby_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onChatMsgDeleteNotificationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 deleteBy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_deleteby(&has_bits);
          _impl_.deleteby_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onChatMsgDeleteNotificationParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string messageID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_messageid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional int32 deleteBy = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_deleteby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  return target;
}

::size_t CallbackBody_onChatMsgDeleteNotificationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string messageID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_messageid());
    }

    // optional int32 deleteBy = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_deleteby());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onChatMsgDeleteNotificationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onChatMsgDeleteNotificationParams*>(
      &from));
}

void CallbackBody_onChatMsgDeleteNotificationParams::MergeFrom(const CallbackBody_onChatMsgDeleteNotificationParams& from) {
  CallbackBody_onChatMsgDeleteNotificationParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_messageid(from._internal_messageid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.deleteby_ = from._impl_.deleteby_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onChatMsgDeleteNotificationParams::CopyFrom(const CallbackBody_onChatMsgDeleteNotificationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onChatMsgDeleteNotificationParams::IsInitialized() const {
  return true;
}

void CallbackBody_onChatMsgDeleteNotificationParams::InternalSwap(CallbackBody_onChatMsgDeleteNotificationParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messageid_, lhs_arena,
                                       &other->_impl_.messageid_, rhs_arena);

  swap(_impl_.deleteby_, other->_impl_.deleteby_);
}

std::string CallbackBody_onChatMsgDeleteNotificationParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams";
}

// ===================================================================

class CallbackBody_onVideoSourceInitializeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onVideoSourceInitializeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onVideoSourceInitializeParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList& videocapabilitylist(const CallbackBody_onVideoSourceInitializeParams* msg);
  static void set_has_videocapabilitylist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList&
CallbackBody_onVideoSourceInitializeParams::_Internal::videocapabilitylist(const CallbackBody_onVideoSourceInitializeParams* msg) {
  return *msg->_impl_.videocapabilitylist_;
}
CallbackBody_onVideoSourceInitializeParams::CallbackBody_onVideoSourceInitializeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
}
CallbackBody_onVideoSourceInitializeParams::CallbackBody_onVideoSourceInitializeParams(const CallbackBody_onVideoSourceInitializeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onVideoSourceInitializeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.videocapabilitylist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.videocapabilitylist_ = new ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList(*from._impl_.videocapabilitylist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
}

inline void CallbackBody_onVideoSourceInitializeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.videocapabilitylist_){nullptr}
  };
}

CallbackBody_onVideoSourceInitializeParams::~CallbackBody_onVideoSourceInitializeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onVideoSourceInitializeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.videocapabilitylist_;
}

void CallbackBody_onVideoSourceInitializeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onVideoSourceInitializeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.videocapabilitylist_ != nullptr);
    _impl_.videocapabilitylist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onVideoSourceInitializeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList VideoCapabilityList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_videocapabilitylist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onVideoSourceInitializeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList VideoCapabilityList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::videocapabilitylist(this),
        _Internal::videocapabilitylist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  return target;
}

::size_t CallbackBody_onVideoSourceInitializeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList VideoCapabilityList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.videocapabilitylist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onVideoSourceInitializeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onVideoSourceInitializeParams*>(
      &from));
}

void CallbackBody_onVideoSourceInitializeParams::MergeFrom(const CallbackBody_onVideoSourceInitializeParams& from) {
  CallbackBody_onVideoSourceInitializeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_videocapabilitylist()->::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList::MergeFrom(
        from._internal_videocapabilitylist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onVideoSourceInitializeParams::CopyFrom(const CallbackBody_onVideoSourceInitializeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onVideoSourceInitializeParams::IsInitialized() const {
  return true;
}

void CallbackBody_onVideoSourceInitializeParams::InternalSwap(CallbackBody_onVideoSourceInitializeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.videocapabilitylist_, other->_impl_.videocapabilitylist_);
}

std::string CallbackBody_onVideoSourceInitializeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams";
}

// ===================================================================

class CallbackBody_onPropertyChangeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onPropertyChangeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onPropertyChangeParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability& videocapability(const CallbackBody_onPropertyChangeParams* msg);
  static void set_has_videocapability(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability&
CallbackBody_onPropertyChangeParams::_Internal::videocapability(const CallbackBody_onPropertyChangeParams* msg) {
  return *msg->_impl_.videocapability_;
}
CallbackBody_onPropertyChangeParams::CallbackBody_onPropertyChangeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
}
CallbackBody_onPropertyChangeParams::CallbackBody_onPropertyChangeParams(const CallbackBody_onPropertyChangeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onPropertyChangeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.videocapability_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.videocapability_ = new ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability(*from._impl_.videocapability_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
}

inline void CallbackBody_onPropertyChangeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.videocapability_){nullptr}
  };
}

CallbackBody_onPropertyChangeParams::~CallbackBody_onPropertyChangeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onPropertyChangeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.videocapability_;
}

void CallbackBody_onPropertyChangeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onPropertyChangeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.videocapability_ != nullptr);
    _impl_.videocapability_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onPropertyChangeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_videocapability(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onPropertyChangeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::videocapability(this),
        _Internal::videocapability(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  return target;
}

::size_t CallbackBody_onPropertyChangeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.SDKVideoCapability VideoCapability = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.videocapability_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onPropertyChangeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onPropertyChangeParams*>(
      &from));
}

void CallbackBody_onPropertyChangeParams::MergeFrom(const CallbackBody_onPropertyChangeParams& from) {
  CallbackBody_onPropertyChangeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_videocapability()->::com::electron::zoomvideo::sdk::proto::SDKVideoCapability::MergeFrom(
        from._internal_videocapability());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onPropertyChangeParams::CopyFrom(const CallbackBody_onPropertyChangeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onPropertyChangeParams::IsInitialized() const {
  return true;
}

void CallbackBody_onPropertyChangeParams::InternalSwap(CallbackBody_onPropertyChangeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.videocapability_, other->_impl_.videocapability_);
}

std::string CallbackBody_onPropertyChangeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams";
}

// ===================================================================

class CallbackBody_onRawDataStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onRawDataStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onRawDataStatusChangedParams, _impl_._has_bits_);
  static void set_has_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallbackBody_onRawDataStatusChangedParams::CallbackBody_onRawDataStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
}
CallbackBody_onRawDataStatusChangedParams::CallbackBody_onRawDataStatusChangedParams(const CallbackBody_onRawDataStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
}

inline void CallbackBody_onRawDataStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.recv_handle_) { ::int64_t{0} }

    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onRawDataStatusChangedParams::~CallbackBody_onRawDataStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onRawDataStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onRawDataStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onRawDataStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.recv_handle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.recv_handle_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onRawDataStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_recv_handle(&has_bits);
          _impl_.recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onRawDataStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 recv_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_recv_handle(), target);
  }

  // optional int32 status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  return target;
}

::size_t CallbackBody_onRawDataStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 recv_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_recv_handle());
    }

    // optional int32 status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onRawDataStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onRawDataStatusChangedParams*>(
      &from));
}

void CallbackBody_onRawDataStatusChangedParams::MergeFrom(const CallbackBody_onRawDataStatusChangedParams& from) {
  CallbackBody_onRawDataStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.recv_handle_ = from._impl_.recv_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onRawDataStatusChangedParams::CopyFrom(const CallbackBody_onRawDataStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onRawDataStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onRawDataStatusChangedParams::InternalSwap(CallbackBody_onRawDataStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onRawDataStatusChangedParams, _impl_.status_)
      + sizeof(CallbackBody_onRawDataStatusChangedParams::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onRawDataStatusChangedParams, _impl_.recv_handle_)>(
          reinterpret_cast<char*>(&_impl_.recv_handle_),
          reinterpret_cast<char*>(&other->_impl_.recv_handle_));
}

std::string CallbackBody_onRawDataStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams";
}

// ===================================================================

class CallbackBody_onCommandReceivedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onCommandReceivedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onCommandReceivedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& psender(const CallbackBody_onCommandReceivedParams* msg);
  static void set_has_psender(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onCommandReceivedParams::_Internal::psender(const CallbackBody_onCommandReceivedParams* msg) {
  return *msg->_impl_.psender_;
}
CallbackBody_onCommandReceivedParams::CallbackBody_onCommandReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
}
CallbackBody_onCommandReceivedParams::CallbackBody_onCommandReceivedParams(const CallbackBody_onCommandReceivedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onCommandReceivedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcmd_) {}

    , decltype(_impl_.psender_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strcmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strcmd_.Set(from._internal_strcmd(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.psender_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.psender_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
}

inline void CallbackBody_onCommandReceivedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcmd_) {}

    , decltype(_impl_.psender_){nullptr}
  };
  _impl_.strcmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onCommandReceivedParams::~CallbackBody_onCommandReceivedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onCommandReceivedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strcmd_.Destroy();
  if (this != internal_default_instance()) delete _impl_.psender_;
}

void CallbackBody_onCommandReceivedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onCommandReceivedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.strcmd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.psender_ != nullptr);
      _impl_.psender_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onCommandReceivedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pSender = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_psender(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strCmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strcmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onCommandReceivedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pSender = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::psender(this),
        _Internal::psender(this).GetCachedSize(), target, stream);
  }

  // optional string strCmd = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strcmd();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  return target;
}

::size_t CallbackBody_onCommandReceivedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strCmd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strcmd());
    }

    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pSender = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.psender_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onCommandReceivedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onCommandReceivedParams*>(
      &from));
}

void CallbackBody_onCommandReceivedParams::MergeFrom(const CallbackBody_onCommandReceivedParams& from) {
  CallbackBody_onCommandReceivedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strcmd(from._internal_strcmd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_psender()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_psender());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onCommandReceivedParams::CopyFrom(const CallbackBody_onCommandReceivedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onCommandReceivedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onCommandReceivedParams::InternalSwap(CallbackBody_onCommandReceivedParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strcmd_, lhs_arena,
                                       &other->_impl_.strcmd_, rhs_arena);
  swap(_impl_.psender_, other->_impl_.psender_);
}

std::string CallbackBody_onCommandReceivedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams";
}

// ===================================================================

class CallbackBody_onCommandChannelConnectResultParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onCommandChannelConnectResultParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onCommandChannelConnectResultParams, _impl_._has_bits_);
  static void set_has_issuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onCommandChannelConnectResultParams::CallbackBody_onCommandChannelConnectResultParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
}
CallbackBody_onCommandChannelConnectResultParams::CallbackBody_onCommandChannelConnectResultParams(const CallbackBody_onCommandChannelConnectResultParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
}

inline void CallbackBody_onCommandChannelConnectResultParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.issuccess_) { false }

  };
}

CallbackBody_onCommandChannelConnectResultParams::~CallbackBody_onCommandChannelConnectResultParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onCommandChannelConnectResultParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onCommandChannelConnectResultParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onCommandChannelConnectResultParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.issuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onCommandChannelConnectResultParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool isSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_issuccess(&has_bits);
          _impl_.issuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onCommandChannelConnectResultParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool isSuccess = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_issuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  return target;
}

::size_t CallbackBody_onCommandChannelConnectResultParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool isSuccess = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onCommandChannelConnectResultParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onCommandChannelConnectResultParams*>(
      &from));
}

void CallbackBody_onCommandChannelConnectResultParams::MergeFrom(const CallbackBody_onCommandChannelConnectResultParams& from) {
  CallbackBody_onCommandChannelConnectResultParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_issuccess(from._internal_issuccess());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onCommandChannelConnectResultParams::CopyFrom(const CallbackBody_onCommandChannelConnectResultParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onCommandChannelConnectResultParams::IsInitialized() const {
  return true;
}

void CallbackBody_onCommandChannelConnectResultParams::InternalSwap(CallbackBody_onCommandChannelConnectResultParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.issuccess_, other->_impl_.issuccess_);
}

std::string CallbackBody_onCommandChannelConnectResultParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams";
}

// ===================================================================

class CallbackBody_onInviteByPhoneStatusParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onInviteByPhoneStatusParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onInviteByPhoneStatusParams, _impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reason(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallbackBody_onInviteByPhoneStatusParams::CallbackBody_onInviteByPhoneStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
}
CallbackBody_onInviteByPhoneStatusParams::CallbackBody_onInviteByPhoneStatusParams(const CallbackBody_onInviteByPhoneStatusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
}

inline void CallbackBody_onInviteByPhoneStatusParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_) { 0 }

    , decltype(_impl_.reason_) { 0 }

  };
}

CallbackBody_onInviteByPhoneStatusParams::~CallbackBody_onInviteByPhoneStatusParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onInviteByPhoneStatusParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onInviteByPhoneStatusParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onInviteByPhoneStatusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.status_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.reason_) -
        reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.reason_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onInviteByPhoneStatusParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_reason(&has_bits);
          _impl_.reason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onInviteByPhoneStatusParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  // optional int32 reason = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  return target;
}

::size_t CallbackBody_onInviteByPhoneStatusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }

    // optional int32 reason = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_reason());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onInviteByPhoneStatusParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onInviteByPhoneStatusParams*>(
      &from));
}

void CallbackBody_onInviteByPhoneStatusParams::MergeFrom(const CallbackBody_onInviteByPhoneStatusParams& from) {
  CallbackBody_onInviteByPhoneStatusParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.reason_ = from._impl_.reason_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onInviteByPhoneStatusParams::CopyFrom(const CallbackBody_onInviteByPhoneStatusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onInviteByPhoneStatusParams::IsInitialized() const {
  return true;
}

void CallbackBody_onInviteByPhoneStatusParams::InternalSwap(CallbackBody_onInviteByPhoneStatusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onInviteByPhoneStatusParams, _impl_.reason_)
      + sizeof(CallbackBody_onInviteByPhoneStatusParams::_impl_.reason_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onInviteByPhoneStatusParams, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

std::string CallbackBody_onInviteByPhoneStatusParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams";
}

// ===================================================================

class CallbackBody_onCloudRecordingStatusParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onCloudRecordingStatusParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onCloudRecordingStatusParams, _impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onCloudRecordingStatusParams::CallbackBody_onCloudRecordingStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
}
CallbackBody_onCloudRecordingStatusParams::CallbackBody_onCloudRecordingStatusParams(const CallbackBody_onCloudRecordingStatusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
}

inline void CallbackBody_onCloudRecordingStatusParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onCloudRecordingStatusParams::~CallbackBody_onCloudRecordingStatusParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onCloudRecordingStatusParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onCloudRecordingStatusParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onCloudRecordingStatusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onCloudRecordingStatusParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onCloudRecordingStatusParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  return target;
}

::size_t CallbackBody_onCloudRecordingStatusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onCloudRecordingStatusParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onCloudRecordingStatusParams*>(
      &from));
}

void CallbackBody_onCloudRecordingStatusParams::MergeFrom(const CallbackBody_onCloudRecordingStatusParams& from) {
  CallbackBody_onCloudRecordingStatusParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onCloudRecordingStatusParams::CopyFrom(const CallbackBody_onCloudRecordingStatusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onCloudRecordingStatusParams::IsInitialized() const {
  return true;
}

void CallbackBody_onCloudRecordingStatusParams::InternalSwap(CallbackBody_onCloudRecordingStatusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.status_, other->_impl_.status_);
}

std::string CallbackBody_onCloudRecordingStatusParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams";
}

// ===================================================================

class CallbackBody_onCameraControlRequestResultParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onCameraControlRequestResultParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onCameraControlRequestResultParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser(const CallbackBody_onCameraControlRequestResultParams* msg);
  static void set_has_puser(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_isapproved(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onCameraControlRequestResultParams::_Internal::puser(const CallbackBody_onCameraControlRequestResultParams* msg) {
  return *msg->_impl_.puser_;
}
CallbackBody_onCameraControlRequestResultParams::CallbackBody_onCameraControlRequestResultParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
}
CallbackBody_onCameraControlRequestResultParams::CallbackBody_onCameraControlRequestResultParams(const CallbackBody_onCameraControlRequestResultParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onCameraControlRequestResultParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.isapproved_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.puser_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.puser_);
  }
  _this->_impl_.isapproved_ = from._impl_.isapproved_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
}

inline void CallbackBody_onCameraControlRequestResultParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.isapproved_) { false }

  };
}

CallbackBody_onCameraControlRequestResultParams::~CallbackBody_onCameraControlRequestResultParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onCameraControlRequestResultParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.puser_;
}

void CallbackBody_onCameraControlRequestResultParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onCameraControlRequestResultParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.puser_ != nullptr);
    _impl_.puser_->Clear();
  }
  _impl_.isapproved_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onCameraControlRequestResultParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_puser(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isApproved = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_isapproved(&has_bits);
          _impl_.isapproved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onCameraControlRequestResultParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::puser(this),
        _Internal::puser(this).GetCachedSize(), target, stream);
  }

  // optional bool isApproved = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_isapproved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  return target;
}

::size_t CallbackBody_onCameraControlRequestResultParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.puser_);
    }

    // optional bool isApproved = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onCameraControlRequestResultParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onCameraControlRequestResultParams*>(
      &from));
}

void CallbackBody_onCameraControlRequestResultParams::MergeFrom(const CallbackBody_onCameraControlRequestResultParams& from) {
  CallbackBody_onCameraControlRequestResultParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_puser()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_puser());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.isapproved_ = from._impl_.isapproved_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onCameraControlRequestResultParams::CopyFrom(const CallbackBody_onCameraControlRequestResultParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onCameraControlRequestResultParams::IsInitialized() const {
  return true;
}

void CallbackBody_onCameraControlRequestResultParams::InternalSwap(CallbackBody_onCameraControlRequestResultParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onCameraControlRequestResultParams, _impl_.isapproved_)
      + sizeof(CallbackBody_onCameraControlRequestResultParams::_impl_.isapproved_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onCameraControlRequestResultParams, _impl_.puser_)>(
          reinterpret_cast<char*>(&_impl_.puser_),
          reinterpret_cast<char*>(&other->_impl_.puser_));
}

std::string CallbackBody_onCameraControlRequestResultParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams";
}

// ===================================================================

class CallbackBody_onCameraControlRequestReceivedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onCameraControlRequestReceivedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onCameraControlRequestReceivedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser(const CallbackBody_onCameraControlRequestReceivedParams* msg);
  static void set_has_puser(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_requesttype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onCameraControlRequestReceivedParams::_Internal::puser(const CallbackBody_onCameraControlRequestReceivedParams* msg) {
  return *msg->_impl_.puser_;
}
CallbackBody_onCameraControlRequestReceivedParams::CallbackBody_onCameraControlRequestReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
}
CallbackBody_onCameraControlRequestReceivedParams::CallbackBody_onCameraControlRequestReceivedParams(const CallbackBody_onCameraControlRequestReceivedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onCameraControlRequestReceivedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.requesttype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.puser_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.puser_);
  }
  _this->_impl_.requesttype_ = from._impl_.requesttype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
}

inline void CallbackBody_onCameraControlRequestReceivedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.requesttype_) { 0 }

  };
}

CallbackBody_onCameraControlRequestReceivedParams::~CallbackBody_onCameraControlRequestReceivedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onCameraControlRequestReceivedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.puser_;
}

void CallbackBody_onCameraControlRequestReceivedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onCameraControlRequestReceivedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.puser_ != nullptr);
    _impl_.puser_->Clear();
  }
  _impl_.requesttype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onCameraControlRequestReceivedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_puser(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 requestType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_requesttype(&has_bits);
          _impl_.requesttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onCameraControlRequestReceivedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::puser(this),
        _Internal::puser(this).GetCachedSize(), target, stream);
  }

  // optional int32 requestType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_requesttype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  return target;
}

::size_t CallbackBody_onCameraControlRequestReceivedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.puser_);
    }

    // optional int32 requestType = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_requesttype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onCameraControlRequestReceivedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onCameraControlRequestReceivedParams*>(
      &from));
}

void CallbackBody_onCameraControlRequestReceivedParams::MergeFrom(const CallbackBody_onCameraControlRequestReceivedParams& from) {
  CallbackBody_onCameraControlRequestReceivedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_puser()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_puser());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.requesttype_ = from._impl_.requesttype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onCameraControlRequestReceivedParams::CopyFrom(const CallbackBody_onCameraControlRequestReceivedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onCameraControlRequestReceivedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onCameraControlRequestReceivedParams::InternalSwap(CallbackBody_onCameraControlRequestReceivedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onCameraControlRequestReceivedParams, _impl_.requesttype_)
      + sizeof(CallbackBody_onCameraControlRequestReceivedParams::_impl_.requesttype_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onCameraControlRequestReceivedParams, _impl_.puser_)>(
          reinterpret_cast<char*>(&_impl_.puser_),
          reinterpret_cast<char*>(&other->_impl_.puser_));
}

std::string CallbackBody_onCameraControlRequestReceivedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams";
}

// ===================================================================

class CallbackBody_onRemoteControlStatusParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onRemoteControlStatusParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlStatusParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser(const CallbackBody_onRemoteControlStatusParams* msg);
  static void set_has_puser(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction(const CallbackBody_onRemoteControlStatusParams* msg);
  static void set_has_shareaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onRemoteControlStatusParams::_Internal::puser(const CallbackBody_onRemoteControlStatusParams* msg) {
  return *msg->_impl_.puser_;
}
const ::com::electron::zoomvideo::sdk::proto::ShareAction&
CallbackBody_onRemoteControlStatusParams::_Internal::shareaction(const CallbackBody_onRemoteControlStatusParams* msg) {
  return *msg->_impl_.shareaction_;
}
CallbackBody_onRemoteControlStatusParams::CallbackBody_onRemoteControlStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
}
CallbackBody_onRemoteControlStatusParams::CallbackBody_onRemoteControlStatusParams(const CallbackBody_onRemoteControlStatusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onRemoteControlStatusParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.shareaction_){nullptr}
    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.puser_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.puser_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.shareaction_ = new ::com::electron::zoomvideo::sdk::proto::ShareAction(*from._impl_.shareaction_);
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
}

inline void CallbackBody_onRemoteControlStatusParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.shareaction_){nullptr}
    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onRemoteControlStatusParams::~CallbackBody_onRemoteControlStatusParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onRemoteControlStatusParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.puser_;
  if (this != internal_default_instance()) delete _impl_.shareaction_;
}

void CallbackBody_onRemoteControlStatusParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onRemoteControlStatusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.puser_ != nullptr);
      _impl_.puser_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.shareaction_ != nullptr);
      _impl_.shareaction_->Clear();
    }
  }
  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onRemoteControlStatusParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_puser(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shareaction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onRemoteControlStatusParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::puser(this),
        _Internal::puser(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shareaction(this),
        _Internal::shareaction(this).GetCachedSize(), target, stream);
  }

  // optional int32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  return target;
}

::size_t CallbackBody_onRemoteControlStatusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.puser_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shareaction_);
    }

    // optional int32 status = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onRemoteControlStatusParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onRemoteControlStatusParams*>(
      &from));
}

void CallbackBody_onRemoteControlStatusParams::MergeFrom(const CallbackBody_onRemoteControlStatusParams& from) {
  CallbackBody_onRemoteControlStatusParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_puser()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_puser());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shareaction()->::com::electron::zoomvideo::sdk::proto::ShareAction::MergeFrom(
          from._internal_shareaction());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onRemoteControlStatusParams::CopyFrom(const CallbackBody_onRemoteControlStatusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onRemoteControlStatusParams::IsInitialized() const {
  return true;
}

void CallbackBody_onRemoteControlStatusParams::InternalSwap(CallbackBody_onRemoteControlStatusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlStatusParams, _impl_.status_)
      + sizeof(CallbackBody_onRemoteControlStatusParams::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlStatusParams, _impl_.puser_)>(
          reinterpret_cast<char*>(&_impl_.puser_),
          reinterpret_cast<char*>(&other->_impl_.puser_));
}

std::string CallbackBody_onRemoteControlStatusParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams";
}

// ===================================================================

class CallbackBody_onRemoteControlRequestReceivedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onRemoteControlRequestReceivedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlRequestReceivedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& puser(const CallbackBody_onRemoteControlRequestReceivedParams* msg);
  static void set_has_puser(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::ShareAction& shareaction(const CallbackBody_onRemoteControlRequestReceivedParams* msg);
  static void set_has_shareaction(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onRemoteControlRequestReceivedParams::_Internal::puser(const CallbackBody_onRemoteControlRequestReceivedParams* msg) {
  return *msg->_impl_.puser_;
}
const ::com::electron::zoomvideo::sdk::proto::ShareAction&
CallbackBody_onRemoteControlRequestReceivedParams::_Internal::shareaction(const CallbackBody_onRemoteControlRequestReceivedParams* msg) {
  return *msg->_impl_.shareaction_;
}
CallbackBody_onRemoteControlRequestReceivedParams::CallbackBody_onRemoteControlRequestReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
}
CallbackBody_onRemoteControlRequestReceivedParams::CallbackBody_onRemoteControlRequestReceivedParams(const CallbackBody_onRemoteControlRequestReceivedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onRemoteControlRequestReceivedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.shareaction_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.puser_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.puser_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.shareaction_ = new ::com::electron::zoomvideo::sdk::proto::ShareAction(*from._impl_.shareaction_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
}

inline void CallbackBody_onRemoteControlRequestReceivedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.puser_){nullptr}
    , decltype(_impl_.shareaction_){nullptr}
  };
}

CallbackBody_onRemoteControlRequestReceivedParams::~CallbackBody_onRemoteControlRequestReceivedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onRemoteControlRequestReceivedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.puser_;
  if (this != internal_default_instance()) delete _impl_.shareaction_;
}

void CallbackBody_onRemoteControlRequestReceivedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onRemoteControlRequestReceivedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.puser_ != nullptr);
      _impl_.puser_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.shareaction_ != nullptr);
      _impl_.shareaction_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onRemoteControlRequestReceivedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_puser(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shareaction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onRemoteControlRequestReceivedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::puser(this),
        _Internal::puser(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shareaction(this),
        _Internal::shareaction(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  return target;
}

::size_t CallbackBody_onRemoteControlRequestReceivedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser pUser = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.puser_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.ShareAction shareAction = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.shareaction_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onRemoteControlRequestReceivedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onRemoteControlRequestReceivedParams*>(
      &from));
}

void CallbackBody_onRemoteControlRequestReceivedParams::MergeFrom(const CallbackBody_onRemoteControlRequestReceivedParams& from) {
  CallbackBody_onRemoteControlRequestReceivedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_puser()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_puser());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_shareaction()->::com::electron::zoomvideo::sdk::proto::ShareAction::MergeFrom(
          from._internal_shareaction());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onRemoteControlRequestReceivedParams::CopyFrom(const CallbackBody_onRemoteControlRequestReceivedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onRemoteControlRequestReceivedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onRemoteControlRequestReceivedParams::InternalSwap(CallbackBody_onRemoteControlRequestReceivedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlRequestReceivedParams, _impl_.shareaction_)
      + sizeof(CallbackBody_onRemoteControlRequestReceivedParams::_impl_.shareaction_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlRequestReceivedParams, _impl_.puser_)>(
          reinterpret_cast<char*>(&_impl_.puser_),
          reinterpret_cast<char*>(&other->_impl_.puser_));
}

std::string CallbackBody_onRemoteControlRequestReceivedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams";
}

// ===================================================================

class CallbackBody_onRemoteControlServiceInstallResultParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onRemoteControlServiceInstallResultParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onRemoteControlServiceInstallResultParams, _impl_._has_bits_);
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onRemoteControlServiceInstallResultParams::CallbackBody_onRemoteControlServiceInstallResultParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
}
CallbackBody_onRemoteControlServiceInstallResultParams::CallbackBody_onRemoteControlServiceInstallResultParams(const CallbackBody_onRemoteControlServiceInstallResultParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
}

inline void CallbackBody_onRemoteControlServiceInstallResultParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bsuccess_) { false }

  };
}

CallbackBody_onRemoteControlServiceInstallResultParams::~CallbackBody_onRemoteControlServiceInstallResultParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onRemoteControlServiceInstallResultParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onRemoteControlServiceInstallResultParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onRemoteControlServiceInstallResultParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onRemoteControlServiceInstallResultParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsuccess(&has_bits);
          _impl_.bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onRemoteControlServiceInstallResultParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSuccess = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsuccess(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  return target;
}

::size_t CallbackBody_onRemoteControlServiceInstallResultParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bSuccess = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onRemoteControlServiceInstallResultParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onRemoteControlServiceInstallResultParams*>(
      &from));
}

void CallbackBody_onRemoteControlServiceInstallResultParams::MergeFrom(const CallbackBody_onRemoteControlServiceInstallResultParams& from) {
  CallbackBody_onRemoteControlServiceInstallResultParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_bsuccess(from._internal_bsuccess());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onRemoteControlServiceInstallResultParams::CopyFrom(const CallbackBody_onRemoteControlServiceInstallResultParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onRemoteControlServiceInstallResultParams::IsInitialized() const {
  return true;
}

void CallbackBody_onRemoteControlServiceInstallResultParams::InternalSwap(CallbackBody_onRemoteControlServiceInstallResultParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.bsuccess_, other->_impl_.bsuccess_);
}

std::string CallbackBody_onRemoteControlServiceInstallResultParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams";
}

// ===================================================================

class CallbackBody_onHostAskUnmuteParams::_Internal {
 public:
};

CallbackBody_onHostAskUnmuteParams::CallbackBody_onHostAskUnmuteParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
}
CallbackBody_onHostAskUnmuteParams::CallbackBody_onHostAskUnmuteParams(const CallbackBody_onHostAskUnmuteParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
}

inline void CallbackBody_onHostAskUnmuteParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackBody_onHostAskUnmuteParams::~CallbackBody_onHostAskUnmuteParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onHostAskUnmuteParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onHostAskUnmuteParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onHostAskUnmuteParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onHostAskUnmuteParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onHostAskUnmuteParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  return target;
}

::size_t CallbackBody_onHostAskUnmuteParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onHostAskUnmuteParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onHostAskUnmuteParams*>(
      &from));
}

void CallbackBody_onHostAskUnmuteParams::MergeFrom(const CallbackBody_onHostAskUnmuteParams& from) {
  CallbackBody_onHostAskUnmuteParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onHostAskUnmuteParams::CopyFrom(const CallbackBody_onHostAskUnmuteParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onHostAskUnmuteParams::IsInitialized() const {
  return true;
}

void CallbackBody_onHostAskUnmuteParams::InternalSwap(CallbackBody_onHostAskUnmuteParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string CallbackBody_onHostAskUnmuteParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams";
}

// ===================================================================

class CallbackBody_onMultiCameraStreamStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onMultiCameraStreamStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onMultiCameraStreamStatusChangedParams, _impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onMultiCameraStreamStatusChangedParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camerastreamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onMultiCameraStreamStatusChangedParams::_Internal::user(const CallbackBody_onMultiCameraStreamStatusChangedParams* msg) {
  return *msg->_impl_.user_;
}
CallbackBody_onMultiCameraStreamStatusChangedParams::CallbackBody_onMultiCameraStreamStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
}
CallbackBody_onMultiCameraStreamStatusChangedParams::CallbackBody_onMultiCameraStreamStatusChangedParams(const CallbackBody_onMultiCameraStreamStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onMultiCameraStreamStatusChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.camerastreamid_) {}

    , decltype(_impl_.status_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  ::memcpy(&_impl_.camerastreamid_, &from._impl_.camerastreamid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.status_) -
    reinterpret_cast<char*>(&_impl_.camerastreamid_)) + sizeof(_impl_.status_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
}

inline void CallbackBody_onMultiCameraStreamStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.camerastreamid_) { ::int64_t{0} }

    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onMultiCameraStreamStatusChangedParams::~CallbackBody_onMultiCameraStreamStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onMultiCameraStreamStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CallbackBody_onMultiCameraStreamStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onMultiCameraStreamStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.camerastreamid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.camerastreamid_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onMultiCameraStreamStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cameraStreamID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_camerastreamid(&has_bits);
          _impl_.camerastreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onMultiCameraStreamStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // optional int64 cameraStreamID = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_camerastreamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  return target;
}

::size_t CallbackBody_onMultiCameraStreamStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional int64 cameraStreamID = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_camerastreamid());
    }

    // optional int32 status = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onMultiCameraStreamStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onMultiCameraStreamStatusChangedParams*>(
      &from));
}

void CallbackBody_onMultiCameraStreamStatusChangedParams::MergeFrom(const CallbackBody_onMultiCameraStreamStatusChangedParams& from) {
  CallbackBody_onMultiCameraStreamStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.camerastreamid_ = from._impl_.camerastreamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onMultiCameraStreamStatusChangedParams::CopyFrom(const CallbackBody_onMultiCameraStreamStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onMultiCameraStreamStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onMultiCameraStreamStatusChangedParams::InternalSwap(CallbackBody_onMultiCameraStreamStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onMultiCameraStreamStatusChangedParams, _impl_.status_)
      + sizeof(CallbackBody_onMultiCameraStreamStatusChangedParams::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onMultiCameraStreamStatusChangedParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string CallbackBody_onMultiCameraStreamStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams";
}

// ===================================================================

class CallbackBody_onMicSpeakerVolumeChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onMicSpeakerVolumeChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onMicSpeakerVolumeChangedParams, _impl_._has_bits_);
  static void set_has_micvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_speakervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallbackBody_onMicSpeakerVolumeChangedParams::CallbackBody_onMicSpeakerVolumeChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
}
CallbackBody_onMicSpeakerVolumeChangedParams::CallbackBody_onMicSpeakerVolumeChangedParams(const CallbackBody_onMicSpeakerVolumeChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
}

inline void CallbackBody_onMicSpeakerVolumeChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.micvolume_) { 0u }

    , decltype(_impl_.speakervolume_) { 0u }

  };
}

CallbackBody_onMicSpeakerVolumeChangedParams::~CallbackBody_onMicSpeakerVolumeChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onMicSpeakerVolumeChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onMicSpeakerVolumeChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onMicSpeakerVolumeChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.micvolume_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speakervolume_) -
        reinterpret_cast<char*>(&_impl_.micvolume_)) + sizeof(_impl_.speakervolume_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onMicSpeakerVolumeChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 MicVolume = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_micvolume(&has_bits);
          _impl_.micvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 SpeakerVolume = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_speakervolume(&has_bits);
          _impl_.speakervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onMicSpeakerVolumeChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 MicVolume = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_micvolume(), target);
  }

  // optional uint32 SpeakerVolume = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_speakervolume(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  return target;
}

::size_t CallbackBody_onMicSpeakerVolumeChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional uint32 MicVolume = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_micvolume());
    }

    // optional uint32 SpeakerVolume = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_speakervolume());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onMicSpeakerVolumeChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onMicSpeakerVolumeChangedParams*>(
      &from));
}

void CallbackBody_onMicSpeakerVolumeChangedParams::MergeFrom(const CallbackBody_onMicSpeakerVolumeChangedParams& from) {
  CallbackBody_onMicSpeakerVolumeChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.micvolume_ = from._impl_.micvolume_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.speakervolume_ = from._impl_.speakervolume_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onMicSpeakerVolumeChangedParams::CopyFrom(const CallbackBody_onMicSpeakerVolumeChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onMicSpeakerVolumeChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onMicSpeakerVolumeChangedParams::InternalSwap(CallbackBody_onMicSpeakerVolumeChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onMicSpeakerVolumeChangedParams, _impl_.speakervolume_)
      + sizeof(CallbackBody_onMicSpeakerVolumeChangedParams::_impl_.speakervolume_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onMicSpeakerVolumeChangedParams, _impl_.micvolume_)>(
          reinterpret_cast<char*>(&_impl_.micvolume_),
          reinterpret_cast<char*>(&other->_impl_.micvolume_));
}

std::string CallbackBody_onMicSpeakerVolumeChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams";
}

// ===================================================================

class CallbackBody_onAudioDeviceStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onAudioDeviceStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onAudioDeviceStatusChangedParams, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CallbackBody_onAudioDeviceStatusChangedParams::CallbackBody_onAudioDeviceStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
}
CallbackBody_onAudioDeviceStatusChangedParams::CallbackBody_onAudioDeviceStatusChangedParams(const CallbackBody_onAudioDeviceStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
}

inline void CallbackBody_onAudioDeviceStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onAudioDeviceStatusChangedParams::~CallbackBody_onAudioDeviceStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onAudioDeviceStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onAudioDeviceStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onAudioDeviceStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.status_) -
        reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onAudioDeviceStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_type(&has_bits);
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onAudioDeviceStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_type(), target);
  }

  // optional int32 status = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  return target;
}

::size_t CallbackBody_onAudioDeviceStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int32 type = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_type());
    }

    // optional int32 status = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_status());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onAudioDeviceStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onAudioDeviceStatusChangedParams*>(
      &from));
}

void CallbackBody_onAudioDeviceStatusChangedParams::MergeFrom(const CallbackBody_onAudioDeviceStatusChangedParams& from) {
  CallbackBody_onAudioDeviceStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onAudioDeviceStatusChangedParams::CopyFrom(const CallbackBody_onAudioDeviceStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onAudioDeviceStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onAudioDeviceStatusChangedParams::InternalSwap(CallbackBody_onAudioDeviceStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onAudioDeviceStatusChangedParams, _impl_.status_)
      + sizeof(CallbackBody_onAudioDeviceStatusChangedParams::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onAudioDeviceStatusChangedParams, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string CallbackBody_onAudioDeviceStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams";
}

// ===================================================================

class CallbackBody_onTestMicStatusChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onTestMicStatusChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onTestMicStatusChangedParams, _impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onTestMicStatusChangedParams::CallbackBody_onTestMicStatusChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
}
CallbackBody_onTestMicStatusChangedParams::CallbackBody_onTestMicStatusChangedParams(const CallbackBody_onTestMicStatusChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
}

inline void CallbackBody_onTestMicStatusChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onTestMicStatusChangedParams::~CallbackBody_onTestMicStatusChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onTestMicStatusChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onTestMicStatusChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onTestMicStatusChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onTestMicStatusChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onTestMicStatusChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  return target;
}

::size_t CallbackBody_onTestMicStatusChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onTestMicStatusChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onTestMicStatusChangedParams*>(
      &from));
}

void CallbackBody_onTestMicStatusChangedParams::MergeFrom(const CallbackBody_onTestMicStatusChangedParams& from) {
  CallbackBody_onTestMicStatusChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onTestMicStatusChangedParams::CopyFrom(const CallbackBody_onTestMicStatusChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onTestMicStatusChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onTestMicStatusChangedParams::InternalSwap(CallbackBody_onTestMicStatusChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.status_, other->_impl_.status_);
}

std::string CallbackBody_onTestMicStatusChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams";
}

// ===================================================================

class CallbackBody_onSelectedAudioDeviceChangedParams::_Internal {
 public:
};

CallbackBody_onSelectedAudioDeviceChangedParams::CallbackBody_onSelectedAudioDeviceChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
}
CallbackBody_onSelectedAudioDeviceChangedParams::CallbackBody_onSelectedAudioDeviceChangedParams(const CallbackBody_onSelectedAudioDeviceChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
}

inline void CallbackBody_onSelectedAudioDeviceChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      /*decltype(_impl_._cached_size_)*/{}
  };
}

CallbackBody_onSelectedAudioDeviceChangedParams::~CallbackBody_onSelectedAudioDeviceChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onSelectedAudioDeviceChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onSelectedAudioDeviceChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onSelectedAudioDeviceChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onSelectedAudioDeviceChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onSelectedAudioDeviceChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  return target;
}

::size_t CallbackBody_onSelectedAudioDeviceChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onSelectedAudioDeviceChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onSelectedAudioDeviceChangedParams*>(
      &from));
}

void CallbackBody_onSelectedAudioDeviceChangedParams::MergeFrom(const CallbackBody_onSelectedAudioDeviceChangedParams& from) {
  CallbackBody_onSelectedAudioDeviceChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onSelectedAudioDeviceChangedParams::CopyFrom(const CallbackBody_onSelectedAudioDeviceChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onSelectedAudioDeviceChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onSelectedAudioDeviceChangedParams::InternalSwap(CallbackBody_onSelectedAudioDeviceChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

std::string CallbackBody_onSelectedAudioDeviceChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams";
}

// ===================================================================

class CallbackBody_onLiveTranscriptionStatusParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onLiveTranscriptionStatusParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onLiveTranscriptionStatusParams, _impl_._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onLiveTranscriptionStatusParams::CallbackBody_onLiveTranscriptionStatusParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
}
CallbackBody_onLiveTranscriptionStatusParams::CallbackBody_onLiveTranscriptionStatusParams(const CallbackBody_onLiveTranscriptionStatusParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
}

inline void CallbackBody_onLiveTranscriptionStatusParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.status_) { 0 }

  };
}

CallbackBody_onLiveTranscriptionStatusParams::~CallbackBody_onLiveTranscriptionStatusParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onLiveTranscriptionStatusParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onLiveTranscriptionStatusParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onLiveTranscriptionStatusParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.status_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onLiveTranscriptionStatusParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onLiveTranscriptionStatusParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  return target;
}

::size_t CallbackBody_onLiveTranscriptionStatusParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 status = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onLiveTranscriptionStatusParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onLiveTranscriptionStatusParams*>(
      &from));
}

void CallbackBody_onLiveTranscriptionStatusParams::MergeFrom(const CallbackBody_onLiveTranscriptionStatusParams& from) {
  CallbackBody_onLiveTranscriptionStatusParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onLiveTranscriptionStatusParams::CopyFrom(const CallbackBody_onLiveTranscriptionStatusParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onLiveTranscriptionStatusParams::IsInitialized() const {
  return true;
}

void CallbackBody_onLiveTranscriptionStatusParams::InternalSwap(CallbackBody_onLiveTranscriptionStatusParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.status_, other->_impl_.status_);
}

std::string CallbackBody_onLiveTranscriptionStatusParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams";
}

// ===================================================================

class CallbackBody_onLiveTranscriptionMsgErrorParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onLiveTranscriptionMsgErrorParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onLiveTranscriptionMsgErrorParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& spokenlanguage(const CallbackBody_onLiveTranscriptionMsgErrorParams* msg);
  static void set_has_spokenlanguage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::LTTLanguage& transcriptlanguage(const CallbackBody_onLiveTranscriptionMsgErrorParams* msg);
  static void set_has_transcriptlanguage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::LTTLanguage&
CallbackBody_onLiveTranscriptionMsgErrorParams::_Internal::spokenlanguage(const CallbackBody_onLiveTranscriptionMsgErrorParams* msg) {
  return *msg->_impl_.spokenlanguage_;
}
const ::com::electron::zoomvideo::sdk::proto::LTTLanguage&
CallbackBody_onLiveTranscriptionMsgErrorParams::_Internal::transcriptlanguage(const CallbackBody_onLiveTranscriptionMsgErrorParams* msg) {
  return *msg->_impl_.transcriptlanguage_;
}
CallbackBody_onLiveTranscriptionMsgErrorParams::CallbackBody_onLiveTranscriptionMsgErrorParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
}
CallbackBody_onLiveTranscriptionMsgErrorParams::CallbackBody_onLiveTranscriptionMsgErrorParams(const CallbackBody_onLiveTranscriptionMsgErrorParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onLiveTranscriptionMsgErrorParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spokenlanguage_){nullptr}
    , decltype(_impl_.transcriptlanguage_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.spokenlanguage_ = new ::com::electron::zoomvideo::sdk::proto::LTTLanguage(*from._impl_.spokenlanguage_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.transcriptlanguage_ = new ::com::electron::zoomvideo::sdk::proto::LTTLanguage(*from._impl_.transcriptlanguage_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
}

inline void CallbackBody_onLiveTranscriptionMsgErrorParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.spokenlanguage_){nullptr}
    , decltype(_impl_.transcriptlanguage_){nullptr}
  };
}

CallbackBody_onLiveTranscriptionMsgErrorParams::~CallbackBody_onLiveTranscriptionMsgErrorParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onLiveTranscriptionMsgErrorParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spokenlanguage_;
  if (this != internal_default_instance()) delete _impl_.transcriptlanguage_;
}

void CallbackBody_onLiveTranscriptionMsgErrorParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onLiveTranscriptionMsgErrorParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.spokenlanguage_ != nullptr);
      _impl_.spokenlanguage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.transcriptlanguage_ != nullptr);
      _impl_.transcriptlanguage_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onLiveTranscriptionMsgErrorParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage spokenLanguage = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_spokenlanguage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage transcriptLanguage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transcriptlanguage(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onLiveTranscriptionMsgErrorParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage spokenLanguage = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::spokenlanguage(this),
        _Internal::spokenlanguage(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage transcriptLanguage = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::transcriptlanguage(this),
        _Internal::transcriptlanguage(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  return target;
}

::size_t CallbackBody_onLiveTranscriptionMsgErrorParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage spokenLanguage = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.spokenlanguage_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.LTTLanguage transcriptLanguage = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.transcriptlanguage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onLiveTranscriptionMsgErrorParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onLiveTranscriptionMsgErrorParams*>(
      &from));
}

void CallbackBody_onLiveTranscriptionMsgErrorParams::MergeFrom(const CallbackBody_onLiveTranscriptionMsgErrorParams& from) {
  CallbackBody_onLiveTranscriptionMsgErrorParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_spokenlanguage()->::com::electron::zoomvideo::sdk::proto::LTTLanguage::MergeFrom(
          from._internal_spokenlanguage());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_transcriptlanguage()->::com::electron::zoomvideo::sdk::proto::LTTLanguage::MergeFrom(
          from._internal_transcriptlanguage());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onLiveTranscriptionMsgErrorParams::CopyFrom(const CallbackBody_onLiveTranscriptionMsgErrorParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onLiveTranscriptionMsgErrorParams::IsInitialized() const {
  return true;
}

void CallbackBody_onLiveTranscriptionMsgErrorParams::InternalSwap(CallbackBody_onLiveTranscriptionMsgErrorParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onLiveTranscriptionMsgErrorParams, _impl_.transcriptlanguage_)
      + sizeof(CallbackBody_onLiveTranscriptionMsgErrorParams::_impl_.transcriptlanguage_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onLiveTranscriptionMsgErrorParams, _impl_.spokenlanguage_)>(
          reinterpret_cast<char*>(&_impl_.spokenlanguage_),
          reinterpret_cast<char*>(&other->_impl_.spokenlanguage_));
}

std::string CallbackBody_onLiveTranscriptionMsgErrorParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams";
}

// ===================================================================

class CallbackBody_liveTranscriptionMsgInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_liveTranscriptionMsgInfoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_liveTranscriptionMsgInfoParams, _impl_._has_bits_);
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_messagecontent(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speakername(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_speakerid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CallbackBody_liveTranscriptionMsgInfoParams::CallbackBody_liveTranscriptionMsgInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
}
CallbackBody_liveTranscriptionMsgInfoParams::CallbackBody_liveTranscriptionMsgInfoParams(const CallbackBody_liveTranscriptionMsgInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_liveTranscriptionMsgInfoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}

    , decltype(_impl_.messagecontent_) {}

    , decltype(_impl_.speakername_) {}

    , decltype(_impl_.speakerid_) {}

    , decltype(_impl_.timestamp_) {}

    , decltype(_impl_.messagetype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), _this->GetArenaForAllocation());
  }
  _impl_.messagecontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messagecontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.messagecontent_.Set(from._internal_messagecontent(), _this->GetArenaForAllocation());
  }
  _impl_.speakername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.speakername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.speakername_.Set(from._internal_speakername(), _this->GetArenaForAllocation());
  }
  _impl_.speakerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.speakerid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.speakerid_.Set(from._internal_speakerid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.messagetype_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.messagetype_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
}

inline void CallbackBody_liveTranscriptionMsgInfoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}

    , decltype(_impl_.messagecontent_) {}

    , decltype(_impl_.speakername_) {}

    , decltype(_impl_.speakerid_) {}

    , decltype(_impl_.timestamp_) { ::int64_t{0} }

    , decltype(_impl_.messagetype_) { 0 }

  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.messagecontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messagecontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.speakername_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.speakername_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.speakerid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.speakerid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_liveTranscriptionMsgInfoParams::~CallbackBody_liveTranscriptionMsgInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_liveTranscriptionMsgInfoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messageid_.Destroy();
  _impl_.messagecontent_.Destroy();
  _impl_.speakername_.Destroy();
  _impl_.speakerid_.Destroy();
}

void CallbackBody_liveTranscriptionMsgInfoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_liveTranscriptionMsgInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.messageid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.messagecontent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.speakername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.speakerid_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000030u) {
    ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.messagetype_) -
        reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.messagetype_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_liveTranscriptionMsgInfoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 timeStamp = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timestamp(&has_bits);
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string messageID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string messageContent = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_messagecontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string speakerName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_speakername();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string speakerID = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_speakerid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 messageType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_messagetype(&has_bits);
          _impl_.messagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_liveTranscriptionMsgInfoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 timeStamp = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_timestamp(), target);
  }

  // optional string messageID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_messageid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string messageContent = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_messagecontent();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string speakerName = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_speakername();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string speakerID = 5;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_speakerid();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional int32 messageType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_messagetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  return target;
}

::size_t CallbackBody_liveTranscriptionMsgInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional string messageID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_messageid());
    }

    // optional string messageContent = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_messagecontent());
    }

    // optional string speakerName = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_speakername());
    }

    // optional string speakerID = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_speakerid());
    }

    // optional int64 timeStamp = 1;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_timestamp());
    }

    // optional int32 messageType = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_messagetype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_liveTranscriptionMsgInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_liveTranscriptionMsgInfoParams*>(
      &from));
}

void CallbackBody_liveTranscriptionMsgInfoParams::MergeFrom(const CallbackBody_liveTranscriptionMsgInfoParams& from) {
  CallbackBody_liveTranscriptionMsgInfoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_messageid(from._internal_messageid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_messagecontent(from._internal_messagecontent());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_speakername(from._internal_speakername());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_speakerid(from._internal_speakerid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.timestamp_ = from._impl_.timestamp_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.messagetype_ = from._impl_.messagetype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_liveTranscriptionMsgInfoParams::CopyFrom(const CallbackBody_liveTranscriptionMsgInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_liveTranscriptionMsgInfoParams::IsInitialized() const {
  return true;
}

void CallbackBody_liveTranscriptionMsgInfoParams::InternalSwap(CallbackBody_liveTranscriptionMsgInfoParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messageid_, lhs_arena,
                                       &other->_impl_.messageid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messagecontent_, lhs_arena,
                                       &other->_impl_.messagecontent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.speakername_, lhs_arena,
                                       &other->_impl_.speakername_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.speakerid_, lhs_arena,
                                       &other->_impl_.speakerid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_liveTranscriptionMsgInfoParams, _impl_.messagetype_)
      + sizeof(CallbackBody_liveTranscriptionMsgInfoParams::_impl_.messagetype_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_liveTranscriptionMsgInfoParams, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

std::string CallbackBody_liveTranscriptionMsgInfoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams";
}

// ===================================================================

class CallbackBody_onCalloutJoinSuccessParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onCalloutJoinSuccessParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onCalloutJoinSuccessParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const CallbackBody_onCalloutJoinSuccessParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
CallbackBody_onCalloutJoinSuccessParams::_Internal::user(const CallbackBody_onCalloutJoinSuccessParams* msg) {
  return *msg->_impl_.user_;
}
CallbackBody_onCalloutJoinSuccessParams::CallbackBody_onCalloutJoinSuccessParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
}
CallbackBody_onCalloutJoinSuccessParams::CallbackBody_onCalloutJoinSuccessParams(const CallbackBody_onCalloutJoinSuccessParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onCalloutJoinSuccessParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phonenumber_) {}

    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.phonenumber_.Set(from._internal_phonenumber(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
}

inline void CallbackBody_onCalloutJoinSuccessParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.phonenumber_) {}

    , decltype(_impl_.user_){nullptr}
  };
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onCalloutJoinSuccessParams::~CallbackBody_onCalloutJoinSuccessParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onCalloutJoinSuccessParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phonenumber_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void CallbackBody_onCalloutJoinSuccessParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onCalloutJoinSuccessParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.phonenumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onCalloutJoinSuccessParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onCalloutJoinSuccessParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // optional string phoneNumber = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_phonenumber();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  return target;
}

::size_t CallbackBody_onCalloutJoinSuccessParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string phoneNumber = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phonenumber());
    }

    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onCalloutJoinSuccessParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onCalloutJoinSuccessParams*>(
      &from));
}

void CallbackBody_onCalloutJoinSuccessParams::MergeFrom(const CallbackBody_onCalloutJoinSuccessParams& from) {
  CallbackBody_onCalloutJoinSuccessParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_phonenumber(from._internal_phonenumber());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onCalloutJoinSuccessParams::CopyFrom(const CallbackBody_onCalloutJoinSuccessParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onCalloutJoinSuccessParams::IsInitialized() const {
  return true;
}

void CallbackBody_onCalloutJoinSuccessParams::InternalSwap(CallbackBody_onCalloutJoinSuccessParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phonenumber_, lhs_arena,
                                       &other->_impl_.phonenumber_, rhs_arena);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string CallbackBody_onCalloutJoinSuccessParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams";
}

// ===================================================================

class CallbackBody_onSessionLeaveParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onSessionLeaveParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onSessionLeaveParams, _impl_._has_bits_);
  static void set_has_ereason(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onSessionLeaveParams::CallbackBody_onSessionLeaveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
}
CallbackBody_onSessionLeaveParams::CallbackBody_onSessionLeaveParams(const CallbackBody_onSessionLeaveParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
}

inline void CallbackBody_onSessionLeaveParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ereason_) { 0 }

  };
}

CallbackBody_onSessionLeaveParams::~CallbackBody_onSessionLeaveParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onSessionLeaveParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CallbackBody_onSessionLeaveParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onSessionLeaveParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ereason_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onSessionLeaveParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 eReason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_ereason(&has_bits);
          _impl_.ereason_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onSessionLeaveParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 eReason = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_ereason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  return target;
}

::size_t CallbackBody_onSessionLeaveParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 eReason = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_ereason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onSessionLeaveParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onSessionLeaveParams*>(
      &from));
}

void CallbackBody_onSessionLeaveParams::MergeFrom(const CallbackBody_onSessionLeaveParams& from) {
  CallbackBody_onSessionLeaveParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_ereason(from._internal_ereason());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onSessionLeaveParams::CopyFrom(const CallbackBody_onSessionLeaveParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onSessionLeaveParams::IsInitialized() const {
  return true;
}

void CallbackBody_onSessionLeaveParams::InternalSwap(CallbackBody_onSessionLeaveParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.ereason_, other->_impl_.ereason_);
}

std::string CallbackBody_onSessionLeaveParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams";
}

// ===================================================================

class CallbackBody_onShareCursorDataReceivedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onShareCursorDataReceivedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onShareCursorDataReceivedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData& info(const CallbackBody_onShareCursorDataReceivedParams* msg);
  static void set_has_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData&
CallbackBody_onShareCursorDataReceivedParams::_Internal::info(const CallbackBody_onShareCursorDataReceivedParams* msg) {
  return *msg->_impl_.info_;
}
CallbackBody_onShareCursorDataReceivedParams::CallbackBody_onShareCursorDataReceivedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
}
CallbackBody_onShareCursorDataReceivedParams::CallbackBody_onShareCursorDataReceivedParams(const CallbackBody_onShareCursorDataReceivedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onShareCursorDataReceivedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.info_ = new ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData(*from._impl_.info_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
}

inline void CallbackBody_onShareCursorDataReceivedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.info_){nullptr}
  };
}

CallbackBody_onShareCursorDataReceivedParams::~CallbackBody_onShareCursorDataReceivedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onShareCursorDataReceivedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.info_;
}

void CallbackBody_onShareCursorDataReceivedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onShareCursorDataReceivedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.info_ != nullptr);
    _impl_.info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onShareCursorDataReceivedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onShareCursorDataReceivedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData info = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  return target;
}

::size_t CallbackBody_onShareCursorDataReceivedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData info = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onShareCursorDataReceivedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onShareCursorDataReceivedParams*>(
      &from));
}

void CallbackBody_onShareCursorDataReceivedParams::MergeFrom(const CallbackBody_onShareCursorDataReceivedParams& from) {
  CallbackBody_onShareCursorDataReceivedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_info()->::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData::MergeFrom(
        from._internal_info());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onShareCursorDataReceivedParams::CopyFrom(const CallbackBody_onShareCursorDataReceivedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onShareCursorDataReceivedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onShareCursorDataReceivedParams::InternalSwap(CallbackBody_onShareCursorDataReceivedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.info_, other->_impl_.info_);
}

std::string CallbackBody_onShareCursorDataReceivedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams";
}

// ===================================================================

class CallbackBody_onSpotlightVideoChangedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onSpotlightVideoChangedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onSpotlightVideoChangedParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::UserList& zn_userlist(const CallbackBody_onSpotlightVideoChangedParams* msg);
  static void set_has_zn_userlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::UserList&
CallbackBody_onSpotlightVideoChangedParams::_Internal::zn_userlist(const CallbackBody_onSpotlightVideoChangedParams* msg) {
  return *msg->_impl_.zn_userlist_;
}
CallbackBody_onSpotlightVideoChangedParams::CallbackBody_onSpotlightVideoChangedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
}
CallbackBody_onSpotlightVideoChangedParams::CallbackBody_onSpotlightVideoChangedParams(const CallbackBody_onSpotlightVideoChangedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onSpotlightVideoChangedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_userlist_ = new ::com::electron::zoomvideo::sdk::proto::UserList(*from._impl_.zn_userlist_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
}

inline void CallbackBody_onSpotlightVideoChangedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_userlist_){nullptr}
  };
}

CallbackBody_onSpotlightVideoChangedParams::~CallbackBody_onSpotlightVideoChangedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onSpotlightVideoChangedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_userlist_;
}

void CallbackBody_onSpotlightVideoChangedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onSpotlightVideoChangedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_userlist_ != nullptr);
    _impl_.zn_userlist_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onSpotlightVideoChangedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_userlist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onSpotlightVideoChangedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_userlist(this),
        _Internal::zn_userlist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  return target;
}

::size_t CallbackBody_onSpotlightVideoChangedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.UserList zn_userList = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.zn_userlist_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onSpotlightVideoChangedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onSpotlightVideoChangedParams*>(
      &from));
}

void CallbackBody_onSpotlightVideoChangedParams::MergeFrom(const CallbackBody_onSpotlightVideoChangedParams& from) {
  CallbackBody_onSpotlightVideoChangedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_zn_userlist()->::com::electron::zoomvideo::sdk::proto::UserList::MergeFrom(
        from._internal_zn_userlist());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onSpotlightVideoChangedParams::CopyFrom(const CallbackBody_onSpotlightVideoChangedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onSpotlightVideoChangedParams::IsInitialized() const {
  return true;
}

void CallbackBody_onSpotlightVideoChangedParams::InternalSwap(CallbackBody_onSpotlightVideoChangedParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.zn_userlist_, other->_impl_.zn_userlist_);
}

std::string CallbackBody_onSpotlightVideoChangedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams";
}

// ===================================================================

class CallbackBody_onBindIncomingLiveStreamResponseParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onBindIncomingLiveStreamResponseParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onBindIncomingLiveStreamResponseParams, _impl_._has_bits_);
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strstreamkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onBindIncomingLiveStreamResponseParams::CallbackBody_onBindIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
}
CallbackBody_onBindIncomingLiveStreamResponseParams::CallbackBody_onBindIncomingLiveStreamResponseParams(const CallbackBody_onBindIncomingLiveStreamResponseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onBindIncomingLiveStreamResponseParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strstreamkeyid_.Set(from._internal_strstreamkeyid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
}

inline void CallbackBody_onBindIncomingLiveStreamResponseParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) { false }

  };
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onBindIncomingLiveStreamResponseParams::~CallbackBody_onBindIncomingLiveStreamResponseParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onBindIncomingLiveStreamResponseParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strstreamkeyid_.Destroy();
}

void CallbackBody_onBindIncomingLiveStreamResponseParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onBindIncomingLiveStreamResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strstreamkeyid_.ClearNonDefaultToEmpty();
  }
  _impl_.bsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onBindIncomingLiveStreamResponseParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsuccess(&has_bits);
          _impl_.bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strStreamKeyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strstreamkeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onBindIncomingLiveStreamResponseParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSuccess = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsuccess(), target);
  }

  // optional string strStreamKeyID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strstreamkeyid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  return target;
}

::size_t CallbackBody_onBindIncomingLiveStreamResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strStreamKeyID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strstreamkeyid());
    }

    // optional bool bSuccess = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onBindIncomingLiveStreamResponseParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onBindIncomingLiveStreamResponseParams*>(
      &from));
}

void CallbackBody_onBindIncomingLiveStreamResponseParams::MergeFrom(const CallbackBody_onBindIncomingLiveStreamResponseParams& from) {
  CallbackBody_onBindIncomingLiveStreamResponseParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strstreamkeyid(from._internal_strstreamkeyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onBindIncomingLiveStreamResponseParams::CopyFrom(const CallbackBody_onBindIncomingLiveStreamResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onBindIncomingLiveStreamResponseParams::IsInitialized() const {
  return true;
}

void CallbackBody_onBindIncomingLiveStreamResponseParams::InternalSwap(CallbackBody_onBindIncomingLiveStreamResponseParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strstreamkeyid_, lhs_arena,
                                       &other->_impl_.strstreamkeyid_, rhs_arena);

  swap(_impl_.bsuccess_, other->_impl_.bsuccess_);
}

std::string CallbackBody_onBindIncomingLiveStreamResponseParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams";
}

// ===================================================================

class CallbackBody_onUnbindIncomingLiveStreamResponseParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onUnbindIncomingLiveStreamResponseParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onUnbindIncomingLiveStreamResponseParams, _impl_._has_bits_);
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strstreamkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onUnbindIncomingLiveStreamResponseParams::CallbackBody_onUnbindIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
}
CallbackBody_onUnbindIncomingLiveStreamResponseParams::CallbackBody_onUnbindIncomingLiveStreamResponseParams(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onUnbindIncomingLiveStreamResponseParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strstreamkeyid_.Set(from._internal_strstreamkeyid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
}

inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) { false }

  };
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onUnbindIncomingLiveStreamResponseParams::~CallbackBody_onUnbindIncomingLiveStreamResponseParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onUnbindIncomingLiveStreamResponseParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strstreamkeyid_.Destroy();
}

void CallbackBody_onUnbindIncomingLiveStreamResponseParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onUnbindIncomingLiveStreamResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strstreamkeyid_.ClearNonDefaultToEmpty();
  }
  _impl_.bsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onUnbindIncomingLiveStreamResponseParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsuccess(&has_bits);
          _impl_.bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strStreamKeyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strstreamkeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onUnbindIncomingLiveStreamResponseParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSuccess = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsuccess(), target);
  }

  // optional string strStreamKeyID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strstreamkeyid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  return target;
}

::size_t CallbackBody_onUnbindIncomingLiveStreamResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strStreamKeyID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strstreamkeyid());
    }

    // optional bool bSuccess = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onUnbindIncomingLiveStreamResponseParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onUnbindIncomingLiveStreamResponseParams*>(
      &from));
}

void CallbackBody_onUnbindIncomingLiveStreamResponseParams::MergeFrom(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from) {
  CallbackBody_onUnbindIncomingLiveStreamResponseParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strstreamkeyid(from._internal_strstreamkeyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onUnbindIncomingLiveStreamResponseParams::CopyFrom(const CallbackBody_onUnbindIncomingLiveStreamResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onUnbindIncomingLiveStreamResponseParams::IsInitialized() const {
  return true;
}

void CallbackBody_onUnbindIncomingLiveStreamResponseParams::InternalSwap(CallbackBody_onUnbindIncomingLiveStreamResponseParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strstreamkeyid_, lhs_arena,
                                       &other->_impl_.strstreamkeyid_, rhs_arena);

  swap(_impl_.bsuccess_, other->_impl_.bsuccess_);
}

std::string CallbackBody_onUnbindIncomingLiveStreamResponseParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams";
}

// ===================================================================

class CallbackBody_onIncomingLiveStreamStatusResponseParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onIncomingLiveStreamStatusResponseParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onIncomingLiveStreamStatusResponseParams, _impl_._has_bits_);
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList& pstreamsstatuslist(const CallbackBody_onIncomingLiveStreamStatusResponseParams* msg);
  static void set_has_pstreamsstatuslist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList&
CallbackBody_onIncomingLiveStreamStatusResponseParams::_Internal::pstreamsstatuslist(const CallbackBody_onIncomingLiveStreamStatusResponseParams* msg) {
  return *msg->_impl_.pstreamsstatuslist_;
}
CallbackBody_onIncomingLiveStreamStatusResponseParams::CallbackBody_onIncomingLiveStreamStatusResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
}
CallbackBody_onIncomingLiveStreamStatusResponseParams::CallbackBody_onIncomingLiveStreamStatusResponseParams(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onIncomingLiveStreamStatusResponseParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pstreamsstatuslist_){nullptr}
    , decltype(_impl_.bsuccess_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.pstreamsstatuslist_ = new ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList(*from._impl_.pstreamsstatuslist_);
  }
  _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
}

inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.pstreamsstatuslist_){nullptr}
    , decltype(_impl_.bsuccess_) { false }

  };
}

CallbackBody_onIncomingLiveStreamStatusResponseParams::~CallbackBody_onIncomingLiveStreamStatusResponseParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onIncomingLiveStreamStatusResponseParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pstreamsstatuslist_;
}

void CallbackBody_onIncomingLiveStreamStatusResponseParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onIncomingLiveStreamStatusResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pstreamsstatuslist_ != nullptr);
    _impl_.pstreamsstatuslist_->Clear();
  }
  _impl_.bsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onIncomingLiveStreamStatusResponseParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsuccess(&has_bits);
          _impl_.bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList pStreamsStatusList = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pstreamsstatuslist(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onIncomingLiveStreamStatusResponseParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSuccess = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsuccess(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList pStreamsStatusList = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pstreamsstatuslist(this),
        _Internal::pstreamsstatuslist(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  return target;
}

::size_t CallbackBody_onIncomingLiveStreamStatusResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList pStreamsStatusList = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.pstreamsstatuslist_);
    }

    // optional bool bSuccess = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onIncomingLiveStreamStatusResponseParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onIncomingLiveStreamStatusResponseParams*>(
      &from));
}

void CallbackBody_onIncomingLiveStreamStatusResponseParams::MergeFrom(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from) {
  CallbackBody_onIncomingLiveStreamStatusResponseParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_pstreamsstatuslist()->::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList::MergeFrom(
          from._internal_pstreamsstatuslist());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onIncomingLiveStreamStatusResponseParams::CopyFrom(const CallbackBody_onIncomingLiveStreamStatusResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onIncomingLiveStreamStatusResponseParams::IsInitialized() const {
  return true;
}

void CallbackBody_onIncomingLiveStreamStatusResponseParams::InternalSwap(CallbackBody_onIncomingLiveStreamStatusResponseParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody_onIncomingLiveStreamStatusResponseParams, _impl_.bsuccess_)
      + sizeof(CallbackBody_onIncomingLiveStreamStatusResponseParams::_impl_.bsuccess_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody_onIncomingLiveStreamStatusResponseParams, _impl_.pstreamsstatuslist_)>(
          reinterpret_cast<char*>(&_impl_.pstreamsstatuslist_),
          reinterpret_cast<char*>(&other->_impl_.pstreamsstatuslist_));
}

std::string CallbackBody_onIncomingLiveStreamStatusResponseParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams";
}

// ===================================================================

class CallbackBody_onStartIncomingLiveStreamResponseParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onStartIncomingLiveStreamResponseParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onStartIncomingLiveStreamResponseParams, _impl_._has_bits_);
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strstreamkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onStartIncomingLiveStreamResponseParams::CallbackBody_onStartIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
}
CallbackBody_onStartIncomingLiveStreamResponseParams::CallbackBody_onStartIncomingLiveStreamResponseParams(const CallbackBody_onStartIncomingLiveStreamResponseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onStartIncomingLiveStreamResponseParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strstreamkeyid_.Set(from._internal_strstreamkeyid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
}

inline void CallbackBody_onStartIncomingLiveStreamResponseParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) { false }

  };
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onStartIncomingLiveStreamResponseParams::~CallbackBody_onStartIncomingLiveStreamResponseParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onStartIncomingLiveStreamResponseParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strstreamkeyid_.Destroy();
}

void CallbackBody_onStartIncomingLiveStreamResponseParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onStartIncomingLiveStreamResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strstreamkeyid_.ClearNonDefaultToEmpty();
  }
  _impl_.bsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onStartIncomingLiveStreamResponseParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsuccess(&has_bits);
          _impl_.bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strStreamKeyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strstreamkeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onStartIncomingLiveStreamResponseParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSuccess = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsuccess(), target);
  }

  // optional string strStreamKeyID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strstreamkeyid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  return target;
}

::size_t CallbackBody_onStartIncomingLiveStreamResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strStreamKeyID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strstreamkeyid());
    }

    // optional bool bSuccess = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onStartIncomingLiveStreamResponseParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onStartIncomingLiveStreamResponseParams*>(
      &from));
}

void CallbackBody_onStartIncomingLiveStreamResponseParams::MergeFrom(const CallbackBody_onStartIncomingLiveStreamResponseParams& from) {
  CallbackBody_onStartIncomingLiveStreamResponseParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strstreamkeyid(from._internal_strstreamkeyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onStartIncomingLiveStreamResponseParams::CopyFrom(const CallbackBody_onStartIncomingLiveStreamResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onStartIncomingLiveStreamResponseParams::IsInitialized() const {
  return true;
}

void CallbackBody_onStartIncomingLiveStreamResponseParams::InternalSwap(CallbackBody_onStartIncomingLiveStreamResponseParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strstreamkeyid_, lhs_arena,
                                       &other->_impl_.strstreamkeyid_, rhs_arena);

  swap(_impl_.bsuccess_, other->_impl_.bsuccess_);
}

std::string CallbackBody_onStartIncomingLiveStreamResponseParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams";
}

// ===================================================================

class CallbackBody_onStopIncomingLiveStreamResponseParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody_onStopIncomingLiveStreamResponseParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody_onStopIncomingLiveStreamResponseParams, _impl_._has_bits_);
  static void set_has_bsuccess(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strstreamkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CallbackBody_onStopIncomingLiveStreamResponseParams::CallbackBody_onStopIncomingLiveStreamResponseParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
}
CallbackBody_onStopIncomingLiveStreamResponseParams::CallbackBody_onStopIncomingLiveStreamResponseParams(const CallbackBody_onStopIncomingLiveStreamResponseParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody_onStopIncomingLiveStreamResponseParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strstreamkeyid_.Set(from._internal_strstreamkeyid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
}

inline void CallbackBody_onStopIncomingLiveStreamResponseParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

    , decltype(_impl_.bsuccess_) { false }

  };
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CallbackBody_onStopIncomingLiveStreamResponseParams::~CallbackBody_onStopIncomingLiveStreamResponseParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody_onStopIncomingLiveStreamResponseParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strstreamkeyid_.Destroy();
}

void CallbackBody_onStopIncomingLiveStreamResponseParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody_onStopIncomingLiveStreamResponseParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strstreamkeyid_.ClearNonDefaultToEmpty();
  }
  _impl_.bsuccess_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody_onStopIncomingLiveStreamResponseParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_bsuccess(&has_bits);
          _impl_.bsuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strStreamKeyID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strstreamkeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody_onStopIncomingLiveStreamResponseParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bSuccess = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_bsuccess(), target);
  }

  // optional string strStreamKeyID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strstreamkeyid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  return target;
}

::size_t CallbackBody_onStopIncomingLiveStreamResponseParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strStreamKeyID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strstreamkeyid());
    }

    // optional bool bSuccess = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody_onStopIncomingLiveStreamResponseParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody_onStopIncomingLiveStreamResponseParams*>(
      &from));
}

void CallbackBody_onStopIncomingLiveStreamResponseParams::MergeFrom(const CallbackBody_onStopIncomingLiveStreamResponseParams& from) {
  CallbackBody_onStopIncomingLiveStreamResponseParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strstreamkeyid(from._internal_strstreamkeyid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.bsuccess_ = from._impl_.bsuccess_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody_onStopIncomingLiveStreamResponseParams::CopyFrom(const CallbackBody_onStopIncomingLiveStreamResponseParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody_onStopIncomingLiveStreamResponseParams::IsInitialized() const {
  return true;
}

void CallbackBody_onStopIncomingLiveStreamResponseParams::InternalSwap(CallbackBody_onStopIncomingLiveStreamResponseParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strstreamkeyid_, lhs_arena,
                                       &other->_impl_.strstreamkeyid_, rhs_arena);

  swap(_impl_.bsuccess_, other->_impl_.bsuccess_);
}

std::string CallbackBody_onStopIncomingLiveStreamResponseParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams";
}

// ===================================================================

class CallbackBody::_Internal {
 public:
  using HasBits = decltype(std::declval<CallbackBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CallbackBody, _impl_._has_bits_);
  static void set_has_msgtype(HasBits* has_bits) {
    (*has_bits)[1] |= 4096u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams& onerrorparam(const CallbackBody* msg);
  static void set_has_onerrorparam(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams& onuserjoinparam(const CallbackBody* msg);
  static void set_has_onuserjoinparam(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams& onuserleaveparam(const CallbackBody* msg);
  static void set_has_onuserleaveparam(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams& onuservideostatuschangedparam(const CallbackBody* msg);
  static void set_has_onuservideostatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams& onuseraudiostatuschangedparam(const CallbackBody* msg);
  static void set_has_onuseraudiostatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams& onusersharestatuschangedparam(const CallbackBody* msg);
  static void set_has_onusersharestatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams& onlivestreamstatuschangedparam(const CallbackBody* msg);
  static void set_has_onlivestreamstatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams& onuserhostchangedparam(const CallbackBody* msg);
  static void set_has_onuserhostchangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams& onuseractiveaudiochangedparam(const CallbackBody* msg);
  static void set_has_onuseractiveaudiochangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams& onchatnewmessagenotifyparam(const CallbackBody* msg);
  static void set_has_onchatnewmessagenotifyparam(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams& onvideosourceinitializeparam(const CallbackBody* msg);
  static void set_has_onvideosourceinitializeparam(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams& onpropertychangeparam(const CallbackBody* msg);
  static void set_has_onpropertychangeparam(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams& onrawdatastatuschangedparam(const CallbackBody* msg);
  static void set_has_onrawdatastatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams& onusermanagerchangedparam(const CallbackBody* msg);
  static void set_has_onusermanagerchangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams& onusernamechangedparam(const CallbackBody* msg);
  static void set_has_onusernamechangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams& oncommandreceivedparam(const CallbackBody* msg);
  static void set_has_oncommandreceivedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams& oncloudrecordingstatusparam(const CallbackBody* msg);
  static void set_has_oncloudrecordingstatusparam(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams& oncameracontrolrequestresultparam(const CallbackBody* msg);
  static void set_has_oncameracontrolrequestresultparam(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams& oncameracontrolrequestreceivedparam(const CallbackBody* msg);
  static void set_has_oncameracontrolrequestreceivedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams& oncommandchannelconnectresultparam(const CallbackBody* msg);
  static void set_has_oncommandchannelconnectresultparam(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams& onhostaskunmuteparam(const CallbackBody* msg);
  static void set_has_onhostaskunmuteparam(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams& oninvitebyphonestatusparam(const CallbackBody* msg);
  static void set_has_oninvitebyphonestatusparam(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams& onmulticamerastreamstatuschangedparam(const CallbackBody* msg);
  static void set_has_onmulticamerastreamstatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams& onmicspeakervolumechangedparam(const CallbackBody* msg);
  static void set_has_onmicspeakervolumechangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams& onaudiodevicestatuschangedparam(const CallbackBody* msg);
  static void set_has_onaudiodevicestatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams& ontestmicstatuschangedparam(const CallbackBody* msg);
  static void set_has_ontestmicstatuschangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams& onselectedaudiodevicechangedparam(const CallbackBody* msg);
  static void set_has_onselectedaudiodevicechangedparam(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams& onlivetranscriptionstatusparam(const CallbackBody* msg);
  static void set_has_onlivetranscriptionstatusparam(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams& onlivetranscriptionmsgerrorparam(const CallbackBody* msg);
  static void set_has_onlivetranscriptionmsgerrorparam(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams& onchatmsgdeletenotificationparam(const CallbackBody* msg);
  static void set_has_onchatmsgdeletenotificationparam(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams& livetranscriptionmsginfoparam(const CallbackBody* msg);
  static void set_has_livetranscriptionmsginfoparam(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams& oncalloutjoinsuccessparam(const CallbackBody* msg);
  static void set_has_oncalloutjoinsuccessparam(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams& onsessionleaveparam(const CallbackBody* msg);
  static void set_has_onsessionleaveparam(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams& onsharecursordatareceivedparam(const CallbackBody* msg);
  static void set_has_onsharecursordatareceivedparam(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams& onremotecontrolstatusparam(const CallbackBody* msg);
  static void set_has_onremotecontrolstatusparam(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams& onremotecontrolrequestreceivedparam(const CallbackBody* msg);
  static void set_has_onremotecontrolrequestreceivedparam(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams& onremotecontrolserviceinstallresultparam(const CallbackBody* msg);
  static void set_has_onremotecontrolserviceinstallresultparam(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams& onspotlightvideochangedparam(const CallbackBody* msg);
  static void set_has_onspotlightvideochangedparam(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams& onbindincominglivestreamresponseparam(const CallbackBody* msg);
  static void set_has_onbindincominglivestreamresponseparam(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams& onunbindincominglivestreamresponseparam(const CallbackBody* msg);
  static void set_has_onunbindincominglivestreamresponseparam(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams& onincominglivestreamstatusresponseparam(const CallbackBody* msg);
  static void set_has_onincominglivestreamstatusresponseparam(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams& onstartincominglivestreamresponseparam(const CallbackBody* msg);
  static void set_has_onstartincominglivestreamresponseparam(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams& onstopincominglivestreamresponseparam(const CallbackBody* msg);
  static void set_has_onstopincominglivestreamresponseparam(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams& onfailedtostartshareparam(const CallbackBody* msg);
  static void set_has_onfailedtostartshareparam(HasBits* has_bits) {
    (*has_bits)[1] |= 2048u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams&
CallbackBody::_Internal::onerrorparam(const CallbackBody* msg) {
  return *msg->_impl_.onerrorparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams&
CallbackBody::_Internal::onuserjoinparam(const CallbackBody* msg) {
  return *msg->_impl_.onuserjoinparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams&
CallbackBody::_Internal::onuserleaveparam(const CallbackBody* msg) {
  return *msg->_impl_.onuserleaveparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams&
CallbackBody::_Internal::onuservideostatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onuservideostatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams&
CallbackBody::_Internal::onuseraudiostatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onuseraudiostatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams&
CallbackBody::_Internal::onusersharestatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onusersharestatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams&
CallbackBody::_Internal::onlivestreamstatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onlivestreamstatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams&
CallbackBody::_Internal::onuserhostchangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onuserhostchangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams&
CallbackBody::_Internal::onuseractiveaudiochangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onuseractiveaudiochangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams&
CallbackBody::_Internal::onchatnewmessagenotifyparam(const CallbackBody* msg) {
  return *msg->_impl_.onchatnewmessagenotifyparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams&
CallbackBody::_Internal::onvideosourceinitializeparam(const CallbackBody* msg) {
  return *msg->_impl_.onvideosourceinitializeparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams&
CallbackBody::_Internal::onpropertychangeparam(const CallbackBody* msg) {
  return *msg->_impl_.onpropertychangeparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams&
CallbackBody::_Internal::onrawdatastatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onrawdatastatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams&
CallbackBody::_Internal::onusermanagerchangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onusermanagerchangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams&
CallbackBody::_Internal::onusernamechangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onusernamechangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams&
CallbackBody::_Internal::oncommandreceivedparam(const CallbackBody* msg) {
  return *msg->_impl_.oncommandreceivedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams&
CallbackBody::_Internal::oncloudrecordingstatusparam(const CallbackBody* msg) {
  return *msg->_impl_.oncloudrecordingstatusparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams&
CallbackBody::_Internal::oncameracontrolrequestresultparam(const CallbackBody* msg) {
  return *msg->_impl_.oncameracontrolrequestresultparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams&
CallbackBody::_Internal::oncameracontrolrequestreceivedparam(const CallbackBody* msg) {
  return *msg->_impl_.oncameracontrolrequestreceivedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams&
CallbackBody::_Internal::oncommandchannelconnectresultparam(const CallbackBody* msg) {
  return *msg->_impl_.oncommandchannelconnectresultparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams&
CallbackBody::_Internal::onhostaskunmuteparam(const CallbackBody* msg) {
  return *msg->_impl_.onhostaskunmuteparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams&
CallbackBody::_Internal::oninvitebyphonestatusparam(const CallbackBody* msg) {
  return *msg->_impl_.oninvitebyphonestatusparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams&
CallbackBody::_Internal::onmulticamerastreamstatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onmulticamerastreamstatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams&
CallbackBody::_Internal::onmicspeakervolumechangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onmicspeakervolumechangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams&
CallbackBody::_Internal::onaudiodevicestatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onaudiodevicestatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams&
CallbackBody::_Internal::ontestmicstatuschangedparam(const CallbackBody* msg) {
  return *msg->_impl_.ontestmicstatuschangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams&
CallbackBody::_Internal::onselectedaudiodevicechangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onselectedaudiodevicechangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams&
CallbackBody::_Internal::onlivetranscriptionstatusparam(const CallbackBody* msg) {
  return *msg->_impl_.onlivetranscriptionstatusparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams&
CallbackBody::_Internal::onlivetranscriptionmsgerrorparam(const CallbackBody* msg) {
  return *msg->_impl_.onlivetranscriptionmsgerrorparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams&
CallbackBody::_Internal::onchatmsgdeletenotificationparam(const CallbackBody* msg) {
  return *msg->_impl_.onchatmsgdeletenotificationparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams&
CallbackBody::_Internal::livetranscriptionmsginfoparam(const CallbackBody* msg) {
  return *msg->_impl_.livetranscriptionmsginfoparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams&
CallbackBody::_Internal::oncalloutjoinsuccessparam(const CallbackBody* msg) {
  return *msg->_impl_.oncalloutjoinsuccessparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams&
CallbackBody::_Internal::onsessionleaveparam(const CallbackBody* msg) {
  return *msg->_impl_.onsessionleaveparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams&
CallbackBody::_Internal::onsharecursordatareceivedparam(const CallbackBody* msg) {
  return *msg->_impl_.onsharecursordatareceivedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams&
CallbackBody::_Internal::onremotecontrolstatusparam(const CallbackBody* msg) {
  return *msg->_impl_.onremotecontrolstatusparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams&
CallbackBody::_Internal::onremotecontrolrequestreceivedparam(const CallbackBody* msg) {
  return *msg->_impl_.onremotecontrolrequestreceivedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams&
CallbackBody::_Internal::onremotecontrolserviceinstallresultparam(const CallbackBody* msg) {
  return *msg->_impl_.onremotecontrolserviceinstallresultparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams&
CallbackBody::_Internal::onspotlightvideochangedparam(const CallbackBody* msg) {
  return *msg->_impl_.onspotlightvideochangedparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams&
CallbackBody::_Internal::onbindincominglivestreamresponseparam(const CallbackBody* msg) {
  return *msg->_impl_.onbindincominglivestreamresponseparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams&
CallbackBody::_Internal::onunbindincominglivestreamresponseparam(const CallbackBody* msg) {
  return *msg->_impl_.onunbindincominglivestreamresponseparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams&
CallbackBody::_Internal::onincominglivestreamstatusresponseparam(const CallbackBody* msg) {
  return *msg->_impl_.onincominglivestreamstatusresponseparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams&
CallbackBody::_Internal::onstartincominglivestreamresponseparam(const CallbackBody* msg) {
  return *msg->_impl_.onstartincominglivestreamresponseparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams&
CallbackBody::_Internal::onstopincominglivestreamresponseparam(const CallbackBody* msg) {
  return *msg->_impl_.onstopincominglivestreamresponseparam_;
}
const ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams&
CallbackBody::_Internal::onfailedtostartshareparam(const CallbackBody* msg) {
  return *msg->_impl_.onfailedtostartshareparam_;
}
CallbackBody::CallbackBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody)
}
CallbackBody::CallbackBody(const CallbackBody& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CallbackBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.onerrorparam_){nullptr}
    , decltype(_impl_.onuserjoinparam_){nullptr}
    , decltype(_impl_.onuserleaveparam_){nullptr}
    , decltype(_impl_.onuservideostatuschangedparam_){nullptr}
    , decltype(_impl_.onuseraudiostatuschangedparam_){nullptr}
    , decltype(_impl_.onusersharestatuschangedparam_){nullptr}
    , decltype(_impl_.onlivestreamstatuschangedparam_){nullptr}
    , decltype(_impl_.onuserhostchangedparam_){nullptr}
    , decltype(_impl_.onuseractiveaudiochangedparam_){nullptr}
    , decltype(_impl_.onchatnewmessagenotifyparam_){nullptr}
    , decltype(_impl_.onvideosourceinitializeparam_){nullptr}
    , decltype(_impl_.onpropertychangeparam_){nullptr}
    , decltype(_impl_.onrawdatastatuschangedparam_){nullptr}
    , decltype(_impl_.onusermanagerchangedparam_){nullptr}
    , decltype(_impl_.onusernamechangedparam_){nullptr}
    , decltype(_impl_.oncommandreceivedparam_){nullptr}
    , decltype(_impl_.oncloudrecordingstatusparam_){nullptr}
    , decltype(_impl_.oncameracontrolrequestresultparam_){nullptr}
    , decltype(_impl_.oncameracontrolrequestreceivedparam_){nullptr}
    , decltype(_impl_.oncommandchannelconnectresultparam_){nullptr}
    , decltype(_impl_.onhostaskunmuteparam_){nullptr}
    , decltype(_impl_.oninvitebyphonestatusparam_){nullptr}
    , decltype(_impl_.onmulticamerastreamstatuschangedparam_){nullptr}
    , decltype(_impl_.onmicspeakervolumechangedparam_){nullptr}
    , decltype(_impl_.onaudiodevicestatuschangedparam_){nullptr}
    , decltype(_impl_.ontestmicstatuschangedparam_){nullptr}
    , decltype(_impl_.onselectedaudiodevicechangedparam_){nullptr}
    , decltype(_impl_.onlivetranscriptionstatusparam_){nullptr}
    , decltype(_impl_.onlivetranscriptionmsgerrorparam_){nullptr}
    , decltype(_impl_.onchatmsgdeletenotificationparam_){nullptr}
    , decltype(_impl_.livetranscriptionmsginfoparam_){nullptr}
    , decltype(_impl_.oncalloutjoinsuccessparam_){nullptr}
    , decltype(_impl_.onsessionleaveparam_){nullptr}
    , decltype(_impl_.onsharecursordatareceivedparam_){nullptr}
    , decltype(_impl_.onremotecontrolstatusparam_){nullptr}
    , decltype(_impl_.onremotecontrolrequestreceivedparam_){nullptr}
    , decltype(_impl_.onremotecontrolserviceinstallresultparam_){nullptr}
    , decltype(_impl_.onspotlightvideochangedparam_){nullptr}
    , decltype(_impl_.onbindincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onunbindincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onincominglivestreamstatusresponseparam_){nullptr}
    , decltype(_impl_.onstartincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onstopincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onfailedtostartshareparam_){nullptr}
    , decltype(_impl_.msgtype_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.onerrorparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams(*from._impl_.onerrorparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.onuserjoinparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams(*from._impl_.onuserjoinparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.onuserleaveparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams(*from._impl_.onuserleaveparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.onuservideostatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams(*from._impl_.onuservideostatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.onuseraudiostatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams(*from._impl_.onuseraudiostatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.onusersharestatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams(*from._impl_.onusersharestatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.onlivestreamstatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams(*from._impl_.onlivestreamstatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.onuserhostchangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams(*from._impl_.onuserhostchangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.onuseractiveaudiochangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams(*from._impl_.onuseractiveaudiochangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000200u) != 0) {
    _this->_impl_.onchatnewmessagenotifyparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams(*from._impl_.onchatnewmessagenotifyparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000400u) != 0) {
    _this->_impl_.onvideosourceinitializeparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams(*from._impl_.onvideosourceinitializeparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000800u) != 0) {
    _this->_impl_.onpropertychangeparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams(*from._impl_.onpropertychangeparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00001000u) != 0) {
    _this->_impl_.onrawdatastatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams(*from._impl_.onrawdatastatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00002000u) != 0) {
    _this->_impl_.onusermanagerchangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams(*from._impl_.onusermanagerchangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00004000u) != 0) {
    _this->_impl_.onusernamechangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams(*from._impl_.onusernamechangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00008000u) != 0) {
    _this->_impl_.oncommandreceivedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams(*from._impl_.oncommandreceivedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00010000u) != 0) {
    _this->_impl_.oncloudrecordingstatusparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams(*from._impl_.oncloudrecordingstatusparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00020000u) != 0) {
    _this->_impl_.oncameracontrolrequestresultparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams(*from._impl_.oncameracontrolrequestresultparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00040000u) != 0) {
    _this->_impl_.oncameracontrolrequestreceivedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams(*from._impl_.oncameracontrolrequestreceivedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00080000u) != 0) {
    _this->_impl_.oncommandchannelconnectresultparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams(*from._impl_.oncommandchannelconnectresultparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00100000u) != 0) {
    _this->_impl_.onhostaskunmuteparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams(*from._impl_.onhostaskunmuteparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00200000u) != 0) {
    _this->_impl_.oninvitebyphonestatusparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams(*from._impl_.oninvitebyphonestatusparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00400000u) != 0) {
    _this->_impl_.onmulticamerastreamstatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams(*from._impl_.onmulticamerastreamstatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x00800000u) != 0) {
    _this->_impl_.onmicspeakervolumechangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams(*from._impl_.onmicspeakervolumechangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x01000000u) != 0) {
    _this->_impl_.onaudiodevicestatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams(*from._impl_.onaudiodevicestatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x02000000u) != 0) {
    _this->_impl_.ontestmicstatuschangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams(*from._impl_.ontestmicstatuschangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x04000000u) != 0) {
    _this->_impl_.onselectedaudiodevicechangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams(*from._impl_.onselectedaudiodevicechangedparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x08000000u) != 0) {
    _this->_impl_.onlivetranscriptionstatusparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams(*from._impl_.onlivetranscriptionstatusparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x10000000u) != 0) {
    _this->_impl_.onlivetranscriptionmsgerrorparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams(*from._impl_.onlivetranscriptionmsgerrorparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x20000000u) != 0) {
    _this->_impl_.onchatmsgdeletenotificationparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams(*from._impl_.onchatmsgdeletenotificationparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x40000000u) != 0) {
    _this->_impl_.livetranscriptionmsginfoparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams(*from._impl_.livetranscriptionmsginfoparam_);
  }
  if ((from._impl_._has_bits_[0] & 0x80000000u) != 0) {
    _this->_impl_.oncalloutjoinsuccessparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams(*from._impl_.oncalloutjoinsuccessparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000001u) != 0) {
    _this->_impl_.onsessionleaveparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams(*from._impl_.onsessionleaveparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000002u) != 0) {
    _this->_impl_.onsharecursordatareceivedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams(*from._impl_.onsharecursordatareceivedparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000004u) != 0) {
    _this->_impl_.onremotecontrolstatusparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams(*from._impl_.onremotecontrolstatusparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000008u) != 0) {
    _this->_impl_.onremotecontrolrequestreceivedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams(*from._impl_.onremotecontrolrequestreceivedparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000010u) != 0) {
    _this->_impl_.onremotecontrolserviceinstallresultparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams(*from._impl_.onremotecontrolserviceinstallresultparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000020u) != 0) {
    _this->_impl_.onspotlightvideochangedparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams(*from._impl_.onspotlightvideochangedparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000040u) != 0) {
    _this->_impl_.onbindincominglivestreamresponseparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams(*from._impl_.onbindincominglivestreamresponseparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000080u) != 0) {
    _this->_impl_.onunbindincominglivestreamresponseparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams(*from._impl_.onunbindincominglivestreamresponseparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000100u) != 0) {
    _this->_impl_.onincominglivestreamstatusresponseparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams(*from._impl_.onincominglivestreamstatusresponseparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000200u) != 0) {
    _this->_impl_.onstartincominglivestreamresponseparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams(*from._impl_.onstartincominglivestreamresponseparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000400u) != 0) {
    _this->_impl_.onstopincominglivestreamresponseparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams(*from._impl_.onstopincominglivestreamresponseparam_);
  }
  if ((from._impl_._has_bits_[1] & 0x00000800u) != 0) {
    _this->_impl_.onfailedtostartshareparam_ = new ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams(*from._impl_.onfailedtostartshareparam_);
  }
  _this->_impl_.msgtype_ = from._impl_.msgtype_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CallbackBody)
}

inline void CallbackBody::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.onerrorparam_){nullptr}
    , decltype(_impl_.onuserjoinparam_){nullptr}
    , decltype(_impl_.onuserleaveparam_){nullptr}
    , decltype(_impl_.onuservideostatuschangedparam_){nullptr}
    , decltype(_impl_.onuseraudiostatuschangedparam_){nullptr}
    , decltype(_impl_.onusersharestatuschangedparam_){nullptr}
    , decltype(_impl_.onlivestreamstatuschangedparam_){nullptr}
    , decltype(_impl_.onuserhostchangedparam_){nullptr}
    , decltype(_impl_.onuseractiveaudiochangedparam_){nullptr}
    , decltype(_impl_.onchatnewmessagenotifyparam_){nullptr}
    , decltype(_impl_.onvideosourceinitializeparam_){nullptr}
    , decltype(_impl_.onpropertychangeparam_){nullptr}
    , decltype(_impl_.onrawdatastatuschangedparam_){nullptr}
    , decltype(_impl_.onusermanagerchangedparam_){nullptr}
    , decltype(_impl_.onusernamechangedparam_){nullptr}
    , decltype(_impl_.oncommandreceivedparam_){nullptr}
    , decltype(_impl_.oncloudrecordingstatusparam_){nullptr}
    , decltype(_impl_.oncameracontrolrequestresultparam_){nullptr}
    , decltype(_impl_.oncameracontrolrequestreceivedparam_){nullptr}
    , decltype(_impl_.oncommandchannelconnectresultparam_){nullptr}
    , decltype(_impl_.onhostaskunmuteparam_){nullptr}
    , decltype(_impl_.oninvitebyphonestatusparam_){nullptr}
    , decltype(_impl_.onmulticamerastreamstatuschangedparam_){nullptr}
    , decltype(_impl_.onmicspeakervolumechangedparam_){nullptr}
    , decltype(_impl_.onaudiodevicestatuschangedparam_){nullptr}
    , decltype(_impl_.ontestmicstatuschangedparam_){nullptr}
    , decltype(_impl_.onselectedaudiodevicechangedparam_){nullptr}
    , decltype(_impl_.onlivetranscriptionstatusparam_){nullptr}
    , decltype(_impl_.onlivetranscriptionmsgerrorparam_){nullptr}
    , decltype(_impl_.onchatmsgdeletenotificationparam_){nullptr}
    , decltype(_impl_.livetranscriptionmsginfoparam_){nullptr}
    , decltype(_impl_.oncalloutjoinsuccessparam_){nullptr}
    , decltype(_impl_.onsessionleaveparam_){nullptr}
    , decltype(_impl_.onsharecursordatareceivedparam_){nullptr}
    , decltype(_impl_.onremotecontrolstatusparam_){nullptr}
    , decltype(_impl_.onremotecontrolrequestreceivedparam_){nullptr}
    , decltype(_impl_.onremotecontrolserviceinstallresultparam_){nullptr}
    , decltype(_impl_.onspotlightvideochangedparam_){nullptr}
    , decltype(_impl_.onbindincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onunbindincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onincominglivestreamstatusresponseparam_){nullptr}
    , decltype(_impl_.onstartincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onstopincominglivestreamresponseparam_){nullptr}
    , decltype(_impl_.onfailedtostartshareparam_){nullptr}
    , decltype(_impl_.msgtype_) { 0 }

  };
}

CallbackBody::~CallbackBody() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CallbackBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CallbackBody::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.onerrorparam_;
  if (this != internal_default_instance()) delete _impl_.onuserjoinparam_;
  if (this != internal_default_instance()) delete _impl_.onuserleaveparam_;
  if (this != internal_default_instance()) delete _impl_.onuservideostatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onuseraudiostatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onusersharestatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onlivestreamstatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onuserhostchangedparam_;
  if (this != internal_default_instance()) delete _impl_.onuseractiveaudiochangedparam_;
  if (this != internal_default_instance()) delete _impl_.onchatnewmessagenotifyparam_;
  if (this != internal_default_instance()) delete _impl_.onvideosourceinitializeparam_;
  if (this != internal_default_instance()) delete _impl_.onpropertychangeparam_;
  if (this != internal_default_instance()) delete _impl_.onrawdatastatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onusermanagerchangedparam_;
  if (this != internal_default_instance()) delete _impl_.onusernamechangedparam_;
  if (this != internal_default_instance()) delete _impl_.oncommandreceivedparam_;
  if (this != internal_default_instance()) delete _impl_.oncloudrecordingstatusparam_;
  if (this != internal_default_instance()) delete _impl_.oncameracontrolrequestresultparam_;
  if (this != internal_default_instance()) delete _impl_.oncameracontrolrequestreceivedparam_;
  if (this != internal_default_instance()) delete _impl_.oncommandchannelconnectresultparam_;
  if (this != internal_default_instance()) delete _impl_.onhostaskunmuteparam_;
  if (this != internal_default_instance()) delete _impl_.oninvitebyphonestatusparam_;
  if (this != internal_default_instance()) delete _impl_.onmulticamerastreamstatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onmicspeakervolumechangedparam_;
  if (this != internal_default_instance()) delete _impl_.onaudiodevicestatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.ontestmicstatuschangedparam_;
  if (this != internal_default_instance()) delete _impl_.onselectedaudiodevicechangedparam_;
  if (this != internal_default_instance()) delete _impl_.onlivetranscriptionstatusparam_;
  if (this != internal_default_instance()) delete _impl_.onlivetranscriptionmsgerrorparam_;
  if (this != internal_default_instance()) delete _impl_.onchatmsgdeletenotificationparam_;
  if (this != internal_default_instance()) delete _impl_.livetranscriptionmsginfoparam_;
  if (this != internal_default_instance()) delete _impl_.oncalloutjoinsuccessparam_;
  if (this != internal_default_instance()) delete _impl_.onsessionleaveparam_;
  if (this != internal_default_instance()) delete _impl_.onsharecursordatareceivedparam_;
  if (this != internal_default_instance()) delete _impl_.onremotecontrolstatusparam_;
  if (this != internal_default_instance()) delete _impl_.onremotecontrolrequestreceivedparam_;
  if (this != internal_default_instance()) delete _impl_.onremotecontrolserviceinstallresultparam_;
  if (this != internal_default_instance()) delete _impl_.onspotlightvideochangedparam_;
  if (this != internal_default_instance()) delete _impl_.onbindincominglivestreamresponseparam_;
  if (this != internal_default_instance()) delete _impl_.onunbindincominglivestreamresponseparam_;
  if (this != internal_default_instance()) delete _impl_.onincominglivestreamstatusresponseparam_;
  if (this != internal_default_instance()) delete _impl_.onstartincominglivestreamresponseparam_;
  if (this != internal_default_instance()) delete _impl_.onstopincominglivestreamresponseparam_;
  if (this != internal_default_instance()) delete _impl_.onfailedtostartshareparam_;
}

void CallbackBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CallbackBody::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CallbackBody)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.onerrorparam_ != nullptr);
      _impl_.onerrorparam_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.onuserjoinparam_ != nullptr);
      _impl_.onuserjoinparam_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.onuserleaveparam_ != nullptr);
      _impl_.onuserleaveparam_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.onuservideostatuschangedparam_ != nullptr);
      _impl_.onuservideostatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.onuseraudiostatuschangedparam_ != nullptr);
      _impl_.onuseraudiostatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.onusersharestatuschangedparam_ != nullptr);
      _impl_.onusersharestatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.onlivestreamstatuschangedparam_ != nullptr);
      _impl_.onlivestreamstatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.onuserhostchangedparam_ != nullptr);
      _impl_.onuserhostchangedparam_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.onuseractiveaudiochangedparam_ != nullptr);
      _impl_.onuseractiveaudiochangedparam_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.onchatnewmessagenotifyparam_ != nullptr);
      _impl_.onchatnewmessagenotifyparam_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.onvideosourceinitializeparam_ != nullptr);
      _impl_.onvideosourceinitializeparam_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.onpropertychangeparam_ != nullptr);
      _impl_.onpropertychangeparam_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.onrawdatastatuschangedparam_ != nullptr);
      _impl_.onrawdatastatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.onusermanagerchangedparam_ != nullptr);
      _impl_.onusermanagerchangedparam_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.onusernamechangedparam_ != nullptr);
      _impl_.onusernamechangedparam_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.oncommandreceivedparam_ != nullptr);
      _impl_.oncommandreceivedparam_->Clear();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(_impl_.oncloudrecordingstatusparam_ != nullptr);
      _impl_.oncloudrecordingstatusparam_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(_impl_.oncameracontrolrequestresultparam_ != nullptr);
      _impl_.oncameracontrolrequestresultparam_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(_impl_.oncameracontrolrequestreceivedparam_ != nullptr);
      _impl_.oncameracontrolrequestreceivedparam_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      ABSL_DCHECK(_impl_.oncommandchannelconnectresultparam_ != nullptr);
      _impl_.oncommandchannelconnectresultparam_->Clear();
    }
    if (cached_has_bits & 0x00100000u) {
      ABSL_DCHECK(_impl_.onhostaskunmuteparam_ != nullptr);
      _impl_.onhostaskunmuteparam_->Clear();
    }
    if (cached_has_bits & 0x00200000u) {
      ABSL_DCHECK(_impl_.oninvitebyphonestatusparam_ != nullptr);
      _impl_.oninvitebyphonestatusparam_->Clear();
    }
    if (cached_has_bits & 0x00400000u) {
      ABSL_DCHECK(_impl_.onmulticamerastreamstatuschangedparam_ != nullptr);
      _impl_.onmulticamerastreamstatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x00800000u) {
      ABSL_DCHECK(_impl_.onmicspeakervolumechangedparam_ != nullptr);
      _impl_.onmicspeakervolumechangedparam_->Clear();
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      ABSL_DCHECK(_impl_.onaudiodevicestatuschangedparam_ != nullptr);
      _impl_.onaudiodevicestatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x02000000u) {
      ABSL_DCHECK(_impl_.ontestmicstatuschangedparam_ != nullptr);
      _impl_.ontestmicstatuschangedparam_->Clear();
    }
    if (cached_has_bits & 0x04000000u) {
      ABSL_DCHECK(_impl_.onselectedaudiodevicechangedparam_ != nullptr);
      _impl_.onselectedaudiodevicechangedparam_->Clear();
    }
    if (cached_has_bits & 0x08000000u) {
      ABSL_DCHECK(_impl_.onlivetranscriptionstatusparam_ != nullptr);
      _impl_.onlivetranscriptionstatusparam_->Clear();
    }
    if (cached_has_bits & 0x10000000u) {
      ABSL_DCHECK(_impl_.onlivetranscriptionmsgerrorparam_ != nullptr);
      _impl_.onlivetranscriptionmsgerrorparam_->Clear();
    }
    if (cached_has_bits & 0x20000000u) {
      ABSL_DCHECK(_impl_.onchatmsgdeletenotificationparam_ != nullptr);
      _impl_.onchatmsgdeletenotificationparam_->Clear();
    }
    if (cached_has_bits & 0x40000000u) {
      ABSL_DCHECK(_impl_.livetranscriptionmsginfoparam_ != nullptr);
      _impl_.livetranscriptionmsginfoparam_->Clear();
    }
    if (cached_has_bits & 0x80000000u) {
      ABSL_DCHECK(_impl_.oncalloutjoinsuccessparam_ != nullptr);
      _impl_.oncalloutjoinsuccessparam_->Clear();
    }
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.onsessionleaveparam_ != nullptr);
      _impl_.onsessionleaveparam_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.onsharecursordatareceivedparam_ != nullptr);
      _impl_.onsharecursordatareceivedparam_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.onremotecontrolstatusparam_ != nullptr);
      _impl_.onremotecontrolstatusparam_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.onremotecontrolrequestreceivedparam_ != nullptr);
      _impl_.onremotecontrolrequestreceivedparam_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.onremotecontrolserviceinstallresultparam_ != nullptr);
      _impl_.onremotecontrolserviceinstallresultparam_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.onspotlightvideochangedparam_ != nullptr);
      _impl_.onspotlightvideochangedparam_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.onbindincominglivestreamresponseparam_ != nullptr);
      _impl_.onbindincominglivestreamresponseparam_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.onunbindincominglivestreamresponseparam_ != nullptr);
      _impl_.onunbindincominglivestreamresponseparam_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.onincominglivestreamstatusresponseparam_ != nullptr);
      _impl_.onincominglivestreamstatusresponseparam_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.onstartincominglivestreamresponseparam_ != nullptr);
      _impl_.onstartincominglivestreamresponseparam_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.onstopincominglivestreamresponseparam_ != nullptr);
      _impl_.onstopincominglivestreamresponseparam_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.onfailedtostartshareparam_ != nullptr);
      _impl_.onfailedtostartshareparam_->Clear();
    }
  }
  _impl_.msgtype_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CallbackBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 msgtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_msgtype(&_impl_._has_bits_);
          _impl_.msgtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams onErrorParam = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_onerrorparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams onUserJoinParam = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuserjoinparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams onUserLeaveParam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuserleaveparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams onUserVideoStatusChangedParam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuservideostatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams onUserAudioStatusChangedParam = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuseraudiostatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams onUserShareStatusChangedParam = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_onusersharestatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams onLiveStreamStatusChangedParam = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_onlivestreamstatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams onUserHostChangedParam = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuserhostchangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams onUserActiveAudioChangedParam = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_onuseractiveaudiochangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams onChatNewMessageNotifyParam = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_onchatnewmessagenotifyparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams onVideoSourceInitializeParam = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_onvideosourceinitializeparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams onPropertyChangeParam = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_onpropertychangeparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams onRawDataStatusChangedParam = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_onrawdatastatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams onUserManagerChangedParam = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_onusermanagerchangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams onUserNameChangedParam = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_onusernamechangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams onCommandReceivedParam = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_oncommandreceivedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams onCloudRecordingStatusParam = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_oncloudrecordingstatusparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams onCameraControlRequestResultParam = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_oncameracontrolrequestresultparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams onCameraControlRequestReceivedParam = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_oncameracontrolrequestreceivedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams onCommandChannelConnectResultParam = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_oncommandchannelconnectresultparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams onHostAskUnmuteParam = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_onhostaskunmuteparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams onInviteByPhoneStatusParam = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_oninvitebyphonestatusparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParam = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_onmulticamerastreamstatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParam = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_onmicspeakervolumechangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParam = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_onaudiodevicestatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams onTestMicStatusChangedParam = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_ontestmicstatuschangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParam = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_onselectedaudiodevicechangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams onLiveTranscriptionStatusParam = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_onlivetranscriptionstatusparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParam = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_onlivetranscriptionmsgerrorparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParam = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_onchatmsgdeletenotificationparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParam = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_livetranscriptionmsginfoparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams onCalloutJoinSuccessParam = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_oncalloutjoinsuccessparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams onSessionLeaveParam = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_onsessionleaveparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams onShareCursorDataReceivedParam = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_onsharecursordatareceivedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams onRemoteControlStatusParam = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_onremotecontrolstatusparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParam = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_onremotecontrolrequestreceivedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParam = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_onremotecontrolserviceinstallresultparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams onSpotlightVideoChangedParam = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_onspotlightvideochangedparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParam = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_onbindincominglivestreamresponseparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParam = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_onunbindincominglivestreamresponseparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParam = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_onincominglivestreamstatusresponseparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParam = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_onstartincominglivestreamresponseparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParam = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_onstopincominglivestreamresponseparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams onFailedToStartShareParam = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_onfailedtostartshareparam(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CallbackBody::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CallbackBody)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[1];
  // optional int32 msgtype = 1;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_msgtype(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams onErrorParam = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::onerrorparam(this),
        _Internal::onerrorparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams onUserJoinParam = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::onuserjoinparam(this),
        _Internal::onuserjoinparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams onUserLeaveParam = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::onuserleaveparam(this),
        _Internal::onuserleaveparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams onUserVideoStatusChangedParam = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::onuservideostatuschangedparam(this),
        _Internal::onuservideostatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams onUserAudioStatusChangedParam = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::onuseraudiostatuschangedparam(this),
        _Internal::onuseraudiostatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams onUserShareStatusChangedParam = 7;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::onusersharestatuschangedparam(this),
        _Internal::onusersharestatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams onLiveStreamStatusChangedParam = 8;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::onlivestreamstatuschangedparam(this),
        _Internal::onlivestreamstatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams onUserHostChangedParam = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::onuserhostchangedparam(this),
        _Internal::onuserhostchangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams onUserActiveAudioChangedParam = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::onuseractiveaudiochangedparam(this),
        _Internal::onuseractiveaudiochangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams onChatNewMessageNotifyParam = 11;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::onchatnewmessagenotifyparam(this),
        _Internal::onchatnewmessagenotifyparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams onVideoSourceInitializeParam = 12;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::onvideosourceinitializeparam(this),
        _Internal::onvideosourceinitializeparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams onPropertyChangeParam = 13;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::onpropertychangeparam(this),
        _Internal::onpropertychangeparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams onRawDataStatusChangedParam = 14;
  if (cached_has_bits & 0x00001000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::onrawdatastatuschangedparam(this),
        _Internal::onrawdatastatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams onUserManagerChangedParam = 15;
  if (cached_has_bits & 0x00002000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, _Internal::onusermanagerchangedparam(this),
        _Internal::onusermanagerchangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams onUserNameChangedParam = 16;
  if (cached_has_bits & 0x00004000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, _Internal::onusernamechangedparam(this),
        _Internal::onusernamechangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams onCommandReceivedParam = 17;
  if (cached_has_bits & 0x00008000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::oncommandreceivedparam(this),
        _Internal::oncommandreceivedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams onCloudRecordingStatusParam = 18;
  if (cached_has_bits & 0x00010000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::oncloudrecordingstatusparam(this),
        _Internal::oncloudrecordingstatusparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams onCameraControlRequestResultParam = 19;
  if (cached_has_bits & 0x00020000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, _Internal::oncameracontrolrequestresultparam(this),
        _Internal::oncameracontrolrequestresultparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams onCameraControlRequestReceivedParam = 20;
  if (cached_has_bits & 0x00040000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::oncameracontrolrequestreceivedparam(this),
        _Internal::oncameracontrolrequestreceivedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams onCommandChannelConnectResultParam = 21;
  if (cached_has_bits & 0x00080000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, _Internal::oncommandchannelconnectresultparam(this),
        _Internal::oncommandchannelconnectresultparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams onHostAskUnmuteParam = 22;
  if (cached_has_bits & 0x00100000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, _Internal::onhostaskunmuteparam(this),
        _Internal::onhostaskunmuteparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams onInviteByPhoneStatusParam = 23;
  if (cached_has_bits & 0x00200000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, _Internal::oninvitebyphonestatusparam(this),
        _Internal::oninvitebyphonestatusparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParam = 24;
  if (cached_has_bits & 0x00400000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, _Internal::onmulticamerastreamstatuschangedparam(this),
        _Internal::onmulticamerastreamstatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParam = 25;
  if (cached_has_bits & 0x00800000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, _Internal::onmicspeakervolumechangedparam(this),
        _Internal::onmicspeakervolumechangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParam = 26;
  if (cached_has_bits & 0x01000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, _Internal::onaudiodevicestatuschangedparam(this),
        _Internal::onaudiodevicestatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams onTestMicStatusChangedParam = 27;
  if (cached_has_bits & 0x02000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, _Internal::ontestmicstatuschangedparam(this),
        _Internal::ontestmicstatuschangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParam = 28;
  if (cached_has_bits & 0x04000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, _Internal::onselectedaudiodevicechangedparam(this),
        _Internal::onselectedaudiodevicechangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams onLiveTranscriptionStatusParam = 29;
  if (cached_has_bits & 0x08000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, _Internal::onlivetranscriptionstatusparam(this),
        _Internal::onlivetranscriptionstatusparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParam = 31;
  if (cached_has_bits & 0x10000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::onlivetranscriptionmsgerrorparam(this),
        _Internal::onlivetranscriptionmsgerrorparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParam = 32;
  if (cached_has_bits & 0x20000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, _Internal::onchatmsgdeletenotificationparam(this),
        _Internal::onchatmsgdeletenotificationparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParam = 33;
  if (cached_has_bits & 0x40000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::livetranscriptionmsginfoparam(this),
        _Internal::livetranscriptionmsginfoparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams onCalloutJoinSuccessParam = 34;
  if (cached_has_bits & 0x80000000u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::oncalloutjoinsuccessparam(this),
        _Internal::oncalloutjoinsuccessparam(this).GetCachedSize(), target, stream);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams onSessionLeaveParam = 35;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::onsessionleaveparam(this),
        _Internal::onsessionleaveparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams onShareCursorDataReceivedParam = 36;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(36, _Internal::onsharecursordatareceivedparam(this),
        _Internal::onsharecursordatareceivedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams onRemoteControlStatusParam = 37;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(37, _Internal::onremotecontrolstatusparam(this),
        _Internal::onremotecontrolstatusparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParam = 38;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(38, _Internal::onremotecontrolrequestreceivedparam(this),
        _Internal::onremotecontrolrequestreceivedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParam = 39;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(39, _Internal::onremotecontrolserviceinstallresultparam(this),
        _Internal::onremotecontrolserviceinstallresultparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams onSpotlightVideoChangedParam = 40;
  if (cached_has_bits & 0x00000020u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(40, _Internal::onspotlightvideochangedparam(this),
        _Internal::onspotlightvideochangedparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParam = 41;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(41, _Internal::onbindincominglivestreamresponseparam(this),
        _Internal::onbindincominglivestreamresponseparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParam = 42;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(42, _Internal::onunbindincominglivestreamresponseparam(this),
        _Internal::onunbindincominglivestreamresponseparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParam = 43;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(43, _Internal::onincominglivestreamstatusresponseparam(this),
        _Internal::onincominglivestreamstatusresponseparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParam = 44;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(44, _Internal::onstartincominglivestreamresponseparam(this),
        _Internal::onstartincominglivestreamresponseparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParam = 45;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(45, _Internal::onstopincominglivestreamresponseparam(this),
        _Internal::onstopincominglivestreamresponseparam(this).GetCachedSize(), target, stream);
  }

  // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams onFailedToStartShareParam = 46;
  if (cached_has_bits & 0x00000800u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(46, _Internal::onfailedtostartshareparam(this),
        _Internal::onfailedtostartshareparam(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CallbackBody)
  return target;
}

::size_t CallbackBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CallbackBody)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams onErrorParam = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onerrorparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams onUserJoinParam = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onuserjoinparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams onUserLeaveParam = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onuserleaveparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams onUserVideoStatusChangedParam = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onuservideostatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams onUserAudioStatusChangedParam = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onuseraudiostatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams onUserShareStatusChangedParam = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onusersharestatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams onLiveStreamStatusChangedParam = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlivestreamstatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams onUserHostChangedParam = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onuserhostchangedparam_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams onUserActiveAudioChangedParam = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onuseractiveaudiochangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams onChatNewMessageNotifyParam = 11;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onchatnewmessagenotifyparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams onVideoSourceInitializeParam = 12;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onvideosourceinitializeparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams onPropertyChangeParam = 13;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onpropertychangeparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams onRawDataStatusChangedParam = 14;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onrawdatastatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams onUserManagerChangedParam = 15;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onusermanagerchangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams onUserNameChangedParam = 16;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onusernamechangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams onCommandReceivedParam = 17;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oncommandreceivedparam_);
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams onCloudRecordingStatusParam = 18;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oncloudrecordingstatusparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams onCameraControlRequestResultParam = 19;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oncameracontrolrequestresultparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams onCameraControlRequestReceivedParam = 20;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oncameracontrolrequestreceivedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams onCommandChannelConnectResultParam = 21;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oncommandchannelconnectresultparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams onHostAskUnmuteParam = 22;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onhostaskunmuteparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams onInviteByPhoneStatusParam = 23;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oninvitebyphonestatusparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParam = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onmulticamerastreamstatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParam = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onmicspeakervolumechangedparam_);
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParam = 26;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onaudiodevicestatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams onTestMicStatusChangedParam = 27;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ontestmicstatuschangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParam = 28;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onselectedaudiodevicechangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams onLiveTranscriptionStatusParam = 29;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlivetranscriptionstatusparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParam = 31;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onlivetranscriptionmsgerrorparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParam = 32;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onchatmsgdeletenotificationparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParam = 33;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.livetranscriptionmsginfoparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams onCalloutJoinSuccessParam = 34;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.oncalloutjoinsuccessparam_);
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams onSessionLeaveParam = 35;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onsessionleaveparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams onShareCursorDataReceivedParam = 36;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onsharecursordatareceivedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams onRemoteControlStatusParam = 37;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onremotecontrolstatusparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParam = 38;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onremotecontrolrequestreceivedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParam = 39;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onremotecontrolserviceinstallresultparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams onSpotlightVideoChangedParam = 40;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onspotlightvideochangedparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParam = 41;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onbindincominglivestreamresponseparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParam = 42;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onunbindincominglivestreamresponseparam_);
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParam = 43;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onincominglivestreamstatusresponseparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParam = 44;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onstartincominglivestreamresponseparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParam = 45;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onstopincominglivestreamresponseparam_);
    }

    // optional .com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams onFailedToStartShareParam = 46;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.onfailedtostartshareparam_);
    }

    // optional int32 msgtype = 1;
    if (cached_has_bits & 0x00001000u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_msgtype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CallbackBody::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CallbackBody*>(
      &from));
}

void CallbackBody::MergeFrom(const CallbackBody& from) {
  CallbackBody* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_onerrorparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams::MergeFrom(
          from._internal_onerrorparam());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_onuserjoinparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams::MergeFrom(
          from._internal_onuserjoinparam());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_onuserleaveparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams::MergeFrom(
          from._internal_onuserleaveparam());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_onuservideostatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams::MergeFrom(
          from._internal_onuservideostatuschangedparam());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_onuseraudiostatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams::MergeFrom(
          from._internal_onuseraudiostatuschangedparam());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_onusersharestatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams::MergeFrom(
          from._internal_onusersharestatuschangedparam());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_onlivestreamstatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams::MergeFrom(
          from._internal_onlivestreamstatuschangedparam());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_onuserhostchangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams::MergeFrom(
          from._internal_onuserhostchangedparam());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_onuseractiveaudiochangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams::MergeFrom(
          from._internal_onuseractiveaudiochangedparam());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_onchatnewmessagenotifyparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams::MergeFrom(
          from._internal_onchatnewmessagenotifyparam());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_onvideosourceinitializeparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams::MergeFrom(
          from._internal_onvideosourceinitializeparam());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_onpropertychangeparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams::MergeFrom(
          from._internal_onpropertychangeparam());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_internal_mutable_onrawdatastatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams::MergeFrom(
          from._internal_onrawdatastatuschangedparam());
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_internal_mutable_onusermanagerchangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams::MergeFrom(
          from._internal_onusermanagerchangedparam());
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_internal_mutable_onusernamechangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams::MergeFrom(
          from._internal_onusernamechangedparam());
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_internal_mutable_oncommandreceivedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams::MergeFrom(
          from._internal_oncommandreceivedparam());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_internal_mutable_oncloudrecordingstatusparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams::MergeFrom(
          from._internal_oncloudrecordingstatusparam());
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_internal_mutable_oncameracontrolrequestresultparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams::MergeFrom(
          from._internal_oncameracontrolrequestresultparam());
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_internal_mutable_oncameracontrolrequestreceivedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams::MergeFrom(
          from._internal_oncameracontrolrequestreceivedparam());
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_internal_mutable_oncommandchannelconnectresultparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams::MergeFrom(
          from._internal_oncommandchannelconnectresultparam());
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_internal_mutable_onhostaskunmuteparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams::MergeFrom(
          from._internal_onhostaskunmuteparam());
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_internal_mutable_oninvitebyphonestatusparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams::MergeFrom(
          from._internal_oninvitebyphonestatusparam());
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_internal_mutable_onmulticamerastreamstatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams::MergeFrom(
          from._internal_onmulticamerastreamstatuschangedparam());
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_internal_mutable_onmicspeakervolumechangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams::MergeFrom(
          from._internal_onmicspeakervolumechangedparam());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_internal_mutable_onaudiodevicestatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams::MergeFrom(
          from._internal_onaudiodevicestatuschangedparam());
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_internal_mutable_ontestmicstatuschangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams::MergeFrom(
          from._internal_ontestmicstatuschangedparam());
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_internal_mutable_onselectedaudiodevicechangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams::MergeFrom(
          from._internal_onselectedaudiodevicechangedparam());
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_internal_mutable_onlivetranscriptionstatusparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams::MergeFrom(
          from._internal_onlivetranscriptionstatusparam());
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_internal_mutable_onlivetranscriptionmsgerrorparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams::MergeFrom(
          from._internal_onlivetranscriptionmsgerrorparam());
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_internal_mutable_onchatmsgdeletenotificationparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams::MergeFrom(
          from._internal_onchatmsgdeletenotificationparam());
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_internal_mutable_livetranscriptionmsginfoparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams::MergeFrom(
          from._internal_livetranscriptionmsginfoparam());
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_internal_mutable_oncalloutjoinsuccessparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams::MergeFrom(
          from._internal_oncalloutjoinsuccessparam());
    }
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_onsessionleaveparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams::MergeFrom(
          from._internal_onsessionleaveparam());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_onsharecursordatareceivedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams::MergeFrom(
          from._internal_onsharecursordatareceivedparam());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_onremotecontrolstatusparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams::MergeFrom(
          from._internal_onremotecontrolstatusparam());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_onremotecontrolrequestreceivedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams::MergeFrom(
          from._internal_onremotecontrolrequestreceivedparam());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_onremotecontrolserviceinstallresultparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams::MergeFrom(
          from._internal_onremotecontrolserviceinstallresultparam());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_onspotlightvideochangedparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams::MergeFrom(
          from._internal_onspotlightvideochangedparam());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_onbindincominglivestreamresponseparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams::MergeFrom(
          from._internal_onbindincominglivestreamresponseparam());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_onunbindincominglivestreamresponseparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams::MergeFrom(
          from._internal_onunbindincominglivestreamresponseparam());
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_onincominglivestreamstatusresponseparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams::MergeFrom(
          from._internal_onincominglivestreamstatusresponseparam());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_onstartincominglivestreamresponseparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams::MergeFrom(
          from._internal_onstartincominglivestreamresponseparam());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_onstopincominglivestreamresponseparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams::MergeFrom(
          from._internal_onstopincominglivestreamresponseparam());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_internal_mutable_onfailedtostartshareparam()->::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams::MergeFrom(
          from._internal_onfailedtostartshareparam());
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.msgtype_ = from._impl_.msgtype_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CallbackBody::CopyFrom(const CallbackBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CallbackBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallbackBody::IsInitialized() const {
  return true;
}

void CallbackBody::InternalSwap(CallbackBody* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CallbackBody, _impl_.msgtype_)
      + sizeof(CallbackBody::_impl_.msgtype_)
      - PROTOBUF_FIELD_OFFSET(CallbackBody, _impl_.onerrorparam_)>(
          reinterpret_cast<char*>(&_impl_.onerrorparam_),
          reinterpret_cast<char*>(&other->_impl_.onerrorparam_));
}

std::string CallbackBody::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CallbackBody";
}

// ===================================================================

class CreateVideoSDKObjParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateVideoSDKObjParam>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateVideoSDKObjParam, _impl_._has_bits_);
  static void set_has_path(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateVideoSDKObjParam::CreateVideoSDKObjParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
}
CreateVideoSDKObjParam::CreateVideoSDKObjParam(const CreateVideoSDKObjParam& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CreateVideoSDKObjParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.path_.Set(from._internal_path(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
}

inline void CreateVideoSDKObjParam::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.path_) {}

  };
  _impl_.path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.path_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateVideoSDKObjParam::~CreateVideoSDKObjParam() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateVideoSDKObjParam::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.path_.Destroy();
}

void CreateVideoSDKObjParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateVideoSDKObjParam::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.path_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateVideoSDKObjParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateVideoSDKObjParam::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string path = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_path();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  return target;
}

::size_t CreateVideoSDKObjParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string path = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_path());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateVideoSDKObjParam::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CreateVideoSDKObjParam*>(
      &from));
}

void CreateVideoSDKObjParam::MergeFrom(const CreateVideoSDKObjParam& from) {
  CreateVideoSDKObjParam* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_path(from._internal_path());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CreateVideoSDKObjParam::CopyFrom(const CreateVideoSDKObjParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateVideoSDKObjParam::IsInitialized() const {
  return true;
}

void CreateVideoSDKObjParam::InternalSwap(CreateVideoSDKObjParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.path_, lhs_arena,
                                       &other->_impl_.path_, rhs_arena);
}

std::string CreateVideoSDKObjParam::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam";
}

// ===================================================================

class VideoSDKInitParams::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSDKInitParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSDKInitParams, _impl_._has_bits_);
  static void set_has_domain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_logfileprefix(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_enablelog(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_audiorawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_zn_videorawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_zn_sharerawdatamemorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_speakertestfilepath(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

VideoSDKInitParams::VideoSDKInitParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
}
VideoSDKInitParams::VideoSDKInitParams(const VideoSDKInitParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoSDKInitParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_) {}

    , decltype(_impl_.logfileprefix_) {}

    , decltype(_impl_.speakertestfilepath_) {}

    , decltype(_impl_.enablelog_) {}

    , decltype(_impl_.audiorawdatamemorymode_) {}

    , decltype(_impl_.zn_videorawdatamemorymode_) {}

    , decltype(_impl_.zn_sharerawdatamemorymode_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.domain_.Set(from._internal_domain(), _this->GetArenaForAllocation());
  }
  _impl_.logfileprefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logfileprefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.logfileprefix_.Set(from._internal_logfileprefix(), _this->GetArenaForAllocation());
  }
  _impl_.speakertestfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.speakertestfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.speakertestfilepath_.Set(from._internal_speakertestfilepath(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.enablelog_, &from._impl_.enablelog_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.zn_sharerawdatamemorymode_) -
    reinterpret_cast<char*>(&_impl_.enablelog_)) + sizeof(_impl_.zn_sharerawdatamemorymode_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
}

inline void VideoSDKInitParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.domain_) {}

    , decltype(_impl_.logfileprefix_) {}

    , decltype(_impl_.speakertestfilepath_) {}

    , decltype(_impl_.enablelog_) { false }

    , decltype(_impl_.audiorawdatamemorymode_) { 0 }

    , decltype(_impl_.zn_videorawdatamemorymode_) { 0 }

    , decltype(_impl_.zn_sharerawdatamemorymode_) { 0 }

  };
  _impl_.domain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.domain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.logfileprefix_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.logfileprefix_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.speakertestfilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.speakertestfilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoSDKInitParams::~VideoSDKInitParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKInitParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.domain_.Destroy();
  _impl_.logfileprefix_.Destroy();
  _impl_.speakertestfilepath_.Destroy();
}

void VideoSDKInitParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKInitParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.domain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.logfileprefix_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.speakertestfilepath_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000078u) {
    ::memset(&_impl_.enablelog_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zn_sharerawdatamemorymode_) -
        reinterpret_cast<char*>(&_impl_.enablelog_)) + sizeof(_impl_.zn_sharerawdatamemorymode_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKInitParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string domain = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_domain();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string logFilePrefix = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_logfileprefix();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool enableLog = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_enablelog(&has_bits);
          _impl_.enablelog_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 audioRawDataMemoryMode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_audiorawdatamemorymode(&has_bits);
          _impl_.audiorawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zn_videoRawDataMemoryMode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_zn_videorawdatamemorymode(&has_bits);
          _impl_.zn_videorawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zn_shareRawDataMemoryMode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_zn_sharerawdatamemorymode(&has_bits);
          _impl_.zn_sharerawdatamemorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string speakerTestFilePath = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_speakertestfilepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKInitParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string domain = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_domain();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string logFilePrefix = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_logfileprefix();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool enableLog = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_enablelog(), target);
  }

  // optional int32 audioRawDataMemoryMode = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_audiorawdatamemorymode(), target);
  }

  // optional int32 zn_videoRawDataMemoryMode = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        5, this->_internal_zn_videorawdatamemorymode(), target);
  }

  // optional int32 zn_shareRawDataMemoryMode = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        6, this->_internal_zn_sharerawdatamemorymode(), target);
  }

  // optional string speakerTestFilePath = 7;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_speakertestfilepath();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  return target;
}

::size_t VideoSDKInitParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string domain = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_domain());
    }

    // optional string logFilePrefix = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_logfileprefix());
    }

    // optional string speakerTestFilePath = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_speakertestfilepath());
    }

    // optional bool enableLog = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional int32 audioRawDataMemoryMode = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_audiorawdatamemorymode());
    }

    // optional int32 zn_videoRawDataMemoryMode = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_videorawdatamemorymode());
    }

    // optional int32 zn_shareRawDataMemoryMode = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_sharerawdatamemorymode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKInitParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKInitParams*>(
      &from));
}

void VideoSDKInitParams::MergeFrom(const VideoSDKInitParams& from) {
  VideoSDKInitParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_domain(from._internal_domain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_logfileprefix(from._internal_logfileprefix());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_speakertestfilepath(from._internal_speakertestfilepath());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.enablelog_ = from._impl_.enablelog_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.audiorawdatamemorymode_ = from._impl_.audiorawdatamemorymode_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.zn_videorawdatamemorymode_ = from._impl_.zn_videorawdatamemorymode_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.zn_sharerawdatamemorymode_ = from._impl_.zn_sharerawdatamemorymode_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKInitParams::CopyFrom(const VideoSDKInitParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKInitParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKInitParams::IsInitialized() const {
  return true;
}

void VideoSDKInitParams::InternalSwap(VideoSDKInitParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domain_, lhs_arena,
                                       &other->_impl_.domain_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logfileprefix_, lhs_arena,
                                       &other->_impl_.logfileprefix_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.speakertestfilepath_, lhs_arena,
                                       &other->_impl_.speakertestfilepath_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSDKInitParams, _impl_.zn_sharerawdatamemorymode_)
      + sizeof(VideoSDKInitParams::_impl_.zn_sharerawdatamemorymode_)
      - PROTOBUF_FIELD_OFFSET(VideoSDKInitParams, _impl_.enablelog_)>(
          reinterpret_cast<char*>(&_impl_.enablelog_),
          reinterpret_cast<char*>(&other->_impl_.enablelog_));
}

std::string VideoSDKInitParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKInitParams";
}

// ===================================================================

class VideoSDKSessionContext::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoSDKSessionContext>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VideoSDKSessionContext, _impl_._has_bits_);
  static void set_has_sessionname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sessionpassword(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_token(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_username(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_localvideoon(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_connect(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_mute(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_preprocessor(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_externalvideosource(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_sessionidletimeoutmins(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
};

VideoSDKSessionContext::VideoSDKSessionContext(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
}
VideoSDKSessionContext::VideoSDKSessionContext(const VideoSDKSessionContext& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VideoSDKSessionContext* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessionname_) {}

    , decltype(_impl_.sessionpassword_) {}

    , decltype(_impl_.token_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.localvideoon_) {}

    , decltype(_impl_.connect_) {}

    , decltype(_impl_.mute_) {}

    , decltype(_impl_.preprocessor_) {}

    , decltype(_impl_.externalvideosource_) {}

    , decltype(_impl_.sessionidletimeoutmins_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.sessionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sessionname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.sessionname_.Set(from._internal_sessionname(), _this->GetArenaForAllocation());
  }
  _impl_.sessionpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sessionpassword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.sessionpassword_.Set(from._internal_sessionpassword(), _this->GetArenaForAllocation());
  }
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.token_.Set(from._internal_token(), _this->GetArenaForAllocation());
  }
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.username_.Set(from._internal_username(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.localvideoon_, &from._impl_.localvideoon_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.sessionidletimeoutmins_) -
    reinterpret_cast<char*>(&_impl_.localvideoon_)) + sizeof(_impl_.sessionidletimeoutmins_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
}

inline void VideoSDKSessionContext::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.sessionname_) {}

    , decltype(_impl_.sessionpassword_) {}

    , decltype(_impl_.token_) {}

    , decltype(_impl_.username_) {}

    , decltype(_impl_.localvideoon_) { false }

    , decltype(_impl_.connect_) { false }

    , decltype(_impl_.mute_) { false }

    , decltype(_impl_.preprocessor_) { false }

    , decltype(_impl_.externalvideosource_) { false }

    , decltype(_impl_.sessionidletimeoutmins_) { 0u }

  };
  _impl_.sessionname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sessionname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.sessionpassword_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.sessionpassword_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.username_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VideoSDKSessionContext::~VideoSDKSessionContext() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VideoSDKSessionContext::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.sessionname_.Destroy();
  _impl_.sessionpassword_.Destroy();
  _impl_.token_.Destroy();
  _impl_.username_.Destroy();
}

void VideoSDKSessionContext::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VideoSDKSessionContext::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.sessionname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.sessionpassword_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.token_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.username_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&_impl_.localvideoon_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.preprocessor_) -
        reinterpret_cast<char*>(&_impl_.localvideoon_)) + sizeof(_impl_.preprocessor_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&_impl_.externalvideosource_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.sessionidletimeoutmins_) -
        reinterpret_cast<char*>(&_impl_.externalvideosource_)) + sizeof(_impl_.sessionidletimeoutmins_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VideoSDKSessionContext::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string sessionName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_sessionname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string sessionPassword = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_sessionpassword();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string userName = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool localVideoOn = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_localvideoon(&has_bits);
          _impl_.localvideoon_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool connect = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _Internal::set_has_connect(&has_bits);
          _impl_.connect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool mute = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_mute(&has_bits);
          _impl_.mute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool preProcessor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_preprocessor(&has_bits);
          _impl_.preprocessor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool externalVideoSource = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          _Internal::set_has_externalvideosource(&has_bits);
          _impl_.externalvideosource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 sessionIdleTimeoutMins = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _Internal::set_has_sessionidletimeoutmins(&has_bits);
          _impl_.sessionidletimeoutmins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VideoSDKSessionContext::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string sessionName = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_sessionname();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string sessionPassword = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_sessionpassword();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string token = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_token();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string userName = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_username();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional bool localVideoOn = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_localvideoon(), target);
  }

  // optional bool connect = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_connect(), target);
  }

  // optional bool mute = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        7, this->_internal_mute(), target);
  }

  // optional bool preProcessor = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        8, this->_internal_preprocessor(), target);
  }

  // optional bool externalVideoSource = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        9, this->_internal_externalvideosource(), target);
  }

  // optional uint32 sessionIdleTimeoutMins = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_sessionidletimeoutmins(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  return target;
}

::size_t VideoSDKSessionContext::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string sessionName = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sessionname());
    }

    // optional string sessionPassword = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_sessionpassword());
    }

    // optional string token = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_token());
    }

    // optional string userName = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_username());
    }

    // optional bool localVideoOn = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

    // optional bool connect = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2;
    }

    // optional bool mute = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2;
    }

    // optional bool preProcessor = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2;
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional bool externalVideoSource = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2;
    }

    // optional uint32 sessionIdleTimeoutMins = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_sessionidletimeoutmins());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoSDKSessionContext::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VideoSDKSessionContext*>(
      &from));
}

void VideoSDKSessionContext::MergeFrom(const VideoSDKSessionContext& from) {
  VideoSDKSessionContext* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_sessionname(from._internal_sessionname());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_sessionpassword(from._internal_sessionpassword());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_token(from._internal_token());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_username(from._internal_username());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.localvideoon_ = from._impl_.localvideoon_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.connect_ = from._impl_.connect_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.mute_ = from._impl_.mute_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.preprocessor_ = from._impl_.preprocessor_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.externalvideosource_ = from._impl_.externalvideosource_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.sessionidletimeoutmins_ = from._impl_.sessionidletimeoutmins_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VideoSDKSessionContext::CopyFrom(const VideoSDKSessionContext& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoSDKSessionContext::IsInitialized() const {
  return true;
}

void VideoSDKSessionContext::InternalSwap(VideoSDKSessionContext* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sessionname_, lhs_arena,
                                       &other->_impl_.sessionname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sessionpassword_, lhs_arena,
                                       &other->_impl_.sessionpassword_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.token_, lhs_arena,
                                       &other->_impl_.token_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.username_, lhs_arena,
                                       &other->_impl_.username_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoSDKSessionContext, _impl_.sessionidletimeoutmins_)
      + sizeof(VideoSDKSessionContext::_impl_.sessionidletimeoutmins_)
      - PROTOBUF_FIELD_OFFSET(VideoSDKSessionContext, _impl_.localvideoon_)>(
          reinterpret_cast<char*>(&_impl_.localvideoon_),
          reinterpret_cast<char*>(&other->_impl_.localvideoon_));
}

std::string VideoSDKSessionContext::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext";
}

// ===================================================================

class LeaveSessionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LeaveSessionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LeaveSessionParams, _impl_._has_bits_);
  static void set_has_zn_bend(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LeaveSessionParams::LeaveSessionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
}
LeaveSessionParams::LeaveSessionParams(const LeaveSessionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
}

inline void LeaveSessionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_bend_) { false }

  };
}

LeaveSessionParams::~LeaveSessionParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LeaveSessionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LeaveSessionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LeaveSessionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_bend_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LeaveSessionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool zn_bEnd = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_bend(&has_bits);
          _impl_.zn_bend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LeaveSessionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool zn_bEnd = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_zn_bend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  return target;
}

::size_t LeaveSessionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool zn_bEnd = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaveSessionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LeaveSessionParams*>(
      &from));
}

void LeaveSessionParams::MergeFrom(const LeaveSessionParams& from) {
  LeaveSessionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_bend(from._internal_zn_bend());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LeaveSessionParams::CopyFrom(const LeaveSessionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LeaveSessionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveSessionParams::IsInitialized() const {
  return true;
}

void LeaveSessionParams::InternalSwap(LeaveSessionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_bend_, other->_impl_.zn_bend_);
}

std::string LeaveSessionParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LeaveSessionParams";
}

// ===================================================================

class SessionPasswordParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SessionPasswordParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SessionPasswordParams, _impl_._has_bits_);
  static void set_has_zn_password(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SessionPasswordParams::SessionPasswordParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
}
SessionPasswordParams::SessionPasswordParams(const SessionPasswordParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SessionPasswordParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_password_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_password_.Set(from._internal_zn_password(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
}

inline void SessionPasswordParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_password_) {}

  };
  _impl_.zn_password_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_password_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionPasswordParams::~SessionPasswordParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionPasswordParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_password_.Destroy();
}

void SessionPasswordParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionPasswordParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.zn_password_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SessionPasswordParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_password = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_password();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SessionPasswordParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_password = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_password();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  return target;
}

::size_t SessionPasswordParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string zn_password = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_zn_password());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SessionPasswordParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SessionPasswordParams*>(
      &from));
}

void SessionPasswordParams::MergeFrom(const SessionPasswordParams& from) {
  SessionPasswordParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_password(from._internal_zn_password());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SessionPasswordParams::CopyFrom(const SessionPasswordParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SessionPasswordParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionPasswordParams::IsInitialized() const {
  return true;
}

void SessionPasswordParams::InternalSwap(SessionPasswordParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_password_, lhs_arena,
                                       &other->_impl_.zn_password_, rhs_arena);
}

std::string SessionPasswordParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SessionPasswordParams";
}

// ===================================================================

class MuteAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MuteAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MuteAudioParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const MuteAudioParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
MuteAudioParams::_Internal::user(const MuteAudioParams* msg) {
  return *msg->_impl_.user_;
}
MuteAudioParams::MuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
}
MuteAudioParams::MuteAudioParams(const MuteAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MuteAudioParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
}

inline void MuteAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

MuteAudioParams::~MuteAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MuteAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void MuteAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MuteAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MuteAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MuteAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  return target;
}

::size_t MuteAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MuteAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MuteAudioParams*>(
      &from));
}

void MuteAudioParams::MergeFrom(const MuteAudioParams& from) {
  MuteAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MuteAudioParams::CopyFrom(const MuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.MuteAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MuteAudioParams::IsInitialized() const {
  return true;
}

void MuteAudioParams::InternalSwap(MuteAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string MuteAudioParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.MuteAudioParams";
}

// ===================================================================

class UnMuteAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnMuteAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnMuteAudioParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const UnMuteAudioParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
UnMuteAudioParams::_Internal::user(const UnMuteAudioParams* msg) {
  return *msg->_impl_.user_;
}
UnMuteAudioParams::UnMuteAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
}
UnMuteAudioParams::UnMuteAudioParams(const UnMuteAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UnMuteAudioParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
}

inline void UnMuteAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

UnMuteAudioParams::~UnMuteAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnMuteAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UnMuteAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnMuteAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnMuteAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnMuteAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  return target;
}

::size_t UnMuteAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnMuteAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnMuteAudioParams*>(
      &from));
}

void UnMuteAudioParams::MergeFrom(const UnMuteAudioParams& from) {
  UnMuteAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnMuteAudioParams::CopyFrom(const UnMuteAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.UnMuteAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnMuteAudioParams::IsInitialized() const {
  return true;
}

void UnMuteAudioParams::InternalSwap(UnMuteAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string UnMuteAudioParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.UnMuteAudioParams";
}

// ===================================================================

class SetSpeakerParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSpeakerParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetSpeakerParams, _impl_._has_bits_);
  static void set_has_zn_speaker(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSpeakerParams::SetSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
}
SetSpeakerParams::SetSpeakerParams(const SetSpeakerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
}

inline void SetSpeakerParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_speaker_) { false }

  };
}

SetSpeakerParams::~SetSpeakerParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSpeakerParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSpeakerParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSpeakerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_speaker_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSpeakerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool zn_speaker = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_speaker(&has_bits);
          _impl_.zn_speaker_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetSpeakerParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool zn_speaker = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_zn_speaker(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  return target;
}

::size_t SetSpeakerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool zn_speaker = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpeakerParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetSpeakerParams*>(
      &from));
}

void SetSpeakerParams::MergeFrom(const SetSpeakerParams& from) {
  SetSpeakerParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_speaker(from._internal_zn_speaker());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetSpeakerParams::CopyFrom(const SetSpeakerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetSpeakerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpeakerParams::IsInitialized() const {
  return true;
}

void SetSpeakerParams::InternalSwap(SetSpeakerParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_speaker_, other->_impl_.zn_speaker_);
}

std::string SetSpeakerParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetSpeakerParams";
}

// ===================================================================

class SelectSpeakerParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectSpeakerParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelectSpeakerParams, _impl_._has_bits_);
  static void set_has_zn_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zn_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelectSpeakerParams::SelectSpeakerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
}
SelectSpeakerParams::SelectSpeakerParams(const SelectSpeakerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectSpeakerParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_deviceid_) {}

    , decltype(_impl_.zn_devicename_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_deviceid_.Set(from._internal_zn_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.zn_devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.zn_devicename_.Set(from._internal_zn_devicename(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
}

inline void SelectSpeakerParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_deviceid_) {}

    , decltype(_impl_.zn_devicename_) {}

  };
  _impl_.zn_deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectSpeakerParams::~SelectSpeakerParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectSpeakerParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_deviceid_.Destroy();
  _impl_.zn_devicename_.Destroy();
}

void SelectSpeakerParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectSpeakerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zn_deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.zn_devicename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectSpeakerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_deviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string zn_devicename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zn_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelectSpeakerParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_deviceid = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string zn_devicename = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_zn_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  return target;
}

::size_t SelectSpeakerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string zn_deviceid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_deviceid());
    }

    // optional string zn_devicename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_devicename());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectSpeakerParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectSpeakerParams*>(
      &from));
}

void SelectSpeakerParams::MergeFrom(const SelectSpeakerParams& from) {
  SelectSpeakerParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_deviceid(from._internal_zn_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_zn_devicename(from._internal_zn_devicename());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectSpeakerParams::CopyFrom(const SelectSpeakerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SelectSpeakerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectSpeakerParams::IsInitialized() const {
  return true;
}

void SelectSpeakerParams::InternalSwap(SelectSpeakerParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_deviceid_, lhs_arena,
                                       &other->_impl_.zn_deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_devicename_, lhs_arena,
                                       &other->_impl_.zn_devicename_, rhs_arena);
}

std::string SelectSpeakerParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SelectSpeakerParams";
}

// ===================================================================

class SelectMicParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectMicParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelectMicParams, _impl_._has_bits_);
  static void set_has_zn_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zn_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

SelectMicParams::SelectMicParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SelectMicParams)
}
SelectMicParams::SelectMicParams(const SelectMicParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectMicParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_deviceid_) {}

    , decltype(_impl_.zn_devicename_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_deviceid_.Set(from._internal_zn_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.zn_devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.zn_devicename_.Set(from._internal_zn_devicename(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SelectMicParams)
}

inline void SelectMicParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_deviceid_) {}

    , decltype(_impl_.zn_devicename_) {}

  };
  _impl_.zn_deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectMicParams::~SelectMicParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectMicParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_deviceid_.Destroy();
  _impl_.zn_devicename_.Destroy();
}

void SelectMicParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectMicParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zn_deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.zn_devicename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectMicParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_deviceid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string zn_devicename = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zn_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelectMicParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_deviceid = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string zn_devicename = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_zn_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  return target;
}

::size_t SelectMicParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string zn_deviceid = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_deviceid());
    }

    // optional string zn_devicename = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_devicename());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectMicParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectMicParams*>(
      &from));
}

void SelectMicParams::MergeFrom(const SelectMicParams& from) {
  SelectMicParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_deviceid(from._internal_zn_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_zn_devicename(from._internal_zn_devicename());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectMicParams::CopyFrom(const SelectMicParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SelectMicParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectMicParams::IsInitialized() const {
  return true;
}

void SelectMicParams::InternalSwap(SelectMicParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_deviceid_, lhs_arena,
                                       &other->_impl_.zn_deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_devicename_, lhs_arena,
                                       &other->_impl_.zn_devicename_, rhs_arena);
}

std::string SelectMicParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SelectMicParams";
}

// ===================================================================

class SendChatToUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatToUserParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendChatToUserParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const SendChatToUserParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zn_msgcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
SendChatToUserParams::_Internal::user(const SendChatToUserParams* msg) {
  return *msg->_impl_.user_;
}
SendChatToUserParams::SendChatToUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
}
SendChatToUserParams::SendChatToUserParams(const SendChatToUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SendChatToUserParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_msgcontent_) {}

    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_msgcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_msgcontent_.Set(from._internal_zn_msgcontent(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
}

inline void SendChatToUserParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_msgcontent_) {}

    , decltype(_impl_.user_){nullptr}
  };
  _impl_.zn_msgcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendChatToUserParams::~SendChatToUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatToUserParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_msgcontent_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void SendChatToUserParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatToUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zn_msgcontent_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendChatToUserParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string zn_msgContent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zn_msgcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendChatToUserParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // optional string zn_msgContent = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_msgcontent();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  return target;
}

::size_t SendChatToUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string zn_msgContent = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_msgcontent());
    }

    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendChatToUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendChatToUserParams*>(
      &from));
}

void SendChatToUserParams::MergeFrom(const SendChatToUserParams& from) {
  SendChatToUserParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_msgcontent(from._internal_zn_msgcontent());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendChatToUserParams::CopyFrom(const SendChatToUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SendChatToUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatToUserParams::IsInitialized() const {
  return true;
}

void SendChatToUserParams::InternalSwap(SendChatToUserParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_msgcontent_, lhs_arena,
                                       &other->_impl_.zn_msgcontent_, rhs_arena);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string SendChatToUserParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SendChatToUserParams";
}

// ===================================================================

class SendChatToAllParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SendChatToAllParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendChatToAllParams, _impl_._has_bits_);
  static void set_has_zn_msgcontent(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SendChatToAllParams::SendChatToAllParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
}
SendChatToAllParams::SendChatToAllParams(const SendChatToAllParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SendChatToAllParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_msgcontent_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_msgcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_msgcontent_.Set(from._internal_zn_msgcontent(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
}

inline void SendChatToAllParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_msgcontent_) {}

  };
  _impl_.zn_msgcontent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_msgcontent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendChatToAllParams::~SendChatToAllParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendChatToAllParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_msgcontent_.Destroy();
}

void SendChatToAllParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendChatToAllParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.zn_msgcontent_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendChatToAllParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_msgContent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_msgcontent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendChatToAllParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_msgContent = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_msgcontent();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  return target;
}

::size_t SendChatToAllParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string zn_msgContent = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_zn_msgcontent());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendChatToAllParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendChatToAllParams*>(
      &from));
}

void SendChatToAllParams::MergeFrom(const SendChatToAllParams& from) {
  SendChatToAllParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_msgcontent(from._internal_zn_msgcontent());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendChatToAllParams::CopyFrom(const SendChatToAllParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SendChatToAllParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChatToAllParams::IsInitialized() const {
  return true;
}

void SendChatToAllParams::InternalSwap(SendChatToAllParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_msgcontent_, lhs_arena,
                                       &other->_impl_.zn_msgcontent_, rhs_arena);
}

std::string SendChatToAllParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SendChatToAllParams";
}

// ===================================================================

class StartLiveStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartLiveStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartLiveStreamParams, _impl_._has_bits_);
  static void set_has_zn_streamurl(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zn_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zn_broadcasturl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StartLiveStreamParams::StartLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
}
StartLiveStreamParams::StartLiveStreamParams(const StartLiveStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartLiveStreamParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_streamurl_) {}

    , decltype(_impl_.zn_key_) {}

    , decltype(_impl_.zn_broadcasturl_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_streamurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_streamurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_streamurl_.Set(from._internal_zn_streamurl(), _this->GetArenaForAllocation());
  }
  _impl_.zn_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.zn_key_.Set(from._internal_zn_key(), _this->GetArenaForAllocation());
  }
  _impl_.zn_broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.zn_broadcasturl_.Set(from._internal_zn_broadcasturl(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
}

inline void StartLiveStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_streamurl_) {}

    , decltype(_impl_.zn_key_) {}

    , decltype(_impl_.zn_broadcasturl_) {}

  };
  _impl_.zn_streamurl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_streamurl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zn_broadcasturl_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_broadcasturl_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartLiveStreamParams::~StartLiveStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartLiveStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_streamurl_.Destroy();
  _impl_.zn_key_.Destroy();
  _impl_.zn_broadcasturl_.Destroy();
}

void StartLiveStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartLiveStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zn_streamurl_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.zn_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.zn_broadcasturl_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartLiveStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_streamUrl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_streamurl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string zn_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_zn_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string zn_broadcastUrl = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_zn_broadcasturl();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartLiveStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_streamUrl = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_streamurl();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string zn_key = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_zn_key();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string zn_broadcastUrl = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_zn_broadcasturl();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  return target;
}

::size_t StartLiveStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string zn_streamUrl = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_streamurl());
    }

    // optional string zn_key = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_key());
    }

    // optional string zn_broadcastUrl = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_broadcasturl());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLiveStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartLiveStreamParams*>(
      &from));
}

void StartLiveStreamParams::MergeFrom(const StartLiveStreamParams& from) {
  StartLiveStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_streamurl(from._internal_zn_streamurl());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_zn_key(from._internal_zn_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_zn_broadcasturl(from._internal_zn_broadcasturl());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartLiveStreamParams::CopyFrom(const StartLiveStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartLiveStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLiveStreamParams::IsInitialized() const {
  return true;
}

void StartLiveStreamParams::InternalSwap(StartLiveStreamParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_streamurl_, lhs_arena,
                                       &other->_impl_.zn_streamurl_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_key_, lhs_arena,
                                       &other->_impl_.zn_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_broadcasturl_, lhs_arena,
                                       &other->_impl_.zn_broadcasturl_, rhs_arena);
}

std::string StartLiveStreamParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartLiveStreamParams";
}

// ===================================================================

class IncomingLiveStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<IncomingLiveStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IncomingLiveStreamParams, _impl_._has_bits_);
  static void set_has_strstreamkeyid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

IncomingLiveStreamParams::IncomingLiveStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
}
IncomingLiveStreamParams::IncomingLiveStreamParams(const IncomingLiveStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IncomingLiveStreamParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strstreamkeyid_.Set(from._internal_strstreamkeyid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
}

inline void IncomingLiveStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strstreamkeyid_) {}

  };
  _impl_.strstreamkeyid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strstreamkeyid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IncomingLiveStreamParams::~IncomingLiveStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IncomingLiveStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strstreamkeyid_.Destroy();
}

void IncomingLiveStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IncomingLiveStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.strstreamkeyid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IncomingLiveStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string strStreamKeyID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_strstreamkeyid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IncomingLiveStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string strStreamKeyID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strstreamkeyid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  return target;
}

::size_t IncomingLiveStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string strStreamKeyID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_strstreamkeyid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IncomingLiveStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IncomingLiveStreamParams*>(
      &from));
}

void IncomingLiveStreamParams::MergeFrom(const IncomingLiveStreamParams& from) {
  IncomingLiveStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_strstreamkeyid(from._internal_strstreamkeyid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IncomingLiveStreamParams::CopyFrom(const IncomingLiveStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IncomingLiveStreamParams::IsInitialized() const {
  return true;
}

void IncomingLiveStreamParams::InternalSwap(IncomingLiveStreamParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strstreamkeyid_, lhs_arena,
                                       &other->_impl_.strstreamkeyid_, rhs_arena);
}

std::string IncomingLiveStreamParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams";
}

// ===================================================================

class StartShareViewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartShareViewParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartShareViewParams, _impl_._has_bits_);
  static void set_has_zn_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iswithdeviceaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isoptimizeforsharedvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StartShareViewParams::StartShareViewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
}
StartShareViewParams::StartShareViewParams(const StartShareViewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartShareViewParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_handle_) {}

    , decltype(_impl_.iswithdeviceaudio_) {}

    , decltype(_impl_.isoptimizeforsharedvideo_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_handle_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_handle_.Set(from._internal_zn_handle(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.iswithdeviceaudio_, &from._impl_.iswithdeviceaudio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isoptimizeforsharedvideo_) -
    reinterpret_cast<char*>(&_impl_.iswithdeviceaudio_)) + sizeof(_impl_.isoptimizeforsharedvideo_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
}

inline void StartShareViewParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_handle_) {}

    , decltype(_impl_.iswithdeviceaudio_) { false }

    , decltype(_impl_.isoptimizeforsharedvideo_) { false }

  };
  _impl_.zn_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_handle_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartShareViewParams::~StartShareViewParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartShareViewParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_handle_.Destroy();
}

void StartShareViewParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartShareViewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.zn_handle_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.iswithdeviceaudio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.isoptimizeforsharedvideo_) -
      reinterpret_cast<char*>(&_impl_.iswithdeviceaudio_)) + sizeof(_impl_.isoptimizeforsharedvideo_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartShareViewParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isWithDeviceAudio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_iswithdeviceaudio(&has_bits);
          _impl_.iswithdeviceaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isOptimizeForSharedVideo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_isoptimizeforsharedvideo(&has_bits);
          _impl_.isoptimizeforsharedvideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartShareViewParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_handle();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool isWithDeviceAudio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_iswithdeviceaudio(), target);
  }

  // optional bool isOptimizeForSharedVideo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isoptimizeforsharedvideo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  return target;
}

::size_t StartShareViewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string zn_handle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_handle());
    }

    // optional bool isWithDeviceAudio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool isOptimizeForSharedVideo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartShareViewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartShareViewParams*>(
      &from));
}

void StartShareViewParams::MergeFrom(const StartShareViewParams& from) {
  StartShareViewParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_handle(from._internal_zn_handle());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iswithdeviceaudio_ = from._impl_.iswithdeviceaudio_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isoptimizeforsharedvideo_ = from._impl_.isoptimizeforsharedvideo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartShareViewParams::CopyFrom(const StartShareViewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartShareViewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartShareViewParams::IsInitialized() const {
  return true;
}

void StartShareViewParams::InternalSwap(StartShareViewParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_handle_, lhs_arena,
                                       &other->_impl_.zn_handle_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartShareViewParams, _impl_.isoptimizeforsharedvideo_)
      + sizeof(StartShareViewParams::_impl_.isoptimizeforsharedvideo_)
      - PROTOBUF_FIELD_OFFSET(StartShareViewParams, _impl_.iswithdeviceaudio_)>(
          reinterpret_cast<char*>(&_impl_.iswithdeviceaudio_),
          reinterpret_cast<char*>(&other->_impl_.iswithdeviceaudio_));
}

std::string StartShareViewParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartShareViewParams";
}

// ===================================================================

class StartShareScreenParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartShareScreenParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartShareScreenParams, _impl_._has_bits_);
  static void set_has_zn_monitorid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_iswithdeviceaudio(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isoptimizeforsharedvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

StartShareScreenParams::StartShareScreenParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
}
StartShareScreenParams::StartShareScreenParams(const StartShareScreenParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartShareScreenParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_monitorid_) {}

    , decltype(_impl_.iswithdeviceaudio_) {}

    , decltype(_impl_.isoptimizeforsharedvideo_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_monitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_monitorid_.Set(from._internal_zn_monitorid(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.iswithdeviceaudio_, &from._impl_.iswithdeviceaudio_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isoptimizeforsharedvideo_) -
    reinterpret_cast<char*>(&_impl_.iswithdeviceaudio_)) + sizeof(_impl_.isoptimizeforsharedvideo_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
}

inline void StartShareScreenParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_monitorid_) {}

    , decltype(_impl_.iswithdeviceaudio_) { false }

    , decltype(_impl_.isoptimizeforsharedvideo_) { false }

  };
  _impl_.zn_monitorid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_monitorid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartShareScreenParams::~StartShareScreenParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartShareScreenParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_monitorid_.Destroy();
}

void StartShareScreenParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartShareScreenParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.zn_monitorid_.ClearNonDefaultToEmpty();
  }
  ::memset(&_impl_.iswithdeviceaudio_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.isoptimizeforsharedvideo_) -
      reinterpret_cast<char*>(&_impl_.iswithdeviceaudio_)) + sizeof(_impl_.isoptimizeforsharedvideo_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartShareScreenParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_monitorID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_monitorid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isWithDeviceAudio = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_iswithdeviceaudio(&has_bits);
          _impl_.iswithdeviceaudio_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isOptimizeForSharedVideo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_isoptimizeforsharedvideo(&has_bits);
          _impl_.isoptimizeforsharedvideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartShareScreenParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_monitorID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_monitorid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional bool isWithDeviceAudio = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_iswithdeviceaudio(), target);
  }

  // optional bool isOptimizeForSharedVideo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isoptimizeforsharedvideo(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  return target;
}

::size_t StartShareScreenParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string zn_monitorID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_monitorid());
    }

    // optional bool isWithDeviceAudio = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional bool isOptimizeForSharedVideo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartShareScreenParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartShareScreenParams*>(
      &from));
}

void StartShareScreenParams::MergeFrom(const StartShareScreenParams& from) {
  StartShareScreenParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_monitorid(from._internal_zn_monitorid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.iswithdeviceaudio_ = from._impl_.iswithdeviceaudio_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isoptimizeforsharedvideo_ = from._impl_.isoptimizeforsharedvideo_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartShareScreenParams::CopyFrom(const StartShareScreenParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartShareScreenParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartShareScreenParams::IsInitialized() const {
  return true;
}

void StartShareScreenParams::InternalSwap(StartShareScreenParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_monitorid_, lhs_arena,
                                       &other->_impl_.zn_monitorid_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartShareScreenParams, _impl_.isoptimizeforsharedvideo_)
      + sizeof(StartShareScreenParams::_impl_.isoptimizeforsharedvideo_)
      - PROTOBUF_FIELD_OFFSET(StartShareScreenParams, _impl_.iswithdeviceaudio_)>(
          reinterpret_cast<char*>(&_impl_.iswithdeviceaudio_),
          reinterpret_cast<char*>(&other->_impl_.iswithdeviceaudio_));
}

std::string StartShareScreenParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartShareScreenParams";
}

// ===================================================================

class LockShareParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LockShareParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LockShareParams, _impl_._has_bits_);
  static void set_has_zn_block(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LockShareParams::LockShareParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LockShareParams)
}
LockShareParams::LockShareParams(const LockShareParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LockShareParams)
}

inline void LockShareParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_block_) { false }

  };
}

LockShareParams::~LockShareParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LockShareParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LockShareParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LockShareParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LockShareParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LockShareParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_block_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LockShareParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool zn_bLock = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_block(&has_bits);
          _impl_.zn_block_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LockShareParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LockShareParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool zn_bLock = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_zn_block(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LockShareParams)
  return target;
}

::size_t LockShareParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LockShareParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool zn_bLock = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockShareParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LockShareParams*>(
      &from));
}

void LockShareParams::MergeFrom(const LockShareParams& from) {
  LockShareParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LockShareParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_block(from._internal_zn_block());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LockShareParams::CopyFrom(const LockShareParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LockShareParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockShareParams::IsInitialized() const {
  return true;
}

void LockShareParams::InternalSwap(LockShareParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_block_, other->_impl_.zn_block_);
}

std::string LockShareParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LockShareParams";
}

// ===================================================================

class EnableShareDeviceAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableShareDeviceAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableShareDeviceAudioParams, _impl_._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableShareDeviceAudioParams::EnableShareDeviceAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
}
EnableShareDeviceAudioParams::EnableShareDeviceAudioParams(const EnableShareDeviceAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
}

inline void EnableShareDeviceAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_) { false }

  };
}

EnableShareDeviceAudioParams::~EnableShareDeviceAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableShareDeviceAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableShareDeviceAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableShareDeviceAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableShareDeviceAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableShareDeviceAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  return target;
}

::size_t EnableShareDeviceAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableShareDeviceAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableShareDeviceAudioParams*>(
      &from));
}

void EnableShareDeviceAudioParams::MergeFrom(const EnableShareDeviceAudioParams& from) {
  EnableShareDeviceAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableShareDeviceAudioParams::CopyFrom(const EnableShareDeviceAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableShareDeviceAudioParams::IsInitialized() const {
  return true;
}

void EnableShareDeviceAudioParams::InternalSwap(EnableShareDeviceAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.enable_, other->_impl_.enable_);
}

std::string EnableShareDeviceAudioParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams";
}

// ===================================================================

class EnableOptimizeForSharedVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableOptimizeForSharedVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableOptimizeForSharedVideoParams, _impl_._has_bits_);
  static void set_has_enable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableOptimizeForSharedVideoParams::EnableOptimizeForSharedVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
}
EnableOptimizeForSharedVideoParams::EnableOptimizeForSharedVideoParams(const EnableOptimizeForSharedVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
}

inline void EnableOptimizeForSharedVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.enable_) { false }

  };
}

EnableOptimizeForSharedVideoParams::~EnableOptimizeForSharedVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableOptimizeForSharedVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableOptimizeForSharedVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableOptimizeForSharedVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.enable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableOptimizeForSharedVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_enable(&has_bits);
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableOptimizeForSharedVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool enable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_enable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  return target;
}

::size_t EnableOptimizeForSharedVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool enable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableOptimizeForSharedVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableOptimizeForSharedVideoParams*>(
      &from));
}

void EnableOptimizeForSharedVideoParams::MergeFrom(const EnableOptimizeForSharedVideoParams& from) {
  EnableOptimizeForSharedVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableOptimizeForSharedVideoParams::CopyFrom(const EnableOptimizeForSharedVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableOptimizeForSharedVideoParams::IsInitialized() const {
  return true;
}

void EnableOptimizeForSharedVideoParams::InternalSwap(EnableOptimizeForSharedVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.enable_, other->_impl_.enable_);
}

std::string EnableOptimizeForSharedVideoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams";
}

// ===================================================================

class StartShare2ndCameraParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartShare2ndCameraParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartShare2ndCameraParams, _impl_._has_bits_);
  static void set_has_zn_cameraid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartShare2ndCameraParams::StartShare2ndCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
}
StartShare2ndCameraParams::StartShare2ndCameraParams(const StartShare2ndCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartShare2ndCameraParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_cameraid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_cameraid_.Set(from._internal_zn_cameraid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
}

inline void StartShare2ndCameraParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_cameraid_) {}

  };
  _impl_.zn_cameraid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_cameraid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartShare2ndCameraParams::~StartShare2ndCameraParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartShare2ndCameraParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_cameraid_.Destroy();
}

void StartShare2ndCameraParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartShare2ndCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.zn_cameraid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartShare2ndCameraParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_cameraID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_cameraid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartShare2ndCameraParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_cameraID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_cameraid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  return target;
}

::size_t StartShare2ndCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string zn_cameraID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_zn_cameraid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartShare2ndCameraParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartShare2ndCameraParams*>(
      &from));
}

void StartShare2ndCameraParams::MergeFrom(const StartShare2ndCameraParams& from) {
  StartShare2ndCameraParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_cameraid(from._internal_zn_cameraid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartShare2ndCameraParams::CopyFrom(const StartShare2ndCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartShare2ndCameraParams::IsInitialized() const {
  return true;
}

void StartShare2ndCameraParams::InternalSwap(StartShare2ndCameraParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_cameraid_, lhs_arena,
                                       &other->_impl_.zn_cameraid_, rhs_arena);
}

std::string StartShare2ndCameraParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams";
}

// ===================================================================

class GetRemoteUsersParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRemoteUsersParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetRemoteUsersParams, _impl_._has_bits_);
  static void set_has_zn_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRemoteUsersParams::GetRemoteUsersParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
}
GetRemoteUsersParams::GetRemoteUsersParams(const GetRemoteUsersParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
}

inline void GetRemoteUsersParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_options_) { ::int64_t{0} }

  };
}

GetRemoteUsersParams::~GetRemoteUsersParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRemoteUsersParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRemoteUsersParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRemoteUsersParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_options_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetRemoteUsersParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_options(&has_bits);
          _impl_.zn_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRemoteUsersParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  return target;
}

::size_t GetRemoteUsersParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_options = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_options());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRemoteUsersParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetRemoteUsersParams*>(
      &from));
}

void GetRemoteUsersParams::MergeFrom(const GetRemoteUsersParams& from) {
  GetRemoteUsersParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_options(from._internal_zn_options());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetRemoteUsersParams::CopyFrom(const GetRemoteUsersParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRemoteUsersParams::IsInitialized() const {
  return true;
}

void GetRemoteUsersParams::InternalSwap(GetRemoteUsersParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_options_, other->_impl_.zn_options_);
}

std::string GetRemoteUsersParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams";
}

// ===================================================================

class GetMyInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMyInfoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetMyInfoParams, _impl_._has_bits_);
  static void set_has_zn_options(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetMyInfoParams::GetMyInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
}
GetMyInfoParams::GetMyInfoParams(const GetMyInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
}

inline void GetMyInfoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_options_) { ::int64_t{0} }

  };
}

GetMyInfoParams::~GetMyInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMyInfoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetMyInfoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMyInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_options_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetMyInfoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_options(&has_bits);
          _impl_.zn_options_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetMyInfoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_options = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_options(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  return target;
}

::size_t GetMyInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_options = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_options());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMyInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetMyInfoParams*>(
      &from));
}

void GetMyInfoParams::MergeFrom(const GetMyInfoParams& from) {
  GetMyInfoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_options(from._internal_zn_options());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetMyInfoParams::CopyFrom(const GetMyInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetMyInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMyInfoParams::IsInitialized() const {
  return true;
}

void GetMyInfoParams::InternalSwap(GetMyInfoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_options_, other->_impl_.zn_options_);
}

std::string GetMyInfoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetMyInfoParams";
}

// ===================================================================

class ChangeNameParams::_Internal {
 public:
  using HasBits = decltype(std::declval<ChangeNameParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ChangeNameParams, _impl_._has_bits_);
  static void set_has_zn_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const ChangeNameParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
ChangeNameParams::_Internal::user(const ChangeNameParams* msg) {
  return *msg->_impl_.user_;
}
ChangeNameParams::ChangeNameParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
}
ChangeNameParams::ChangeNameParams(const ChangeNameParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ChangeNameParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_name_) {}

    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_name_.Set(from._internal_zn_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
}

inline void ChangeNameParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_name_) {}

    , decltype(_impl_.user_){nullptr}
  };
  _impl_.zn_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChangeNameParams::~ChangeNameParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChangeNameParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void ChangeNameParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChangeNameParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zn_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChangeNameParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ChangeNameParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  return target;
}

::size_t ChangeNameParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string zn_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_name());
    }

    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChangeNameParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ChangeNameParams*>(
      &from));
}

void ChangeNameParams::MergeFrom(const ChangeNameParams& from) {
  ChangeNameParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_name(from._internal_zn_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChangeNameParams::CopyFrom(const ChangeNameParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.ChangeNameParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeNameParams::IsInitialized() const {
  return true;
}

void ChangeNameParams::InternalSwap(ChangeNameParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_name_, lhs_arena,
                                       &other->_impl_.zn_name_, rhs_arena);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string ChangeNameParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.ChangeNameParams";
}

// ===================================================================

class MakeHostParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MakeHostParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MakeHostParams, _impl_._has_bits_);
  static void set_has_zn_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const MakeHostParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
MakeHostParams::_Internal::user(const MakeHostParams* msg) {
  return *msg->_impl_.user_;
}
MakeHostParams::MakeHostParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.MakeHostParams)
}
MakeHostParams::MakeHostParams(const MakeHostParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MakeHostParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_name_) {}

    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_name_.Set(from._internal_zn_name(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.MakeHostParams)
}

inline void MakeHostParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_name_) {}

    , decltype(_impl_.user_){nullptr}
  };
  _impl_.zn_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MakeHostParams::~MakeHostParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeHostParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void MakeHostParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeHostParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zn_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MakeHostParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MakeHostParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  return target;
}

::size_t MakeHostParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string zn_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_zn_name());
    }

    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeHostParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MakeHostParams*>(
      &from));
}

void MakeHostParams::MergeFrom(const MakeHostParams& from) {
  MakeHostParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zn_name(from._internal_zn_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MakeHostParams::CopyFrom(const MakeHostParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.MakeHostParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeHostParams::IsInitialized() const {
  return true;
}

void MakeHostParams::InternalSwap(MakeHostParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_name_, lhs_arena,
                                       &other->_impl_.zn_name_, rhs_arena);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string MakeHostParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.MakeHostParams";
}

// ===================================================================

class MakeManagerParams::_Internal {
 public:
  using HasBits = decltype(std::declval<MakeManagerParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MakeManagerParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const MakeManagerParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
MakeManagerParams::_Internal::user(const MakeManagerParams* msg) {
  return *msg->_impl_.user_;
}
MakeManagerParams::MakeManagerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
}
MakeManagerParams::MakeManagerParams(const MakeManagerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MakeManagerParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
}

inline void MakeManagerParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

MakeManagerParams::~MakeManagerParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeManagerParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void MakeManagerParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeManagerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MakeManagerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MakeManagerParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  return target;
}

::size_t MakeManagerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MakeManagerParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MakeManagerParams*>(
      &from));
}

void MakeManagerParams::MergeFrom(const MakeManagerParams& from) {
  MakeManagerParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MakeManagerParams::CopyFrom(const MakeManagerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.MakeManagerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeManagerParams::IsInitialized() const {
  return true;
}

void MakeManagerParams::InternalSwap(MakeManagerParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string MakeManagerParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.MakeManagerParams";
}

// ===================================================================

class RevokeManagerParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RevokeManagerParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RevokeManagerParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RevokeManagerParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RevokeManagerParams::_Internal::user(const RevokeManagerParams* msg) {
  return *msg->_impl_.user_;
}
RevokeManagerParams::RevokeManagerParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
}
RevokeManagerParams::RevokeManagerParams(const RevokeManagerParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RevokeManagerParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
}

inline void RevokeManagerParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

RevokeManagerParams::~RevokeManagerParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RevokeManagerParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RevokeManagerParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RevokeManagerParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RevokeManagerParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RevokeManagerParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  return target;
}

::size_t RevokeManagerParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RevokeManagerParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RevokeManagerParams*>(
      &from));
}

void RevokeManagerParams::MergeFrom(const RevokeManagerParams& from) {
  RevokeManagerParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RevokeManagerParams::CopyFrom(const RevokeManagerParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RevokeManagerParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RevokeManagerParams::IsInitialized() const {
  return true;
}

void RevokeManagerParams::InternalSwap(RevokeManagerParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string RevokeManagerParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RevokeManagerParams";
}

// ===================================================================

class RemoveUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveUserParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoveUserParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoveUserParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoveUserParams::_Internal::user(const RemoveUserParams* msg) {
  return *msg->_impl_.user_;
}
RemoveUserParams::RemoveUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
}
RemoveUserParams::RemoveUserParams(const RemoveUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoveUserParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
}

inline void RemoveUserParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

RemoveUserParams::~RemoveUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveUserParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoveUserParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoveUserParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoveUserParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  return target;
}

::size_t RemoveUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoveUserParams*>(
      &from));
}

void RemoveUserParams::MergeFrom(const RemoveUserParams& from) {
  RemoveUserParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoveUserParams::CopyFrom(const RemoveUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoveUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveUserParams::IsInitialized() const {
  return true;
}

void RemoveUserParams::InternalSwap(RemoveUserParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string RemoveUserParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoveUserParams";
}

// ===================================================================

class RotateMyVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RotateMyVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RotateMyVideoParams, _impl_._has_bits_);
  static void set_has_zn_rotation(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RotateMyVideoParams::RotateMyVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
}
RotateMyVideoParams::RotateMyVideoParams(const RotateMyVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
}

inline void RotateMyVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_rotation_) { 0 }

  };
}

RotateMyVideoParams::~RotateMyVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RotateMyVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RotateMyVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RotateMyVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_rotation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RotateMyVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 zn_rotation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_rotation(&has_bits);
          _impl_.zn_rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RotateMyVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 zn_rotation = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_zn_rotation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  return target;
}

::size_t RotateMyVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 zn_rotation = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_zn_rotation());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RotateMyVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RotateMyVideoParams*>(
      &from));
}

void RotateMyVideoParams::MergeFrom(const RotateMyVideoParams& from) {
  RotateMyVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_rotation(from._internal_zn_rotation());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RotateMyVideoParams::CopyFrom(const RotateMyVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RotateMyVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RotateMyVideoParams::IsInitialized() const {
  return true;
}

void RotateMyVideoParams::InternalSwap(RotateMyVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_rotation_, other->_impl_.zn_rotation_);
}

std::string RotateMyVideoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RotateMyVideoParams";
}

// ===================================================================

class SelectCameraParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SelectCameraParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SelectCameraParams, _impl_._has_bits_);
  static void set_has_zn_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SelectCameraParams::SelectCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
}
SelectCameraParams::SelectCameraParams(const SelectCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SelectCameraParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_deviceid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.zn_deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_deviceid_.Set(from._internal_zn_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
}

inline void SelectCameraParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_deviceid_) {}

  };
  _impl_.zn_deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zn_deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SelectCameraParams::~SelectCameraParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SelectCameraParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.zn_deviceid_.Destroy();
}

void SelectCameraParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SelectCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.zn_deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SelectCameraParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string zn_deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_zn_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SelectCameraParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string zn_deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zn_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  return target;
}

::size_t SelectCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string zn_deviceID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_zn_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SelectCameraParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SelectCameraParams*>(
      &from));
}

void SelectCameraParams::MergeFrom(const SelectCameraParams& from) {
  SelectCameraParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_deviceid(from._internal_zn_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SelectCameraParams::CopyFrom(const SelectCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SelectCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectCameraParams::IsInitialized() const {
  return true;
}

void SelectCameraParams::InternalSwap(SelectCameraParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zn_deviceid_, lhs_arena,
                                       &other->_impl_.zn_deviceid_, rhs_arena);
}

std::string SelectCameraParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SelectCameraParams";
}

// ===================================================================

class CreateRenderParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CreateRenderParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CreateRenderParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CreateRenderParams::CreateRenderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
}
CreateRenderParams::CreateRenderParams(const CreateRenderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
}

inline void CreateRenderParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

  };
}

CreateRenderParams::~CreateRenderParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateRenderParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void CreateRenderParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateRenderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CreateRenderParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CreateRenderParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  return target;
}

::size_t CreateRenderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_recv_handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_recv_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateRenderParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CreateRenderParams*>(
      &from));
}

void CreateRenderParams::MergeFrom(const CreateRenderParams& from) {
  CreateRenderParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_recv_handle(from._internal_zn_recv_handle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CreateRenderParams::CopyFrom(const CreateRenderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CreateRenderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRenderParams::IsInitialized() const {
  return true;
}

void CreateRenderParams::InternalSwap(CreateRenderParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_recv_handle_, other->_impl_.zn_recv_handle_);
}

std::string CreateRenderParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CreateRenderParams";
}

// ===================================================================

class DestroyRendererParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DestroyRendererParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DestroyRendererParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DestroyRendererParams::DestroyRendererParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
}
DestroyRendererParams::DestroyRendererParams(const DestroyRendererParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
}

inline void DestroyRendererParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

  };
}

DestroyRendererParams::~DestroyRendererParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DestroyRendererParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void DestroyRendererParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DestroyRendererParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DestroyRendererParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DestroyRendererParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  return target;
}

::size_t DestroyRendererParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_recv_handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_recv_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DestroyRendererParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DestroyRendererParams*>(
      &from));
}

void DestroyRendererParams::MergeFrom(const DestroyRendererParams& from) {
  DestroyRendererParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_recv_handle(from._internal_zn_recv_handle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DestroyRendererParams::CopyFrom(const DestroyRendererParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.DestroyRendererParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestroyRendererParams::IsInitialized() const {
  return true;
}

void DestroyRendererParams::InternalSwap(DestroyRendererParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_recv_handle_, other->_impl_.zn_recv_handle_);
}

std::string DestroyRendererParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.DestroyRendererParams";
}

// ===================================================================

class SubscribeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubscribeParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user(const SubscribeParams* msg);
  static void set_has_zn_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zn_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
SubscribeParams::_Internal::zn_user(const SubscribeParams* msg) {
  return *msg->_impl_.zn_user_;
}
SubscribeParams::SubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SubscribeParams)
}
SubscribeParams::SubscribeParams(const SubscribeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SubscribeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.zn_recv_handle_) {}

    , decltype(_impl_.zn_type_) {}

    , decltype(_impl_.zn_resolution_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.zn_user_);
  }
  ::memcpy(&_impl_.zn_recv_handle_, &from._impl_.zn_recv_handle_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.zn_resolution_) -
    reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.zn_resolution_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SubscribeParams)
}

inline void SubscribeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

    , decltype(_impl_.zn_type_) { 0 }

    , decltype(_impl_.zn_resolution_) { 0 }

  };
}

SubscribeParams::~SubscribeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_user_;
}

void SubscribeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_user_ != nullptr);
    _impl_.zn_user_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.zn_recv_handle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zn_resolution_) -
        reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.zn_resolution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SubscribeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zn_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_zn_type(&has_bits);
          _impl_.zn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 zn_recv_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zn_resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_zn_resolution(&has_bits);
          _impl_.zn_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubscribeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_user(this),
        _Internal::zn_user(this).GetCachedSize(), target, stream);
  }

  // optional int32 zn_type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_zn_type(), target);
  }

  // optional int64 zn_recv_handle = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_zn_recv_handle(), target);
  }

  // optional int32 zn_resolution = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_zn_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  return target;
}

::size_t SubscribeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.zn_user_);
    }

    // optional int64 zn_recv_handle = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_zn_recv_handle());
    }

    // optional int32 zn_type = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_type());
    }

    // optional int32 zn_resolution = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_resolution());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SubscribeParams*>(
      &from));
}

void SubscribeParams::MergeFrom(const SubscribeParams& from) {
  SubscribeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_zn_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_zn_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.zn_type_ = from._impl_.zn_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.zn_resolution_ = from._impl_.zn_resolution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SubscribeParams::CopyFrom(const SubscribeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SubscribeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeParams::IsInitialized() const {
  return true;
}

void SubscribeParams::InternalSwap(SubscribeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeParams, _impl_.zn_resolution_)
      + sizeof(SubscribeParams::_impl_.zn_resolution_)
      - PROTOBUF_FIELD_OFFSET(SubscribeParams, _impl_.zn_user_)>(
          reinterpret_cast<char*>(&_impl_.zn_user_),
          reinterpret_cast<char*>(&other->_impl_.zn_user_));
}

std::string SubscribeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SubscribeParams";
}

// ===================================================================

class UnSubscribeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnSubscribeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnSubscribeParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user(const UnSubscribeParams* msg);
  static void set_has_zn_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_zn_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
UnSubscribeParams::_Internal::zn_user(const UnSubscribeParams* msg) {
  return *msg->_impl_.zn_user_;
}
UnSubscribeParams::UnSubscribeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
}
UnSubscribeParams::UnSubscribeParams(const UnSubscribeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UnSubscribeParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.zn_recv_handle_) {}

    , decltype(_impl_.zn_type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.zn_user_);
  }
  ::memcpy(&_impl_.zn_recv_handle_, &from._impl_.zn_recv_handle_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.zn_type_) -
    reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.zn_type_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
}

inline void UnSubscribeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

    , decltype(_impl_.zn_type_) { 0 }

  };
}

UnSubscribeParams::~UnSubscribeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnSubscribeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_user_;
}

void UnSubscribeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnSubscribeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_user_ != nullptr);
    _impl_.zn_user_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.zn_recv_handle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zn_type_) -
        reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.zn_type_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnSubscribeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zn_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_zn_type(&has_bits);
          _impl_.zn_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnSubscribeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::zn_user(this),
        _Internal::zn_user(this).GetCachedSize(), target, stream);
  }

  // optional int32 zn_type = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_zn_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  return target;
}

::size_t UnSubscribeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.zn_user_);
    }

    // optional int64 zn_recv_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_zn_recv_handle());
    }

    // optional int32 zn_type = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnSubscribeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnSubscribeParams*>(
      &from));
}

void UnSubscribeParams::MergeFrom(const UnSubscribeParams& from) {
  UnSubscribeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_zn_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_zn_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.zn_type_ = from._impl_.zn_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnSubscribeParams::CopyFrom(const UnSubscribeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.UnSubscribeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribeParams::IsInitialized() const {
  return true;
}

void UnSubscribeParams::InternalSwap(UnSubscribeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnSubscribeParams, _impl_.zn_type_)
      + sizeof(UnSubscribeParams::_impl_.zn_type_)
      - PROTOBUF_FIELD_OFFSET(UnSubscribeParams, _impl_.zn_user_)>(
          reinterpret_cast<char*>(&_impl_.zn_user_),
          reinterpret_cast<char*>(&other->_impl_.zn_user_));
}

std::string UnSubscribeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.UnSubscribeParams";
}

// ===================================================================

class SubscribeMultiCameraStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SubscribeMultiCameraStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SubscribeMultiCameraStreamParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user(const SubscribeMultiCameraStreamParams* msg);
  static void set_has_zn_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camerastreamid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_zn_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
SubscribeMultiCameraStreamParams::_Internal::zn_user(const SubscribeMultiCameraStreamParams* msg) {
  return *msg->_impl_.zn_user_;
}
SubscribeMultiCameraStreamParams::SubscribeMultiCameraStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
}
SubscribeMultiCameraStreamParams::SubscribeMultiCameraStreamParams(const SubscribeMultiCameraStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SubscribeMultiCameraStreamParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.camerastreamid_) {}

    , decltype(_impl_.zn_recv_handle_) {}

    , decltype(_impl_.zn_resolution_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.zn_user_);
  }
  ::memcpy(&_impl_.camerastreamid_, &from._impl_.camerastreamid_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.zn_resolution_) -
    reinterpret_cast<char*>(&_impl_.camerastreamid_)) + sizeof(_impl_.zn_resolution_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
}

inline void SubscribeMultiCameraStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.camerastreamid_) { ::int64_t{0} }

    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

    , decltype(_impl_.zn_resolution_) { 0 }

  };
}

SubscribeMultiCameraStreamParams::~SubscribeMultiCameraStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SubscribeMultiCameraStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_user_;
}

void SubscribeMultiCameraStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SubscribeMultiCameraStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_user_ != nullptr);
    _impl_.zn_user_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.camerastreamid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zn_resolution_) -
        reinterpret_cast<char*>(&_impl_.camerastreamid_)) + sizeof(_impl_.zn_resolution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SubscribeMultiCameraStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cameraStreamID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_camerastreamid(&has_bits);
          _impl_.camerastreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 zn_recv_handle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 zn_resolution = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_zn_resolution(&has_bits);
          _impl_.zn_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SubscribeMultiCameraStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::zn_user(this),
        _Internal::zn_user(this).GetCachedSize(), target, stream);
  }

  // optional int64 cameraStreamID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_camerastreamid(), target);
  }

  // optional int64 zn_recv_handle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_zn_recv_handle(), target);
  }

  // optional int32 zn_resolution = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        4, this->_internal_zn_resolution(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  return target;
}

::size_t SubscribeMultiCameraStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.zn_user_);
    }

    // optional int64 cameraStreamID = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_camerastreamid());
    }

    // optional int64 zn_recv_handle = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_zn_recv_handle());
    }

    // optional int32 zn_resolution = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_resolution());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMultiCameraStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SubscribeMultiCameraStreamParams*>(
      &from));
}

void SubscribeMultiCameraStreamParams::MergeFrom(const SubscribeMultiCameraStreamParams& from) {
  SubscribeMultiCameraStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_zn_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_zn_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.camerastreamid_ = from._impl_.camerastreamid_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.zn_resolution_ = from._impl_.zn_resolution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SubscribeMultiCameraStreamParams::CopyFrom(const SubscribeMultiCameraStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMultiCameraStreamParams::IsInitialized() const {
  return true;
}

void SubscribeMultiCameraStreamParams::InternalSwap(SubscribeMultiCameraStreamParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeMultiCameraStreamParams, _impl_.zn_resolution_)
      + sizeof(SubscribeMultiCameraStreamParams::_impl_.zn_resolution_)
      - PROTOBUF_FIELD_OFFSET(SubscribeMultiCameraStreamParams, _impl_.zn_user_)>(
          reinterpret_cast<char*>(&_impl_.zn_user_),
          reinterpret_cast<char*>(&other->_impl_.zn_user_));
}

std::string SubscribeMultiCameraStreamParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams";
}

// ===================================================================

class UnSubscribeMultiCameraStreamParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnSubscribeMultiCameraStreamParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnSubscribeMultiCameraStreamParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& zn_user(const UnSubscribeMultiCameraStreamParams* msg);
  static void set_has_zn_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camerastreamid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
UnSubscribeMultiCameraStreamParams::_Internal::zn_user(const UnSubscribeMultiCameraStreamParams* msg) {
  return *msg->_impl_.zn_user_;
}
UnSubscribeMultiCameraStreamParams::UnSubscribeMultiCameraStreamParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
}
UnSubscribeMultiCameraStreamParams::UnSubscribeMultiCameraStreamParams(const UnSubscribeMultiCameraStreamParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UnSubscribeMultiCameraStreamParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.zn_recv_handle_) {}

    , decltype(_impl_.camerastreamid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zn_user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.zn_user_);
  }
  ::memcpy(&_impl_.zn_recv_handle_, &from._impl_.zn_recv_handle_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.camerastreamid_) -
    reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.camerastreamid_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
}

inline void UnSubscribeMultiCameraStreamParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_user_){nullptr}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

    , decltype(_impl_.camerastreamid_) { ::int64_t{0} }

  };
}

UnSubscribeMultiCameraStreamParams::~UnSubscribeMultiCameraStreamParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnSubscribeMultiCameraStreamParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.zn_user_;
}

void UnSubscribeMultiCameraStreamParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnSubscribeMultiCameraStreamParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.zn_user_ != nullptr);
    _impl_.zn_user_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.zn_recv_handle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.camerastreamid_) -
        reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.camerastreamid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnSubscribeMultiCameraStreamParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zn_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 cameraStreamID = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_camerastreamid(&has_bits);
          _impl_.camerastreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnSubscribeMultiCameraStreamParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::zn_user(this),
        _Internal::zn_user(this).GetCachedSize(), target, stream);
  }

  // optional int64 cameraStreamID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_camerastreamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  return target;
}

::size_t UnSubscribeMultiCameraStreamParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser zn_user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.zn_user_);
    }

    // optional int64 zn_recv_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_zn_recv_handle());
    }

    // optional int64 cameraStreamID = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_camerastreamid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnSubscribeMultiCameraStreamParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnSubscribeMultiCameraStreamParams*>(
      &from));
}

void UnSubscribeMultiCameraStreamParams::MergeFrom(const UnSubscribeMultiCameraStreamParams& from) {
  UnSubscribeMultiCameraStreamParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_zn_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_zn_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.camerastreamid_ = from._impl_.camerastreamid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnSubscribeMultiCameraStreamParams::CopyFrom(const UnSubscribeMultiCameraStreamParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSubscribeMultiCameraStreamParams::IsInitialized() const {
  return true;
}

void UnSubscribeMultiCameraStreamParams::InternalSwap(UnSubscribeMultiCameraStreamParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UnSubscribeMultiCameraStreamParams, _impl_.camerastreamid_)
      + sizeof(UnSubscribeMultiCameraStreamParams::_impl_.camerastreamid_)
      - PROTOBUF_FIELD_OFFSET(UnSubscribeMultiCameraStreamParams, _impl_.zn_user_)>(
          reinterpret_cast<char*>(&_impl_.zn_user_),
          reinterpret_cast<char*>(&other->_impl_.zn_user_));
}

std::string UnSubscribeMultiCameraStreamParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams";
}

// ===================================================================

class SetRawDataResolutionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetRawDataResolutionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, _impl_._has_bits_);
  static void set_has_zn_resolution(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetRawDataResolutionParams::SetRawDataResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
}
SetRawDataResolutionParams::SetRawDataResolutionParams(const SetRawDataResolutionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
}

inline void SetRawDataResolutionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

    , decltype(_impl_.zn_resolution_) { 0 }

  };
}

SetRawDataResolutionParams::~SetRawDataResolutionParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetRawDataResolutionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetRawDataResolutionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetRawDataResolutionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.zn_recv_handle_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.zn_resolution_) -
        reinterpret_cast<char*>(&_impl_.zn_recv_handle_)) + sizeof(_impl_.zn_resolution_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetRawDataResolutionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 zn_resolution = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_resolution(&has_bits);
          _impl_.zn_resolution_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 zn_recv_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetRawDataResolutionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 zn_resolution = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_zn_resolution(), target);
  }

  // optional int64 zn_recv_handle = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        2, this->_internal_zn_recv_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  return target;
}

::size_t SetRawDataResolutionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional int64 zn_recv_handle = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_zn_recv_handle());
    }

    // optional int32 zn_resolution = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zn_resolution());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetRawDataResolutionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetRawDataResolutionParams*>(
      &from));
}

void SetRawDataResolutionParams::MergeFrom(const SetRawDataResolutionParams& from) {
  SetRawDataResolutionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.zn_resolution_ = from._impl_.zn_resolution_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetRawDataResolutionParams::CopyFrom(const SetRawDataResolutionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetRawDataResolutionParams::IsInitialized() const {
  return true;
}

void SetRawDataResolutionParams::InternalSwap(SetRawDataResolutionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, _impl_.zn_resolution_)
      + sizeof(SetRawDataResolutionParams::_impl_.zn_resolution_)
      - PROTOBUF_FIELD_OFFSET(SetRawDataResolutionParams, _impl_.zn_recv_handle_)>(
          reinterpret_cast<char*>(&_impl_.zn_recv_handle_),
          reinterpret_cast<char*>(&other->_impl_.zn_recv_handle_));
}

std::string SetRawDataResolutionParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams";
}

// ===================================================================

class GetResolutionParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetResolutionParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetResolutionParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetResolutionParams::GetResolutionParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
}
GetResolutionParams::GetResolutionParams(const GetResolutionParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
}

inline void GetResolutionParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

  };
}

GetResolutionParams::~GetResolutionParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetResolutionParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetResolutionParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetResolutionParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetResolutionParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetResolutionParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  return target;
}

::size_t GetResolutionParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_recv_handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_recv_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetResolutionParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetResolutionParams*>(
      &from));
}

void GetResolutionParams::MergeFrom(const GetResolutionParams& from) {
  GetResolutionParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_recv_handle(from._internal_zn_recv_handle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetResolutionParams::CopyFrom(const GetResolutionParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetResolutionParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResolutionParams::IsInitialized() const {
  return true;
}

void GetResolutionParams::InternalSwap(GetResolutionParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_recv_handle_, other->_impl_.zn_recv_handle_);
}

std::string GetResolutionParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetResolutionParams";
}

// ===================================================================

class GetRawDataTypeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetRawDataTypeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetRawDataTypeParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetRawDataTypeParams::GetRawDataTypeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
}
GetRawDataTypeParams::GetRawDataTypeParams(const GetRawDataTypeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
}

inline void GetRawDataTypeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

  };
}

GetRawDataTypeParams::~GetRawDataTypeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetRawDataTypeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetRawDataTypeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetRawDataTypeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetRawDataTypeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetRawDataTypeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  return target;
}

::size_t GetRawDataTypeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_recv_handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_recv_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetRawDataTypeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetRawDataTypeParams*>(
      &from));
}

void GetRawDataTypeParams::MergeFrom(const GetRawDataTypeParams& from) {
  GetRawDataTypeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_recv_handle(from._internal_zn_recv_handle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetRawDataTypeParams::CopyFrom(const GetRawDataTypeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRawDataTypeParams::IsInitialized() const {
  return true;
}

void GetRawDataTypeParams::InternalSwap(GetRawDataTypeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_recv_handle_, other->_impl_.zn_recv_handle_);
}

std::string GetRawDataTypeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams";
}

// ===================================================================

class CameraInfos::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraInfos>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CameraInfos, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isselecteddevice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_isselectedasmulticamera(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_isrunningasmulticamera(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

CameraInfos::CameraInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CameraInfos)
}
CameraInfos::CameraInfos(const CameraInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CameraInfos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.isselecteddevice_) {}

    , decltype(_impl_.isselectedasmulticamera_) {}

    , decltype(_impl_.isrunningasmulticamera_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.isselecteddevice_, &from._impl_.isselecteddevice_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.isrunningasmulticamera_) -
    reinterpret_cast<char*>(&_impl_.isselecteddevice_)) + sizeof(_impl_.isrunningasmulticamera_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CameraInfos)
}

inline void CameraInfos::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.isselecteddevice_) { false }

    , decltype(_impl_.isselectedasmulticamera_) { false }

    , decltype(_impl_.isrunningasmulticamera_) { false }

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CameraInfos::~CameraInfos() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CameraInfos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CameraInfos::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicename_.Destroy();
}

void CameraInfos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CameraInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CameraInfos)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.isselecteddevice_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.isrunningasmulticamera_) -
      reinterpret_cast<char*>(&_impl_.isselecteddevice_)) + sizeof(_impl_.isrunningasmulticamera_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CameraInfos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isSelectedDevice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_isselecteddevice(&has_bits);
          _impl_.isselecteddevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isSelectedAsMultiCamera = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_isselectedasmulticamera(&has_bits);
          _impl_.isselectedasmulticamera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isRunningAsMultiCamera = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_isrunningasmulticamera(&has_bits);
          _impl_.isrunningasmulticamera_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CameraInfos::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CameraInfos)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool isSelectedDevice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isselecteddevice(), target);
  }

  // optional bool isSelectedAsMultiCamera = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_isselectedasmulticamera(), target);
  }

  // optional bool isRunningAsMultiCamera = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_isrunningasmulticamera(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CameraInfos)
  return target;
}

::size_t CameraInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CameraInfos)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicename());
    }

    // optional bool isSelectedDevice = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

    // optional bool isSelectedAsMultiCamera = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool isRunningAsMultiCamera = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraInfos::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CameraInfos*>(
      &from));
}

void CameraInfos::MergeFrom(const CameraInfos& from) {
  CameraInfos* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CameraInfos)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isselecteddevice_ = from._impl_.isselecteddevice_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.isselectedasmulticamera_ = from._impl_.isselectedasmulticamera_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.isrunningasmulticamera_ = from._impl_.isrunningasmulticamera_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CameraInfos::CopyFrom(const CameraInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CameraInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraInfos::IsInitialized() const {
  return true;
}

void CameraInfos::InternalSwap(CameraInfos* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicename_, lhs_arena,
                                       &other->_impl_.devicename_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraInfos, _impl_.isrunningasmulticamera_)
      + sizeof(CameraInfos::_impl_.isrunningasmulticamera_)
      - PROTOBUF_FIELD_OFFSET(CameraInfos, _impl_.isselecteddevice_)>(
          reinterpret_cast<char*>(&_impl_.isselecteddevice_),
          reinterpret_cast<char*>(&other->_impl_.isselecteddevice_));
}

std::string CameraInfos::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CameraInfos";
}

// ===================================================================

class GetCameraList::_Internal {
 public:
};

GetCameraList::GetCameraList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetCameraList)
}
GetCameraList::GetCameraList(const GetCameraList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetCameraList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camerainfo_){from._impl_.camerainfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetCameraList)
}

inline void GetCameraList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camerainfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetCameraList::~GetCameraList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetCameraList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetCameraList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camerainfo_.~RepeatedPtrField();
}

void GetCameraList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetCameraList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetCameraList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camerainfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetCameraList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.CameraInfos CameraInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camerainfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetCameraList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetCameraList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.CameraInfos CameraInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camerainfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_camerainfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetCameraList)
  return target;
}

::size_t GetCameraList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetCameraList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.CameraInfos CameraInfo = 1;
  total_size += 1UL * this->_internal_camerainfo_size();
  for (const auto& msg : this->_impl_.camerainfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCameraList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetCameraList*>(
      &from));
}

void GetCameraList::MergeFrom(const GetCameraList& from) {
  GetCameraList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetCameraList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.camerainfo_.MergeFrom(from._impl_.camerainfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetCameraList::CopyFrom(const GetCameraList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetCameraList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCameraList::IsInitialized() const {
  return true;
}

void GetCameraList::InternalSwap(GetCameraList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camerainfo_.InternalSwap(&other->_impl_.camerainfo_);
}

std::string GetCameraList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetCameraList";
}

// ===================================================================

class MultiCameraStreamInfos::_Internal {
 public:
  using HasBits = decltype(std::declval<MultiCameraStreamInfos>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MultiCameraStreamInfos, _impl_._has_bits_);
  static void set_has_camerastreamid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

MultiCameraStreamInfos::MultiCameraStreamInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
}
MultiCameraStreamInfos::MultiCameraStreamInfos(const MultiCameraStreamInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
}

inline void MultiCameraStreamInfos::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.camerastreamid_) { ::int64_t{0} }

  };
}

MultiCameraStreamInfos::~MultiCameraStreamInfos() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiCameraStreamInfos::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiCameraStreamInfos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiCameraStreamInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camerastreamid_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiCameraStreamInfos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 cameraStreamID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_camerastreamid(&has_bits);
          _impl_.camerastreamid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MultiCameraStreamInfos::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 cameraStreamID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_camerastreamid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  return target;
}

::size_t MultiCameraStreamInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 cameraStreamID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_camerastreamid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCameraStreamInfos::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MultiCameraStreamInfos*>(
      &from));
}

void MultiCameraStreamInfos::MergeFrom(const MultiCameraStreamInfos& from) {
  MultiCameraStreamInfos* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_camerastreamid(from._internal_camerastreamid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiCameraStreamInfos::CopyFrom(const MultiCameraStreamInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCameraStreamInfos::IsInitialized() const {
  return true;
}

void MultiCameraStreamInfos::InternalSwap(MultiCameraStreamInfos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.camerastreamid_, other->_impl_.camerastreamid_);
}

std::string MultiCameraStreamInfos::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos";
}

// ===================================================================

class MultiCameraStreamList::_Internal {
 public:
};

MultiCameraStreamList::MultiCameraStreamList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
}
MultiCameraStreamList::MultiCameraStreamList(const MultiCameraStreamList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MultiCameraStreamList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camerastreaminfo_){from._impl_.camerastreaminfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
}

inline void MultiCameraStreamList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.camerastreaminfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MultiCameraStreamList::~MultiCameraStreamList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MultiCameraStreamList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.camerastreaminfo_.~RepeatedPtrField();
}

void MultiCameraStreamList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MultiCameraStreamList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.camerastreaminfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MultiCameraStreamList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos CameraStreamInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camerastreaminfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MultiCameraStreamList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos CameraStreamInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_camerastreaminfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_camerastreaminfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  return target;
}

::size_t MultiCameraStreamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos CameraStreamInfo = 1;
  total_size += 1UL * this->_internal_camerastreaminfo_size();
  for (const auto& msg : this->_impl_.camerastreaminfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiCameraStreamList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MultiCameraStreamList*>(
      &from));
}

void MultiCameraStreamList::MergeFrom(const MultiCameraStreamList& from) {
  MultiCameraStreamList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.camerastreaminfo_.MergeFrom(from._impl_.camerastreaminfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MultiCameraStreamList::CopyFrom(const MultiCameraStreamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.MultiCameraStreamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiCameraStreamList::IsInitialized() const {
  return true;
}

void MultiCameraStreamList::InternalSwap(MultiCameraStreamList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.camerastreaminfo_.InternalSwap(&other->_impl_.camerastreaminfo_);
}

std::string MultiCameraStreamList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.MultiCameraStreamList";
}

// ===================================================================

class GetMultiCameraStreamList::_Internal {
 public:
  using HasBits = decltype(std::declval<GetMultiCameraStreamList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetMultiCameraStreamList, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const GetMultiCameraStreamList* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
GetMultiCameraStreamList::_Internal::user(const GetMultiCameraStreamList* msg) {
  return *msg->_impl_.user_;
}
GetMultiCameraStreamList::GetMultiCameraStreamList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
}
GetMultiCameraStreamList::GetMultiCameraStreamList(const GetMultiCameraStreamList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetMultiCameraStreamList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
}

inline void GetMultiCameraStreamList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

GetMultiCameraStreamList::~GetMultiCameraStreamList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMultiCameraStreamList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void GetMultiCameraStreamList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMultiCameraStreamList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetMultiCameraStreamList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetMultiCameraStreamList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  return target;
}

::size_t GetMultiCameraStreamList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMultiCameraStreamList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetMultiCameraStreamList*>(
      &from));
}

void GetMultiCameraStreamList::MergeFrom(const GetMultiCameraStreamList& from) {
  GetMultiCameraStreamList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetMultiCameraStreamList::CopyFrom(const GetMultiCameraStreamList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMultiCameraStreamList::IsInitialized() const {
  return true;
}

void GetMultiCameraStreamList::InternalSwap(GetMultiCameraStreamList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string GetMultiCameraStreamList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList";
}

// ===================================================================

class MicInfos::_Internal {
 public:
  using HasBits = decltype(std::declval<MicInfos>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(MicInfos, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isselecteddevice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

MicInfos::MicInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.MicInfos)
}
MicInfos::MicInfos(const MicInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  MicInfos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.isselecteddevice_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), _this->GetArenaForAllocation());
  }
  _this->_impl_.isselecteddevice_ = from._impl_.isselecteddevice_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.MicInfos)
}

inline void MicInfos::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.isselecteddevice_) { false }

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MicInfos::~MicInfos() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.MicInfos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MicInfos::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicename_.Destroy();
}

void MicInfos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MicInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.MicInfos)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.isselecteddevice_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* MicInfos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isSelectedDevice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_isselecteddevice(&has_bits);
          _impl_.isselecteddevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* MicInfos::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.MicInfos)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool isSelectedDevice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isselecteddevice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.MicInfos)
  return target;
}

::size_t MicInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.MicInfos)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicename());
    }

    // optional bool isSelectedDevice = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MicInfos::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const MicInfos*>(
      &from));
}

void MicInfos::MergeFrom(const MicInfos& from) {
  MicInfos* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.MicInfos)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isselecteddevice_ = from._impl_.isselecteddevice_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void MicInfos::CopyFrom(const MicInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.MicInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MicInfos::IsInitialized() const {
  return true;
}

void MicInfos::InternalSwap(MicInfos* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicename_, lhs_arena,
                                       &other->_impl_.devicename_, rhs_arena);

  swap(_impl_.isselecteddevice_, other->_impl_.isselecteddevice_);
}

std::string MicInfos::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.MicInfos";
}

// ===================================================================

class GetMicList::_Internal {
 public:
};

GetMicList::GetMicList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetMicList)
}
GetMicList::GetMicList(const GetMicList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetMicList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.micinfo_){from._impl_.micinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetMicList)
}

inline void GetMicList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.micinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetMicList::~GetMicList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetMicList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetMicList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.micinfo_.~RepeatedPtrField();
}

void GetMicList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetMicList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetMicList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.micinfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetMicList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.MicInfos MicInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_micinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetMicList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetMicList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.MicInfos MicInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_micinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_micinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetMicList)
  return target;
}

::size_t GetMicList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetMicList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.MicInfos MicInfo = 1;
  total_size += 1UL * this->_internal_micinfo_size();
  for (const auto& msg : this->_impl_.micinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetMicList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetMicList*>(
      &from));
}

void GetMicList::MergeFrom(const GetMicList& from) {
  GetMicList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetMicList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.micinfo_.MergeFrom(from._impl_.micinfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetMicList::CopyFrom(const GetMicList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetMicList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetMicList::IsInitialized() const {
  return true;
}

void GetMicList::InternalSwap(GetMicList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.micinfo_.InternalSwap(&other->_impl_.micinfo_);
}

std::string GetMicList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetMicList";
}

// ===================================================================

class SpeakerInfos::_Internal {
 public:
  using HasBits = decltype(std::declval<SpeakerInfos>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SpeakerInfos, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_devicename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_isselecteddevice(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SpeakerInfos::SpeakerInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
}
SpeakerInfos::SpeakerInfos(const SpeakerInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SpeakerInfos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.isselecteddevice_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.devicename_.Set(from._internal_devicename(), _this->GetArenaForAllocation());
  }
  _this->_impl_.isselecteddevice_ = from._impl_.isselecteddevice_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
}

inline void SpeakerInfos::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

    , decltype(_impl_.devicename_) {}

    , decltype(_impl_.isselecteddevice_) { false }

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.devicename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.devicename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpeakerInfos::~SpeakerInfos() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpeakerInfos::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
  _impl_.devicename_.Destroy();
}

void SpeakerInfos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpeakerInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.deviceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.devicename_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.isselecteddevice_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpeakerInfos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string deviceName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_devicename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool isSelectedDevice = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_isselecteddevice(&has_bits);
          _impl_.isselecteddevice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpeakerInfos::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string deviceName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_devicename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional bool isSelectedDevice = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_isselecteddevice(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  return target;
}

::size_t SpeakerInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string deviceID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_deviceid());
    }

    // optional string deviceName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_devicename());
    }

    // optional bool isSelectedDevice = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpeakerInfos::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpeakerInfos*>(
      &from));
}

void SpeakerInfos::MergeFrom(const SpeakerInfos& from) {
  SpeakerInfos* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_deviceid(from._internal_deviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_devicename(from._internal_devicename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.isselecteddevice_ = from._impl_.isselecteddevice_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpeakerInfos::CopyFrom(const SpeakerInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SpeakerInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpeakerInfos::IsInitialized() const {
  return true;
}

void SpeakerInfos::InternalSwap(SpeakerInfos* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.devicename_, lhs_arena,
                                       &other->_impl_.devicename_, rhs_arena);

  swap(_impl_.isselecteddevice_, other->_impl_.isselecteddevice_);
}

std::string SpeakerInfos::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SpeakerInfos";
}

// ===================================================================

class GetSpeakerList::_Internal {
 public:
};

GetSpeakerList::GetSpeakerList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
}
GetSpeakerList::GetSpeakerList(const GetSpeakerList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetSpeakerList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.speakerinfo_){from._impl_.speakerinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
}

inline void GetSpeakerList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.speakerinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetSpeakerList::~GetSpeakerList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetSpeakerList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.speakerinfo_.~RepeatedPtrField();
}

void GetSpeakerList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetSpeakerList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.speakerinfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetSpeakerList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.SpeakerInfos SpeakerInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_speakerinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetSpeakerList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.SpeakerInfos SpeakerInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_speakerinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_speakerinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  return target;
}

::size_t GetSpeakerList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.SpeakerInfos SpeakerInfo = 1;
  total_size += 1UL * this->_internal_speakerinfo_size();
  for (const auto& msg : this->_impl_.speakerinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSpeakerList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetSpeakerList*>(
      &from));
}

void GetSpeakerList::MergeFrom(const GetSpeakerList& from) {
  GetSpeakerList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.speakerinfo_.MergeFrom(from._impl_.speakerinfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetSpeakerList::CopyFrom(const GetSpeakerList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetSpeakerList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSpeakerList::IsInitialized() const {
  return true;
}

void GetSpeakerList::InternalSwap(GetSpeakerList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.speakerinfo_.InternalSwap(&other->_impl_.speakerinfo_);
}

std::string GetSpeakerList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetSpeakerList";
}

// ===================================================================

class SendCommandParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SendCommandParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SendCommandParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const SendCommandParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_strcmd(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
SendCommandParams::_Internal::user(const SendCommandParams* msg) {
  return *msg->_impl_.user_;
}
SendCommandParams::SendCommandParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SendCommandParams)
}
SendCommandParams::SendCommandParams(const SendCommandParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SendCommandParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcmd_) {}

    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.strcmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.strcmd_.Set(from._internal_strcmd(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SendCommandParams)
}

inline void SendCommandParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.strcmd_) {}

    , decltype(_impl_.user_){nullptr}
  };
  _impl_.strcmd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.strcmd_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendCommandParams::~SendCommandParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendCommandParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.strcmd_.Destroy();
  if (this != internal_default_instance()) delete _impl_.user_;
}

void SendCommandParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendCommandParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.strcmd_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.user_ != nullptr);
      _impl_.user_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SendCommandParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string strCmd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_strcmd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SendCommandParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  // optional string strCmd = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_strcmd();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  return target;
}

::size_t SendCommandParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string strCmd = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_strcmd());
    }

    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendCommandParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SendCommandParams*>(
      &from));
}

void SendCommandParams::MergeFrom(const SendCommandParams& from) {
  SendCommandParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_strcmd(from._internal_strcmd());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SendCommandParams::CopyFrom(const SendCommandParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SendCommandParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandParams::IsInitialized() const {
  return true;
}

void SendCommandParams::InternalSwap(SendCommandParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.strcmd_, lhs_arena,
                                       &other->_impl_.strcmd_, rhs_arena);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string SendCommandParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SendCommandParams";
}

// ===================================================================

class PhoneSupportCountryInfos::_Internal {
 public:
  using HasBits = decltype(std::declval<PhoneSupportCountryInfos>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PhoneSupportCountryInfos, _impl_._has_bits_);
  static void set_has_countryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_countryname(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

PhoneSupportCountryInfos::PhoneSupportCountryInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
}
PhoneSupportCountryInfos::PhoneSupportCountryInfos(const PhoneSupportCountryInfos& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PhoneSupportCountryInfos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countryid_) {}

    , decltype(_impl_.countryname_) {}

    , decltype(_impl_.countrycode_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.countryid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countryid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.countryid_.Set(from._internal_countryid(), _this->GetArenaForAllocation());
  }
  _impl_.countryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countryname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.countryname_.Set(from._internal_countryname(), _this->GetArenaForAllocation());
  }
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
}

inline void PhoneSupportCountryInfos::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countryid_) {}

    , decltype(_impl_.countryname_) {}

    , decltype(_impl_.countrycode_) {}

  };
  _impl_.countryid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countryid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countryname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countryname_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PhoneSupportCountryInfos::~PhoneSupportCountryInfos() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PhoneSupportCountryInfos::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countryid_.Destroy();
  _impl_.countryname_.Destroy();
  _impl_.countrycode_.Destroy();
}

void PhoneSupportCountryInfos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PhoneSupportCountryInfos::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.countryid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.countryname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PhoneSupportCountryInfos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string countryID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_countryid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string countryName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_countryname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string countryCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PhoneSupportCountryInfos::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string countryID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_countryid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string countryName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_countryname();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string countryCode = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_countrycode();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  return target;
}

::size_t PhoneSupportCountryInfos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string countryID = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countryid());
    }

    // optional string countryName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countryname());
    }

    // optional string countryCode = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countrycode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PhoneSupportCountryInfos::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PhoneSupportCountryInfos*>(
      &from));
}

void PhoneSupportCountryInfos::MergeFrom(const PhoneSupportCountryInfos& from) {
  PhoneSupportCountryInfos* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_countryid(from._internal_countryid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_countryname(from._internal_countryname());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PhoneSupportCountryInfos::CopyFrom(const PhoneSupportCountryInfos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PhoneSupportCountryInfos::IsInitialized() const {
  return true;
}

void PhoneSupportCountryInfos::InternalSwap(PhoneSupportCountryInfos* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countryid_, lhs_arena,
                                       &other->_impl_.countryid_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countryname_, lhs_arena,
                                       &other->_impl_.countryname_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countrycode_, lhs_arena,
                                       &other->_impl_.countrycode_, rhs_arena);
}

std::string PhoneSupportCountryInfos::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos";
}

// ===================================================================

class GetPhoneSupportCountryList::_Internal {
 public:
};

GetPhoneSupportCountryList::GetPhoneSupportCountryList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
}
GetPhoneSupportCountryList::GetPhoneSupportCountryList(const GetPhoneSupportCountryList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GetPhoneSupportCountryList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.phonesupportcountryinfo_){from._impl_.phonesupportcountryinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
}

inline void GetPhoneSupportCountryList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.phonesupportcountryinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetPhoneSupportCountryList::~GetPhoneSupportCountryList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPhoneSupportCountryList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.phonesupportcountryinfo_.~RepeatedPtrField();
}

void GetPhoneSupportCountryList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetPhoneSupportCountryList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.phonesupportcountryinfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetPhoneSupportCountryList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos PhoneSupportCountryInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_phonesupportcountryinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetPhoneSupportCountryList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos PhoneSupportCountryInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_phonesupportcountryinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_phonesupportcountryinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  return target;
}

::size_t GetPhoneSupportCountryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos PhoneSupportCountryInfo = 1;
  total_size += 1UL * this->_internal_phonesupportcountryinfo_size();
  for (const auto& msg : this->_impl_.phonesupportcountryinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetPhoneSupportCountryList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetPhoneSupportCountryList*>(
      &from));
}

void GetPhoneSupportCountryList::MergeFrom(const GetPhoneSupportCountryList& from) {
  GetPhoneSupportCountryList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.phonesupportcountryinfo_.MergeFrom(from._impl_.phonesupportcountryinfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetPhoneSupportCountryList::CopyFrom(const GetPhoneSupportCountryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPhoneSupportCountryList::IsInitialized() const {
  return true;
}

void GetPhoneSupportCountryList::InternalSwap(GetPhoneSupportCountryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.phonesupportcountryinfo_.InternalSwap(&other->_impl_.phonesupportcountryinfo_);
}

std::string GetPhoneSupportCountryList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList";
}

// ===================================================================

class InviteByPhoneParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InviteByPhoneParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InviteByPhoneParams, _impl_._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

InviteByPhoneParams::InviteByPhoneParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
}
InviteByPhoneParams::InviteByPhoneParams(const InviteByPhoneParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InviteByPhoneParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenumber_) {}

    , decltype(_impl_.name_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), _this->GetArenaForAllocation());
  }
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.phonenumber_.Set(from._internal_phonenumber(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
}

inline void InviteByPhoneParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenumber_) {}

    , decltype(_impl_.name_) {}

  };
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InviteByPhoneParams::~InviteByPhoneParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InviteByPhoneParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrycode_.Destroy();
  _impl_.phonenumber_.Destroy();
  _impl_.name_.Destroy();
}

void InviteByPhoneParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InviteByPhoneParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InviteByPhoneParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InviteByPhoneParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_countrycode();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phoneNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_phonenumber();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  return target;
}

::size_t InviteByPhoneParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countrycode());
    }

    // optional string phoneNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phonenumber());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InviteByPhoneParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InviteByPhoneParams*>(
      &from));
}

void InviteByPhoneParams::MergeFrom(const InviteByPhoneParams& from) {
  InviteByPhoneParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenumber(from._internal_phonenumber());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_name(from._internal_name());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InviteByPhoneParams::CopyFrom(const InviteByPhoneParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.InviteByPhoneParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteByPhoneParams::IsInitialized() const {
  return true;
}

void InviteByPhoneParams::InternalSwap(InviteByPhoneParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countrycode_, lhs_arena,
                                       &other->_impl_.countrycode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phonenumber_, lhs_arena,
                                       &other->_impl_.phonenumber_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
}

std::string InviteByPhoneParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.InviteByPhoneParams";
}

// ===================================================================

class InvitePhoneUserParams::_Internal {
 public:
  using HasBits = decltype(std::declval<InvitePhoneUserParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InvitePhoneUserParams, _impl_._has_bits_);
  static void set_has_countrycode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_phonenumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bpressone(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_bgreeting(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

InvitePhoneUserParams::InvitePhoneUserParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
}
InvitePhoneUserParams::InvitePhoneUserParams(const InvitePhoneUserParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InvitePhoneUserParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenumber_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.bpressone_) {}

    , decltype(_impl_.bgreeting_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.countrycode_.Set(from._internal_countrycode(), _this->GetArenaForAllocation());
  }
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.phonenumber_.Set(from._internal_phonenumber(), _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.bpressone_, &from._impl_.bpressone_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.bgreeting_) -
    reinterpret_cast<char*>(&_impl_.bpressone_)) + sizeof(_impl_.bgreeting_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
}

inline void InvitePhoneUserParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.countrycode_) {}

    , decltype(_impl_.phonenumber_) {}

    , decltype(_impl_.name_) {}

    , decltype(_impl_.bpressone_) { false }

    , decltype(_impl_.bgreeting_) { false }

  };
  _impl_.countrycode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.countrycode_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.phonenumber_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.phonenumber_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InvitePhoneUserParams::~InvitePhoneUserParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InvitePhoneUserParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.countrycode_.Destroy();
  _impl_.phonenumber_.Destroy();
  _impl_.name_.Destroy();
}

void InvitePhoneUserParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InvitePhoneUserParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.countrycode_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.phonenumber_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.name_.ClearNonDefaultToEmpty();
    }
  }
  ::memset(&_impl_.bpressone_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bgreeting_) -
      reinterpret_cast<char*>(&_impl_.bpressone_)) + sizeof(_impl_.bgreeting_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InvitePhoneUserParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string countryCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_countrycode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string phoneNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phonenumber();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bPressOne = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_bpressone(&has_bits);
          _impl_.bpressone_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool bGreeting = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          _Internal::set_has_bgreeting(&has_bits);
          _impl_.bgreeting_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InvitePhoneUserParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string countryCode = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_countrycode();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string phoneNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_phonenumber();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_name();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bool bPressOne = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_bpressone(), target);
  }

  // optional bool bGreeting = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        5, this->_internal_bgreeting(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  return target;
}

::size_t InvitePhoneUserParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string countryCode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_countrycode());
    }

    // optional string phoneNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phonenumber());
    }

    // optional string name = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_name());
    }

    // optional bool bPressOne = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

    // optional bool bGreeting = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InvitePhoneUserParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InvitePhoneUserParams*>(
      &from));
}

void InvitePhoneUserParams::MergeFrom(const InvitePhoneUserParams& from) {
  InvitePhoneUserParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_countrycode(from._internal_countrycode());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_phonenumber(from._internal_phonenumber());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.bpressone_ = from._impl_.bpressone_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.bgreeting_ = from._impl_.bgreeting_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InvitePhoneUserParams::CopyFrom(const InvitePhoneUserParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitePhoneUserParams::IsInitialized() const {
  return true;
}

void InvitePhoneUserParams::InternalSwap(InvitePhoneUserParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.countrycode_, lhs_arena,
                                       &other->_impl_.countrycode_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.phonenumber_, lhs_arena,
                                       &other->_impl_.phonenumber_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InvitePhoneUserParams, _impl_.bgreeting_)
      + sizeof(InvitePhoneUserParams::_impl_.bgreeting_)
      - PROTOBUF_FIELD_OFFSET(InvitePhoneUserParams, _impl_.bpressone_)>(
          reinterpret_cast<char*>(&_impl_.bpressone_),
          reinterpret_cast<char*>(&other->_impl_.bpressone_));
}

std::string InvitePhoneUserParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams";
}

// ===================================================================

class LocalCameraCtrlTurnLeftParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCameraCtrlTurnLeftParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCameraCtrlTurnLeftParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalCameraCtrlTurnLeftParams::LocalCameraCtrlTurnLeftParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
}
LocalCameraCtrlTurnLeftParams::LocalCameraCtrlTurnLeftParams(const LocalCameraCtrlTurnLeftParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
}

inline void LocalCameraCtrlTurnLeftParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_) { 0u }

  };
}

LocalCameraCtrlTurnLeftParams::~LocalCameraCtrlTurnLeftParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCameraCtrlTurnLeftParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalCameraCtrlTurnLeftParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCameraCtrlTurnLeftParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCameraCtrlTurnLeftParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCameraCtrlTurnLeftParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  return target;
}

::size_t LocalCameraCtrlTurnLeftParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCameraCtrlTurnLeftParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCameraCtrlTurnLeftParams*>(
      &from));
}

void LocalCameraCtrlTurnLeftParams::MergeFrom(const LocalCameraCtrlTurnLeftParams& from) {
  LocalCameraCtrlTurnLeftParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCameraCtrlTurnLeftParams::CopyFrom(const LocalCameraCtrlTurnLeftParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCameraCtrlTurnLeftParams::IsInitialized() const {
  return true;
}

void LocalCameraCtrlTurnLeftParams::InternalSwap(LocalCameraCtrlTurnLeftParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.range_, other->_impl_.range_);
}

std::string LocalCameraCtrlTurnLeftParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams";
}

// ===================================================================

class LocalCameraCtrlTurnRightParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCameraCtrlTurnRightParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCameraCtrlTurnRightParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalCameraCtrlTurnRightParams::LocalCameraCtrlTurnRightParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
}
LocalCameraCtrlTurnRightParams::LocalCameraCtrlTurnRightParams(const LocalCameraCtrlTurnRightParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
}

inline void LocalCameraCtrlTurnRightParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_) { 0u }

  };
}

LocalCameraCtrlTurnRightParams::~LocalCameraCtrlTurnRightParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCameraCtrlTurnRightParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalCameraCtrlTurnRightParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCameraCtrlTurnRightParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCameraCtrlTurnRightParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCameraCtrlTurnRightParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  return target;
}

::size_t LocalCameraCtrlTurnRightParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCameraCtrlTurnRightParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCameraCtrlTurnRightParams*>(
      &from));
}

void LocalCameraCtrlTurnRightParams::MergeFrom(const LocalCameraCtrlTurnRightParams& from) {
  LocalCameraCtrlTurnRightParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCameraCtrlTurnRightParams::CopyFrom(const LocalCameraCtrlTurnRightParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCameraCtrlTurnRightParams::IsInitialized() const {
  return true;
}

void LocalCameraCtrlTurnRightParams::InternalSwap(LocalCameraCtrlTurnRightParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.range_, other->_impl_.range_);
}

std::string LocalCameraCtrlTurnRightParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams";
}

// ===================================================================

class LocalCameraCtrlTurnUpParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCameraCtrlTurnUpParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCameraCtrlTurnUpParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalCameraCtrlTurnUpParams::LocalCameraCtrlTurnUpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
}
LocalCameraCtrlTurnUpParams::LocalCameraCtrlTurnUpParams(const LocalCameraCtrlTurnUpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
}

inline void LocalCameraCtrlTurnUpParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_) { 0u }

  };
}

LocalCameraCtrlTurnUpParams::~LocalCameraCtrlTurnUpParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCameraCtrlTurnUpParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalCameraCtrlTurnUpParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCameraCtrlTurnUpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCameraCtrlTurnUpParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCameraCtrlTurnUpParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  return target;
}

::size_t LocalCameraCtrlTurnUpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCameraCtrlTurnUpParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCameraCtrlTurnUpParams*>(
      &from));
}

void LocalCameraCtrlTurnUpParams::MergeFrom(const LocalCameraCtrlTurnUpParams& from) {
  LocalCameraCtrlTurnUpParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCameraCtrlTurnUpParams::CopyFrom(const LocalCameraCtrlTurnUpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCameraCtrlTurnUpParams::IsInitialized() const {
  return true;
}

void LocalCameraCtrlTurnUpParams::InternalSwap(LocalCameraCtrlTurnUpParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.range_, other->_impl_.range_);
}

std::string LocalCameraCtrlTurnUpParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams";
}

// ===================================================================

class LocalCameraCtrlTurnDownParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCameraCtrlTurnDownParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCameraCtrlTurnDownParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalCameraCtrlTurnDownParams::LocalCameraCtrlTurnDownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
}
LocalCameraCtrlTurnDownParams::LocalCameraCtrlTurnDownParams(const LocalCameraCtrlTurnDownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
}

inline void LocalCameraCtrlTurnDownParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_) { 0u }

  };
}

LocalCameraCtrlTurnDownParams::~LocalCameraCtrlTurnDownParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCameraCtrlTurnDownParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalCameraCtrlTurnDownParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCameraCtrlTurnDownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCameraCtrlTurnDownParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCameraCtrlTurnDownParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  return target;
}

::size_t LocalCameraCtrlTurnDownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCameraCtrlTurnDownParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCameraCtrlTurnDownParams*>(
      &from));
}

void LocalCameraCtrlTurnDownParams::MergeFrom(const LocalCameraCtrlTurnDownParams& from) {
  LocalCameraCtrlTurnDownParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCameraCtrlTurnDownParams::CopyFrom(const LocalCameraCtrlTurnDownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCameraCtrlTurnDownParams::IsInitialized() const {
  return true;
}

void LocalCameraCtrlTurnDownParams::InternalSwap(LocalCameraCtrlTurnDownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.range_, other->_impl_.range_);
}

std::string LocalCameraCtrlTurnDownParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams";
}

// ===================================================================

class LocalCameraCtrlZoomInParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCameraCtrlZoomInParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCameraCtrlZoomInParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalCameraCtrlZoomInParams::LocalCameraCtrlZoomInParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
}
LocalCameraCtrlZoomInParams::LocalCameraCtrlZoomInParams(const LocalCameraCtrlZoomInParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
}

inline void LocalCameraCtrlZoomInParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_) { 0u }

  };
}

LocalCameraCtrlZoomInParams::~LocalCameraCtrlZoomInParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCameraCtrlZoomInParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalCameraCtrlZoomInParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCameraCtrlZoomInParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCameraCtrlZoomInParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCameraCtrlZoomInParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  return target;
}

::size_t LocalCameraCtrlZoomInParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCameraCtrlZoomInParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCameraCtrlZoomInParams*>(
      &from));
}

void LocalCameraCtrlZoomInParams::MergeFrom(const LocalCameraCtrlZoomInParams& from) {
  LocalCameraCtrlZoomInParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCameraCtrlZoomInParams::CopyFrom(const LocalCameraCtrlZoomInParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCameraCtrlZoomInParams::IsInitialized() const {
  return true;
}

void LocalCameraCtrlZoomInParams::InternalSwap(LocalCameraCtrlZoomInParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.range_, other->_impl_.range_);
}

std::string LocalCameraCtrlZoomInParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams";
}

// ===================================================================

class LocalCameraCtrlZoomOutParams::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCameraCtrlZoomOutParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCameraCtrlZoomOutParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

LocalCameraCtrlZoomOutParams::LocalCameraCtrlZoomOutParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
}
LocalCameraCtrlZoomOutParams::LocalCameraCtrlZoomOutParams(const LocalCameraCtrlZoomOutParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
}

inline void LocalCameraCtrlZoomOutParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.range_) { 0u }

  };
}

LocalCameraCtrlZoomOutParams::~LocalCameraCtrlZoomOutParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCameraCtrlZoomOutParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void LocalCameraCtrlZoomOutParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCameraCtrlZoomOutParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCameraCtrlZoomOutParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCameraCtrlZoomOutParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  return target;
}

::size_t LocalCameraCtrlZoomOutParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 range = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_range());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCameraCtrlZoomOutParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCameraCtrlZoomOutParams*>(
      &from));
}

void LocalCameraCtrlZoomOutParams::MergeFrom(const LocalCameraCtrlZoomOutParams& from) {
  LocalCameraCtrlZoomOutParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_range(from._internal_range());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCameraCtrlZoomOutParams::CopyFrom(const LocalCameraCtrlZoomOutParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCameraCtrlZoomOutParams::IsInitialized() const {
  return true;
}

void LocalCameraCtrlZoomOutParams::InternalSwap(LocalCameraCtrlZoomOutParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.range_, other->_impl_.range_);
}

std::string LocalCameraCtrlZoomOutParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams";
}

// ===================================================================

class RequestControlRemoteCameraParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RequestControlRemoteCameraParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RequestControlRemoteCameraParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RequestControlRemoteCameraParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RequestControlRemoteCameraParams::_Internal::user(const RequestControlRemoteCameraParams* msg) {
  return *msg->_impl_.user_;
}
RequestControlRemoteCameraParams::RequestControlRemoteCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
}
RequestControlRemoteCameraParams::RequestControlRemoteCameraParams(const RequestControlRemoteCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RequestControlRemoteCameraParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
}

inline void RequestControlRemoteCameraParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

RequestControlRemoteCameraParams::~RequestControlRemoteCameraParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestControlRemoteCameraParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RequestControlRemoteCameraParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestControlRemoteCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RequestControlRemoteCameraParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RequestControlRemoteCameraParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  return target;
}

::size_t RequestControlRemoteCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestControlRemoteCameraParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RequestControlRemoteCameraParams*>(
      &from));
}

void RequestControlRemoteCameraParams::MergeFrom(const RequestControlRemoteCameraParams& from) {
  RequestControlRemoteCameraParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RequestControlRemoteCameraParams::CopyFrom(const RequestControlRemoteCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestControlRemoteCameraParams::IsInitialized() const {
  return true;
}

void RequestControlRemoteCameraParams::InternalSwap(RequestControlRemoteCameraParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string RequestControlRemoteCameraParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams";
}

// ===================================================================

class GiveUpControlRemoteCameraParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GiveUpControlRemoteCameraParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GiveUpControlRemoteCameraParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const GiveUpControlRemoteCameraParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
GiveUpControlRemoteCameraParams::_Internal::user(const GiveUpControlRemoteCameraParams* msg) {
  return *msg->_impl_.user_;
}
GiveUpControlRemoteCameraParams::GiveUpControlRemoteCameraParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
}
GiveUpControlRemoteCameraParams::GiveUpControlRemoteCameraParams(const GiveUpControlRemoteCameraParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GiveUpControlRemoteCameraParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
}

inline void GiveUpControlRemoteCameraParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

GiveUpControlRemoteCameraParams::~GiveUpControlRemoteCameraParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GiveUpControlRemoteCameraParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void GiveUpControlRemoteCameraParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GiveUpControlRemoteCameraParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GiveUpControlRemoteCameraParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GiveUpControlRemoteCameraParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  return target;
}

::size_t GiveUpControlRemoteCameraParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GiveUpControlRemoteCameraParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GiveUpControlRemoteCameraParams*>(
      &from));
}

void GiveUpControlRemoteCameraParams::MergeFrom(const GiveUpControlRemoteCameraParams& from) {
  GiveUpControlRemoteCameraParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GiveUpControlRemoteCameraParams::CopyFrom(const GiveUpControlRemoteCameraParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveUpControlRemoteCameraParams::IsInitialized() const {
  return true;
}

void GiveUpControlRemoteCameraParams::InternalSwap(GiveUpControlRemoteCameraParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string GiveUpControlRemoteCameraParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams";
}

// ===================================================================

class RemoteCameraCtrlTurnLeftParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCameraCtrlTurnLeftParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnLeftParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoteCameraCtrlTurnLeftParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoteCameraCtrlTurnLeftParams::_Internal::user(const RemoteCameraCtrlTurnLeftParams* msg) {
  return *msg->_impl_.user_;
}
RemoteCameraCtrlTurnLeftParams::RemoteCameraCtrlTurnLeftParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
}
RemoteCameraCtrlTurnLeftParams::RemoteCameraCtrlTurnLeftParams(const RemoteCameraCtrlTurnLeftParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteCameraCtrlTurnLeftParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
}

inline void RemoteCameraCtrlTurnLeftParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) { 0u }

  };
}

RemoteCameraCtrlTurnLeftParams::~RemoteCameraCtrlTurnLeftParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteCameraCtrlTurnLeftParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoteCameraCtrlTurnLeftParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteCameraCtrlTurnLeftParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteCameraCtrlTurnLeftParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteCameraCtrlTurnLeftParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  return target;
}

::size_t RemoteCameraCtrlTurnLeftParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional uint32 range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCameraCtrlTurnLeftParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteCameraCtrlTurnLeftParams*>(
      &from));
}

void RemoteCameraCtrlTurnLeftParams::MergeFrom(const RemoteCameraCtrlTurnLeftParams& from) {
  RemoteCameraCtrlTurnLeftParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteCameraCtrlTurnLeftParams::CopyFrom(const RemoteCameraCtrlTurnLeftParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCameraCtrlTurnLeftParams::IsInitialized() const {
  return true;
}

void RemoteCameraCtrlTurnLeftParams::InternalSwap(RemoteCameraCtrlTurnLeftParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnLeftParams, _impl_.range_)
      + sizeof(RemoteCameraCtrlTurnLeftParams::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnLeftParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string RemoteCameraCtrlTurnLeftParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams";
}

// ===================================================================

class RemoteCameraCtrlTurnRightParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCameraCtrlTurnRightParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnRightParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoteCameraCtrlTurnRightParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoteCameraCtrlTurnRightParams::_Internal::user(const RemoteCameraCtrlTurnRightParams* msg) {
  return *msg->_impl_.user_;
}
RemoteCameraCtrlTurnRightParams::RemoteCameraCtrlTurnRightParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
}
RemoteCameraCtrlTurnRightParams::RemoteCameraCtrlTurnRightParams(const RemoteCameraCtrlTurnRightParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteCameraCtrlTurnRightParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
}

inline void RemoteCameraCtrlTurnRightParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) { 0u }

  };
}

RemoteCameraCtrlTurnRightParams::~RemoteCameraCtrlTurnRightParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteCameraCtrlTurnRightParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoteCameraCtrlTurnRightParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteCameraCtrlTurnRightParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteCameraCtrlTurnRightParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteCameraCtrlTurnRightParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  return target;
}

::size_t RemoteCameraCtrlTurnRightParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional uint32 range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCameraCtrlTurnRightParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteCameraCtrlTurnRightParams*>(
      &from));
}

void RemoteCameraCtrlTurnRightParams::MergeFrom(const RemoteCameraCtrlTurnRightParams& from) {
  RemoteCameraCtrlTurnRightParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteCameraCtrlTurnRightParams::CopyFrom(const RemoteCameraCtrlTurnRightParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCameraCtrlTurnRightParams::IsInitialized() const {
  return true;
}

void RemoteCameraCtrlTurnRightParams::InternalSwap(RemoteCameraCtrlTurnRightParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnRightParams, _impl_.range_)
      + sizeof(RemoteCameraCtrlTurnRightParams::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnRightParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string RemoteCameraCtrlTurnRightParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams";
}

// ===================================================================

class RemoteCameraCtrlTurnUpParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCameraCtrlTurnUpParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnUpParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoteCameraCtrlTurnUpParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoteCameraCtrlTurnUpParams::_Internal::user(const RemoteCameraCtrlTurnUpParams* msg) {
  return *msg->_impl_.user_;
}
RemoteCameraCtrlTurnUpParams::RemoteCameraCtrlTurnUpParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
}
RemoteCameraCtrlTurnUpParams::RemoteCameraCtrlTurnUpParams(const RemoteCameraCtrlTurnUpParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteCameraCtrlTurnUpParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
}

inline void RemoteCameraCtrlTurnUpParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) { 0u }

  };
}

RemoteCameraCtrlTurnUpParams::~RemoteCameraCtrlTurnUpParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteCameraCtrlTurnUpParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoteCameraCtrlTurnUpParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteCameraCtrlTurnUpParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteCameraCtrlTurnUpParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteCameraCtrlTurnUpParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  return target;
}

::size_t RemoteCameraCtrlTurnUpParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional uint32 range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCameraCtrlTurnUpParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteCameraCtrlTurnUpParams*>(
      &from));
}

void RemoteCameraCtrlTurnUpParams::MergeFrom(const RemoteCameraCtrlTurnUpParams& from) {
  RemoteCameraCtrlTurnUpParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteCameraCtrlTurnUpParams::CopyFrom(const RemoteCameraCtrlTurnUpParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCameraCtrlTurnUpParams::IsInitialized() const {
  return true;
}

void RemoteCameraCtrlTurnUpParams::InternalSwap(RemoteCameraCtrlTurnUpParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnUpParams, _impl_.range_)
      + sizeof(RemoteCameraCtrlTurnUpParams::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnUpParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string RemoteCameraCtrlTurnUpParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams";
}

// ===================================================================

class RemoteCameraCtrlTurnDownParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCameraCtrlTurnDownParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnDownParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoteCameraCtrlTurnDownParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoteCameraCtrlTurnDownParams::_Internal::user(const RemoteCameraCtrlTurnDownParams* msg) {
  return *msg->_impl_.user_;
}
RemoteCameraCtrlTurnDownParams::RemoteCameraCtrlTurnDownParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
}
RemoteCameraCtrlTurnDownParams::RemoteCameraCtrlTurnDownParams(const RemoteCameraCtrlTurnDownParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteCameraCtrlTurnDownParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
}

inline void RemoteCameraCtrlTurnDownParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) { 0u }

  };
}

RemoteCameraCtrlTurnDownParams::~RemoteCameraCtrlTurnDownParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteCameraCtrlTurnDownParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoteCameraCtrlTurnDownParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteCameraCtrlTurnDownParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteCameraCtrlTurnDownParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteCameraCtrlTurnDownParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  return target;
}

::size_t RemoteCameraCtrlTurnDownParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional uint32 range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCameraCtrlTurnDownParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteCameraCtrlTurnDownParams*>(
      &from));
}

void RemoteCameraCtrlTurnDownParams::MergeFrom(const RemoteCameraCtrlTurnDownParams& from) {
  RemoteCameraCtrlTurnDownParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteCameraCtrlTurnDownParams::CopyFrom(const RemoteCameraCtrlTurnDownParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCameraCtrlTurnDownParams::IsInitialized() const {
  return true;
}

void RemoteCameraCtrlTurnDownParams::InternalSwap(RemoteCameraCtrlTurnDownParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnDownParams, _impl_.range_)
      + sizeof(RemoteCameraCtrlTurnDownParams::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlTurnDownParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string RemoteCameraCtrlTurnDownParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams";
}

// ===================================================================

class RemoteCameraCtrlZoomInParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCameraCtrlZoomInParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlZoomInParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoteCameraCtrlZoomInParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoteCameraCtrlZoomInParams::_Internal::user(const RemoteCameraCtrlZoomInParams* msg) {
  return *msg->_impl_.user_;
}
RemoteCameraCtrlZoomInParams::RemoteCameraCtrlZoomInParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
}
RemoteCameraCtrlZoomInParams::RemoteCameraCtrlZoomInParams(const RemoteCameraCtrlZoomInParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteCameraCtrlZoomInParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
}

inline void RemoteCameraCtrlZoomInParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) { 0u }

  };
}

RemoteCameraCtrlZoomInParams::~RemoteCameraCtrlZoomInParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteCameraCtrlZoomInParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoteCameraCtrlZoomInParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteCameraCtrlZoomInParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteCameraCtrlZoomInParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteCameraCtrlZoomInParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  return target;
}

::size_t RemoteCameraCtrlZoomInParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional uint32 range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCameraCtrlZoomInParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteCameraCtrlZoomInParams*>(
      &from));
}

void RemoteCameraCtrlZoomInParams::MergeFrom(const RemoteCameraCtrlZoomInParams& from) {
  RemoteCameraCtrlZoomInParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteCameraCtrlZoomInParams::CopyFrom(const RemoteCameraCtrlZoomInParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCameraCtrlZoomInParams::IsInitialized() const {
  return true;
}

void RemoteCameraCtrlZoomInParams::InternalSwap(RemoteCameraCtrlZoomInParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlZoomInParams, _impl_.range_)
      + sizeof(RemoteCameraCtrlZoomInParams::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlZoomInParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string RemoteCameraCtrlZoomInParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams";
}

// ===================================================================

class RemoteCameraCtrlZoomOutParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoteCameraCtrlZoomOutParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlZoomOutParams, _impl_._has_bits_);
  static void set_has_range(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const RemoteCameraCtrlZoomOutParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
RemoteCameraCtrlZoomOutParams::_Internal::user(const RemoteCameraCtrlZoomOutParams* msg) {
  return *msg->_impl_.user_;
}
RemoteCameraCtrlZoomOutParams::RemoteCameraCtrlZoomOutParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
}
RemoteCameraCtrlZoomOutParams::RemoteCameraCtrlZoomOutParams(const RemoteCameraCtrlZoomOutParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  RemoteCameraCtrlZoomOutParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  _this->_impl_.range_ = from._impl_.range_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
}

inline void RemoteCameraCtrlZoomOutParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
    , decltype(_impl_.range_) { 0u }

  };
}

RemoteCameraCtrlZoomOutParams::~RemoteCameraCtrlZoomOutParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteCameraCtrlZoomOutParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void RemoteCameraCtrlZoomOutParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteCameraCtrlZoomOutParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_.range_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoteCameraCtrlZoomOutParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 range = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_range(&has_bits);
          _impl_.range_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoteCameraCtrlZoomOutParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 range = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_range(), target);
  }

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  return target;
}

::size_t RemoteCameraCtrlZoomOutParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.user_);
    }

    // optional uint32 range = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_range());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoteCameraCtrlZoomOutParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoteCameraCtrlZoomOutParams*>(
      &from));
}

void RemoteCameraCtrlZoomOutParams::MergeFrom(const RemoteCameraCtrlZoomOutParams& from) {
  RemoteCameraCtrlZoomOutParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
          from._internal_user());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.range_ = from._impl_.range_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoteCameraCtrlZoomOutParams::CopyFrom(const RemoteCameraCtrlZoomOutParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteCameraCtrlZoomOutParams::IsInitialized() const {
  return true;
}

void RemoteCameraCtrlZoomOutParams::InternalSwap(RemoteCameraCtrlZoomOutParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlZoomOutParams, _impl_.range_)
      + sizeof(RemoteCameraCtrlZoomOutParams::_impl_.range_)
      - PROTOBUF_FIELD_OFFSET(RemoteCameraCtrlZoomOutParams, _impl_.user_)>(
          reinterpret_cast<char*>(&_impl_.user_),
          reinterpret_cast<char*>(&other->_impl_.user_));
}

std::string RemoteCameraCtrlZoomOutParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams";
}

// ===================================================================

class SetVideoQualityPreferenceParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetVideoQualityPreferenceParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetVideoQualityPreferenceParams, _impl_._has_bits_);
  static void set_has_mode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_minimum_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_maximum_frame_rate(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

SetVideoQualityPreferenceParams::SetVideoQualityPreferenceParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
}
SetVideoQualityPreferenceParams::SetVideoQualityPreferenceParams(const SetVideoQualityPreferenceParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
}

inline void SetVideoQualityPreferenceParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.mode_) { 0 }

    , decltype(_impl_.minimum_frame_rate_) { 0u }

    , decltype(_impl_.maximum_frame_rate_) { 0u }

  };
}

SetVideoQualityPreferenceParams::~SetVideoQualityPreferenceParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVideoQualityPreferenceParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetVideoQualityPreferenceParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVideoQualityPreferenceParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.mode_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.maximum_frame_rate_) -
        reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.maximum_frame_rate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetVideoQualityPreferenceParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_mode(&has_bits);
          _impl_.mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 minimum_frame_rate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_minimum_frame_rate(&has_bits);
          _impl_.minimum_frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 maximum_frame_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_maximum_frame_rate(&has_bits);
          _impl_.maximum_frame_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetVideoQualityPreferenceParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 mode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_mode(), target);
  }

  // optional uint32 minimum_frame_rate = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_minimum_frame_rate(), target);
  }

  // optional uint32 maximum_frame_rate = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_maximum_frame_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  return target;
}

::size_t SetVideoQualityPreferenceParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 mode = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_mode());
    }

    // optional uint32 minimum_frame_rate = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_minimum_frame_rate());
    }

    // optional uint32 maximum_frame_rate = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_maximum_frame_rate());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVideoQualityPreferenceParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetVideoQualityPreferenceParams*>(
      &from));
}

void SetVideoQualityPreferenceParams::MergeFrom(const SetVideoQualityPreferenceParams& from) {
  SetVideoQualityPreferenceParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.mode_ = from._impl_.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.minimum_frame_rate_ = from._impl_.minimum_frame_rate_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.maximum_frame_rate_ = from._impl_.maximum_frame_rate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetVideoQualityPreferenceParams::CopyFrom(const SetVideoQualityPreferenceParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVideoQualityPreferenceParams::IsInitialized() const {
  return true;
}

void SetVideoQualityPreferenceParams::InternalSwap(SetVideoQualityPreferenceParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetVideoQualityPreferenceParams, _impl_.maximum_frame_rate_)
      + sizeof(SetVideoQualityPreferenceParams::_impl_.maximum_frame_rate_)
      - PROTOBUF_FIELD_OFFSET(SetVideoQualityPreferenceParams, _impl_.mode_)>(
          reinterpret_cast<char*>(&_impl_.mode_),
          reinterpret_cast<char*>(&other->_impl_.mode_));
}

std::string SetVideoQualityPreferenceParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams";
}

// ===================================================================

class SetSuppressBackgroundNoiseLevelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSuppressBackgroundNoiseLevelParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetSuppressBackgroundNoiseLevelParams, _impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSuppressBackgroundNoiseLevelParams::SetSuppressBackgroundNoiseLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
}
SetSuppressBackgroundNoiseLevelParams::SetSuppressBackgroundNoiseLevelParams(const SetSuppressBackgroundNoiseLevelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
}

inline void SetSuppressBackgroundNoiseLevelParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_) { 0 }

  };
}

SetSuppressBackgroundNoiseLevelParams::~SetSuppressBackgroundNoiseLevelParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSuppressBackgroundNoiseLevelParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSuppressBackgroundNoiseLevelParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSuppressBackgroundNoiseLevelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSuppressBackgroundNoiseLevelParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetSuppressBackgroundNoiseLevelParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  return target;
}

::size_t SetSuppressBackgroundNoiseLevelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 level = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSuppressBackgroundNoiseLevelParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetSuppressBackgroundNoiseLevelParams*>(
      &from));
}

void SetSuppressBackgroundNoiseLevelParams::MergeFrom(const SetSuppressBackgroundNoiseLevelParams& from) {
  SetSuppressBackgroundNoiseLevelParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetSuppressBackgroundNoiseLevelParams::CopyFrom(const SetSuppressBackgroundNoiseLevelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSuppressBackgroundNoiseLevelParams::IsInitialized() const {
  return true;
}

void SetSuppressBackgroundNoiseLevelParams::InternalSwap(SetSuppressBackgroundNoiseLevelParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.level_, other->_impl_.level_);
}

std::string SetSuppressBackgroundNoiseLevelParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams";
}

// ===================================================================

class SetEchoCancellationLevelParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetEchoCancellationLevelParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetEchoCancellationLevelParams, _impl_._has_bits_);
  static void set_has_level(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
}
SetEchoCancellationLevelParams::SetEchoCancellationLevelParams(const SetEchoCancellationLevelParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
}

inline void SetEchoCancellationLevelParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.level_) { 0 }

  };
}

SetEchoCancellationLevelParams::~SetEchoCancellationLevelParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetEchoCancellationLevelParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetEchoCancellationLevelParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetEchoCancellationLevelParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.level_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetEchoCancellationLevelParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_level(&has_bits);
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetEchoCancellationLevelParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  return target;
}

::size_t SetEchoCancellationLevelParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 level = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetEchoCancellationLevelParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetEchoCancellationLevelParams*>(
      &from));
}

void SetEchoCancellationLevelParams::MergeFrom(const SetEchoCancellationLevelParams& from) {
  SetEchoCancellationLevelParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetEchoCancellationLevelParams::CopyFrom(const SetEchoCancellationLevelParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetEchoCancellationLevelParams::IsInitialized() const {
  return true;
}

void SetEchoCancellationLevelParams::InternalSwap(SetEchoCancellationLevelParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.level_, other->_impl_.level_);
}

std::string SetEchoCancellationLevelParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams";
}

// ===================================================================

class EnableMicOriginalInputParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableMicOriginalInputParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableMicOriginalInputParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableMicOriginalInputParams::EnableMicOriginalInputParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
}
EnableMicOriginalInputParams::EnableMicOriginalInputParams(const EnableMicOriginalInputParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
}

inline void EnableMicOriginalInputParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableMicOriginalInputParams::~EnableMicOriginalInputParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableMicOriginalInputParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableMicOriginalInputParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableMicOriginalInputParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableMicOriginalInputParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableMicOriginalInputParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  return target;
}

::size_t EnableMicOriginalInputParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMicOriginalInputParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableMicOriginalInputParams*>(
      &from));
}

void EnableMicOriginalInputParams::MergeFrom(const EnableMicOriginalInputParams& from) {
  EnableMicOriginalInputParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableMicOriginalInputParams::CopyFrom(const EnableMicOriginalInputParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMicOriginalInputParams::IsInitialized() const {
  return true;
}

void EnableMicOriginalInputParams::InternalSwap(EnableMicOriginalInputParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableMicOriginalInputParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams";
}

// ===================================================================

class EnableHighFidelityMusicModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableHighFidelityMusicModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableHighFidelityMusicModeParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableHighFidelityMusicModeParams::EnableHighFidelityMusicModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
}
EnableHighFidelityMusicModeParams::EnableHighFidelityMusicModeParams(const EnableHighFidelityMusicModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
}

inline void EnableHighFidelityMusicModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableHighFidelityMusicModeParams::~EnableHighFidelityMusicModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableHighFidelityMusicModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableHighFidelityMusicModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableHighFidelityMusicModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableHighFidelityMusicModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableHighFidelityMusicModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  return target;
}

::size_t EnableHighFidelityMusicModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableHighFidelityMusicModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableHighFidelityMusicModeParams*>(
      &from));
}

void EnableHighFidelityMusicModeParams::MergeFrom(const EnableHighFidelityMusicModeParams& from) {
  EnableHighFidelityMusicModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableHighFidelityMusicModeParams::CopyFrom(const EnableHighFidelityMusicModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableHighFidelityMusicModeParams::IsInitialized() const {
  return true;
}

void EnableHighFidelityMusicModeParams::InternalSwap(EnableHighFidelityMusicModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableHighFidelityMusicModeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams";
}

// ===================================================================

class EnableEchoCancellationParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableEchoCancellationParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableEchoCancellationParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableEchoCancellationParams::EnableEchoCancellationParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
}
EnableEchoCancellationParams::EnableEchoCancellationParams(const EnableEchoCancellationParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
}

inline void EnableEchoCancellationParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableEchoCancellationParams::~EnableEchoCancellationParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableEchoCancellationParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableEchoCancellationParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableEchoCancellationParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableEchoCancellationParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableEchoCancellationParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  return target;
}

::size_t EnableEchoCancellationParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableEchoCancellationParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableEchoCancellationParams*>(
      &from));
}

void EnableEchoCancellationParams::MergeFrom(const EnableEchoCancellationParams& from) {
  EnableEchoCancellationParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableEchoCancellationParams::CopyFrom(const EnableEchoCancellationParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableEchoCancellationParams::IsInitialized() const {
  return true;
}

void EnableEchoCancellationParams::InternalSwap(EnableEchoCancellationParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableEchoCancellationParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams";
}

// ===================================================================

class EnableStereoAudioParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableStereoAudioParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableStereoAudioParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableStereoAudioParams::EnableStereoAudioParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
}
EnableStereoAudioParams::EnableStereoAudioParams(const EnableStereoAudioParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
}

inline void EnableStereoAudioParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableStereoAudioParams::~EnableStereoAudioParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableStereoAudioParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableStereoAudioParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableStereoAudioParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableStereoAudioParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableStereoAudioParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  return target;
}

::size_t EnableStereoAudioParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableStereoAudioParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableStereoAudioParams*>(
      &from));
}

void EnableStereoAudioParams::MergeFrom(const EnableStereoAudioParams& from) {
  EnableStereoAudioParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableStereoAudioParams::CopyFrom(const EnableStereoAudioParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableStereoAudioParams::IsInitialized() const {
  return true;
}

void EnableStereoAudioParams::InternalSwap(EnableStereoAudioParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableStereoAudioParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams";
}

// ===================================================================

class StartMicTestRecordingParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartMicTestRecordingParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartMicTestRecordingParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartMicTestRecordingParams::StartMicTestRecordingParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
}
StartMicTestRecordingParams::StartMicTestRecordingParams(const StartMicTestRecordingParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartMicTestRecordingParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
}

inline void StartMicTestRecordingParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartMicTestRecordingParams::~StartMicTestRecordingParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartMicTestRecordingParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void StartMicTestRecordingParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartMicTestRecordingParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartMicTestRecordingParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartMicTestRecordingParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  return target;
}

::size_t StartMicTestRecordingParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string deviceID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartMicTestRecordingParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartMicTestRecordingParams*>(
      &from));
}

void StartMicTestRecordingParams::MergeFrom(const StartMicTestRecordingParams& from) {
  StartMicTestRecordingParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartMicTestRecordingParams::CopyFrom(const StartMicTestRecordingParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartMicTestRecordingParams::IsInitialized() const {
  return true;
}

void StartMicTestRecordingParams::InternalSwap(StartMicTestRecordingParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
}

std::string StartMicTestRecordingParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams";
}

// ===================================================================

class StartSpeakerTestParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartSpeakerTestParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartSpeakerTestParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartSpeakerTestParams::StartSpeakerTestParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
}
StartSpeakerTestParams::StartSpeakerTestParams(const StartSpeakerTestParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartSpeakerTestParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
}

inline void StartSpeakerTestParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartSpeakerTestParams::~StartSpeakerTestParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartSpeakerTestParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void StartSpeakerTestParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartSpeakerTestParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartSpeakerTestParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartSpeakerTestParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  return target;
}

::size_t StartSpeakerTestParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string deviceID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartSpeakerTestParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartSpeakerTestParams*>(
      &from));
}

void StartSpeakerTestParams::MergeFrom(const StartSpeakerTestParams& from) {
  StartSpeakerTestParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartSpeakerTestParams::CopyFrom(const StartSpeakerTestParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartSpeakerTestParams::IsInitialized() const {
  return true;
}

void StartSpeakerTestParams::InternalSwap(StartSpeakerTestParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
}

std::string StartSpeakerTestParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams";
}

// ===================================================================

class SetTimerIntervalParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTimerIntervalParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetTimerIntervalParams, _impl_._has_bits_);
  static void set_has_timerinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetTimerIntervalParams::SetTimerIntervalParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
}
SetTimerIntervalParams::SetTimerIntervalParams(const SetTimerIntervalParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
}

inline void SetTimerIntervalParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.timerinterval_) { 0u }

  };
}

SetTimerIntervalParams::~SetTimerIntervalParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTimerIntervalParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTimerIntervalParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTimerIntervalParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timerinterval_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetTimerIntervalParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 timerInterval = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_timerinterval(&has_bits);
          _impl_.timerinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetTimerIntervalParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 timerInterval = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_timerinterval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  return target;
}

::size_t SetTimerIntervalParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 timerInterval = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_timerinterval());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTimerIntervalParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetTimerIntervalParams*>(
      &from));
}

void SetTimerIntervalParams::MergeFrom(const SetTimerIntervalParams& from) {
  SetTimerIntervalParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_timerinterval(from._internal_timerinterval());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetTimerIntervalParams::CopyFrom(const SetTimerIntervalParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTimerIntervalParams::IsInitialized() const {
  return true;
}

void SetTimerIntervalParams::InternalSwap(SetTimerIntervalParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.timerinterval_, other->_impl_.timerinterval_);
}

std::string SetTimerIntervalParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams";
}

// ===================================================================

class EnableMultiStreamVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableMultiStreamVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableMultiStreamVideoParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableMultiStreamVideoParams::EnableMultiStreamVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
}
EnableMultiStreamVideoParams::EnableMultiStreamVideoParams(const EnableMultiStreamVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EnableMultiStreamVideoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
}

inline void EnableMultiStreamVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EnableMultiStreamVideoParams::~EnableMultiStreamVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableMultiStreamVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void EnableMultiStreamVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableMultiStreamVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableMultiStreamVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableMultiStreamVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  return target;
}

::size_t EnableMultiStreamVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string deviceID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableMultiStreamVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableMultiStreamVideoParams*>(
      &from));
}

void EnableMultiStreamVideoParams::MergeFrom(const EnableMultiStreamVideoParams& from) {
  EnableMultiStreamVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableMultiStreamVideoParams::CopyFrom(const EnableMultiStreamVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableMultiStreamVideoParams::IsInitialized() const {
  return true;
}

void EnableMultiStreamVideoParams::InternalSwap(EnableMultiStreamVideoParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
}

std::string EnableMultiStreamVideoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams";
}

// ===================================================================

class DisableMultiStreamVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DisableMultiStreamVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisableMultiStreamVideoParams, _impl_._has_bits_);
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisableMultiStreamVideoParams::DisableMultiStreamVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
}
DisableMultiStreamVideoParams::DisableMultiStreamVideoParams(const DisableMultiStreamVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DisableMultiStreamVideoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.deviceid_.Set(from._internal_deviceid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
}

inline void DisableMultiStreamVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.deviceid_) {}

  };
  _impl_.deviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.deviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisableMultiStreamVideoParams::~DisableMultiStreamVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisableMultiStreamVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.deviceid_.Destroy();
}

void DisableMultiStreamVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisableMultiStreamVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.deviceid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisableMultiStreamVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string deviceID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_deviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisableMultiStreamVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string deviceID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_deviceid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  return target;
}

::size_t DisableMultiStreamVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string deviceID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_deviceid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisableMultiStreamVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisableMultiStreamVideoParams*>(
      &from));
}

void DisableMultiStreamVideoParams::MergeFrom(const DisableMultiStreamVideoParams& from) {
  DisableMultiStreamVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_deviceid(from._internal_deviceid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisableMultiStreamVideoParams::CopyFrom(const DisableMultiStreamVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisableMultiStreamVideoParams::IsInitialized() const {
  return true;
}

void DisableMultiStreamVideoParams::InternalSwap(DisableMultiStreamVideoParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.deviceid_, lhs_arena,
                                       &other->_impl_.deviceid_, rhs_arena);
}

std::string DisableMultiStreamVideoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams";
}

// ===================================================================

class StartVideoPreviewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StartVideoPreviewParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartVideoPreviewParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cameradeviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartVideoPreviewParams::StartVideoPreviewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
}
StartVideoPreviewParams::StartVideoPreviewParams(const StartVideoPreviewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  StartVideoPreviewParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameradeviceid_) {}

    , decltype(_impl_.zn_recv_handle_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.cameradeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameradeviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cameradeviceid_.Set(from._internal_cameradeviceid(), _this->GetArenaForAllocation());
  }
  _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
}

inline void StartVideoPreviewParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cameradeviceid_) {}

    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

  };
  _impl_.cameradeviceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.cameradeviceid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StartVideoPreviewParams::~StartVideoPreviewParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StartVideoPreviewParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cameradeviceid_.Destroy();
}

void StartVideoPreviewParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StartVideoPreviewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.cameradeviceid_.ClearNonDefaultToEmpty();
  }
  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StartVideoPreviewParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string cameraDeviceID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cameradeviceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StartVideoPreviewParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  // optional string cameraDeviceID = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_cameradeviceid();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  return target;
}

::size_t StartVideoPreviewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string cameraDeviceID = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_cameradeviceid());
    }

    // optional int64 zn_recv_handle = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_zn_recv_handle());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartVideoPreviewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StartVideoPreviewParams*>(
      &from));
}

void StartVideoPreviewParams::MergeFrom(const StartVideoPreviewParams& from) {
  StartVideoPreviewParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_cameradeviceid(from._internal_cameradeviceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.zn_recv_handle_ = from._impl_.zn_recv_handle_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StartVideoPreviewParams::CopyFrom(const StartVideoPreviewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartVideoPreviewParams::IsInitialized() const {
  return true;
}

void StartVideoPreviewParams::InternalSwap(StartVideoPreviewParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cameradeviceid_, lhs_arena,
                                       &other->_impl_.cameradeviceid_, rhs_arena);

  swap(_impl_.zn_recv_handle_, other->_impl_.zn_recv_handle_);
}

std::string StartVideoPreviewParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams";
}

// ===================================================================

class StopVideoPreviewParams::_Internal {
 public:
  using HasBits = decltype(std::declval<StopVideoPreviewParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StopVideoPreviewParams, _impl_._has_bits_);
  static void set_has_zn_recv_handle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StopVideoPreviewParams::StopVideoPreviewParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
}
StopVideoPreviewParams::StopVideoPreviewParams(const StopVideoPreviewParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
}

inline void StopVideoPreviewParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.zn_recv_handle_) { ::int64_t{0} }

  };
}

StopVideoPreviewParams::~StopVideoPreviewParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopVideoPreviewParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void StopVideoPreviewParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopVideoPreviewParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.zn_recv_handle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* StopVideoPreviewParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 zn_recv_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_zn_recv_handle(&has_bits);
          _impl_.zn_recv_handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* StopVideoPreviewParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 zn_recv_handle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_zn_recv_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  return target;
}

::size_t StopVideoPreviewParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 zn_recv_handle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_zn_recv_handle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopVideoPreviewParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const StopVideoPreviewParams*>(
      &from));
}

void StopVideoPreviewParams::MergeFrom(const StopVideoPreviewParams& from) {
  StopVideoPreviewParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_zn_recv_handle(from._internal_zn_recv_handle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void StopVideoPreviewParams::CopyFrom(const StopVideoPreviewParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopVideoPreviewParams::IsInitialized() const {
  return true;
}

void StopVideoPreviewParams::InternalSwap(StopVideoPreviewParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.zn_recv_handle_, other->_impl_.zn_recv_handle_);
}

std::string StopVideoPreviewParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams";
}

// ===================================================================

class SpotLightVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SpotLightVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SpotLightVideoParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const SpotLightVideoParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
SpotLightVideoParams::_Internal::user(const SpotLightVideoParams* msg) {
  return *msg->_impl_.user_;
}
SpotLightVideoParams::SpotLightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
}
SpotLightVideoParams::SpotLightVideoParams(const SpotLightVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SpotLightVideoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
}

inline void SpotLightVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

SpotLightVideoParams::~SpotLightVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpotLightVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void SpotLightVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpotLightVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpotLightVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpotLightVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  return target;
}

::size_t SpotLightVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpotLightVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpotLightVideoParams*>(
      &from));
}

void SpotLightVideoParams::MergeFrom(const SpotLightVideoParams& from) {
  SpotLightVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpotLightVideoParams::CopyFrom(const SpotLightVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SpotLightVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpotLightVideoParams::IsInitialized() const {
  return true;
}

void SpotLightVideoParams::InternalSwap(SpotLightVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string SpotLightVideoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SpotLightVideoParams";
}

// ===================================================================

class UnSpotLightVideoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<UnSpotLightVideoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UnSpotLightVideoParams, _impl_._has_bits_);
  static const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser& user(const UnSpotLightVideoParams* msg);
  static void set_has_user(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::com::electron::zoomvideo::sdk::proto::VideoSDKUser&
UnSpotLightVideoParams::_Internal::user(const UnSpotLightVideoParams* msg) {
  return *msg->_impl_.user_;
}
UnSpotLightVideoParams::UnSpotLightVideoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
}
UnSpotLightVideoParams::UnSpotLightVideoParams(const UnSpotLightVideoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UnSpotLightVideoParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.user_ = new ::com::electron::zoomvideo::sdk::proto::VideoSDKUser(*from._impl_.user_);
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
}

inline void UnSpotLightVideoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.user_){nullptr}
  };
}

UnSpotLightVideoParams::~UnSpotLightVideoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UnSpotLightVideoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_;
}

void UnSpotLightVideoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UnSpotLightVideoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.user_ != nullptr);
    _impl_.user_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UnSpotLightVideoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UnSpotLightVideoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::user(this),
        _Internal::user(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  return target;
}

::size_t UnSpotLightVideoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .com.electron.zoomvideo.sdk.proto.VideoSDKUser user = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnSpotLightVideoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UnSpotLightVideoParams*>(
      &from));
}

void UnSpotLightVideoParams::MergeFrom(const UnSpotLightVideoParams& from) {
  UnSpotLightVideoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_user()->::com::electron::zoomvideo::sdk::proto::VideoSDKUser::MergeFrom(
        from._internal_user());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UnSpotLightVideoParams::CopyFrom(const UnSpotLightVideoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnSpotLightVideoParams::IsInitialized() const {
  return true;
}

void UnSpotLightVideoParams::InternalSwap(UnSpotLightVideoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.user_, other->_impl_.user_);
}

std::string UnSpotLightVideoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams";
}

// ===================================================================

class SetSpokenLanguageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetSpokenLanguageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetSpokenLanguageParams, _impl_._has_bits_);
  static void set_has_languageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetSpokenLanguageParams::SetSpokenLanguageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
}
SetSpokenLanguageParams::SetSpokenLanguageParams(const SetSpokenLanguageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
}

inline void SetSpokenLanguageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.languageid_) { 0 }

  };
}

SetSpokenLanguageParams::~SetSpokenLanguageParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetSpokenLanguageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetSpokenLanguageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetSpokenLanguageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languageid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetSpokenLanguageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 languageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_languageid(&has_bits);
          _impl_.languageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetSpokenLanguageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 languageID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_languageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  return target;
}

::size_t SetSpokenLanguageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 languageID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_languageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetSpokenLanguageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetSpokenLanguageParams*>(
      &from));
}

void SetSpokenLanguageParams::MergeFrom(const SetSpokenLanguageParams& from) {
  SetSpokenLanguageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_languageid(from._internal_languageid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetSpokenLanguageParams::CopyFrom(const SetSpokenLanguageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSpokenLanguageParams::IsInitialized() const {
  return true;
}

void SetSpokenLanguageParams::InternalSwap(SetSpokenLanguageParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.languageid_, other->_impl_.languageid_);
}

std::string SetSpokenLanguageParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams";
}

// ===================================================================

class LTTLanguagesList::_Internal {
 public:
};

LTTLanguagesList::LTTLanguagesList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
}
LTTLanguagesList::LTTLanguagesList(const LTTLanguagesList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LTTLanguagesList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lttlanguageinfo_){from._impl_.lttlanguageinfo_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
}

inline void LTTLanguagesList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.lttlanguageinfo_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LTTLanguagesList::~LTTLanguagesList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LTTLanguagesList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lttlanguageinfo_.~RepeatedPtrField();
}

void LTTLanguagesList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LTTLanguagesList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lttlanguageinfo_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LTTLanguagesList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .com.electron.zoomvideo.sdk.proto.LTTLanguage lttLanguageInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lttlanguageinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LTTLanguagesList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.LTTLanguage lttLanguageInfo = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lttlanguageinfo_size()); i < n; i++) {
    const auto& repfield = this->_internal_lttlanguageinfo(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  return target;
}

::size_t LTTLanguagesList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.electron.zoomvideo.sdk.proto.LTTLanguage lttLanguageInfo = 1;
  total_size += 1UL * this->_internal_lttlanguageinfo_size();
  for (const auto& msg : this->_impl_.lttlanguageinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LTTLanguagesList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LTTLanguagesList*>(
      &from));
}

void LTTLanguagesList::MergeFrom(const LTTLanguagesList& from) {
  LTTLanguagesList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lttlanguageinfo_.MergeFrom(from._impl_.lttlanguageinfo_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LTTLanguagesList::CopyFrom(const LTTLanguagesList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.LTTLanguagesList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LTTLanguagesList::IsInitialized() const {
  return true;
}

void LTTLanguagesList::InternalSwap(LTTLanguagesList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lttlanguageinfo_.InternalSwap(&other->_impl_.lttlanguageinfo_);
}

std::string LTTLanguagesList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.LTTLanguagesList";
}

// ===================================================================

class SetTranslationLanguageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetTranslationLanguageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetTranslationLanguageParams, _impl_._has_bits_);
  static void set_has_languageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetTranslationLanguageParams::SetTranslationLanguageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
}
SetTranslationLanguageParams::SetTranslationLanguageParams(const SetTranslationLanguageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
}

inline void SetTranslationLanguageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.languageid_) { 0 }

  };
}

SetTranslationLanguageParams::~SetTranslationLanguageParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetTranslationLanguageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetTranslationLanguageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetTranslationLanguageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.languageid_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetTranslationLanguageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 languageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_languageid(&has_bits);
          _impl_.languageid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetTranslationLanguageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 languageID = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_languageid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  return target;
}

::size_t SetTranslationLanguageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 languageID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_languageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetTranslationLanguageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetTranslationLanguageParams*>(
      &from));
}

void SetTranslationLanguageParams::MergeFrom(const SetTranslationLanguageParams& from) {
  SetTranslationLanguageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_languageid(from._internal_languageid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetTranslationLanguageParams::CopyFrom(const SetTranslationLanguageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetTranslationLanguageParams::IsInitialized() const {
  return true;
}

void SetTranslationLanguageParams::InternalSwap(SetTranslationLanguageParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.languageid_, other->_impl_.languageid_);
}

std::string SetTranslationLanguageParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams";
}

// ===================================================================

class CanChatMessageBeDeletedParams::_Internal {
 public:
  using HasBits = decltype(std::declval<CanChatMessageBeDeletedParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CanChatMessageBeDeletedParams, _impl_._has_bits_);
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CanChatMessageBeDeletedParams::CanChatMessageBeDeletedParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
}
CanChatMessageBeDeletedParams::CanChatMessageBeDeletedParams(const CanChatMessageBeDeletedParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  CanChatMessageBeDeletedParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
}

inline void CanChatMessageBeDeletedParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}

  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CanChatMessageBeDeletedParams::~CanChatMessageBeDeletedParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CanChatMessageBeDeletedParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messageid_.Destroy();
}

void CanChatMessageBeDeletedParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CanChatMessageBeDeletedParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.messageid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CanChatMessageBeDeletedParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* CanChatMessageBeDeletedParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string messageID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_messageid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  return target;
}

::size_t CanChatMessageBeDeletedParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string messageID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_messageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanChatMessageBeDeletedParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const CanChatMessageBeDeletedParams*>(
      &from));
}

void CanChatMessageBeDeletedParams::MergeFrom(const CanChatMessageBeDeletedParams& from) {
  CanChatMessageBeDeletedParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_messageid(from._internal_messageid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CanChatMessageBeDeletedParams::CopyFrom(const CanChatMessageBeDeletedParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanChatMessageBeDeletedParams::IsInitialized() const {
  return true;
}

void CanChatMessageBeDeletedParams::InternalSwap(CanChatMessageBeDeletedParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messageid_, lhs_arena,
                                       &other->_impl_.messageid_, rhs_arena);
}

std::string CanChatMessageBeDeletedParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams";
}

// ===================================================================

class DeleteChatMessageParams::_Internal {
 public:
  using HasBits = decltype(std::declval<DeleteChatMessageParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeleteChatMessageParams, _impl_._has_bits_);
  static void set_has_messageid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DeleteChatMessageParams::DeleteChatMessageParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
}
DeleteChatMessageParams::DeleteChatMessageParams(const DeleteChatMessageParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeleteChatMessageParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.messageid_.Set(from._internal_messageid(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
}

inline void DeleteChatMessageParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.messageid_) {}

  };
  _impl_.messageid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.messageid_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteChatMessageParams::~DeleteChatMessageParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteChatMessageParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.messageid_.Destroy();
}

void DeleteChatMessageParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteChatMessageParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.messageid_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeleteChatMessageParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string messageID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_messageid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeleteChatMessageParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string messageID = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_messageid();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  return target;
}

::size_t DeleteChatMessageParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string messageID = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_messageid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteChatMessageParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeleteChatMessageParams*>(
      &from));
}

void DeleteChatMessageParams::MergeFrom(const DeleteChatMessageParams& from) {
  DeleteChatMessageParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_messageid(from._internal_messageid());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeleteChatMessageParams::CopyFrom(const DeleteChatMessageParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteChatMessageParams::IsInitialized() const {
  return true;
}

void DeleteChatMessageParams::InternalSwap(DeleteChatMessageParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.messageid_, lhs_arena,
                                       &other->_impl_.messageid_, rhs_arena);
}

std::string DeleteChatMessageParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams";
}

// ===================================================================

class VBItemInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VBItemInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(VBItemInfo, _impl_._has_bits_);
  static void set_has_imagefilepath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_imagename(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_vbtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_canbedeleted(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

VBItemInfo::VBItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VBItemInfo)
}
VBItemInfo::VBItemInfo(const VBItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VBItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imagefilepath_) {}

    , decltype(_impl_.imagename_) {}

    , decltype(_impl_.vbtype_) {}

    , decltype(_impl_.canbedeleted_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.imagefilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imagefilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.imagefilepath_.Set(from._internal_imagefilepath(), _this->GetArenaForAllocation());
  }
  _impl_.imagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.imagename_.Set(from._internal_imagename(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.vbtype_, &from._impl_.vbtype_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.canbedeleted_) -
    reinterpret_cast<char*>(&_impl_.vbtype_)) + sizeof(_impl_.canbedeleted_));
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VBItemInfo)
}

inline void VBItemInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imagefilepath_) {}

    , decltype(_impl_.imagename_) {}

    , decltype(_impl_.vbtype_) { 0 }

    , decltype(_impl_.canbedeleted_) { false }

  };
  _impl_.imagefilepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imagefilepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.imagename_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imagename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VBItemInfo::~VBItemInfo() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VBItemInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imagefilepath_.Destroy();
  _impl_.imagename_.Destroy();
}

void VBItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VBItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.imagefilepath_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.imagename_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.vbtype_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.canbedeleted_) -
        reinterpret_cast<char*>(&_impl_.vbtype_)) + sizeof(_impl_.canbedeleted_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VBItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string imageFilePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imagefilepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string imageName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_imagename();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 vbType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_vbtype(&has_bits);
          _impl_.vbtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool canBeDeleted = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _Internal::set_has_canbedeleted(&has_bits);
          _impl_.canbedeleted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VBItemInfo::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string imageFilePath = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_imagefilepath();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string imageName = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_imagename();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional int32 vbType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        3, this->_internal_vbtype(), target);
  }

  // optional bool canBeDeleted = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        4, this->_internal_canbedeleted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  return target;
}

::size_t VBItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string imageFilePath = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_imagefilepath());
    }

    // optional string imageName = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_imagename());
    }

    // optional int32 vbType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vbtype());
    }

    // optional bool canBeDeleted = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VBItemInfo::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VBItemInfo*>(
      &from));
}

void VBItemInfo::MergeFrom(const VBItemInfo& from) {
  VBItemInfo* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_imagefilepath(from._internal_imagefilepath());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_imagename(from._internal_imagename());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.vbtype_ = from._impl_.vbtype_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.canbedeleted_ = from._impl_.canbedeleted_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VBItemInfo::CopyFrom(const VBItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VBItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VBItemInfo::IsInitialized() const {
  return true;
}

void VBItemInfo::InternalSwap(VBItemInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imagefilepath_, lhs_arena,
                                       &other->_impl_.imagefilepath_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imagename_, lhs_arena,
                                       &other->_impl_.imagename_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VBItemInfo, _impl_.canbedeleted_)
      + sizeof(VBItemInfo::_impl_.canbedeleted_)
      - PROTOBUF_FIELD_OFFSET(VBItemInfo, _impl_.vbtype_)>(
          reinterpret_cast<char*>(&_impl_.vbtype_),
          reinterpret_cast<char*>(&other->_impl_.vbtype_));
}

std::string VBItemInfo::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VBItemInfo";
}

// ===================================================================

class VBItemHandleList::_Internal {
 public:
};

VBItemHandleList::VBItemHandleList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
}
VBItemHandleList::VBItemHandleList(const VBItemHandleList& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  VBItemHandleList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vbitemhandle_) { from._impl_.vbitemhandle_ }

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
}

inline void VBItemHandleList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.vbitemhandle_) { arena }

    , /*decltype(_impl_._cached_size_)*/{}
  };
}

VBItemHandleList::~VBItemHandleList() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VBItemHandleList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vbitemhandle_.~RepeatedField();
}

void VBItemHandleList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VBItemHandleList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vbitemhandle_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* VBItemHandleList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 vbItemHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_vbitemhandle(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<8>(ptr));
        } else if (static_cast<::uint8_t>(tag) == 10) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_vbitemhandle(), ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* VBItemHandleList::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 vbItemHandle = 1;
  for (int i = 0, n = this->_internal_vbitemhandle_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_vbitemhandle(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  return target;
}

::size_t VBItemHandleList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 vbItemHandle = 1;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::Int64Size(this->_impl_.vbitemhandle_)
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_vbitemhandle_size());
    ;
    total_size += tag_size + data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VBItemHandleList::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const VBItemHandleList*>(
      &from));
}

void VBItemHandleList::MergeFrom(const VBItemHandleList& from) {
  VBItemHandleList* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vbitemhandle_.MergeFrom(from._impl_.vbitemhandle_);
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void VBItemHandleList::CopyFrom(const VBItemHandleList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.VBItemHandleList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VBItemHandleList::IsInitialized() const {
  return true;
}

void VBItemHandleList::InternalSwap(VBItemHandleList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vbitemhandle_.InternalSwap(&other->_impl_.vbitemhandle_);
}

std::string VBItemHandleList::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.VBItemHandleList";
}

// ===================================================================

class AddVirtualBackgroundItemParams::_Internal {
 public:
  using HasBits = decltype(std::declval<AddVirtualBackgroundItemParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(AddVirtualBackgroundItemParams, _impl_._has_bits_);
  static void set_has_imagepath(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

AddVirtualBackgroundItemParams::AddVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
}
AddVirtualBackgroundItemParams::AddVirtualBackgroundItemParams(const AddVirtualBackgroundItemParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  AddVirtualBackgroundItemParams* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imagepath_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.imagepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imagepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.imagepath_.Set(from._internal_imagepath(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
}

inline void AddVirtualBackgroundItemParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.imagepath_) {}

  };
  _impl_.imagepath_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.imagepath_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AddVirtualBackgroundItemParams::~AddVirtualBackgroundItemParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AddVirtualBackgroundItemParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.imagepath_.Destroy();
}

void AddVirtualBackgroundItemParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AddVirtualBackgroundItemParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.imagepath_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* AddVirtualBackgroundItemParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string imagePath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_imagepath();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* AddVirtualBackgroundItemParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string imagePath = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_imagepath();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  return target;
}

::size_t AddVirtualBackgroundItemParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string imagePath = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_imagepath());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddVirtualBackgroundItemParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const AddVirtualBackgroundItemParams*>(
      &from));
}

void AddVirtualBackgroundItemParams::MergeFrom(const AddVirtualBackgroundItemParams& from) {
  AddVirtualBackgroundItemParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_imagepath(from._internal_imagepath());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void AddVirtualBackgroundItemParams::CopyFrom(const AddVirtualBackgroundItemParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddVirtualBackgroundItemParams::IsInitialized() const {
  return true;
}

void AddVirtualBackgroundItemParams::InternalSwap(AddVirtualBackgroundItemParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.imagepath_, lhs_arena,
                                       &other->_impl_.imagepath_, rhs_arena);
}

std::string AddVirtualBackgroundItemParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams";
}

// ===================================================================

class RemoveVirtualBackgroundItemParams::_Internal {
 public:
  using HasBits = decltype(std::declval<RemoveVirtualBackgroundItemParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(RemoveVirtualBackgroundItemParams, _impl_._has_bits_);
  static void set_has_vbitemhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

RemoveVirtualBackgroundItemParams::RemoveVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
}
RemoveVirtualBackgroundItemParams::RemoveVirtualBackgroundItemParams(const RemoveVirtualBackgroundItemParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
}

inline void RemoveVirtualBackgroundItemParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vbitemhandle_) { ::int64_t{0} }

  };
}

RemoveVirtualBackgroundItemParams::~RemoveVirtualBackgroundItemParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveVirtualBackgroundItemParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void RemoveVirtualBackgroundItemParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveVirtualBackgroundItemParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vbitemhandle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* RemoveVirtualBackgroundItemParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 vbItemHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_vbitemhandle(&has_bits);
          _impl_.vbitemhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* RemoveVirtualBackgroundItemParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 vbItemHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_vbitemhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  return target;
}

::size_t RemoveVirtualBackgroundItemParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 vbItemHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_vbitemhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RemoveVirtualBackgroundItemParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const RemoveVirtualBackgroundItemParams*>(
      &from));
}

void RemoveVirtualBackgroundItemParams::MergeFrom(const RemoveVirtualBackgroundItemParams& from) {
  RemoveVirtualBackgroundItemParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_vbitemhandle(from._internal_vbitemhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void RemoveVirtualBackgroundItemParams::CopyFrom(const RemoveVirtualBackgroundItemParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveVirtualBackgroundItemParams::IsInitialized() const {
  return true;
}

void RemoveVirtualBackgroundItemParams::InternalSwap(RemoveVirtualBackgroundItemParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.vbitemhandle_, other->_impl_.vbitemhandle_);
}

std::string RemoveVirtualBackgroundItemParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams";
}

// ===================================================================

class SetVirtualBackgroundItemParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetVirtualBackgroundItemParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetVirtualBackgroundItemParams, _impl_._has_bits_);
  static void set_has_vbitemhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetVirtualBackgroundItemParams::SetVirtualBackgroundItemParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
}
SetVirtualBackgroundItemParams::SetVirtualBackgroundItemParams(const SetVirtualBackgroundItemParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
}

inline void SetVirtualBackgroundItemParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vbitemhandle_) { ::int64_t{0} }

  };
}

SetVirtualBackgroundItemParams::~SetVirtualBackgroundItemParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVirtualBackgroundItemParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetVirtualBackgroundItemParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVirtualBackgroundItemParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vbitemhandle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetVirtualBackgroundItemParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 vbItemHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_vbitemhandle(&has_bits);
          _impl_.vbitemhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetVirtualBackgroundItemParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 vbItemHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_vbitemhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  return target;
}

::size_t SetVirtualBackgroundItemParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 vbItemHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_vbitemhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetVirtualBackgroundItemParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetVirtualBackgroundItemParams*>(
      &from));
}

void SetVirtualBackgroundItemParams::MergeFrom(const SetVirtualBackgroundItemParams& from) {
  SetVirtualBackgroundItemParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_vbitemhandle(from._internal_vbitemhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetVirtualBackgroundItemParams::CopyFrom(const SetVirtualBackgroundItemParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVirtualBackgroundItemParams::IsInitialized() const {
  return true;
}

void SetVirtualBackgroundItemParams::InternalSwap(SetVirtualBackgroundItemParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.vbitemhandle_, other->_impl_.vbitemhandle_);
}

std::string SetVirtualBackgroundItemParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams";
}

// ===================================================================

class GetVirtualBackgroundItemInfoParams::_Internal {
 public:
  using HasBits = decltype(std::declval<GetVirtualBackgroundItemInfoParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetVirtualBackgroundItemInfoParams, _impl_._has_bits_);
  static void set_has_vbitemhandle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetVirtualBackgroundItemInfoParams::GetVirtualBackgroundItemInfoParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
}
GetVirtualBackgroundItemInfoParams::GetVirtualBackgroundItemInfoParams(const GetVirtualBackgroundItemInfoParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
}

inline void GetVirtualBackgroundItemInfoParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.vbitemhandle_) { ::int64_t{0} }

  };
}

GetVirtualBackgroundItemInfoParams::~GetVirtualBackgroundItemInfoParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetVirtualBackgroundItemInfoParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetVirtualBackgroundItemInfoParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetVirtualBackgroundItemInfoParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vbitemhandle_ = ::int64_t{0};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GetVirtualBackgroundItemInfoParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int64 vbItemHandle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_vbitemhandle(&has_bits);
          _impl_.vbitemhandle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GetVirtualBackgroundItemInfoParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int64 vbItemHandle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        1, this->_internal_vbitemhandle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  return target;
}

::size_t GetVirtualBackgroundItemInfoParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int64 vbItemHandle = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_vbitemhandle());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetVirtualBackgroundItemInfoParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GetVirtualBackgroundItemInfoParams*>(
      &from));
}

void GetVirtualBackgroundItemInfoParams::MergeFrom(const GetVirtualBackgroundItemInfoParams& from) {
  GetVirtualBackgroundItemInfoParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_vbitemhandle(from._internal_vbitemhandle());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GetVirtualBackgroundItemInfoParams::CopyFrom(const GetVirtualBackgroundItemInfoParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVirtualBackgroundItemInfoParams::IsInitialized() const {
  return true;
}

void GetVirtualBackgroundItemInfoParams::InternalSwap(GetVirtualBackgroundItemInfoParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.vbitemhandle_, other->_impl_.vbitemhandle_);
}

std::string GetVirtualBackgroundItemInfoParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams";
}

// ===================================================================

class SetScreenCaptureModeParams::_Internal {
 public:
  using HasBits = decltype(std::declval<SetScreenCaptureModeParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SetScreenCaptureModeParams, _impl_._has_bits_);
  static void set_has_capturemode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SetScreenCaptureModeParams::SetScreenCaptureModeParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
}
SetScreenCaptureModeParams::SetScreenCaptureModeParams(const SetScreenCaptureModeParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
}

inline void SetScreenCaptureModeParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.capturemode_) { 0 }

  };
}

SetScreenCaptureModeParams::~SetScreenCaptureModeParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetScreenCaptureModeParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void SetScreenCaptureModeParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetScreenCaptureModeParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.capturemode_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SetScreenCaptureModeParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 captureMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_capturemode(&has_bits);
          _impl_.capturemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SetScreenCaptureModeParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 captureMode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_capturemode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  return target;
}

::size_t SetScreenCaptureModeParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 captureMode = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_capturemode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetScreenCaptureModeParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SetScreenCaptureModeParams*>(
      &from));
}

void SetScreenCaptureModeParams::MergeFrom(const SetScreenCaptureModeParams& from) {
  SetScreenCaptureModeParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_capturemode(from._internal_capturemode());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SetScreenCaptureModeParams::CopyFrom(const SetScreenCaptureModeParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetScreenCaptureModeParams::IsInitialized() const {
  return true;
}

void SetScreenCaptureModeParams::InternalSwap(SetScreenCaptureModeParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.capturemode_, other->_impl_.capturemode_);
}

std::string SetScreenCaptureModeParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams";
}

// ===================================================================

class EnableGreenBorderParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableGreenBorderParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableGreenBorderParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableGreenBorderParams::EnableGreenBorderParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
}
EnableGreenBorderParams::EnableGreenBorderParams(const EnableGreenBorderParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
}

inline void EnableGreenBorderParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableGreenBorderParams::~EnableGreenBorderParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableGreenBorderParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableGreenBorderParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableGreenBorderParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableGreenBorderParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableGreenBorderParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  return target;
}

::size_t EnableGreenBorderParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableGreenBorderParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableGreenBorderParams*>(
      &from));
}

void EnableGreenBorderParams::MergeFrom(const EnableGreenBorderParams& from) {
  EnableGreenBorderParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableGreenBorderParams::CopyFrom(const EnableGreenBorderParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableGreenBorderParams::IsInitialized() const {
  return true;
}

void EnableGreenBorderParams::InternalSwap(EnableGreenBorderParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableGreenBorderParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams";
}

// ===================================================================

class EnableAdminRemoteControlParams::_Internal {
 public:
  using HasBits = decltype(std::declval<EnableAdminRemoteControlParams>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EnableAdminRemoteControlParams, _impl_._has_bits_);
  static void set_has_benable(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

EnableAdminRemoteControlParams::EnableAdminRemoteControlParams(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
}
EnableAdminRemoteControlParams::EnableAdminRemoteControlParams(const EnableAdminRemoteControlParams& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<std::string>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
}

inline void EnableAdminRemoteControlParams::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.benable_) { false }

  };
}

EnableAdminRemoteControlParams::~EnableAdminRemoteControlParams() {
  // @@protoc_insertion_point(destructor:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnableAdminRemoteControlParams::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnableAdminRemoteControlParams::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnableAdminRemoteControlParams::Clear() {
// @@protoc_insertion_point(message_clear_start:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.benable_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EnableAdminRemoteControlParams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool bEnable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_benable(&has_bits);
          _impl_.benable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EnableAdminRemoteControlParams::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool bEnable = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        1, this->_internal_benable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  return target;
}

::size_t EnableAdminRemoteControlParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bool bEnable = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EnableAdminRemoteControlParams::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EnableAdminRemoteControlParams*>(
      &from));
}

void EnableAdminRemoteControlParams::MergeFrom(const EnableAdminRemoteControlParams& from) {
  EnableAdminRemoteControlParams* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_benable(from._internal_benable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EnableAdminRemoteControlParams::CopyFrom(const EnableAdminRemoteControlParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableAdminRemoteControlParams::IsInitialized() const {
  return true;
}

void EnableAdminRemoteControlParams::InternalSwap(EnableAdminRemoteControlParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);

  swap(_impl_.benable_, other->_impl_.benable_);
}

std::string EnableAdminRemoteControlParams::GetTypeName() const {
  return "com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sdk
}  // namespace zoomvideo
}  // namespace electron
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKUser*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKUser >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::UserList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::UserList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::UserList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::ShareAction*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::ShareAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::ShareAction >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::ShareActionList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::ShareActionList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::ShareActionList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfoList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionAudioStatisticInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfoList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionASVStatisticInfoList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapability >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SDKVideoCapabilityList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LTTLanguage*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LTTLanguage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LTTLanguage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::ZoomVideoSDKShareCursorData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamStatusList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onErrorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserJoinParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserLeaveParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserVideoStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserAudioStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserShareStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onFailedToStartShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveStreamStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserHostChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserNameChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserManagerChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUserActiveAudioChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatNewMessageNotifyParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onChatMsgDeleteNotificationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onVideoSourceInitializeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onPropertyChangeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRawDataStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandReceivedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCommandChannelConnectResultParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onInviteByPhoneStatusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCloudRecordingStatusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestResultParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCameraControlRequestReceivedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlStatusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlRequestReceivedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onRemoteControlServiceInstallResultParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onHostAskUnmuteParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMultiCameraStreamStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onMicSpeakerVolumeChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onAudioDeviceStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onTestMicStatusChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSelectedAudioDeviceChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionStatusParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onLiveTranscriptionMsgErrorParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_liveTranscriptionMsgInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onCalloutJoinSuccessParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSessionLeaveParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onShareCursorDataReceivedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onSpotlightVideoChangedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onBindIncomingLiveStreamResponseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onUnbindIncomingLiveStreamResponseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onIncomingLiveStreamStatusResponseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStartIncomingLiveStreamResponseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody_onStopIncomingLiveStreamResponseParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CallbackBody*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CallbackBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CallbackBody >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CreateVideoSDKObjParam*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CreateVideoSDKObjParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CreateVideoSDKObjParam >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKInitParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKInitParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKInitParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionContext*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionContext >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VideoSDKSessionContext >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LeaveSessionParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LeaveSessionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LeaveSessionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SessionPasswordParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SessionPasswordParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SessionPasswordParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::MuteAudioParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::MuteAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::MuteAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::UnMuteAudioParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::UnMuteAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::UnMuteAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetSpeakerParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetSpeakerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetSpeakerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SelectSpeakerParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SelectSpeakerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SelectSpeakerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SelectMicParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SelectMicParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SelectMicParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SendChatToUserParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SendChatToUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SendChatToUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SendChatToAllParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SendChatToAllParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SendChatToAllParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartLiveStreamParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartLiveStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartLiveStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::IncomingLiveStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartShareViewParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartShareViewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartShareViewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartShareScreenParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartShareScreenParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartShareScreenParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LockShareParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LockShareParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LockShareParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableShareDeviceAudioParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableShareDeviceAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableShareDeviceAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableOptimizeForSharedVideoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableOptimizeForSharedVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableOptimizeForSharedVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartShare2ndCameraParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartShare2ndCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartShare2ndCameraParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetRemoteUsersParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetRemoteUsersParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetRemoteUsersParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetMyInfoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetMyInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetMyInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::ChangeNameParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::ChangeNameParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::ChangeNameParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::MakeHostParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::MakeHostParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::MakeHostParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::MakeManagerParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::MakeManagerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::MakeManagerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RevokeManagerParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RevokeManagerParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RevokeManagerParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoveUserParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoveUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoveUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RotateMyVideoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RotateMyVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RotateMyVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SelectCameraParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SelectCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SelectCameraParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CreateRenderParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CreateRenderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CreateRenderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::DestroyRendererParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::DestroyRendererParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::DestroyRendererParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SubscribeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SubscribeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SubscribeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::UnSubscribeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::UnSubscribeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::UnSubscribeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SubscribeMultiCameraStreamParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SubscribeMultiCameraStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SubscribeMultiCameraStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::UnSubscribeMultiCameraStreamParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::UnSubscribeMultiCameraStreamParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::UnSubscribeMultiCameraStreamParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetRawDataResolutionParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetRawDataResolutionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetRawDataResolutionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetResolutionParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetResolutionParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetResolutionParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetRawDataTypeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetRawDataTypeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetRawDataTypeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CameraInfos*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CameraInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CameraInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetCameraList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetCameraList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetCameraList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::MultiCameraStreamList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetMultiCameraStreamList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetMultiCameraStreamList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetMultiCameraStreamList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::MicInfos*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::MicInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::MicInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetMicList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetMicList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetMicList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SpeakerInfos*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SpeakerInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetSpeakerList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetSpeakerList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetSpeakerList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SendCommandParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SendCommandParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SendCommandParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::PhoneSupportCountryInfos >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetPhoneSupportCountryList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetPhoneSupportCountryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetPhoneSupportCountryList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::InviteByPhoneParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::InviteByPhoneParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::InviteByPhoneParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::InvitePhoneUserParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::InvitePhoneUserParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::InvitePhoneUserParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnLeftParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnLeftParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnLeftParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnRightParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnRightParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnRightParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnUpParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnUpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnUpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnDownParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnDownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlTurnDownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomInParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomInParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomInParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomOutParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomOutParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LocalCameraCtrlZoomOutParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RequestControlRemoteCameraParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RequestControlRemoteCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RequestControlRemoteCameraParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GiveUpControlRemoteCameraParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GiveUpControlRemoteCameraParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GiveUpControlRemoteCameraParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnLeftParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnLeftParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnLeftParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnRightParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnRightParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnRightParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnUpParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnUpParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnUpParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnDownParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnDownParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlTurnDownParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomInParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomInParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomInParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomOutParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomOutParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoteCameraCtrlZoomOutParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetVideoQualityPreferenceParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetVideoQualityPreferenceParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetVideoQualityPreferenceParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetSuppressBackgroundNoiseLevelParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetSuppressBackgroundNoiseLevelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetSuppressBackgroundNoiseLevelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetEchoCancellationLevelParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetEchoCancellationLevelParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetEchoCancellationLevelParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableMicOriginalInputParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableMicOriginalInputParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableMicOriginalInputParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableHighFidelityMusicModeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableHighFidelityMusicModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableHighFidelityMusicModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableEchoCancellationParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableEchoCancellationParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableEchoCancellationParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableStereoAudioParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableStereoAudioParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableStereoAudioParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartMicTestRecordingParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartMicTestRecordingParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartMicTestRecordingParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartSpeakerTestParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartSpeakerTestParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartSpeakerTestParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetTimerIntervalParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetTimerIntervalParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetTimerIntervalParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableMultiStreamVideoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableMultiStreamVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableMultiStreamVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::DisableMultiStreamVideoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::DisableMultiStreamVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::DisableMultiStreamVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StartVideoPreviewParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StartVideoPreviewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StartVideoPreviewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::StopVideoPreviewParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::StopVideoPreviewParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::StopVideoPreviewParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SpotLightVideoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SpotLightVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SpotLightVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::UnSpotLightVideoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::UnSpotLightVideoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::UnSpotLightVideoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetSpokenLanguageParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetSpokenLanguageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetSpokenLanguageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::LTTLanguagesList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::LTTLanguagesList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::LTTLanguagesList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetTranslationLanguageParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetTranslationLanguageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetTranslationLanguageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::CanChatMessageBeDeletedParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::CanChatMessageBeDeletedParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::CanChatMessageBeDeletedParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::DeleteChatMessageParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::DeleteChatMessageParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::DeleteChatMessageParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VBItemInfo*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VBItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VBItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::VBItemHandleList*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::VBItemHandleList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::VBItemHandleList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::AddVirtualBackgroundItemParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::AddVirtualBackgroundItemParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::AddVirtualBackgroundItemParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::RemoveVirtualBackgroundItemParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::RemoveVirtualBackgroundItemParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::RemoveVirtualBackgroundItemParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetVirtualBackgroundItemParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetVirtualBackgroundItemParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetVirtualBackgroundItemParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::GetVirtualBackgroundItemInfoParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::GetVirtualBackgroundItemInfoParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::GetVirtualBackgroundItemInfoParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::SetScreenCaptureModeParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::SetScreenCaptureModeParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::SetScreenCaptureModeParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableGreenBorderParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableGreenBorderParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableGreenBorderParams >(arena);
}
template<> PROTOBUF_NOINLINE ::com::electron::zoomvideo::sdk::proto::EnableAdminRemoteControlParams*
Arena::CreateMaybeMessage< ::com::electron::zoomvideo::sdk::proto::EnableAdminRemoteControlParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::electron::zoomvideo::sdk::proto::EnableAdminRemoteControlParams >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
