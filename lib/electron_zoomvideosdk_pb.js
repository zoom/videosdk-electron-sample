// source: electron_zoomvideosdk.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CameraInfos', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetCameraList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetMicList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LTTLanguage', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.LockShareParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.MakeHostParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.MicInfos', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SelectMicParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SendCommandParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.ShareAction', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.ShareActionList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.SubscribeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.UserList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VBItemInfo', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser', null, global);
goog.exportSymbol('proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.UserList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.UserList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.UserList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.UserList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.UserList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.ShareAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.ShareAction.displayName = 'proto.com.electron.zoomvideo.sdk.proto.ShareAction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.ShareActionList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.ShareActionList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.ShareActionList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.ShareActionList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LTTLanguage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LTTLanguage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.displayName = 'proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.displayName = 'proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SelectMicParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SelectMicParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LockShareParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LockShareParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LockShareParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.MakeHostParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.MakeHostParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SubscribeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SubscribeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CameraInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CameraInfos.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CameraInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.GetCameraList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetCameraList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetCameraList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetCameraList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.displayName = 'proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.MicInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.MicInfos.displayName = 'proto.com.electron.zoomvideo.sdk.proto.MicInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.GetMicList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetMicList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetMicList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetMicList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SendCommandParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SendCommandParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.displayName = 'proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VBItemInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VBItemInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.repeatedFields_, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.displayName = 'proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.displayName = 'proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    pUser: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    customIdentity: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    ishasvideodevice: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    isvideoon: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    audiotype: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    isaudiomuted: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    isaudiotalking: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    znShareactionlist: (f = msg.getZnShareactionlist()) && proto.com.electron.zoomvideo.sdk.proto.ShareActionList.toObject(includeInstance, f),
    ishost: (f = jspb.Message.getBooleanField(msg, 10)) == null ? undefined : f,
    ismanager: (f = jspb.Message.getBooleanField(msg, 11)) == null ? undefined : f,
    videostatisticinfoWidth: (f = jspb.Message.getField(msg, 12)) == null ? undefined : f,
    videostatisticinfoHeight: (f = jspb.Message.getField(msg, 13)) == null ? undefined : f,
    videostatisticinfoFps: (f = jspb.Message.getField(msg, 14)) == null ? undefined : f,
    videostatisticinfoBpf: (f = jspb.Message.getField(msg, 15)) == null ? undefined : f,
    sharestatisticinfoWidth: (f = jspb.Message.getField(msg, 16)) == null ? undefined : f,
    sharestatisticinfoHeight: (f = jspb.Message.getField(msg, 17)) == null ? undefined : f,
    sharestatisticinfoFps: (f = jspb.Message.getField(msg, 18)) == null ? undefined : f,
    sharestatisticinfoBpf: (f = jspb.Message.getField(msg, 19)) == null ? undefined : f,
    userid: (f = jspb.Message.getField(msg, 20)) == null ? undefined : f,
    userreference: (f = jspb.Message.getField(msg, 21)) == null ? undefined : f,
    isvideospotlighted: (f = jspb.Message.getBooleanField(msg, 22)) == null ? undefined : f,
    isincominglivestreamuser: (f = jspb.Message.getBooleanField(msg, 23)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCustomIdentity(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshasvideodevice(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvideoon(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAudiotype(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiomuted(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsaudiotalking(value);
      break;
    case 9:
      var value = new proto.com.electron.zoomvideo.sdk.proto.ShareActionList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.ShareActionList.deserializeBinaryFromReader);
      msg.setZnShareactionlist(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIshost(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsmanager(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideostatisticinfoWidth(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideostatisticinfoHeight(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideostatisticinfoFps(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVideostatisticinfoBpf(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharestatisticinfoWidth(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharestatisticinfoHeight(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharestatisticinfoFps(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharestatisticinfoBpf(value);
      break;
    case 20:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserreference(value);
      break;
    case 22:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsvideospotlighted(value);
      break;
    case 23:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsincominglivestreamuser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getZnShareactionlist();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.com.electron.zoomvideo.sdk.proto.ShareActionList.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeBool(
      10,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeBool(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 15));
  if (f != null) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 16));
  if (f != null) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 17));
  if (f != null) {
    writer.writeInt32(
      17,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 18));
  if (f != null) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 19));
  if (f != null) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeString(
      20,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 21));
  if (f != null) {
    writer.writeString(
      21,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 22));
  if (f != null) {
    writer.writeBool(
      22,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 23));
  if (f != null) {
    writer.writeBool(
      23,
      f
    );
  }
};


/**
 * optional int64 p_user = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getPUser = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setPUser = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearPUser = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasPUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string custom_identity = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getCustomIdentity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setCustomIdentity = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearCustomIdentity = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasCustomIdentity = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string username = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isHasVideoDevice = 4;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIshasvideodevice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIshasvideodevice = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIshasvideodevice = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIshasvideodevice = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isVideoOn = 5;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIsvideoon = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIsvideoon = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIsvideoon = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIsvideoon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 audioType = 6;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getAudiotype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setAudiotype = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearAudiotype = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasAudiotype = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool isAudioMuted = 7;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIsaudiomuted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIsaudiomuted = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIsaudiomuted = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIsaudiomuted = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool isAudioTalking = 8;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIsaudiotalking = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIsaudiotalking = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIsaudiotalking = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIsaudiotalking = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional ShareActionList zn_shareActionList = 9;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.ShareActionList}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getZnShareactionlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.ShareActionList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.ShareActionList, 9));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.ShareActionList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setZnShareactionlist = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearZnShareactionlist = function() {
  return this.setZnShareactionlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasZnShareactionlist = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bool isHost = 10;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIshost = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIshost = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIshost = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIshost = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional bool isManager = 11;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIsmanager = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 11, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIsmanager = function(value) {
  return jspb.Message.setField(this, 11, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIsmanager = function() {
  return jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIsmanager = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 VideoStatisticInfo_width = 12;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getVideostatisticinfoWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setVideostatisticinfoWidth = function(value) {
  return jspb.Message.setField(this, 12, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearVideostatisticinfoWidth = function() {
  return jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasVideostatisticinfoWidth = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 VideoStatisticInfo_height = 13;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getVideostatisticinfoHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setVideostatisticinfoHeight = function(value) {
  return jspb.Message.setField(this, 13, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearVideostatisticinfoHeight = function() {
  return jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasVideostatisticinfoHeight = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 VideoStatisticInfo_fps = 14;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getVideostatisticinfoFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setVideostatisticinfoFps = function(value) {
  return jspb.Message.setField(this, 14, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearVideostatisticinfoFps = function() {
  return jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasVideostatisticinfoFps = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional int32 VideoStatisticInfo_bpf = 15;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getVideostatisticinfoBpf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setVideostatisticinfoBpf = function(value) {
  return jspb.Message.setField(this, 15, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearVideostatisticinfoBpf = function() {
  return jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasVideostatisticinfoBpf = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional int32 ShareStatisticInfo_width = 16;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getSharestatisticinfoWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setSharestatisticinfoWidth = function(value) {
  return jspb.Message.setField(this, 16, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearSharestatisticinfoWidth = function() {
  return jspb.Message.setField(this, 16, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasSharestatisticinfoWidth = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional int32 ShareStatisticInfo_height = 17;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getSharestatisticinfoHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setSharestatisticinfoHeight = function(value) {
  return jspb.Message.setField(this, 17, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearSharestatisticinfoHeight = function() {
  return jspb.Message.setField(this, 17, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasSharestatisticinfoHeight = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional int32 ShareStatisticInfo_fps = 18;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getSharestatisticinfoFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setSharestatisticinfoFps = function(value) {
  return jspb.Message.setField(this, 18, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearSharestatisticinfoFps = function() {
  return jspb.Message.setField(this, 18, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasSharestatisticinfoFps = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional int32 ShareStatisticInfo_bpf = 19;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getSharestatisticinfoBpf = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setSharestatisticinfoBpf = function(value) {
  return jspb.Message.setField(this, 19, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearSharestatisticinfoBpf = function() {
  return jspb.Message.setField(this, 19, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasSharestatisticinfoBpf = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional string userid = 20;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setUserid = function(value) {
  return jspb.Message.setField(this, 20, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearUserid = function() {
  return jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional string userReference = 21;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getUserreference = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setUserreference = function(value) {
  return jspb.Message.setField(this, 21, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearUserreference = function() {
  return jspb.Message.setField(this, 21, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasUserreference = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional bool isVideoSpotLighted = 22;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIsvideospotlighted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 22, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIsvideospotlighted = function(value) {
  return jspb.Message.setField(this, 22, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIsvideospotlighted = function() {
  return jspb.Message.setField(this, 22, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIsvideospotlighted = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional bool isIncomingLiveStreamUser = 23;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.getIsincominglivestreamuser = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 23, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.setIsincominglivestreamuser = function(value) {
  return jspb.Message.setField(this, 23, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.clearIsincominglivestreamuser = function() {
  return jspb.Message.setField(this, 23, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.prototype.hasIsincominglivestreamuser = function() {
  return jspb.Message.getField(this, 23) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UserList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.toObject = function(includeInstance, msg) {
  var f, obj = {
    userList: jspb.Message.toObjectList(msg.getUserList(),
    proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.UserList;
  return proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UserList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.addUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UserList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VideoSDKUser user = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser>}
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.prototype.getUserList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UserList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.UserList.prototype.setUserList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.prototype.addUser = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UserList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UserList.prototype.clearUserList = function() {
  return this.setUserList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.ShareAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    sharesourceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sharestatus: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    subscribefailreason: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    isannotationprivilegeenabled: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    sharetype: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.ShareAction;
  return proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharesourceid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharestatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSubscribefailreason(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsannotationprivilegeenabled(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSharetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.ShareAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 shareSourceId = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.getSharesourceid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.setSharesourceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.clearSharesourceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.hasSharesourceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 shareStatus = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.getSharestatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.setSharestatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.clearSharestatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.hasSharestatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 subscribeFailReason = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.getSubscribefailreason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.setSubscribefailreason = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.clearSubscribefailreason = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.hasSubscribefailreason = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isAnnotationPrivilegeEnabled = 4;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.getIsannotationprivilegeenabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.setIsannotationprivilegeenabled = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.clearIsannotationprivilegeenabled = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.hasIsannotationprivilegeenabled = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 shareType = 5;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.getSharetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.setSharetype = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.clearSharetype = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareAction.prototype.hasSharetype = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.ShareActionList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.toObject = function(includeInstance, msg) {
  var f, obj = {
    shareactionList: jspb.Message.toObjectList(msg.getShareactionList(),
    proto.com.electron.zoomvideo.sdk.proto.ShareAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.ShareActionList;
  return proto.com.electron.zoomvideo.sdk.proto.ShareActionList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.ShareAction;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinaryFromReader);
      msg.addShareaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.ShareActionList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShareactionList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.ShareAction.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ShareAction shareAction = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.ShareAction>}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.prototype.getShareactionList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.ShareAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.ShareAction, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.ShareAction>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.prototype.setShareactionList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ShareAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareAction}
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.prototype.addShareaction = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.ShareAction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ShareActionList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ShareActionList.prototype.clearShareactionList = function() {
  return this.setShareactionList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    frequency: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    latency: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    jitter: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    packetlossavg: (f = jspb.Message.getOptionalFloatingPointField(msg, 4)) == null ? undefined : f,
    packetlossmax: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrequency(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatency(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJitter(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPacketlossavg(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPacketlossmax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional int64 frequency = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.setFrequency = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.clearFrequency = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.hasFrequency = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 latency = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.setLatency = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.clearLatency = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.hasLatency = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 Jitter = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.getJitter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.setJitter = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.clearJitter = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.hasJitter = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional float packetLossAvg = 4;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.getPacketlossavg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.setPacketlossavg = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.clearPacketlossavg = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.hasPacketlossavg = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float packetLossMax = 5;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.getPacketlossmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.setPacketlossmax = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.clearPacketlossmax = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.prototype.hasPacketlossmax = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    audiostatisticinfoList: jspb.Message.toObjectList(msg.getAudiostatisticinfoList(),
    proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.deserializeBinaryFromReader);
      msg.addAudiostatisticinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAudiostatisticinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VideoSDKSessionAudioStatisticInfo audioStatisticInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo>}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.prototype.getAudiostatisticinfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.prototype.setAudiostatisticinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.prototype.addAudiostatisticinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionAudioStatisticInfoList.prototype.clearAudiostatisticinfoList = function() {
  return this.setAudiostatisticinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameWidth: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    frameHeight: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    fps: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    latency: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    jitter: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    packetlossavg: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
    packetlossmax: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrameWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFrameHeight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFps(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLatency(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJitter(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPacketlossavg(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPacketlossmax(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional int64 frame_width = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getFrameWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setFrameWidth = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearFrameWidth = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasFrameWidth = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 frame_height = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getFrameHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setFrameHeight = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearFrameHeight = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasFrameHeight = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 fps = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getFps = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setFps = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearFps = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasFps = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 latency = 4;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getLatency = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setLatency = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearLatency = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasLatency = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 Jitter = 5;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getJitter = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setJitter = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearJitter = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasJitter = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float packetLossAvg = 6;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getPacketlossavg = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setPacketlossavg = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearPacketlossavg = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasPacketlossavg = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float packetLossMax = 7;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.getPacketlossmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.setPacketlossmax = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.clearPacketlossmax = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.prototype.hasPacketlossmax = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.toObject = function(includeInstance, msg) {
  var f, obj = {
    asvstatisticinfoList: jspb.Message.toObjectList(msg.getAsvstatisticinfoList(),
    proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.deserializeBinaryFromReader);
      msg.addAsvstatisticinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsvstatisticinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VideoSDKSessionASVStatisticInfo ASVStatisticInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo>}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.prototype.getAsvstatisticinfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.prototype.setAsvstatisticinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.prototype.addAsvstatisticinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionASVStatisticInfoList.prototype.clearAsvstatisticinfoList = function() {
  return this.setAsvstatisticinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.toObject = function(includeInstance, msg) {
  var f, obj = {
    iseffective: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    width: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    height: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    frame: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability;
  return proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIseffective(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFrame(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bool isEffective = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.getIseffective = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.setIseffective = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.clearIseffective = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.hasIseffective = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 width = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.setWidth = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.clearWidth = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 height = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.setHeight = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.clearHeight = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 frame = 4;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.getFrame = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.setFrame = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.clearFrame = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.toObject = function(includeInstance, msg) {
  var f, obj = {
    videocapabilityList: jspb.Message.toObjectList(msg.getVideocapabilityList(),
    proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList;
  return proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.deserializeBinaryFromReader);
      msg.addVideocapability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideocapabilityList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SDKVideoCapability VideoCapability = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability>}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.prototype.getVideocapabilityList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.prototype.setVideocapabilityList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability}
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.prototype.addVideocapability = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.prototype.clearVideocapabilityList = function() {
  return this.setVideocapabilityList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.toObject = function(includeInstance, msg) {
  var f, obj = {
    lttlanguageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    lttlanguagename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LTTLanguage;
  return proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLttlanguageid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLttlanguagename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int32 lttLanguageID = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.getLttlanguageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.setLttlanguageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.clearLttlanguageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.hasLttlanguageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string lttLanguageName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.getLttlanguagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.setLttlanguagename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.clearLttlanguagename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.prototype.hasLttlanguagename = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourceId: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    x: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    y: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData;
  return proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSourceId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional uint32 source_id = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.getSourceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.setSourceId = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.clearSourceId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.hasSourceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 x = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.setX = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.clearX = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.hasX = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 y = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.setY = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.clearY = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.prototype.hasY = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    strstreamkeyid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    isrtmpconnected: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    isstreampushed: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus;
  return proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstreamkeyid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrtmpconnected(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsstreampushed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string strStreamKeyID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.getStrstreamkeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.setStrstreamkeyid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.clearStrstreamkeyid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.hasStrstreamkeyid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool isRTMPConnected = 2;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.getIsrtmpconnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.setIsrtmpconnected = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.clearIsrtmpconnected = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.hasIsrtmpconnected = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isStreamPushed = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.getIsstreampushed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.setIsstreampushed = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.clearIsstreampushed = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.prototype.hasIsstreampushed = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.toObject = function(includeInstance, msg) {
  var f, obj = {
    statusList: jspb.Message.toObjectList(msg.getStatusList(),
    proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList;
  return proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.deserializeBinaryFromReader);
      msg.addStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IncomingLiveStreamStatus status = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus>}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.prototype.getStatusList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.prototype.setStatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.prototype.addStatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatus, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.prototype.clearStatusList = function() {
  return this.setStatusList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgtype: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    onerrorparam: (f = msg.getOnerrorparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.toObject(includeInstance, f),
    onuserjoinparam: (f = msg.getOnuserjoinparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.toObject(includeInstance, f),
    onuserleaveparam: (f = msg.getOnuserleaveparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.toObject(includeInstance, f),
    onuservideostatuschangedparam: (f = msg.getOnuservideostatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.toObject(includeInstance, f),
    onuseraudiostatuschangedparam: (f = msg.getOnuseraudiostatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.toObject(includeInstance, f),
    onusersharestatuschangedparam: (f = msg.getOnusersharestatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.toObject(includeInstance, f),
    onlivestreamstatuschangedparam: (f = msg.getOnlivestreamstatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.toObject(includeInstance, f),
    onuserhostchangedparam: (f = msg.getOnuserhostchangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.toObject(includeInstance, f),
    onuseractiveaudiochangedparam: (f = msg.getOnuseractiveaudiochangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.toObject(includeInstance, f),
    onchatnewmessagenotifyparam: (f = msg.getOnchatnewmessagenotifyparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.toObject(includeInstance, f),
    onvideosourceinitializeparam: (f = msg.getOnvideosourceinitializeparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.toObject(includeInstance, f),
    onpropertychangeparam: (f = msg.getOnpropertychangeparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.toObject(includeInstance, f),
    onrawdatastatuschangedparam: (f = msg.getOnrawdatastatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.toObject(includeInstance, f),
    onusermanagerchangedparam: (f = msg.getOnusermanagerchangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.toObject(includeInstance, f),
    onusernamechangedparam: (f = msg.getOnusernamechangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.toObject(includeInstance, f),
    oncommandreceivedparam: (f = msg.getOncommandreceivedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.toObject(includeInstance, f),
    oncloudrecordingstatusparam: (f = msg.getOncloudrecordingstatusparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.toObject(includeInstance, f),
    oncameracontrolrequestresultparam: (f = msg.getOncameracontrolrequestresultparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.toObject(includeInstance, f),
    oncameracontrolrequestreceivedparam: (f = msg.getOncameracontrolrequestreceivedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.toObject(includeInstance, f),
    oncommandchannelconnectresultparam: (f = msg.getOncommandchannelconnectresultparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.toObject(includeInstance, f),
    onhostaskunmuteparam: (f = msg.getOnhostaskunmuteparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.toObject(includeInstance, f),
    oninvitebyphonestatusparam: (f = msg.getOninvitebyphonestatusparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.toObject(includeInstance, f),
    onmulticamerastreamstatuschangedparam: (f = msg.getOnmulticamerastreamstatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.toObject(includeInstance, f),
    onmicspeakervolumechangedparam: (f = msg.getOnmicspeakervolumechangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.toObject(includeInstance, f),
    onaudiodevicestatuschangedparam: (f = msg.getOnaudiodevicestatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.toObject(includeInstance, f),
    ontestmicstatuschangedparam: (f = msg.getOntestmicstatuschangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.toObject(includeInstance, f),
    onselectedaudiodevicechangedparam: (f = msg.getOnselectedaudiodevicechangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.toObject(includeInstance, f),
    onlivetranscriptionstatusparam: (f = msg.getOnlivetranscriptionstatusparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.toObject(includeInstance, f),
    onlivetranscriptionmsgerrorparam: (f = msg.getOnlivetranscriptionmsgerrorparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.toObject(includeInstance, f),
    onchatmsgdeletenotificationparam: (f = msg.getOnchatmsgdeletenotificationparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.toObject(includeInstance, f),
    livetranscriptionmsginfoparam: (f = msg.getLivetranscriptionmsginfoparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.toObject(includeInstance, f),
    oncalloutjoinsuccessparam: (f = msg.getOncalloutjoinsuccessparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.toObject(includeInstance, f),
    onsessionleaveparam: (f = msg.getOnsessionleaveparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.toObject(includeInstance, f),
    onsharecursordatareceivedparam: (f = msg.getOnsharecursordatareceivedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.toObject(includeInstance, f),
    onremotecontrolstatusparam: (f = msg.getOnremotecontrolstatusparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.toObject(includeInstance, f),
    onremotecontrolrequestreceivedparam: (f = msg.getOnremotecontrolrequestreceivedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.toObject(includeInstance, f),
    onremotecontrolserviceinstallresultparam: (f = msg.getOnremotecontrolserviceinstallresultparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.toObject(includeInstance, f),
    onspotlightvideochangedparam: (f = msg.getOnspotlightvideochangedparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.toObject(includeInstance, f),
    onbindincominglivestreamresponseparam: (f = msg.getOnbindincominglivestreamresponseparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.toObject(includeInstance, f),
    onunbindincominglivestreamresponseparam: (f = msg.getOnunbindincominglivestreamresponseparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.toObject(includeInstance, f),
    onincominglivestreamstatusresponseparam: (f = msg.getOnincominglivestreamstatusresponseparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.toObject(includeInstance, f),
    onstartincominglivestreamresponseparam: (f = msg.getOnstartincominglivestreamresponseparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.toObject(includeInstance, f),
    onstopincominglivestreamresponseparam: (f = msg.getOnstopincominglivestreamresponseparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.toObject(includeInstance, f),
    onfailedtostartshareparam: (f = msg.getOnfailedtostartshareparam()) && proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMsgtype(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.deserializeBinaryFromReader);
      msg.setOnerrorparam(value);
      break;
    case 3:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.deserializeBinaryFromReader);
      msg.setOnuserjoinparam(value);
      break;
    case 4:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.deserializeBinaryFromReader);
      msg.setOnuserleaveparam(value);
      break;
    case 5:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnuservideostatuschangedparam(value);
      break;
    case 6:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnuseraudiostatuschangedparam(value);
      break;
    case 7:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnusersharestatuschangedparam(value);
      break;
    case 8:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnlivestreamstatuschangedparam(value);
      break;
    case 9:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.deserializeBinaryFromReader);
      msg.setOnuserhostchangedparam(value);
      break;
    case 10:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.deserializeBinaryFromReader);
      msg.setOnuseractiveaudiochangedparam(value);
      break;
    case 11:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.deserializeBinaryFromReader);
      msg.setOnchatnewmessagenotifyparam(value);
      break;
    case 12:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.deserializeBinaryFromReader);
      msg.setOnvideosourceinitializeparam(value);
      break;
    case 13:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.deserializeBinaryFromReader);
      msg.setOnpropertychangeparam(value);
      break;
    case 14:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnrawdatastatuschangedparam(value);
      break;
    case 15:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.deserializeBinaryFromReader);
      msg.setOnusermanagerchangedparam(value);
      break;
    case 16:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.deserializeBinaryFromReader);
      msg.setOnusernamechangedparam(value);
      break;
    case 17:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.deserializeBinaryFromReader);
      msg.setOncommandreceivedparam(value);
      break;
    case 18:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.deserializeBinaryFromReader);
      msg.setOncloudrecordingstatusparam(value);
      break;
    case 19:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.deserializeBinaryFromReader);
      msg.setOncameracontrolrequestresultparam(value);
      break;
    case 20:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.deserializeBinaryFromReader);
      msg.setOncameracontrolrequestreceivedparam(value);
      break;
    case 21:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.deserializeBinaryFromReader);
      msg.setOncommandchannelconnectresultparam(value);
      break;
    case 22:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.deserializeBinaryFromReader);
      msg.setOnhostaskunmuteparam(value);
      break;
    case 23:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.deserializeBinaryFromReader);
      msg.setOninvitebyphonestatusparam(value);
      break;
    case 24:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnmulticamerastreamstatuschangedparam(value);
      break;
    case 25:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.deserializeBinaryFromReader);
      msg.setOnmicspeakervolumechangedparam(value);
      break;
    case 26:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.deserializeBinaryFromReader);
      msg.setOnaudiodevicestatuschangedparam(value);
      break;
    case 27:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.deserializeBinaryFromReader);
      msg.setOntestmicstatuschangedparam(value);
      break;
    case 28:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.deserializeBinaryFromReader);
      msg.setOnselectedaudiodevicechangedparam(value);
      break;
    case 29:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.deserializeBinaryFromReader);
      msg.setOnlivetranscriptionstatusparam(value);
      break;
    case 31:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.deserializeBinaryFromReader);
      msg.setOnlivetranscriptionmsgerrorparam(value);
      break;
    case 32:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.deserializeBinaryFromReader);
      msg.setOnchatmsgdeletenotificationparam(value);
      break;
    case 33:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.deserializeBinaryFromReader);
      msg.setLivetranscriptionmsginfoparam(value);
      break;
    case 34:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.deserializeBinaryFromReader);
      msg.setOncalloutjoinsuccessparam(value);
      break;
    case 35:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.deserializeBinaryFromReader);
      msg.setOnsessionleaveparam(value);
      break;
    case 36:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.deserializeBinaryFromReader);
      msg.setOnsharecursordatareceivedparam(value);
      break;
    case 37:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.deserializeBinaryFromReader);
      msg.setOnremotecontrolstatusparam(value);
      break;
    case 38:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.deserializeBinaryFromReader);
      msg.setOnremotecontrolrequestreceivedparam(value);
      break;
    case 39:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.deserializeBinaryFromReader);
      msg.setOnremotecontrolserviceinstallresultparam(value);
      break;
    case 40:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.deserializeBinaryFromReader);
      msg.setOnspotlightvideochangedparam(value);
      break;
    case 41:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.deserializeBinaryFromReader);
      msg.setOnbindincominglivestreamresponseparam(value);
      break;
    case 42:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.deserializeBinaryFromReader);
      msg.setOnunbindincominglivestreamresponseparam(value);
      break;
    case 43:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.deserializeBinaryFromReader);
      msg.setOnincominglivestreamstatusresponseparam(value);
      break;
    case 44:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.deserializeBinaryFromReader);
      msg.setOnstartincominglivestreamresponseparam(value);
      break;
    case 45:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.deserializeBinaryFromReader);
      msg.setOnstopincominglivestreamresponseparam(value);
      break;
    case 46:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.deserializeBinaryFromReader);
      msg.setOnfailedtostartshareparam(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getOnerrorparam();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.serializeBinaryToWriter
    );
  }
  f = message.getOnuserjoinparam();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.serializeBinaryToWriter
    );
  }
  f = message.getOnuserleaveparam();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.serializeBinaryToWriter
    );
  }
  f = message.getOnuservideostatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnuseraudiostatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnusersharestatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnlivestreamstatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnuserhostchangedparam();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnuseractiveaudiochangedparam();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnchatnewmessagenotifyparam();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.serializeBinaryToWriter
    );
  }
  f = message.getOnvideosourceinitializeparam();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.serializeBinaryToWriter
    );
  }
  f = message.getOnpropertychangeparam();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.serializeBinaryToWriter
    );
  }
  f = message.getOnrawdatastatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnusermanagerchangedparam();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnusernamechangedparam();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOncommandreceivedparam();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.serializeBinaryToWriter
    );
  }
  f = message.getOncloudrecordingstatusparam();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.serializeBinaryToWriter
    );
  }
  f = message.getOncameracontrolrequestresultparam();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.serializeBinaryToWriter
    );
  }
  f = message.getOncameracontrolrequestreceivedparam();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.serializeBinaryToWriter
    );
  }
  f = message.getOncommandchannelconnectresultparam();
  if (f != null) {
    writer.writeMessage(
      21,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.serializeBinaryToWriter
    );
  }
  f = message.getOnhostaskunmuteparam();
  if (f != null) {
    writer.writeMessage(
      22,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.serializeBinaryToWriter
    );
  }
  f = message.getOninvitebyphonestatusparam();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.serializeBinaryToWriter
    );
  }
  f = message.getOnmulticamerastreamstatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      24,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnmicspeakervolumechangedparam();
  if (f != null) {
    writer.writeMessage(
      25,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnaudiodevicestatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      26,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOntestmicstatuschangedparam();
  if (f != null) {
    writer.writeMessage(
      27,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnselectedaudiodevicechangedparam();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnlivetranscriptionstatusparam();
  if (f != null) {
    writer.writeMessage(
      29,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.serializeBinaryToWriter
    );
  }
  f = message.getOnlivetranscriptionmsgerrorparam();
  if (f != null) {
    writer.writeMessage(
      31,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.serializeBinaryToWriter
    );
  }
  f = message.getOnchatmsgdeletenotificationparam();
  if (f != null) {
    writer.writeMessage(
      32,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.serializeBinaryToWriter
    );
  }
  f = message.getLivetranscriptionmsginfoparam();
  if (f != null) {
    writer.writeMessage(
      33,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.serializeBinaryToWriter
    );
  }
  f = message.getOncalloutjoinsuccessparam();
  if (f != null) {
    writer.writeMessage(
      34,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.serializeBinaryToWriter
    );
  }
  f = message.getOnsessionleaveparam();
  if (f != null) {
    writer.writeMessage(
      35,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.serializeBinaryToWriter
    );
  }
  f = message.getOnsharecursordatareceivedparam();
  if (f != null) {
    writer.writeMessage(
      36,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnremotecontrolstatusparam();
  if (f != null) {
    writer.writeMessage(
      37,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.serializeBinaryToWriter
    );
  }
  f = message.getOnremotecontrolrequestreceivedparam();
  if (f != null) {
    writer.writeMessage(
      38,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnremotecontrolserviceinstallresultparam();
  if (f != null) {
    writer.writeMessage(
      39,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.serializeBinaryToWriter
    );
  }
  f = message.getOnspotlightvideochangedparam();
  if (f != null) {
    writer.writeMessage(
      40,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.serializeBinaryToWriter
    );
  }
  f = message.getOnbindincominglivestreamresponseparam();
  if (f != null) {
    writer.writeMessage(
      41,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.serializeBinaryToWriter
    );
  }
  f = message.getOnunbindincominglivestreamresponseparam();
  if (f != null) {
    writer.writeMessage(
      42,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.serializeBinaryToWriter
    );
  }
  f = message.getOnincominglivestreamstatusresponseparam();
  if (f != null) {
    writer.writeMessage(
      43,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.serializeBinaryToWriter
    );
  }
  f = message.getOnstartincominglivestreamresponseparam();
  if (f != null) {
    writer.writeMessage(
      44,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.serializeBinaryToWriter
    );
  }
  f = message.getOnstopincominglivestreamresponseparam();
  if (f != null) {
    writer.writeMessage(
      45,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.serializeBinaryToWriter
    );
  }
  f = message.getOnfailedtostartshareparam();
  if (f != null) {
    writer.writeMessage(
      46,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorcode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    detailerrorcode: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setErrorcode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDetailerrorcode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 errorCode = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.getErrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.setErrorcode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.clearErrorcode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.hasErrorcode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 detailErrorCode = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.getDetailerrorcode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.setDetailerrorcode = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.clearDetailerrorcode = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams.prototype.hasDetailerrorcode = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUserlist: (f = msg.getZnUserlist()) && proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.UserList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader);
      msg.setZnUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUserlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserList zn_userList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.prototype.getZnUserlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.UserList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.UserList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.UserList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.prototype.setZnUserlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.prototype.clearZnUserlist = function() {
  return this.setZnUserlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams.prototype.hasZnUserlist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUserlist: (f = msg.getZnUserlist()) && proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.UserList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader);
      msg.setZnUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUserlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserList zn_userList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.prototype.getZnUserlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.UserList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.UserList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.UserList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.prototype.setZnUserlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.prototype.clearZnUserlist = function() {
  return this.setZnUserlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams.prototype.hasZnUserlist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUserlist: (f = msg.getZnUserlist()) && proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.UserList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader);
      msg.setZnUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUserlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserList zn_userList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.prototype.getZnUserlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.UserList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.UserList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.UserList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.prototype.setZnUserlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.prototype.clearZnUserlist = function() {
  return this.setZnUserlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams.prototype.hasZnUserlist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUserlist: (f = msg.getZnUserlist()) && proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.UserList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader);
      msg.setZnUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUserlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserList zn_userList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.prototype.getZnUserlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.UserList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.UserList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.UserList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.prototype.setZnUserlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.prototype.clearZnUserlist = function() {
  return this.setZnUserlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams.prototype.hasZnUserlist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    shareaction: (f = msg.getShareaction()) && proto.com.electron.zoomvideo.sdk.proto.ShareAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.ShareAction;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinaryFromReader);
      msg.setShareaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = message.getShareaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.ShareAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareAction shareAction = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.ShareAction}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.getShareaction = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.ShareAction} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.ShareAction, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.ShareAction|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.setShareaction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.clearShareaction = function() {
  return this.setShareaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams.prototype.hasShareaction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUserlist: (f = msg.getZnUserlist()) && proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.UserList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader);
      msg.setZnUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUserlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserList zn_userList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.prototype.getZnUserlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.UserList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.UserList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.UserList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.prototype.setZnUserlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.prototype.clearZnUserlist = function() {
  return this.setZnUserlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams.prototype.hasZnUserlist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    psender: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sendername: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    preceiver: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    receivername: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    messagecontent: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    timestamp: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    ischattoall: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    isselfsend: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    messageid: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPsender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSendername(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPreceiver(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setReceivername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagecontent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIschattoall(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsselfsend(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
};


/**
 * optional int64 pSender = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getPsender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setPsender = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearPsender = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasPsender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string senderName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getSendername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setSendername = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearSendername = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasSendername = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 pReceiver = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getPreceiver = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setPreceiver = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearPreceiver = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasPreceiver = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string receiverName = 4;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getReceivername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setReceivername = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearReceivername = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasReceivername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string messageContent = 5;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getMessagecontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setMessagecontent = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearMessagecontent = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasMessagecontent = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 timeStamp = 6;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool isChatToAll = 7;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getIschattoall = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setIschattoall = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearIschattoall = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasIschattoall = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool isSelfSend = 8;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getIsselfsend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setIsselfsend = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearIsselfsend = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasIsselfsend = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string messageID = 9;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 9) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    deleteby: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeleteby(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional string messageID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 deleteBy = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.getDeleteby = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.setDeleteby = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.clearDeleteby = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams.prototype.hasDeleteby = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    videocapabilitylist: (f = msg.getVideocapabilitylist()) && proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.deserializeBinaryFromReader);
      msg.setVideocapabilitylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideocapabilitylist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList.serializeBinaryToWriter
    );
  }
};


/**
 * optional SDKVideoCapabilityList VideoCapabilityList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.prototype.getVideocapabilitylist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapabilityList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.prototype.setVideocapabilitylist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.prototype.clearVideocapabilitylist = function() {
  return this.setVideocapabilitylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams.prototype.hasVideocapabilitylist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    videocapability: (f = msg.getVideocapability()) && proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.deserializeBinaryFromReader);
      msg.setVideocapability(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideocapability();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability.serializeBinaryToWriter
    );
  }
};


/**
 * optional SDKVideoCapability VideoCapability = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.prototype.getVideocapability = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.SDKVideoCapability|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.prototype.setVideocapability = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.prototype.clearVideocapability = function() {
  return this.setVideocapability(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams.prototype.hasVideocapability = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    recvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRecvHandle(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int64 recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.getRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.setRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.clearRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.hasRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    psender: (f = msg.getPsender()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    strcmd: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setPsender(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrcmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPsender();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VideoSDKUser pSender = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.getPsender = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.setPsender = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.clearPsender = function() {
  return this.setPsender(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.hasPsender = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strCmd = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.getStrcmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.setStrcmd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.clearStrcmd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams.prototype.hasStrcmd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    issuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIssuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.prototype.getIssuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.prototype.setIssuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.prototype.clearIssuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams.prototype.hasIssuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    reason: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 reason = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.getReason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.setReason = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.clearReason = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams.prototype.hasReason = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    puser: (f = msg.getPuser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    isapproved: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setPuser(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsapproved(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional VideoSDKUser pUser = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.getPuser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.setPuser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.clearPuser = function() {
  return this.setPuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.hasPuser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool isApproved = 2;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.getIsapproved = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.setIsapproved = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.clearIsapproved = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams.prototype.hasIsapproved = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    puser: (f = msg.getPuser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    requesttype: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setPuser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequesttype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional VideoSDKUser pUser = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.getPuser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.setPuser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.clearPuser = function() {
  return this.setPuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.hasPuser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 requestType = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.getRequesttype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.setRequesttype = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.clearRequesttype = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams.prototype.hasRequesttype = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    puser: (f = msg.getPuser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    shareaction: (f = msg.getShareaction()) && proto.com.electron.zoomvideo.sdk.proto.ShareAction.toObject(includeInstance, f),
    status: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setPuser(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.ShareAction;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinaryFromReader);
      msg.setShareaction(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = message.getShareaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.ShareAction.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional VideoSDKUser pUser = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.getPuser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.setPuser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.clearPuser = function() {
  return this.setPuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.hasPuser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareAction shareAction = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.ShareAction}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.getShareaction = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.ShareAction} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.ShareAction, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.ShareAction|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.setShareaction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.clearShareaction = function() {
  return this.setShareaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.hasShareaction = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 status = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    puser: (f = msg.getPuser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    shareaction: (f = msg.getShareaction()) && proto.com.electron.zoomvideo.sdk.proto.ShareAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setPuser(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.ShareAction;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.ShareAction.deserializeBinaryFromReader);
      msg.setShareaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPuser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = message.getShareaction();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.ShareAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser pUser = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.getPuser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.setPuser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.clearPuser = function() {
  return this.setPuser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.hasPuser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ShareAction shareAction = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.ShareAction}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.getShareaction = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.ShareAction} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.ShareAction, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.ShareAction|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.setShareaction = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.clearShareaction = function() {
  return this.setShareaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams.prototype.hasShareaction = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsuccess(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.prototype.getBsuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.prototype.setBsuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.prototype.clearBsuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams.prototype.hasBsuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    camerastreamid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCamerastreamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 cameraStreamID = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.getCamerastreamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.setCamerastreamid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.clearCamerastreamid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams.prototype.hasCamerastreamid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    micvolume: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    speakervolume: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMicvolume(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSpeakervolume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 MicVolume = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.getMicvolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.setMicvolume = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.clearMicvolume = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.hasMicvolume = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 SpeakerVolume = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.getSpeakervolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.setSpeakervolume = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.clearSpeakervolume = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams.prototype.hasSpeakervolume = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    status: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 type = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 status = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 status = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.prototype.setStatus = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.prototype.clearStatus = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    spokenlanguage: (f = msg.getSpokenlanguage()) && proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.toObject(includeInstance, f),
    transcriptlanguage: (f = msg.getTranscriptlanguage()) && proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.LTTLanguage;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.deserializeBinaryFromReader);
      msg.setSpokenlanguage(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.LTTLanguage;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.deserializeBinaryFromReader);
      msg.setTranscriptlanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpokenlanguage();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.serializeBinaryToWriter
    );
  }
  f = message.getTranscriptlanguage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.serializeBinaryToWriter
    );
  }
};


/**
 * optional LTTLanguage spokenLanguage = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.LTTLanguage}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.getSpokenlanguage = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.LTTLanguage, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.LTTLanguage|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.setSpokenlanguage = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.clearSpokenlanguage = function() {
  return this.setSpokenlanguage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.hasSpokenlanguage = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LTTLanguage transcriptLanguage = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.LTTLanguage}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.getTranscriptlanguage = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.LTTLanguage} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.LTTLanguage, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.LTTLanguage|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.setTranscriptlanguage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.clearTranscriptlanguage = function() {
  return this.setTranscriptlanguage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams.prototype.hasTranscriptlanguage = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    messageid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    messagecontent: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    speakername: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    speakerid: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    messagetype: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagecontent(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakername(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakerid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMessagetype(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * optional int64 timeStamp = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.setTimestamp = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.clearTimestamp = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string messageID = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string messageContent = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.getMessagecontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.setMessagecontent = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.clearMessagecontent = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.hasMessagecontent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string speakerName = 4;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.getSpeakername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.setSpeakername = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.clearSpeakername = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.hasSpeakername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string speakerID = 5;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.getSpeakerid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.setSpeakerid = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.clearSpeakerid = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.hasSpeakerid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 messageType = 6;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.getMessagetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.setMessagetype = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.clearMessagetype = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams.prototype.hasMessagetype = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    phonenumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNumber = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.setPhonenumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.clearPhonenumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams.prototype.hasPhonenumber = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    ereason: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEreason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 eReason = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.prototype.getEreason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.prototype.setEreason = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.prototype.clearEreason = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams.prototype.hasEreason = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    info: (f = msg.getInfo()) && proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.deserializeBinaryFromReader);
      msg.setInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInfo();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData.serializeBinaryToWriter
    );
  }
};


/**
 * optional ZoomVideoSDKShareCursorData info = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.prototype.getInfo = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.ZoomVideoSDKShareCursorData|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.prototype.setInfo = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.prototype.clearInfo = function() {
  return this.setInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams.prototype.hasInfo = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUserlist: (f = msg.getZnUserlist()) && proto.com.electron.zoomvideo.sdk.proto.UserList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.UserList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.UserList.deserializeBinaryFromReader);
      msg.setZnUserlist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUserlist();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.UserList.serializeBinaryToWriter
    );
  }
};


/**
 * optional UserList zn_userList = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.UserList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.prototype.getZnUserlist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.UserList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.UserList, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.UserList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.prototype.setZnUserlist = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.prototype.clearZnUserlist = function() {
  return this.setZnUserlist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams.prototype.hasZnUserlist = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    strstreamkeyid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstreamkeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool bSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.getBsuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.setBsuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.clearBsuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.hasBsuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strStreamKeyID = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.getStrstreamkeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.setStrstreamkeyid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.clearStrstreamkeyid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams.prototype.hasStrstreamkeyid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    strstreamkeyid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstreamkeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool bSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.getBsuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.setBsuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.clearBsuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.hasBsuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strStreamKeyID = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.getStrstreamkeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.setStrstreamkeyid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.clearStrstreamkeyid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams.prototype.hasStrstreamkeyid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    pstreamsstatuslist: (f = msg.getPstreamsstatuslist()) && proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsuccess(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.deserializeBinaryFromReader);
      msg.setPstreamsstatuslist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getPstreamsstatuslist();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool bSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.getBsuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.setBsuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.clearBsuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.hasBsuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional IncomingLiveStreamStatusList pStreamsStatusList = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.getPstreamsstatuslist = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamStatusList|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.setPstreamsstatuslist = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.clearPstreamsstatuslist = function() {
  return this.setPstreamsstatuslist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams.prototype.hasPstreamsstatuslist = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    strstreamkeyid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstreamkeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool bSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.getBsuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.setBsuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.clearBsuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.hasBsuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strStreamKeyID = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.getStrstreamkeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.setStrstreamkeyid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.clearStrstreamkeyid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams.prototype.hasStrstreamkeyid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    bsuccess: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f,
    strstreamkeyid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams;
  return proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBsuccess(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstreamkeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bool bSuccess = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.getBsuccess = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.setBsuccess = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.clearBsuccess = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.hasBsuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strStreamKeyID = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.getStrstreamkeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.setStrstreamkeyid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.clearStrstreamkeyid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams.prototype.hasStrstreamkeyid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 msgtype = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getMsgtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setMsgtype = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearMsgtype = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasMsgtype = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional onErrorParams onErrorParam = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnerrorparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onErrorParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnerrorparam = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnerrorparam = function() {
  return this.setOnerrorparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnerrorparam = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional onUserJoinParams onUserJoinParam = 3;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnuserjoinparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams, 3));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserJoinParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnuserjoinparam = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnuserjoinparam = function() {
  return this.setOnuserjoinparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnuserjoinparam = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional onUserLeaveParams onUserLeaveParam = 4;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnuserleaveparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams, 4));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserLeaveParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnuserleaveparam = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnuserleaveparam = function() {
  return this.setOnuserleaveparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnuserleaveparam = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional onUserVideoStatusChangedParams onUserVideoStatusChangedParam = 5;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnuservideostatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams, 5));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserVideoStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnuservideostatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnuservideostatuschangedparam = function() {
  return this.setOnuservideostatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnuservideostatuschangedparam = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional onUserAudioStatusChangedParams onUserAudioStatusChangedParam = 6;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnuseraudiostatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams, 6));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserAudioStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnuseraudiostatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnuseraudiostatuschangedparam = function() {
  return this.setOnuseraudiostatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnuseraudiostatuschangedparam = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional onUserShareStatusChangedParams onUserShareStatusChangedParam = 7;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnusersharestatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams, 7));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserShareStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnusersharestatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnusersharestatuschangedparam = function() {
  return this.setOnusersharestatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnusersharestatuschangedparam = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional onLiveStreamStatusChangedParams onLiveStreamStatusChangedParam = 8;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnlivestreamstatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams, 8));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveStreamStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnlivestreamstatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnlivestreamstatuschangedparam = function() {
  return this.setOnlivestreamstatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnlivestreamstatuschangedparam = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional onUserHostChangedParams onUserHostChangedParam = 9;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnuserhostchangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams, 9));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserHostChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnuserhostchangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnuserhostchangedparam = function() {
  return this.setOnuserhostchangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnuserhostchangedparam = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional onUserActiveAudioChangedParams onUserActiveAudioChangedParam = 10;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnuseractiveaudiochangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams, 10));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserActiveAudioChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnuseractiveaudiochangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnuseractiveaudiochangedparam = function() {
  return this.setOnuseractiveaudiochangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnuseractiveaudiochangedparam = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional onChatNewMessageNotifyParams onChatNewMessageNotifyParam = 11;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnchatnewmessagenotifyparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams, 11));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatNewMessageNotifyParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnchatnewmessagenotifyparam = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnchatnewmessagenotifyparam = function() {
  return this.setOnchatnewmessagenotifyparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnchatnewmessagenotifyparam = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional onVideoSourceInitializeParams onVideoSourceInitializeParam = 12;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnvideosourceinitializeparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams, 12));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onVideoSourceInitializeParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnvideosourceinitializeparam = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnvideosourceinitializeparam = function() {
  return this.setOnvideosourceinitializeparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnvideosourceinitializeparam = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional onPropertyChangeParams onPropertyChangeParam = 13;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnpropertychangeparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams, 13));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onPropertyChangeParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnpropertychangeparam = function(value) {
  return jspb.Message.setWrapperField(this, 13, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnpropertychangeparam = function() {
  return this.setOnpropertychangeparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnpropertychangeparam = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional onRawDataStatusChangedParams onRawDataStatusChangedParam = 14;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnrawdatastatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams, 14));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRawDataStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnrawdatastatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnrawdatastatuschangedparam = function() {
  return this.setOnrawdatastatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnrawdatastatuschangedparam = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional onUserManagerChangedParams onUserManagerChangedParam = 15;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnusermanagerchangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams, 15));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserManagerChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnusermanagerchangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 15, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnusermanagerchangedparam = function() {
  return this.setOnusermanagerchangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnusermanagerchangedparam = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional onUserNameChangedParams onUserNameChangedParam = 16;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnusernamechangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams, 16));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUserNameChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnusernamechangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 16, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnusernamechangedparam = function() {
  return this.setOnusernamechangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnusernamechangedparam = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional onCommandReceivedParams onCommandReceivedParam = 17;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOncommandreceivedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams, 17));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandReceivedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOncommandreceivedparam = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOncommandreceivedparam = function() {
  return this.setOncommandreceivedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOncommandreceivedparam = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional onCloudRecordingStatusParams onCloudRecordingStatusParam = 18;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOncloudrecordingstatusparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams, 18));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCloudRecordingStatusParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOncloudrecordingstatusparam = function(value) {
  return jspb.Message.setWrapperField(this, 18, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOncloudrecordingstatusparam = function() {
  return this.setOncloudrecordingstatusparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOncloudrecordingstatusparam = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional onCameraControlRequestResultParams onCameraControlRequestResultParam = 19;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOncameracontrolrequestresultparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams, 19));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestResultParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOncameracontrolrequestresultparam = function(value) {
  return jspb.Message.setWrapperField(this, 19, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOncameracontrolrequestresultparam = function() {
  return this.setOncameracontrolrequestresultparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOncameracontrolrequestresultparam = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional onCameraControlRequestReceivedParams onCameraControlRequestReceivedParam = 20;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOncameracontrolrequestreceivedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams, 20));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCameraControlRequestReceivedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOncameracontrolrequestreceivedparam = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOncameracontrolrequestreceivedparam = function() {
  return this.setOncameracontrolrequestreceivedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOncameracontrolrequestreceivedparam = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional onCommandChannelConnectResultParams onCommandChannelConnectResultParam = 21;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOncommandchannelconnectresultparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams, 21));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCommandChannelConnectResultParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOncommandchannelconnectresultparam = function(value) {
  return jspb.Message.setWrapperField(this, 21, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOncommandchannelconnectresultparam = function() {
  return this.setOncommandchannelconnectresultparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOncommandchannelconnectresultparam = function() {
  return jspb.Message.getField(this, 21) != null;
};


/**
 * optional onHostAskUnmuteParams onHostAskUnmuteParam = 22;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnhostaskunmuteparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams, 22));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onHostAskUnmuteParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnhostaskunmuteparam = function(value) {
  return jspb.Message.setWrapperField(this, 22, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnhostaskunmuteparam = function() {
  return this.setOnhostaskunmuteparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnhostaskunmuteparam = function() {
  return jspb.Message.getField(this, 22) != null;
};


/**
 * optional onInviteByPhoneStatusParams onInviteByPhoneStatusParam = 23;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOninvitebyphonestatusparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams, 23));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onInviteByPhoneStatusParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOninvitebyphonestatusparam = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOninvitebyphonestatusparam = function() {
  return this.setOninvitebyphonestatusparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOninvitebyphonestatusparam = function() {
  return jspb.Message.getField(this, 23) != null;
};


/**
 * optional onMultiCameraStreamStatusChangedParams onMultiCameraStreamStatusChangedParam = 24;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnmulticamerastreamstatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams, 24));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMultiCameraStreamStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnmulticamerastreamstatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 24, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnmulticamerastreamstatuschangedparam = function() {
  return this.setOnmulticamerastreamstatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnmulticamerastreamstatuschangedparam = function() {
  return jspb.Message.getField(this, 24) != null;
};


/**
 * optional onMicSpeakerVolumeChangedParams onMicSpeakerVolumeChangedParam = 25;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnmicspeakervolumechangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams, 25));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onMicSpeakerVolumeChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnmicspeakervolumechangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 25, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnmicspeakervolumechangedparam = function() {
  return this.setOnmicspeakervolumechangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnmicspeakervolumechangedparam = function() {
  return jspb.Message.getField(this, 25) != null;
};


/**
 * optional onAudioDeviceStatusChangedParams onAudioDeviceStatusChangedParam = 26;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnaudiodevicestatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams, 26));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onAudioDeviceStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnaudiodevicestatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 26, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnaudiodevicestatuschangedparam = function() {
  return this.setOnaudiodevicestatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnaudiodevicestatuschangedparam = function() {
  return jspb.Message.getField(this, 26) != null;
};


/**
 * optional onTestMicStatusChangedParams onTestMicStatusChangedParam = 27;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOntestmicstatuschangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams, 27));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onTestMicStatusChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOntestmicstatuschangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 27, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOntestmicstatuschangedparam = function() {
  return this.setOntestmicstatuschangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOntestmicstatuschangedparam = function() {
  return jspb.Message.getField(this, 27) != null;
};


/**
 * optional onSelectedAudioDeviceChangedParams onSelectedAudioDeviceChangedParam = 28;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnselectedaudiodevicechangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams, 28));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSelectedAudioDeviceChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnselectedaudiodevicechangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnselectedaudiodevicechangedparam = function() {
  return this.setOnselectedaudiodevicechangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnselectedaudiodevicechangedparam = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional onLiveTranscriptionStatusParams onLiveTranscriptionStatusParam = 29;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnlivetranscriptionstatusparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams, 29));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionStatusParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnlivetranscriptionstatusparam = function(value) {
  return jspb.Message.setWrapperField(this, 29, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnlivetranscriptionstatusparam = function() {
  return this.setOnlivetranscriptionstatusparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnlivetranscriptionstatusparam = function() {
  return jspb.Message.getField(this, 29) != null;
};


/**
 * optional onLiveTranscriptionMsgErrorParams onLiveTranscriptionMsgErrorParam = 31;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnlivetranscriptionmsgerrorparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams, 31));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onLiveTranscriptionMsgErrorParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnlivetranscriptionmsgerrorparam = function(value) {
  return jspb.Message.setWrapperField(this, 31, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnlivetranscriptionmsgerrorparam = function() {
  return this.setOnlivetranscriptionmsgerrorparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnlivetranscriptionmsgerrorparam = function() {
  return jspb.Message.getField(this, 31) != null;
};


/**
 * optional onChatMsgDeleteNotificationParams onChatMsgDeleteNotificationParam = 32;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnchatmsgdeletenotificationparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams, 32));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onChatMsgDeleteNotificationParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnchatmsgdeletenotificationparam = function(value) {
  return jspb.Message.setWrapperField(this, 32, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnchatmsgdeletenotificationparam = function() {
  return this.setOnchatmsgdeletenotificationparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnchatmsgdeletenotificationparam = function() {
  return jspb.Message.getField(this, 32) != null;
};


/**
 * optional liveTranscriptionMsgInfoParams liveTranscriptionMsgInfoParam = 33;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getLivetranscriptionmsginfoparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams, 33));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.liveTranscriptionMsgInfoParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setLivetranscriptionmsginfoparam = function(value) {
  return jspb.Message.setWrapperField(this, 33, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearLivetranscriptionmsginfoparam = function() {
  return this.setLivetranscriptionmsginfoparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasLivetranscriptionmsginfoparam = function() {
  return jspb.Message.getField(this, 33) != null;
};


/**
 * optional onCalloutJoinSuccessParams onCalloutJoinSuccessParam = 34;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOncalloutjoinsuccessparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams, 34));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onCalloutJoinSuccessParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOncalloutjoinsuccessparam = function(value) {
  return jspb.Message.setWrapperField(this, 34, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOncalloutjoinsuccessparam = function() {
  return this.setOncalloutjoinsuccessparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOncalloutjoinsuccessparam = function() {
  return jspb.Message.getField(this, 34) != null;
};


/**
 * optional onSessionLeaveParams onSessionLeaveParam = 35;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnsessionleaveparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams, 35));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSessionLeaveParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnsessionleaveparam = function(value) {
  return jspb.Message.setWrapperField(this, 35, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnsessionleaveparam = function() {
  return this.setOnsessionleaveparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnsessionleaveparam = function() {
  return jspb.Message.getField(this, 35) != null;
};


/**
 * optional onShareCursorDataReceivedParams onShareCursorDataReceivedParam = 36;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnsharecursordatareceivedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams, 36));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onShareCursorDataReceivedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnsharecursordatareceivedparam = function(value) {
  return jspb.Message.setWrapperField(this, 36, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnsharecursordatareceivedparam = function() {
  return this.setOnsharecursordatareceivedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnsharecursordatareceivedparam = function() {
  return jspb.Message.getField(this, 36) != null;
};


/**
 * optional onRemoteControlStatusParams onRemoteControlStatusParam = 37;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnremotecontrolstatusparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams, 37));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlStatusParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnremotecontrolstatusparam = function(value) {
  return jspb.Message.setWrapperField(this, 37, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnremotecontrolstatusparam = function() {
  return this.setOnremotecontrolstatusparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnremotecontrolstatusparam = function() {
  return jspb.Message.getField(this, 37) != null;
};


/**
 * optional onRemoteControlRequestReceivedParams onRemoteControlRequestReceivedParam = 38;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnremotecontrolrequestreceivedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams, 38));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlRequestReceivedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnremotecontrolrequestreceivedparam = function(value) {
  return jspb.Message.setWrapperField(this, 38, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnremotecontrolrequestreceivedparam = function() {
  return this.setOnremotecontrolrequestreceivedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnremotecontrolrequestreceivedparam = function() {
  return jspb.Message.getField(this, 38) != null;
};


/**
 * optional onRemoteControlServiceInstallResultParams onRemoteControlServiceInstallResultParam = 39;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnremotecontrolserviceinstallresultparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams, 39));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onRemoteControlServiceInstallResultParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnremotecontrolserviceinstallresultparam = function(value) {
  return jspb.Message.setWrapperField(this, 39, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnremotecontrolserviceinstallresultparam = function() {
  return this.setOnremotecontrolserviceinstallresultparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnremotecontrolserviceinstallresultparam = function() {
  return jspb.Message.getField(this, 39) != null;
};


/**
 * optional onSpotlightVideoChangedParams onSpotlightVideoChangedParam = 40;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnspotlightvideochangedparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams, 40));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onSpotlightVideoChangedParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnspotlightvideochangedparam = function(value) {
  return jspb.Message.setWrapperField(this, 40, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnspotlightvideochangedparam = function() {
  return this.setOnspotlightvideochangedparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnspotlightvideochangedparam = function() {
  return jspb.Message.getField(this, 40) != null;
};


/**
 * optional onBindIncomingLiveStreamResponseParams onBindIncomingLiveStreamResponseParam = 41;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnbindincominglivestreamresponseparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams, 41));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onBindIncomingLiveStreamResponseParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnbindincominglivestreamresponseparam = function(value) {
  return jspb.Message.setWrapperField(this, 41, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnbindincominglivestreamresponseparam = function() {
  return this.setOnbindincominglivestreamresponseparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnbindincominglivestreamresponseparam = function() {
  return jspb.Message.getField(this, 41) != null;
};


/**
 * optional onUnbindIncomingLiveStreamResponseParams onUnbindIncomingLiveStreamResponseParam = 42;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnunbindincominglivestreamresponseparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams, 42));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onUnbindIncomingLiveStreamResponseParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnunbindincominglivestreamresponseparam = function(value) {
  return jspb.Message.setWrapperField(this, 42, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnunbindincominglivestreamresponseparam = function() {
  return this.setOnunbindincominglivestreamresponseparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnunbindincominglivestreamresponseparam = function() {
  return jspb.Message.getField(this, 42) != null;
};


/**
 * optional onIncomingLiveStreamStatusResponseParams onIncomingLiveStreamStatusResponseParam = 43;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnincominglivestreamstatusresponseparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams, 43));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onIncomingLiveStreamStatusResponseParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnincominglivestreamstatusresponseparam = function(value) {
  return jspb.Message.setWrapperField(this, 43, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnincominglivestreamstatusresponseparam = function() {
  return this.setOnincominglivestreamstatusresponseparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnincominglivestreamstatusresponseparam = function() {
  return jspb.Message.getField(this, 43) != null;
};


/**
 * optional onStartIncomingLiveStreamResponseParams onStartIncomingLiveStreamResponseParam = 44;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnstartincominglivestreamresponseparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams, 44));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStartIncomingLiveStreamResponseParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnstartincominglivestreamresponseparam = function(value) {
  return jspb.Message.setWrapperField(this, 44, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnstartincominglivestreamresponseparam = function() {
  return this.setOnstartincominglivestreamresponseparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnstartincominglivestreamresponseparam = function() {
  return jspb.Message.getField(this, 44) != null;
};


/**
 * optional onStopIncomingLiveStreamResponseParams onStopIncomingLiveStreamResponseParam = 45;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnstopincominglivestreamresponseparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams, 45));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onStopIncomingLiveStreamResponseParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnstopincominglivestreamresponseparam = function(value) {
  return jspb.Message.setWrapperField(this, 45, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnstopincominglivestreamresponseparam = function() {
  return this.setOnstopincominglivestreamresponseparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnstopincominglivestreamresponseparam = function() {
  return jspb.Message.getField(this, 45) != null;
};


/**
 * optional onFailedToStartShareParams onFailedToStartShareParam = 46;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.getOnfailedtostartshareparam = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams, 46));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.CallbackBody.onFailedToStartShareParams|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.setOnfailedtostartshareparam = function(value) {
  return jspb.Message.setWrapperField(this, 46, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CallbackBody} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.clearOnfailedtostartshareparam = function() {
  return this.setOnfailedtostartshareparam(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CallbackBody.prototype.hasOnfailedtostartshareparam = function() {
  return jspb.Message.getField(this, 46) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.toObject = function(includeInstance, msg) {
  var f, obj = {
    path: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam;
  return proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string path = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.prototype.setPath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.prototype.clearPath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateVideoSDKObjParam.prototype.hasPath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    domain: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    logfileprefix: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    enablelog: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    audiorawdatamemorymode: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    znVideorawdatamemorymode: (f = jspb.Message.getField(msg, 5)) == null ? undefined : f,
    znSharerawdatamemorymode: (f = jspb.Message.getField(msg, 6)) == null ? undefined : f,
    speakertestfilepath: (f = jspb.Message.getField(msg, 7)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDomain(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setLogfileprefix(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnablelog(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAudiorawdatamemorymode(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnVideorawdatamemorymode(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnSharerawdatamemorymode(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setSpeakertestfilepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * optional string domain = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setDomain = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearDomain = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasDomain = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string logFilePrefix = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getLogfileprefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setLogfileprefix = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearLogfileprefix = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasLogfileprefix = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool enableLog = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getEnablelog = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setEnablelog = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearEnablelog = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasEnablelog = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 audioRawDataMemoryMode = 4;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getAudiorawdatamemorymode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setAudiorawdatamemorymode = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearAudiorawdatamemorymode = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasAudiorawdatamemorymode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 zn_videoRawDataMemoryMode = 5;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getZnVideorawdatamemorymode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setZnVideorawdatamemorymode = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearZnVideorawdatamemorymode = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasZnVideorawdatamemorymode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 zn_shareRawDataMemoryMode = 6;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getZnSharerawdatamemorymode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setZnSharerawdatamemorymode = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearZnSharerawdatamemorymode = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasZnSharerawdatamemorymode = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string speakerTestFilePath = 7;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.getSpeakertestfilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.setSpeakertestfilepath = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.clearSpeakertestfilepath = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKInitParams.prototype.hasSpeakertestfilepath = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionname: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    sessionpassword: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    token: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    username: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
    localvideoon: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f,
    connect: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f,
    mute: (f = jspb.Message.getBooleanField(msg, 7)) == null ? undefined : f,
    preprocessor: (f = jspb.Message.getBooleanField(msg, 8)) == null ? undefined : f,
    externalvideosource: (f = jspb.Message.getBooleanField(msg, 9)) == null ? undefined : f,
    sessionidletimeoutmins: (f = jspb.Message.getField(msg, 10)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext;
  return proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSessionpassword(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLocalvideoon(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnect(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMute(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPreprocessor(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setExternalvideosource(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSessionidletimeoutmins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeBool(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
};


/**
 * optional string sessionName = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getSessionname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setSessionname = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearSessionname = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasSessionname = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string sessionPassword = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getSessionpassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setSessionpassword = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearSessionpassword = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasSessionpassword = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string token = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setToken = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearToken = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string userName = 4;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setUsername = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearUsername = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasUsername = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool localVideoOn = 5;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getLocalvideoon = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setLocalvideoon = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearLocalvideoon = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasLocalvideoon = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool connect = 6;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getConnect = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setConnect = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearConnect = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasConnect = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool mute = 7;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getMute = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setMute = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearMute = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasMute = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool preProcessor = 8;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getPreprocessor = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setPreprocessor = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearPreprocessor = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasPreprocessor = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional bool externalVideoSource = 9;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getExternalvideosource = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setExternalvideosource = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearExternalvideosource = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasExternalvideosource = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional uint32 sessionIdleTimeoutMins = 10;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.getSessionidletimeoutmins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.setSessionidletimeoutmins = function(value) {
  return jspb.Message.setField(this, 10, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.clearSessionidletimeoutmins = function() {
  return jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VideoSDKSessionContext.prototype.hasSessionidletimeoutmins = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znBend: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams;
  return proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZnBend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool zn_bEnd = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.prototype.getZnBend = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.prototype.setZnBend = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.prototype.clearZnBend = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LeaveSessionParams.prototype.hasZnBend = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znPassword: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams;
  return proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string zn_password = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.prototype.getZnPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.prototype.setZnPassword = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.prototype.clearZnPassword = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SessionPasswordParams.prototype.hasZnPassword = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams;
  return proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MuteAudioParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams;
  return proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnMuteAudioParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znSpeaker: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZnSpeaker(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool zn_speaker = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.prototype.getZnSpeaker = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.prototype.setZnSpeaker = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.prototype.clearZnSpeaker = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpeakerParams.prototype.hasZnSpeaker = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znDeviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    znDevicename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams;
  return proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnDevicename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string zn_deviceid = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.getZnDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.setZnDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.clearZnDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.hasZnDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string zn_devicename = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.getZnDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.setZnDevicename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.clearZnDevicename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectSpeakerParams.prototype.hasZnDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znDeviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    znDevicename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SelectMicParams;
  return proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnDevicename(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string zn_deviceid = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.getZnDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.setZnDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.clearZnDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.hasZnDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string zn_devicename = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.getZnDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.setZnDevicename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectMicParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.clearZnDevicename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectMicParams.prototype.hasZnDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    znMsgcontent: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams;
  return proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnMsgcontent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string zn_msgContent = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.getZnMsgcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.setZnMsgcontent = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.clearZnMsgcontent = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToUserParams.prototype.hasZnMsgcontent = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znMsgcontent: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams;
  return proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnMsgcontent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string zn_msgContent = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.prototype.getZnMsgcontent = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.prototype.setZnMsgcontent = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.prototype.clearZnMsgcontent = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SendChatToAllParams.prototype.hasZnMsgcontent = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znStreamurl: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    znKey: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    znBroadcasturl: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnStreamurl(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnKey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnBroadcasturl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string zn_streamUrl = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.getZnStreamurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.setZnStreamurl = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.clearZnStreamurl = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.hasZnStreamurl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string zn_key = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.getZnKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.setZnKey = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.clearZnKey = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.hasZnKey = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string zn_broadcastUrl = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.getZnBroadcasturl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.setZnBroadcasturl = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.clearZnBroadcasturl = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartLiveStreamParams.prototype.hasZnBroadcasturl = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    strstreamkeyid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams;
  return proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrstreamkeyid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string strStreamKeyID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.prototype.getStrstreamkeyid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.prototype.setStrstreamkeyid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.prototype.clearStrstreamkeyid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.IncomingLiveStreamParams.prototype.hasStrstreamkeyid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    iswithdeviceaudio: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    isoptimizeforsharedvideo: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnHandle(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswithdeviceaudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsoptimizeforsharedvideo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string zn_handle = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.getZnHandle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.setZnHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.clearZnHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.hasZnHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool isWithDeviceAudio = 2;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.getIswithdeviceaudio = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.setIswithdeviceaudio = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.clearIswithdeviceaudio = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.hasIswithdeviceaudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isOptimizeForSharedVideo = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.getIsoptimizeforsharedvideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.setIsoptimizeforsharedvideo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.clearIsoptimizeforsharedvideo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareViewParams.prototype.hasIsoptimizeforsharedvideo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znMonitorid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    iswithdeviceaudio: (f = jspb.Message.getBooleanField(msg, 2)) == null ? undefined : f,
    isoptimizeforsharedvideo: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnMonitorid(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIswithdeviceaudio(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsoptimizeforsharedvideo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string zn_monitorID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.getZnMonitorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.setZnMonitorid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.clearZnMonitorid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.hasZnMonitorid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool isWithDeviceAudio = 2;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.getIswithdeviceaudio = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.setIswithdeviceaudio = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.clearIswithdeviceaudio = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.hasIswithdeviceaudio = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isOptimizeForSharedVideo = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.getIsoptimizeforsharedvideo = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.setIsoptimizeforsharedvideo = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.clearIsoptimizeforsharedvideo = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShareScreenParams.prototype.hasIsoptimizeforsharedvideo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LockShareParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znBlock: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LockShareParams;
  return proto.com.electron.zoomvideo.sdk.proto.LockShareParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setZnBlock(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LockShareParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool zn_bLock = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.prototype.getZnBlock = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.prototype.setZnBlock = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LockShareParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.prototype.clearZnBlock = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LockShareParams.prototype.hasZnBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.prototype.setEnable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.prototype.clearEnable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableShareDeviceAudioParams.prototype.hasEnable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    enable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.prototype.getEnable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.prototype.setEnable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.prototype.clearEnable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableOptimizeForSharedVideoParams.prototype.hasEnable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znCameraid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnCameraid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string zn_cameraID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.prototype.getZnCameraid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.prototype.setZnCameraid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.prototype.clearZnCameraid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartShare2ndCameraParams.prototype.hasZnCameraid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znOptions: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams;
  return proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_options = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.prototype.getZnOptions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.prototype.setZnOptions = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.prototype.clearZnOptions = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRemoteUsersParams.prototype.hasZnOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znOptions: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams;
  return proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_options = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.prototype.getZnOptions = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.prototype.setZnOptions = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.prototype.clearZnOptions = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMyInfoParams.prototype.hasZnOptions = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams;
  return proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnName(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string zn_name = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.getZnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.setZnName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.clearZnName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.hasZnName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.ChangeNameParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znName: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.MakeHostParams;
  return proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnName(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional string zn_name = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.getZnName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.setZnName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.clearZnName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.hasZnName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeHostParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeHostParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams;
  return proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MakeManagerParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams;
  return proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RevokeManagerParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveUserParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRotation: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams;
  return proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 zn_rotation = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.prototype.getZnRotation = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.prototype.setZnRotation = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.prototype.clearZnRotation = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RotateMyVideoParams.prototype.hasZnRotation = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znDeviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams;
  return proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setZnDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string zn_deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.prototype.getZnDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.prototype.setZnDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.prototype.clearZnDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SelectCameraParams.prototype.hasZnDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams;
  return proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CreateRenderParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams}
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams;
  return proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams}
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.DestroyRendererParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUser: (f = msg.getZnUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    znType: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    znRecvHandle: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    znResolution: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SubscribeParams;
  return proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setZnUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnResolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional VideoSDKUser zn_user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.getZnUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.setZnUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.clearZnUser = function() {
  return this.setZnUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.hasZnUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 zn_type = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.getZnType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.setZnType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.clearZnType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.hasZnType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 zn_recv_handle = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 zn_resolution = 4;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.getZnResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.setZnResolution = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.clearZnResolution = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeParams.prototype.hasZnResolution = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    znUser: (f = msg.getZnUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    znType: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams;
  return proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setZnUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getZnUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser zn_user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.getZnUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.setZnUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.clearZnUser = function() {
  return this.setZnUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.hasZnUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 zn_type = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.getZnType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.setZnType = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.clearZnType = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeParams.prototype.hasZnType = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znUser: (f = msg.getZnUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    camerastreamid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    znRecvHandle: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    znResolution: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams;
  return proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setZnUser(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCamerastreamid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnResolution(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getZnUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional VideoSDKUser zn_user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.getZnUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.setZnUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.clearZnUser = function() {
  return this.setZnUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.hasZnUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 cameraStreamID = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.getCamerastreamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.setCamerastreamid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.clearCamerastreamid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.hasCamerastreamid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 zn_recv_handle = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int32 zn_resolution = 4;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.getZnResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.setZnResolution = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.clearZnResolution = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SubscribeMultiCameraStreamParams.prototype.hasZnResolution = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    znUser: (f = msg.getZnUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    camerastreamid: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams;
  return proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setZnUser(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCamerastreamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getZnUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser zn_user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.getZnUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.setZnUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.clearZnUser = function() {
  return this.setZnUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.hasZnUser = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int64 cameraStreamID = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.getCamerastreamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.setCamerastreamid = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.clearCamerastreamid = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSubscribeMultiCameraStreamParams.prototype.hasCamerastreamid = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znResolution: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    znRecvHandle: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setZnResolution(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int32 zn_resolution = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.getZnResolution = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.setZnResolution = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.clearZnResolution = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.hasZnResolution = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 zn_recv_handle = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetRawDataResolutionParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams;
  return proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GetResolutionParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams;
  return proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GetRawDataTypeParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CameraInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    devicename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    isselecteddevice: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f,
    isselectedasmulticamera: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    isrunningasmulticamera: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CameraInfos;
  return proto.com.electron.zoomvideo.sdk.proto.CameraInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsselecteddevice(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsselectedasmulticamera(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsrunningasmulticamera(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CameraInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deviceName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.setDevicename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.clearDevicename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.hasDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isSelectedDevice = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.getIsselecteddevice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.setIsselecteddevice = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.clearIsselecteddevice = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.hasIsselecteddevice = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool isSelectedAsMultiCamera = 4;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.getIsselectedasmulticamera = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.setIsselectedasmulticamera = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.clearIsselectedasmulticamera = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.hasIsselectedasmulticamera = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool isRunningAsMultiCamera = 5;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.getIsrunningasmulticamera = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.setIsrunningasmulticamera = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.clearIsrunningasmulticamera = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CameraInfos.prototype.hasIsrunningasmulticamera = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetCameraList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.toObject = function(includeInstance, msg) {
  var f, obj = {
    camerainfoList: jspb.Message.toObjectList(msg.getCamerainfoList(),
    proto.com.electron.zoomvideo.sdk.proto.CameraInfos.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetCameraList;
  return proto.com.electron.zoomvideo.sdk.proto.GetCameraList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.CameraInfos;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.CameraInfos.deserializeBinaryFromReader);
      msg.addCamerainfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetCameraList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCamerainfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.CameraInfos.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CameraInfos CameraInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.CameraInfos>}
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.prototype.getCamerainfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.CameraInfos>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.CameraInfos, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.CameraInfos>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.prototype.setCamerainfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CameraInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.prototype.addCamerainfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.CameraInfos, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetCameraList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetCameraList.prototype.clearCamerainfoList = function() {
  return this.setCamerainfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    camerastreamid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos;
  return proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCamerastreamid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 cameraStreamID = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.prototype.getCamerastreamid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.prototype.setCamerastreamid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.prototype.clearCamerastreamid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.prototype.hasCamerastreamid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.toObject = function(includeInstance, msg) {
  var f, obj = {
    camerastreaminfoList: jspb.Message.toObjectList(msg.getCamerastreaminfoList(),
    proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList;
  return proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.deserializeBinaryFromReader);
      msg.addCamerastreaminfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCamerastreaminfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MultiCameraStreamInfos CameraStreamInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos>}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.prototype.getCamerastreaminfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.prototype.setCamerastreaminfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.prototype.addCamerastreaminfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamInfos, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MultiCameraStreamList.prototype.clearCamerastreaminfoList = function() {
  return this.setCamerastreaminfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList;
  return proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMultiCameraStreamList.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.MicInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    devicename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    isselecteddevice: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.MicInfos;
  return proto.com.electron.zoomvideo.sdk.proto.MicInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsselecteddevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.MicInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deviceName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.setDevicename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.clearDevicename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.hasDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isSelectedDevice = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.getIsselecteddevice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.setIsselecteddevice = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.clearIsselecteddevice = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.MicInfos.prototype.hasIsselecteddevice = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetMicList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMicList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.toObject = function(includeInstance, msg) {
  var f, obj = {
    micinfoList: jspb.Message.toObjectList(msg.getMicinfoList(),
    proto.com.electron.zoomvideo.sdk.proto.MicInfos.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMicList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetMicList;
  return proto.com.electron.zoomvideo.sdk.proto.GetMicList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMicList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMicList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.MicInfos;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.MicInfos.deserializeBinaryFromReader);
      msg.addMicinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetMicList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetMicList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMicinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.MicInfos.serializeBinaryToWriter
    );
  }
};


/**
 * repeated MicInfos MicInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.MicInfos>}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.prototype.getMicinfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.MicInfos>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.MicInfos, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.MicInfos>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMicList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.GetMicList.prototype.setMicinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.MicInfos=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.MicInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.prototype.addMicinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.MicInfos, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetMicList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetMicList.prototype.clearMicinfoList = function() {
  return this.setMicinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    devicename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    isselecteddevice: (f = jspb.Message.getBooleanField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos;
  return proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevicename(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsselecteddevice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string deviceName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.getDevicename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.setDevicename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.clearDevicename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.hasDevicename = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool isSelectedDevice = 3;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.getIsselecteddevice = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.setIsselecteddevice = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.clearIsselecteddevice = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.prototype.hasIsselecteddevice = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.toObject = function(includeInstance, msg) {
  var f, obj = {
    speakerinfoList: jspb.Message.toObjectList(msg.getSpeakerinfoList(),
    proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList;
  return proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.deserializeBinaryFromReader);
      msg.addSpeakerinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSpeakerinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SpeakerInfos SpeakerInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos>}
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.prototype.getSpeakerinfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.prototype.setSpeakerinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.prototype.addSpeakerinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.SpeakerInfos, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetSpeakerList.prototype.clearSpeakerinfoList = function() {
  return this.setSpeakerinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f),
    strcmd: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SendCommandParams;
  return proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrcmd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string strCmd = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.getStrcmd = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.setStrcmd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SendCommandParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.clearStrcmd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SendCommandParams.prototype.hasStrcmd = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.toObject = function(includeInstance, msg) {
  var f, obj = {
    countryid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    countryname: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    countrycode: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos;
  return proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountryname(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string countryID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.getCountryid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.setCountryid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.clearCountryid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.hasCountryid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string countryName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.getCountryname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.setCountryname = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.clearCountryname = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.hasCountryname = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string countryCode = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.setCountrycode = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.clearCountrycode = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.prototype.hasCountrycode = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.toObject = function(includeInstance, msg) {
  var f, obj = {
    phonesupportcountryinfoList: jspb.Message.toObjectList(msg.getPhonesupportcountryinfoList(),
    proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList;
  return proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList}
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.deserializeBinaryFromReader);
      msg.addPhonesupportcountryinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhonesupportcountryinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PhoneSupportCountryInfos PhoneSupportCountryInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos>}
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.prototype.getPhonesupportcountryinfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.prototype.setPhonesupportcountryinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos}
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.prototype.addPhonesupportcountryinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.PhoneSupportCountryInfos, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetPhoneSupportCountryList.prototype.clearPhonesupportcountryinfoList = function() {
  return this.setPhonesupportcountryinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    phonenumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams;
  return proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.setCountrycode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.clearCountrycode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.hasCountrycode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNumber = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.setPhonenumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.clearPhonenumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.hasPhonenumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InviteByPhoneParams.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    countrycode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    phonenumber: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    bpressone: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f,
    bgreeting: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams;
  return proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountrycode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhonenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBpressone(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBgreeting(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional string countryCode = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.getCountrycode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.setCountrycode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.clearCountrycode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.hasCountrycode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phoneNumber = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.getPhonenumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.setPhonenumber = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.clearPhonenumber = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.hasPhonenumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bPressOne = 4;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.getBpressone = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.setBpressone = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.clearBpressone = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.hasBpressone = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool bGreeting = 5;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.getBgreeting = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.setBgreeting = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.clearBgreeting = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.InvitePhoneUserParams.prototype.hasBgreeting = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams;
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnLeftParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams;
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnRightParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams;
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnUpParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams;
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlTurnDownParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams;
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomInParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams;
  return proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.LocalCameraCtrlZoomOutParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams;
  return proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RequestControlRemoteCameraParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams;
  return proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GiveUpControlRemoteCameraParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnLeftParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnRightParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnUpParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlTurnDownParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomInParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    range: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRange(value);
      break;
    case 2:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 range = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.getRange = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.setRange = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.clearRange = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.hasRange = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional VideoSDKUser user = 2;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 2));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoteCameraCtrlZoomOutParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    mode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    minimumFrameRate: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    maximumFrameRate: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinimumFrameRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaximumFrameRate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 mode = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.getMode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.setMode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.clearMode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.hasMode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 minimum_frame_rate = 2;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.getMinimumFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.setMinimumFrameRate = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.clearMinimumFrameRate = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.hasMinimumFrameRate = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 maximum_frame_rate = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.getMaximumFrameRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.setMaximumFrameRate = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.clearMaximumFrameRate = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVideoQualityPreferenceParams.prototype.hasMaximumFrameRate = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 level = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.prototype.setLevel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.prototype.clearLevel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSuppressBackgroundNoiseLevelParams.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    level: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLevel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 level = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.prototype.getLevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.prototype.setLevel = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.prototype.clearLevel = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetEchoCancellationLevelParams.prototype.hasLevel = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.prototype.setBenable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.prototype.clearBenable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMicOriginalInputParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.prototype.setBenable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.prototype.clearBenable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableHighFidelityMusicModeParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.prototype.setBenable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.prototype.clearBenable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableEchoCancellationParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.prototype.setBenable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.prototype.clearBenable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableStereoAudioParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartMicTestRecordingParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartSpeakerTestParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    timerinterval: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTimerinterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 timerInterval = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.prototype.getTimerinterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.prototype.setTimerinterval = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.prototype.clearTimerinterval = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTimerIntervalParams.prototype.hasTimerinterval = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableMultiStreamVideoParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams;
  return proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string deviceID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.prototype.getDeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.prototype.setDeviceid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.prototype.clearDeviceid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.DisableMultiStreamVideoParams.prototype.hasDeviceid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    cameradeviceid: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams;
  return proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCameradeviceid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string cameraDeviceID = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.getCameradeviceid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.setCameradeviceid = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.clearCameradeviceid = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StartVideoPreviewParams.prototype.hasCameradeviceid = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    znRecvHandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams;
  return proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams}
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setZnRecvHandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 zn_recv_handle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.prototype.getZnRecvHandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.prototype.setZnRecvHandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.prototype.clearZnRecvHandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.StopVideoPreviewParams.prototype.hasZnRecvHandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams;
  return proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SpotLightVideoParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams;
  return proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser.serializeBinaryToWriter
    );
  }
};


/**
 * optional VideoSDKUser user = 1;
 * @return {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.prototype.getUser = function() {
  return /** @type{?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser} */ (
    jspb.Message.getWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser, 1));
};


/**
 * @param {?proto.com.electron.zoomvideo.sdk.proto.VideoSDKUser|undefined} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.prototype.setUser = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.prototype.clearUser = function() {
  return this.setUser(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.UnSpotLightVideoParams.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 languageID = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.prototype.getLanguageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.prototype.setLanguageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.prototype.clearLanguageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetSpokenLanguageParams.prototype.hasLanguageid = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.toObject = function(includeInstance, msg) {
  var f, obj = {
    lttlanguageinfoList: jspb.Message.toObjectList(msg.getLttlanguageinfoList(),
    proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList;
  return proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.com.electron.zoomvideo.sdk.proto.LTTLanguage;
      reader.readMessage(value,proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.deserializeBinaryFromReader);
      msg.addLttlanguageinfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLttlanguageinfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.com.electron.zoomvideo.sdk.proto.LTTLanguage.serializeBinaryToWriter
    );
  }
};


/**
 * repeated LTTLanguage lttLanguageInfo = 1;
 * @return {!Array<!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage>}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.prototype.getLttlanguageinfoList = function() {
  return /** @type{!Array<!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.com.electron.zoomvideo.sdk.proto.LTTLanguage, 1));
};


/**
 * @param {!Array<!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList} returns this
*/
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.prototype.setLttlanguageinfoList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguage}
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.prototype.addLttlanguageinfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.com.electron.zoomvideo.sdk.proto.LTTLanguage, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.LTTLanguagesList.prototype.clearLttlanguageinfoList = function() {
  return this.setLttlanguageinfoList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    languageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLanguageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 languageID = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.prototype.getLanguageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.prototype.setLanguageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.prototype.clearLanguageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetTranslationLanguageParams.prototype.hasLanguageid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams;
  return proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams}
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string messageID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.CanChatMessageBeDeletedParams.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    messageid: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams}
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams;
  return proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams}
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string messageID = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.prototype.getMessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.prototype.setMessageid = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.prototype.clearMessageid = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.DeleteChatMessageParams.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    imagefilepath: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    imagename: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    vbtype: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
    canbedeleted: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VBItemInfo;
  return proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagefilepath(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagename(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setVbtype(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setCanbedeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string imageFilePath = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.getImagefilepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.setImagefilepath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.clearImagefilepath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.hasImagefilepath = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string imageName = 2;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.getImagename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.setImagename = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.clearImagename = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.hasImagename = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 vbType = 3;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.getVbtype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.setVbtype = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.clearVbtype = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.hasVbtype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool canBeDeleted = 4;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.getCanbedeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.setCanbedeleted = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemInfo} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.clearCanbedeleted = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemInfo.prototype.hasCanbedeleted = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.toObject = function(includeInstance, msg) {
  var f, obj = {
    vbitemhandleList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList;
  return proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addVbitemhandle(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVbitemhandleList();
  if (f.length > 0) {
    writer.writeRepeatedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 vbItemHandle = 1;
 * @return {!Array<number>}
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.prototype.getVbitemhandleList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.prototype.setVbitemhandleList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.prototype.addVbitemhandle = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.VBItemHandleList.prototype.clearVbitemhandleList = function() {
  return this.setVbitemhandleList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    imagepath: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams}
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams;
  return proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams}
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setImagepath(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string imagePath = 1;
 * @return {string}
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.prototype.getImagepath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.prototype.setImagepath = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.prototype.clearImagepath = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.AddVirtualBackgroundItemParams.prototype.hasImagepath = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    vbitemhandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams;
  return proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVbitemhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 vbItemHandle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.prototype.getVbitemhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.prototype.setVbitemhandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.prototype.clearVbitemhandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.RemoveVirtualBackgroundItemParams.prototype.hasVbitemhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    vbitemhandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVbitemhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 vbItemHandle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.prototype.getVbitemhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.prototype.setVbitemhandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.prototype.clearVbitemhandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetVirtualBackgroundItemParams.prototype.hasVbitemhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    vbitemhandle: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams;
  return proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams}
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVbitemhandle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 vbItemHandle = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.prototype.getVbitemhandle = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.prototype.setVbitemhandle = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.prototype.clearVbitemhandle = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.GetVirtualBackgroundItemInfoParams.prototype.hasVbitemhandle = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    capturemode: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams;
  return proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams}
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCapturemode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 captureMode = 1;
 * @return {number}
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.prototype.getCapturemode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.prototype.setCapturemode = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.prototype.clearCapturemode = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.SetScreenCaptureModeParams.prototype.hasCapturemode = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.prototype.setBenable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.prototype.clearBenable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableGreenBorderParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.prototype.toObject = function(opt_includeInstance) {
  return proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    benable: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams;
  return proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBenable(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool bEnable = 1;
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.prototype.getBenable = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.prototype.setBenable = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams} returns this
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.prototype.clearBenable = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.com.electron.zoomvideo.sdk.proto.EnableAdminRemoteControlParams.prototype.hasBenable = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.com.electron.zoomvideo.sdk.proto);
